
16_UART_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000440  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000440  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001489  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003cc  00000000  00000000  000118f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  00011cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ead9  00000000  00000000  00011e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000cb8  00000000  00000000  000208e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00053847  00000000  00000000  000215a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00074de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  00074e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000420 	.word	0x08000420

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000420 	.word	0x08000420

080001d4 <main>:
char key;
static void uart_callback(void);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR	|=GPIOAEN;
 80001d8:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <main+0x30>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a09      	ldr	r2, [pc, #36]	; (8000204 <main+0x30>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |=(1U<<10);
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <main+0x34>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a07      	ldr	r2, [pc, #28]	; (8000208 <main+0x34>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <main+0x34>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a04      	ldr	r2, [pc, #16]	; (8000208 <main+0x34>)
 80001f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fa:	6013      	str	r3, [r2, #0]
	uart2_rx_interrupt_init();
 80001fc:	f000 f824 	bl	8000248 <uart2_rx_interrupt_init>

	while(1)
 8000200:	e7fe      	b.n	8000200 <main+0x2c>
 8000202:	bf00      	nop
 8000204:	40023800 	.word	0x40023800
 8000208:	40020000 	.word	0x40020000

0800020c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021a:	2b00      	cmp	r3, #0
 800021c:	db0b      	blt.n	8000236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	f003 021f 	and.w	r2, r3, #31
 8000224:	4907      	ldr	r1, [pc, #28]	; (8000244 <__NVIC_EnableIRQ+0x38>)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	095b      	lsrs	r3, r3, #5
 800022c:	2001      	movs	r0, #1
 800022e:	fa00 f202 	lsl.w	r2, r0, r2
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	e000e100 	.word	0xe000e100

08000248 <uart2_rx_interrupt_init>:
	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
}

void uart2_rx_interrupt_init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	/*******************Configure UART GPIO pin*************************/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 800024c:	4b36      	ldr	r3, [pc, #216]	; (8000328 <uart2_rx_interrupt_init+0xe0>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a35      	ldr	r2, [pc, #212]	; (8000328 <uart2_rx_interrupt_init+0xe0>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000258:	4b34      	ldr	r3, [pc, #208]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a33      	ldr	r2, [pc, #204]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800025e:	f023 0310 	bic.w	r3, r3, #16
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000264:	4b31      	ldr	r3, [pc, #196]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a30      	ldr	r2, [pc, #192]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX (AF07) */
	GPIOA->AFR[0] |= (1U<<8);
 8000270:	4b2e      	ldr	r3, [pc, #184]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a2d      	ldr	r2, [pc, #180]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 8000276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800027c:	4b2b      	ldr	r3, [pc, #172]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a2a      	ldr	r2, [pc, #168]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 8000282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000286:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000288:	4b28      	ldr	r3, [pc, #160]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a27      	ldr	r2, [pc, #156]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800028e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000292:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a24      	ldr	r2, [pc, #144]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 800029a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800029e:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<7);
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1e      	ldr	r2, [pc, #120]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6013      	str	r3, [r2, #0]
	/*Set PA3 alternate function type to UART_TX (AF07) */
	GPIOA->AFR[0] |= (1U<<12);
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	4a18      	ldr	r2, [pc, #96]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a15      	ldr	r2, [pc, #84]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<15);
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <uart2_rx_interrupt_init+0xe4>)
 80002e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002e6:	6213      	str	r3, [r2, #32]
	/****************************Configure UART module***********************************/
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= UART2EN;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <uart2_rx_interrupt_init+0xe0>)
 80002ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <uart2_rx_interrupt_init+0xe0>)
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f2:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure Baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <uart2_rx_interrupt_init+0xe8>)
 80002fa:	480e      	ldr	r0, [pc, #56]	; (8000334 <uart2_rx_interrupt_init+0xec>)
 80002fc:	f000 f81c 	bl	8000338 <uart_set_baudrate>
	/*Configure the transfer/receiver direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <uart2_rx_interrupt_init+0xec>)
 8000302:	220c      	movs	r2, #12
 8000304:	60da      	str	r2, [r3, #12]

	/*Enable RXNE interrupt*/
	USART2->CR1 |= CR_RXNETE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <uart2_rx_interrupt_init+0xec>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <uart2_rx_interrupt_init+0xec>)
 800030c:	f043 0320 	orr.w	r3, r3, #32
 8000310:	60d3      	str	r3, [r2, #12]

	/*Enable RXNE interrupt*/
	NVIC_EnableIRQ(USART2_IRQn);
 8000312:	2026      	movs	r0, #38	; 0x26
 8000314:	f7ff ff7a 	bl	800020c <__NVIC_EnableIRQ>
	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <uart2_rx_interrupt_init+0xec>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <uart2_rx_interrupt_init+0xec>)
 800031e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000322:	60d3      	str	r3, [r2, #12]
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40023800 	.word	0x40023800
 800032c:	40020000 	.word	0x40020000
 8000330:	00f42400 	.word	0x00f42400
 8000334:	40004400 	.word	0x40004400

08000338 <uart_set_baudrate>:
	/*Write to transmit data register*/

	USART2->DR= (ch & 0xFF);
}
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	68b8      	ldr	r0, [r7, #8]
 8000348:	f000 f808 	bl	800035c <compute_uart_bd>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	609a      	str	r2, [r3, #8]
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
	return((PeriphClk + (BaudRate/2U))/BaudRate);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	085a      	lsrs	r2, r3, #1
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	441a      	add	r2, r3
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	fbb2 f3f3 	udiv	r3, r2, r3
 8000374:	b29b      	uxth	r3, r3
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490e      	ldr	r1, [pc, #56]	; (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0b      	ldr	r4, [pc, #44]	; (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ae:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff0d 	bl	80001d4 <main>

080003ba <LoopForever>:

LoopForever:
    b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4e0d      	ldr	r6, [pc, #52]	; (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003de:	1ba4      	subs	r4, r4, r6
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2500      	movs	r5, #0
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4e0b      	ldr	r6, [pc, #44]	; (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	; (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1ba4      	subs	r4, r4, r6
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2500      	movs	r5, #0
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000400:	4798      	blx	r3
 8000402:	3501      	adds	r5, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800040a:	4798      	blx	r3
 800040c:	3501      	adds	r5, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
