
002LEDproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005840  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b00  08005b00  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b08  08005b08  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b08  08005b08  00006b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b0c  08005b0c  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005b10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014484  20000014  08005b24  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014498  08005b24  00007498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013469  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fae  00000000  00000000  0001a4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0001d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea1  00000000  00000000  0001e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aaf  00000000  00000000  0001f631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014672  00000000  00000000  000380e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098886  00000000  00000000  0004c752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005028  00000000  00000000  000e501c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000ea044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059c8 	.word	0x080059c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080059c8 	.word	0x080059c8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ec4 	.word	0x20012ec4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fa4b 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f82d 	bl	80005cc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  DWT ->CTRL |= (1<<0);
 8000572:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <main+0x5c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <main+0x5c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057e:	f003 fc8d 	bl	8003e9c <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();
  status = xTaskCreate(led_green_handle, "Task-1",200,NULL,2,&task1_handler);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2302      	movs	r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	22c8      	movs	r2, #200	@ 0xc8
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <main+0x60>)
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <main+0x64>)
 8000592:	f001 fdb7 	bl	8002104 <xTaskCreate>
 8000596:	60f8      	str	r0, [r7, #12]
  configASSERT(status ==  pdPASS);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	f3bf 8f6f 	isb	sy
 80005aa:	f3bf 8f4f 	dsb	sy
 80005ae:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x4e>


  /* USER CODE END 2 */
  //Start FreeRTOS scheduler
  vTaskStartScheduler();
 80005b6:	f001 ff21 	bl	80023fc <vTaskStartScheduler>

  //if the control comes here, then the launch of the scheduler has failed due to insufficient memory in heep
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x56>
 80005be:	bf00      	nop
 80005c0:	e0001000 	.word	0xe0001000
 80005c4:	080059e0 	.word	0x080059e0
 80005c8:	0800068d 	.word	0x0800068d

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 f9ba 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <SystemClock_Config+0xb8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a22      	ldr	r2, [pc, #136]	@ (8000684 <SystemClock_Config+0xb8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <SystemClock_Config+0xb8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000618:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <SystemClock_Config+0xbc>)
 800061a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <SystemClock_Config+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fb27 	bl	8000c94 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800064c:	f000 f8ea 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fd80 	bl	8001170 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000676:	f000 f8d5 	bl	8000824 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	@ 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <led_green_handle>:

/* USER CODE BEGIN 4 */
static void led_green_handle()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	int LED;
	LED = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
	RCC ->AHB1ENR |= (1 << 0);
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <led_green_handle+0x5c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <led_green_handle+0x5c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA ->MODER |= (1 << 10);
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <led_green_handle+0x60>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <led_green_handle+0x60>)
 80006a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ac:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER &= ~(1 << 11);
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <led_green_handle+0x60>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <led_green_handle+0x60>)
 80006b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80006b8:	6013      	str	r3, [r2, #0]
	UART_configuration();
 80006ba:	f000 f81b 	bl	80006f4 <UART_configuration>
	while(1)
	{

		//LED ^= 1;
		GPIOA->ODR = (LED<<5);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	015a      	lsls	r2, r3, #5
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <led_green_handle+0x60>)
 80006c4:	615a      	str	r2, [r3, #20]
		uart_write(LED);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f882 	bl	80007d0 <uart_write>
		HAL_Delay(1000);
 80006cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d0:	f000 f9da 	bl	8000a88 <HAL_Delay>
		taskYIELD();
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <led_green_handle+0x64>)
 80006d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	f3bf 8f6f 	isb	sy
		GPIOA->ODR = (LED<<5);
 80006e4:	bf00      	nop
 80006e6:	e7ea      	b.n	80006be <led_green_handle+0x32>
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	e000ed04 	.word	0xe000ed04

080006f4 <UART_configuration>:


}

static void UART_configuration()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |=(1<<17);
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <UART_configuration+0x80>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <UART_configuration+0x80>)
 80006fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
	GPIOA->MODER &= ~(1<<2);
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <UART_configuration+0x84>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <UART_configuration+0x84>)
 800070a:	f023 0304 	bic.w	r3, r3, #4
 800070e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<3);
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <UART_configuration+0x84>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <UART_configuration+0x84>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (1<<8);
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <UART_configuration+0x84>)
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <UART_configuration+0x84>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000726:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <UART_configuration+0x84>)
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <UART_configuration+0x84>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000732:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 8000734:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <UART_configuration+0x84>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <UART_configuration+0x84>)
 800073a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800073e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <UART_configuration+0x84>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <UART_configuration+0x84>)
 8000746:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800074a:	6213      	str	r3, [r2, #32]
	uart_set_baudrate(USART2,APB1_CLK, UART_BAUDRATE);
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	490a      	ldr	r1, [pc, #40]	@ (800077c <UART_configuration+0x88>)
 8000752:	480b      	ldr	r0, [pc, #44]	@ (8000780 <UART_configuration+0x8c>)
 8000754:	f000 f816 	bl	8000784 <uart_set_baudrate>
	USART2->CR1 |= (CR1_UE);
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <UART_configuration+0x8c>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <UART_configuration+0x8c>)
 800075e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000762:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (CR1_TE);
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <UART_configuration+0x8c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <UART_configuration+0x8c>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	60d3      	str	r3, [r2, #12]

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	00f42400 	.word	0x00f42400
 8000780:	40004400 	.word	0x40004400

08000784 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	68b8      	ldr	r0, [r7, #8]
 8000794:	f000 f808 	bl	80007a8 <compute_uart_bd>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	return((PeriphClk + (BaudRate/2U))/BaudRate);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	085a      	lsrs	r2, r3, #1
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	441a      	add	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c0:	b29b      	uxth	r3, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <uart_write>:
void uart_write(int led)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE))
 80007d8:	e003      	b.n	80007e2 <uart_write+0x12>
	{
		USART2->DR = led & 0xFF;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <uart_write+0x2c>)
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & SR_TXE))
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <uart_write+0x2c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f5      	beq.n	80007da <uart_write+0xa>
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40004400 	.word	0x40004400

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f919 	bl	8000a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40000c00 	.word	0x40000c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000872:	f002 ff83 	bl	800377c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2032      	movs	r0, #50	@ 0x32
 800089a:	f000 f9d1 	bl	8000c40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800089e:	2032      	movs	r0, #50	@ 0x32
 80008a0:	f000 f9ea 	bl	8000c78 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <HAL_InitTick+0xa0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000924 <HAL_InitTick+0xa0>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <HAL_InitTick+0xa0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fe1c 	bl	8001508 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d0:	f000 fe06 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
 80008d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <HAL_InitTick+0xa4>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_InitTick+0xa8>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <HAL_InitTick+0xac>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_InitTick+0xa8>)
 80008ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <HAL_InitTick+0xa8>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_InitTick+0xa8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_InitTick+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	@ (800092c <HAL_InitTick+0xa8>)
 8000906:	f000 fe31 	bl	800156c <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <HAL_InitTick+0xa8>)
 8000912:	f000 fe60 	bl	80015d6 <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	@ 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20000030 	.word	0x20000030
 8000930:	40000c00 	.word	0x40000c00

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	bf00      	nop
 8000948:	e7fd      	b.n	8000946 <HardFault_Handler+0x4>

0800094a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	bf00      	nop
 8000958:	e7fd      	b.n	8000956 <BusFault_Handler+0x4>

0800095a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095e:	bf00      	nop
 8000960:	e7fd      	b.n	800095e <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <TIM5_IRQHandler+0x10>)
 8000976:	f000 fe52 	bl	800161e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000030 	.word	0x20000030

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <SystemInit+0x28>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <SystemInit+0x28>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SystemInit+0x28>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800099e:	609a      	str	r2, [r3, #8]
#endif
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009b6:	e003      	b.n	80009c0 <LoopCopyDataInit>

080009b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009be:	3104      	adds	r1, #4

080009c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009c8:	d3f6      	bcc.n	80009b8 <CopyDataInit>
  ldr  r2, =_sbss
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009cc:	e002      	b.n	80009d4 <LoopFillZerobss>

080009ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009d0:	f842 3b04 	str.w	r3, [r2], #4

080009d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009d8:	d3f9      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009da:	f7ff ffd3 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009de:	f004 ffc1 	bl	8005964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e2:	f7ff fdbf 	bl	8000564 <main>
  bx  lr    
 80009e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80009ec:	08005b10 	.word	0x08005b10
  ldr  r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009f4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80009f8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80009fc:	20014498 	.word	0x20014498

08000a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <HAL_Init+0x40>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_Init+0x40>)
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <HAL_Init+0x40>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f8fc 	bl	8000c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ff26 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff fefc 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000070 	.word	0x20000070

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000070 	.word	0x20000070

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffde 	bl	8000a70 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	@ (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	@ (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	@ 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	@ 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff4c 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c52:	f7ff ff61 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f7ff ffb1 	bl	8000bc4 <NVIC_EncodePriority>
 8000c62:	4602      	mov	r2, r0
 8000c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff80 	bl	8000b70 <__NVIC_SetPriority>
}
 8000c70:	bf00      	nop
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff54 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e25e      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d075      	beq.n	8000d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cb2:	4b88      	ldr	r3, [pc, #544]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cbe:	4b85      	ldr	r3, [pc, #532]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d112      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cca:	4b82      	ldr	r3, [pc, #520]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d05b      	beq.n	8000d9c <HAL_RCC_OscConfig+0x108>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d157      	bne.n	8000d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e239      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cf8:	d106      	bne.n	8000d08 <HAL_RCC_OscConfig+0x74>
 8000cfa:	4b76      	ldr	r3, [pc, #472]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a75      	ldr	r2, [pc, #468]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01d      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b70      	ldr	r3, [pc, #448]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6f      	ldr	r2, [pc, #444]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a6c      	ldr	r2, [pc, #432]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d2c:	4b69      	ldr	r3, [pc, #420]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a68      	ldr	r2, [pc, #416]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b66      	ldr	r3, [pc, #408]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a65      	ldr	r2, [pc, #404]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fe90 	bl	8000a70 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fe8c 	bl	8000a70 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	@ 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e1fe      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b5b      	ldr	r3, [pc, #364]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xc0>
 8000d72:	e014      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fe7c 	bl	8000a70 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fe78 	bl	8000a70 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	@ 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1ea      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0xe8>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d063      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000daa:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db6:	4b47      	ldr	r3, [pc, #284]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d11c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc2:	4b44      	ldr	r3, [pc, #272]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4b41      	ldr	r3, [pc, #260]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1be      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4937      	ldr	r1, [pc, #220]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	e03a      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d020      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b34      	ldr	r3, [pc, #208]	@ (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fe31 	bl	8000a70 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fe2d 	bl	8000a70 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e19f      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4925      	ldr	r1, [pc, #148]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fe10 	bl	8000a70 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fe0c 	bl	8000a70 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e17e      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d036      	beq.n	8000eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d016      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_RCC_OscConfig+0x248>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fdf0 	bl	8000a70 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fdec 	bl	8000a70 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e15e      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x200>
 8000eb2:	e01b      	b.n	8000eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_RCC_OscConfig+0x248>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fdd9 	bl	8000a70 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	e00e      	b.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fdd5 	bl	8000a70 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d907      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e147      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	42470000 	.word	0x42470000
 8000edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4b88      	ldr	r3, [pc, #544]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ea      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 8097 	beq.w	8001028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b81      	ldr	r3, [pc, #516]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a7c      	ldr	r2, [pc, #496]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b77      	ldr	r3, [pc, #476]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f36:	4b74      	ldr	r3, [pc, #464]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a73      	ldr	r2, [pc, #460]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fd95 	bl	8000a70 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fd91 	bl	8000a70 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e103      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2ea>
 8000f70:	4b64      	ldr	r3, [pc, #400]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f74:	4a63      	ldr	r2, [pc, #396]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x30c>
 8000f86:	4b5f      	ldr	r3, [pc, #380]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f92:	4b5c      	ldr	r3, [pc, #368]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f96:	4a5b      	ldr	r2, [pc, #364]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000fa0:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fa4:	4a57      	ldr	r2, [pc, #348]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fac:	4b55      	ldr	r3, [pc, #340]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb0:	4a54      	ldr	r2, [pc, #336]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fd56 	bl	8000a70 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fd52 	bl	8000a70 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0c2      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fde:	4b49      	ldr	r3, [pc, #292]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ee      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fd40 	bl	8000a70 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fd3c 	bl	8000a70 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0ac      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	4b3e      	ldr	r3, [pc, #248]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101c:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a38      	ldr	r2, [pc, #224]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 8098 	beq.w	8001162 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001032:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d05c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d141      	bne.n	80010ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b31      	ldr	r3, [pc, #196]	@ (800110c <HAL_RCC_OscConfig+0x478>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fd10 	bl	8000a70 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fd0c 	bl	8000a70 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e07e      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	3b01      	subs	r3, #1
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	491b      	ldr	r1, [pc, #108]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_RCC_OscConfig+0x478>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fce5 	bl	8000a70 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fce1 	bl	8000a70 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e053      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x416>
 80010c8:	e04b      	b.n	8001162 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_RCC_OscConfig+0x478>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcce 	bl	8000a70 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fcca 	bl	8000a70 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e03c      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
 80010f6:	e034      	b.n	8001162 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e02f      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000
 800110c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_RCC_OscConfig+0x4d8>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	d11c      	bne.n	800115e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	429a      	cmp	r2, r3
 8001130:	d115      	bne.n	800115e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001138:	4013      	ands	r3, r2
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800114c:	429a      	cmp	r2, r3
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0cc      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001184:	4b68      	ldr	r3, [pc, #416]	@ (8001328 <HAL_RCC_ClockConfig+0x1b8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d90c      	bls.n	80011ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119a:	4b63      	ldr	r3, [pc, #396]	@ (8001328 <HAL_RCC_ClockConfig+0x1b8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0b8      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d020      	beq.n	80011fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c4:	4b59      	ldr	r3, [pc, #356]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a58      	ldr	r2, [pc, #352]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011dc:	4b53      	ldr	r3, [pc, #332]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a52      	ldr	r2, [pc, #328]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e8:	4b50      	ldr	r3, [pc, #320]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	494d      	ldr	r1, [pc, #308]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d044      	beq.n	8001290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d119      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e07f      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d003      	beq.n	800122e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122a:	2b03      	cmp	r3, #3
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e06f      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e067      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124e:	4b37      	ldr	r3, [pc, #220]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f023 0203 	bic.w	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4934      	ldr	r1, [pc, #208]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	4313      	orrs	r3, r2
 800125e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001260:	f7ff fc06 	bl	8000a70 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	e00a      	b.n	800127e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001268:	f7ff fc02 	bl	8000a70 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e04f      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 020c 	and.w	r2, r3, #12
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	429a      	cmp	r2, r3
 800128e:	d1eb      	bne.n	8001268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001290:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <HAL_RCC_ClockConfig+0x1b8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d20c      	bcs.n	80012b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e032      	b.n	800131e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4916      	ldr	r1, [pc, #88]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	490e      	ldr	r1, [pc, #56]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012f6:	f000 f821 	bl	800133c <HAL_RCC_GetSysClockFreq>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	490a      	ldr	r1, [pc, #40]	@ (8001330 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	5ccb      	ldrb	r3, [r1, r3]
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_RCC_ClockConfig+0x1c8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fab4 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00
 800132c:	40023800 	.word	0x40023800
 8001330:	08005ac0 	.word	0x08005ac0
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800133c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001340:	b090      	sub	sp, #64	@ 0x40
 8001342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001354:	4b59      	ldr	r3, [pc, #356]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d00d      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x40>
 8001360:	2b08      	cmp	r3, #8
 8001362:	f200 80a1 	bhi.w	80014a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_RCC_GetSysClockFreq+0x34>
 800136a:	2b04      	cmp	r3, #4
 800136c:	d003      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x3a>
 800136e:	e09b      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001370:	4b53      	ldr	r3, [pc, #332]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001374:	e09b      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001376:	4b53      	ldr	r3, [pc, #332]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800137a:	e098      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137c:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x180>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001386:	4b4d      	ldr	r3, [pc, #308]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d028      	beq.n	80013e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001392:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	2200      	movs	r2, #0
 800139a:	623b      	str	r3, [r7, #32]
 800139c:	627a      	str	r2, [r7, #36]	@ 0x24
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013a4:	2100      	movs	r1, #0
 80013a6:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80013a8:	fb03 f201 	mul.w	r2, r3, r1
 80013ac:	2300      	movs	r3, #0
 80013ae:	fb00 f303 	mul.w	r3, r0, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	4a43      	ldr	r2, [pc, #268]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80013b6:	fba0 1202 	umull	r1, r2, r0, r2
 80013ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013bc:	460a      	mov	r2, r1
 80013be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80013c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013c2:	4413      	add	r3, r2
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c8:	2200      	movs	r2, #0
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	61fa      	str	r2, [r7, #28]
 80013ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013d6:	f7fe ff4d 	bl	8000274 <__aeabi_uldivmod>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4613      	mov	r3, r2
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013e2:	e053      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e4:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x180>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	2200      	movs	r2, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	617a      	str	r2, [r7, #20]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013f6:	f04f 0b00 	mov.w	fp, #0
 80013fa:	4652      	mov	r2, sl
 80013fc:	465b      	mov	r3, fp
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	f04f 0100 	mov.w	r1, #0
 8001406:	0159      	lsls	r1, r3, #5
 8001408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800140c:	0150      	lsls	r0, r2, #5
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	ebb2 080a 	subs.w	r8, r2, sl
 8001416:	eb63 090b 	sbc.w	r9, r3, fp
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800142a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800142e:	ebb2 0408 	subs.w	r4, r2, r8
 8001432:	eb63 0509 	sbc.w	r5, r3, r9
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	00eb      	lsls	r3, r5, #3
 8001440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001444:	00e2      	lsls	r2, r4, #3
 8001446:	4614      	mov	r4, r2
 8001448:	461d      	mov	r5, r3
 800144a:	eb14 030a 	adds.w	r3, r4, sl
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	eb45 030b 	adc.w	r3, r5, fp
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001462:	4629      	mov	r1, r5
 8001464:	028b      	lsls	r3, r1, #10
 8001466:	4621      	mov	r1, r4
 8001468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800146c:	4621      	mov	r1, r4
 800146e:	028a      	lsls	r2, r1, #10
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001476:	2200      	movs	r2, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	60fa      	str	r2, [r7, #12]
 800147c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001480:	f7fe fef8 	bl	8000274 <__aeabi_uldivmod>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4613      	mov	r3, r2
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x180>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	3301      	adds	r3, #1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800149c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800149e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014a6:	e002      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3740      	adds	r7, #64	@ 0x40
 80014b4:	46bd      	mov	sp, r7
 80014b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	017d7840 	.word	0x017d7840

080014c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_RCC_GetHCLKFreq+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000000 	.word	0x20000000

080014e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014e4:	f7ff fff0 	bl	80014c8 <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	0a9b      	lsrs	r3, r3, #10
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4903      	ldr	r1, [pc, #12]	@ (8001504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	08005ad0 	.word	0x08005ad0

08001508 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	220f      	movs	r2, #15
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_RCC_GetClockConfig+0x5c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <HAL_RCC_GetClockConfig+0x5c>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <HAL_RCC_GetClockConfig+0x5c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_RCC_GetClockConfig+0x5c>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <HAL_RCC_GetClockConfig+0x60>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 020f 	and.w	r2, r3, #15
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e01d      	b.n	80015ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f815 	bl	80015c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3304      	adds	r3, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4610      	mov	r0, r2
 80015ac:	f000 f968 	bl	8001880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b06      	cmp	r3, #6
 80015fe:	d007      	beq.n	8001610 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b02      	cmp	r3, #2
 8001632:	d122      	bne.n	800167a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d11b      	bne.n	800167a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f06f 0202 	mvn.w	r2, #2
 800164a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f8ee 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 8001666:	e005      	b.n	8001674 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f8e0 	bl	800182e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f8f1 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b04      	cmp	r3, #4
 8001686:	d122      	bne.n	80016ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b04      	cmp	r3, #4
 8001694:	d11b      	bne.n	80016ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0204 	mvn.w	r2, #4
 800169e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8c4 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 80016ba:	e005      	b.n	80016c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f8b6 	bl	800182e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8c7 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d122      	bne.n	8001722 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11b      	bne.n	8001722 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 0208 	mvn.w	r2, #8
 80016f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2204      	movs	r2, #4
 80016f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f89a 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 800170e:	e005      	b.n	800171c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f88c 	bl	800182e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f89d 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b10      	cmp	r3, #16
 800172e:	d122      	bne.n	8001776 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b10      	cmp	r3, #16
 800173c:	d11b      	bne.n	8001776 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f06f 0210 	mvn.w	r2, #16
 8001746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2208      	movs	r2, #8
 800174c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f870 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 8001762:	e005      	b.n	8001770 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f862 	bl	800182e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f873 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10e      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f06f 0201 	mvn.w	r2, #1
 800179a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff f82f 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ac:	2b80      	cmp	r3, #128	@ 0x80
 80017ae:	d10e      	bne.n	80017ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ba:	2b80      	cmp	r3, #128	@ 0x80
 80017bc:	d107      	bne.n	80017ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f8e3 	bl	8001994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d8:	2b40      	cmp	r3, #64	@ 0x40
 80017da:	d10e      	bne.n	80017fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e6:	2b40      	cmp	r3, #64	@ 0x40
 80017e8:	d107      	bne.n	80017fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f838 	bl	800186a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b20      	cmp	r3, #32
 8001806:	d10e      	bne.n	8001826 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b20      	cmp	r3, #32
 8001814:	d107      	bne.n	8001826 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f06f 0220 	mvn.w	r2, #32
 800181e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f8ad 	bl	8001980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a34      	ldr	r2, [pc, #208]	@ (8001964 <TIM_Base_SetConfig+0xe4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00f      	beq.n	80018b8 <TIM_Base_SetConfig+0x38>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800189e:	d00b      	beq.n	80018b8 <TIM_Base_SetConfig+0x38>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a31      	ldr	r2, [pc, #196]	@ (8001968 <TIM_Base_SetConfig+0xe8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <TIM_Base_SetConfig+0x38>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a30      	ldr	r2, [pc, #192]	@ (800196c <TIM_Base_SetConfig+0xec>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d003      	beq.n	80018b8 <TIM_Base_SetConfig+0x38>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001970 <TIM_Base_SetConfig+0xf0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d108      	bne.n	80018ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a25      	ldr	r2, [pc, #148]	@ (8001964 <TIM_Base_SetConfig+0xe4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01b      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d8:	d017      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <TIM_Base_SetConfig+0xe8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a21      	ldr	r2, [pc, #132]	@ (800196c <TIM_Base_SetConfig+0xec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00f      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <TIM_Base_SetConfig+0xf0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00b      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <TIM_Base_SetConfig+0xf4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <TIM_Base_SetConfig+0xf8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d003      	beq.n	800190a <TIM_Base_SetConfig+0x8a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <TIM_Base_SetConfig+0xfc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d108      	bne.n	800191c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <TIM_Base_SetConfig+0xe4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d103      	bne.n	8001950 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	615a      	str	r2, [r3, #20]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40010000 	.word	0x40010000
 8001968:	40000400 	.word	0x40000400
 800196c:	40000800 	.word	0x40000800
 8001970:	40000c00 	.word	0x40000c00
 8001974:	40014000 	.word	0x40014000
 8001978:	40014400 	.word	0x40014400
 800197c:	40014800 	.word	0x40014800

08001980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0208 	add.w	r2, r3, #8
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f103 0208 	add.w	r2, r3, #8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f103 0208 	add.w	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d103      	bne.n	8001a22 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e00c      	b.n	8001a3c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3308      	adds	r3, #8
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e002      	b.n	8001a30 <vListInsert+0x2e>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d2f6      	bcs.n	8001a2a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6892      	ldr	r2, [r2, #8]
 8001a8a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6852      	ldr	r2, [r2, #4]
 8001a94:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d103      	bne.n	8001aa8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1e5a      	subs	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10b      	bne.n	8001af8 <xQueueGenericReset+0x30>
        __asm volatile
 8001ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	60fb      	str	r3, [r7, #12]
    }
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d052      	beq.n	8001ba4 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d04e      	beq.n	8001ba4 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0e:	2100      	movs	r1, #0
 8001b10:	fba3 2302 	umull	r2, r3, r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d000      	beq.n	8001b1a <xQueueGenericReset+0x52>
 8001b18:	2101      	movs	r1, #1
 8001b1a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d141      	bne.n	8001ba4 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8001b20:	f001 feac 	bl	800387c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2c:	6939      	ldr	r1, [r7, #16]
 8001b2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	441a      	add	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b50:	3b01      	subs	r3, #1
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	441a      	add	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	22ff      	movs	r2, #255	@ 0xff
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	22ff      	movs	r2, #255	@ 0xff
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00f      	beq.n	8001b9e <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	3310      	adds	r3, #16
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 ff90 	bl	8002aa8 <xTaskRemoveFromEventList>
 8001b88:	e009      	b.n	8001b9e <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff0a 	bl	80019a8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3324      	adds	r3, #36	@ 0x24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff05 	bl	80019a8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001b9e:	f001 fe9f 	bl	80038e0 <vPortExitCritical>
 8001ba2:	e001      	b.n	8001ba8 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10b      	bne.n	8001bc6 <xQueueGenericReset+0xfe>
        __asm volatile
 8001bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	60bb      	str	r3, [r7, #8]
    }
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001bc6:	697b      	ldr	r3, [r7, #20]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d02e      	beq.n	8001c46 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001be8:	2100      	movs	r1, #0
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	fba3 2302 	umull	r2, r3, r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d000      	beq.n	8001bf8 <xQueueGenericCreate+0x28>
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d123      	bne.n	8001c46 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c06:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001c0a:	d81c      	bhi.n	8001c46 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	3350      	adds	r3, #80	@ 0x50
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 ff60 	bl	8003ae0 <pvPortMalloc>
 8001c20:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01d      	beq.n	8001c64 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3350      	adds	r3, #80	@ 0x50
 8001c30:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f815 	bl	8001c6e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001c44:	e00e      	b.n	8001c64 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <xQueueGenericCreate+0x94>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	613b      	str	r3, [r7, #16]
    }
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001c64:	69fb      	ldr	r3, [r7, #28]
    }
 8001c66:	4618      	mov	r0, r3
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e002      	b.n	8001c90 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	69b8      	ldr	r0, [r7, #24]
 8001ca0:	f7ff ff12 	bl	8001ac8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	2073      	movs	r0, #115	@ 0x73
 8001cb4:	f002 ffbe 	bl	8004c34 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b08f      	sub	sp, #60	@ 0x3c
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10b      	bne.n	8001cf2 <xQueueReceive+0x32>
        __asm volatile
 8001cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	623b      	str	r3, [r7, #32]
    }
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	e7fd      	b.n	8001cee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d103      	bne.n	8001d00 <xQueueReceive+0x40>
 8001cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <xQueueReceive+0x44>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <xQueueReceive+0x46>
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <xQueueReceive+0x62>
        __asm volatile
 8001d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	61fb      	str	r3, [r7, #28]
    }
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d22:	f001 f8d1 	bl	8002ec8 <xTaskGetSchedulerState>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <xQueueReceive+0x72>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <xQueueReceive+0x76>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <xQueueReceive+0x78>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10b      	bne.n	8001d54 <xQueueReceive+0x94>
        __asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	61bb      	str	r3, [r7, #24]
    }
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d54:	f001 fd92 	bl	800387c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d024      	beq.n	8001dae <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d68:	f000 f8b2 	bl	8001ed0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fc8e 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8001d74:	4604      	mov	r4, r0
 8001d76:	2000      	movs	r0, #0
 8001d78:	f003 fc8a 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2101      	movs	r1, #1
 8001d82:	9100      	str	r1, [sp, #0]
 8001d84:	4621      	mov	r1, r4
 8001d86:	205c      	movs	r0, #92	@ 0x5c
 8001d88:	f002 ffca 	bl	8004d20 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d92:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9e:	3310      	adds	r3, #16
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fe81 	bl	8002aa8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001da6:	f001 fd9b 	bl	80038e0 <vPortExitCritical>
                return pdPASS;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e08a      	b.n	8001ec4 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d113      	bne.n	8001ddc <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001db4:	f001 fd94 	bl	80038e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fc68 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f003 fc64 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	9100      	str	r1, [sp, #0]
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	205c      	movs	r0, #92	@ 0x5c
 8001dd4:	f002 ffa4 	bl	8004d20 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e073      	b.n	8001ec4 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 ff38 	bl	8002c5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001df0:	f001 fd76 	bl	80038e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001df4:	f000 fb64 	bl	80024c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001df8:	f001 fd40 	bl	800387c <vPortEnterCritical>
 8001dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d103      	bne.n	8001e12 <xQueueReceive+0x152>
 8001e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d103      	bne.n	8001e28 <xQueueReceive+0x168>
 8001e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e28:	f001 fd5a 	bl	80038e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e2c:	1d3a      	adds	r2, r7, #4
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 ff27 	bl	8002c88 <xTaskCheckForTimeOut>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d124      	bne.n	8001e8a <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e42:	f000 f8bd 	bl	8001fc0 <prvIsQueueEmpty>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d018      	beq.n	8001e7e <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4e:	3324      	adds	r3, #36	@ 0x24
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fdb7 	bl	80029c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e5c:	f000 f85e 	bl	8001f1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001e60:	f000 fb3c 	bl	80024dc <xTaskResumeAll>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f47f af74 	bne.w	8001d54 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <xQueueReceive+0x20c>)
 8001e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	e76a      	b.n	8001d54 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e80:	f000 f84c 	bl	8001f1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e84:	f000 fb2a 	bl	80024dc <xTaskResumeAll>
 8001e88:	e764      	b.n	8001d54 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e8c:	f000 f846 	bl	8001f1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e90:	f000 fb24 	bl	80024dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e96:	f000 f893 	bl	8001fc0 <prvIsQueueEmpty>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f43f af59 	beq.w	8001d54 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fbf3 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f003 fbef 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	9100      	str	r1, [sp, #0]
 8001eba:	4621      	mov	r1, r4
 8001ebc:	205c      	movs	r0, #92	@ 0x5c
 8001ebe:	f002 ff2f 	bl	8004d20 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001ec2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3734      	adds	r7, #52	@ 0x34
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	e000ed04 	.word	0xe000ed04

08001ed0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d018      	beq.n	8001f14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	441a      	add	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d303      	bcc.n	8001f04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6838      	ldr	r0, [r7, #0]
 8001f10:	f003 fd4c 	bl	80059ac <memcpy>
    }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001f24:	f001 fcaa 	bl	800387c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f30:	e011      	b.n	8001f56 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3324      	adds	r3, #36	@ 0x24
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fdb2 	bl	8002aa8 <xTaskRemoveFromEventList>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001f4a:	f000 ff05 	bl	8002d58 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	dce9      	bgt.n	8001f32 <prvUnlockQueue+0x16>
 8001f5e:	e000      	b.n	8001f62 <prvUnlockQueue+0x46>
                    break;
 8001f60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	22ff      	movs	r2, #255	@ 0xff
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001f6a:	f001 fcb9 	bl	80038e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001f6e:	f001 fc85 	bl	800387c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f7a:	e011      	b.n	8001fa0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d012      	beq.n	8001faa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3310      	adds	r3, #16
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fd8d 	bl	8002aa8 <xTaskRemoveFromEventList>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001f94:	f000 fee0 	bl	8002d58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001f98:	7bbb      	ldrb	r3, [r7, #14]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dce9      	bgt.n	8001f7c <prvUnlockQueue+0x60>
 8001fa8:	e000      	b.n	8001fac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001faa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	22ff      	movs	r2, #255	@ 0xff
 8001fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001fb4:	f001 fc94 	bl	80038e0 <vPortExitCritical>
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001fc8:	f001 fc58 	bl	800387c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e001      	b.n	8001fde <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001fde:	f001 fc7f 	bl	80038e0 <vPortExitCritical>

    return xReturn;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	60fb      	str	r3, [r7, #12]
    }
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d024      	beq.n	8002068 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e01e      	b.n	8002062 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <vQueueAddToRegistry+0xac>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d105      	bne.n	8002040 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <vQueueAddToRegistry+0xac>)
 800203a:	4413      	add	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
                    break;
 800203e:	e013      	b.n	8002068 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <vQueueAddToRegistry+0x70>
 8002046:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <vQueueAddToRegistry+0xac>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d104      	bne.n	800205c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4a10      	ldr	r2, [pc, #64]	@ (8002098 <vQueueAddToRegistry+0xac>)
 8002058:	4413      	add	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b07      	cmp	r3, #7
 8002066:	d9dd      	bls.n	8002024 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00f      	beq.n	800208e <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fb07 	bl	8005690 <SEGGER_SYSVIEW_ShrinkId>
 8002082:	4601      	mov	r1, r0
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	2071      	movs	r0, #113	@ 0x71
 800208a:	f002 fd79 	bl	8004b80 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000074 	.word	0x20000074

0800209c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80020ac:	f001 fbe6 	bl	800387c <vPortEnterCritical>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d103      	bne.n	80020c6 <vQueueWaitForMessageRestricted+0x2a>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d2:	d103      	bne.n	80020dc <vQueueWaitForMessageRestricted+0x40>
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020dc:	f001 fc00 	bl	80038e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3324      	adds	r3, #36	@ 0x24
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fc8f 	bl	8002a14 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff10 	bl	8001f1c <prvUnlockQueue>
    }
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	@ 0x30
 8002108:	af04      	add	r7, sp, #16
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fce1 	bl	8003ae0 <pvPortMalloc>
 800211e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d013      	beq.n	800214e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002126:	2058      	movs	r0, #88	@ 0x58
 8002128:	f001 fcda 	bl	8003ae0 <pvPortMalloc>
 800212c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002134:	2258      	movs	r2, #88	@ 0x58
 8002136:	2100      	movs	r1, #0
 8002138:	69f8      	ldr	r0, [r7, #28]
 800213a:	f003 fc0b 	bl	8005954 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
 8002144:	e005      	b.n	8002152 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f001 fd86 	bl	8003c58 <vPortFree>
 800214c:	e001      	b.n	8002152 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	2300      	movs	r3, #0
 800215c:	9303      	str	r3, [sp, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f80e 	bl	8002190 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002174:	69f8      	ldr	r0, [r7, #28]
 8002176:	f000 f89b 	bl	80022b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800217a:	2301      	movs	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e002      	b.n	8002186 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002186:	69bb      	ldr	r3, [r7, #24]
    }
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	21a5      	movs	r1, #165	@ 0xa5
 80021aa:	f003 fbd3 	bl	8005954 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021b8:	3b01      	subs	r3, #1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f023 0307 	bic.w	r3, r3, #7
 80021c6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <prvInitialiseNewTask+0x5a>
        __asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	617b      	str	r3, [r7, #20]
    }
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	e7fd      	b.n	80021e6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01e      	beq.n	800222e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	e012      	b.n	800221c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	7819      	ldrb	r1, [r3, #0]
 80021fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	4413      	add	r3, r2
 8002204:	3334      	adds	r3, #52	@ 0x34
 8002206:	460a      	mov	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b09      	cmp	r3, #9
 8002220:	d9e9      	bls.n	80021f6 <prvInitialiseNewTask+0x66>
 8002222:	e000      	b.n	8002226 <prvInitialiseNewTask+0x96>
            {
                break;
 8002224:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	2b04      	cmp	r3, #4
 8002232:	d90b      	bls.n	800224c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	613b      	str	r3, [r7, #16]
    }
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800224c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224e:	2b04      	cmp	r3, #4
 8002250:	d901      	bls.n	8002256 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002252:	2304      	movs	r3, #4
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002260:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	3304      	adds	r3, #4
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fbbe 	bl	80019e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	3318      	adds	r3, #24
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fbb9 	bl	80019e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800227a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	f1c3 0205 	rsb	r2, r3, #5
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	69b8      	ldr	r0, [r7, #24]
 8002292:	f001 f943 	bl	800351c <pxPortInitialiseStack>
 8002296:	4602      	mov	r2, r0
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022b8:	f001 fae0 	bl	800387c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022bc:	4b49      	ldr	r3, [pc, #292]	@ (80023e4 <prvAddNewTaskToReadyList+0x134>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a48      	ldr	r2, [pc, #288]	@ (80023e4 <prvAddNewTaskToReadyList+0x134>)
 80022c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022c6:	4b48      	ldr	r3, [pc, #288]	@ (80023e8 <prvAddNewTaskToReadyList+0x138>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022ce:	4a46      	ldr	r2, [pc, #280]	@ (80023e8 <prvAddNewTaskToReadyList+0x138>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022d4:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <prvAddNewTaskToReadyList+0x134>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d110      	bne.n	80022fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022dc:	f000 fd5a 	bl	8002d94 <prvInitialiseTaskLists>
 80022e0:	e00d      	b.n	80022fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022e2:	4b42      	ldr	r3, [pc, #264]	@ (80023ec <prvAddNewTaskToReadyList+0x13c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022ea:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <prvAddNewTaskToReadyList+0x138>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d802      	bhi.n	80022fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022f8:	4a3b      	ldr	r2, [pc, #236]	@ (80023e8 <prvAddNewTaskToReadyList+0x138>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022fe:	4b3c      	ldr	r3, [pc, #240]	@ (80023f0 <prvAddNewTaskToReadyList+0x140>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4a3a      	ldr	r2, [pc, #232]	@ (80023f0 <prvAddNewTaskToReadyList+0x140>)
 8002306:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <prvAddNewTaskToReadyList+0x140>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d016      	beq.n	8002344 <prvAddNewTaskToReadyList+0x94>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 f8f3 	bl	8005504 <SEGGER_SYSVIEW_OnTaskCreate>
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	461d      	mov	r5, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461c      	mov	r4, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	1ae3      	subs	r3, r4, r3
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	462b      	mov	r3, r5
 8002340:	f001 fe4e 	bl	8003fe0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 f960 	bl	800560c <SEGGER_SYSVIEW_OnTaskStartReady>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	2201      	movs	r2, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <prvAddNewTaskToReadyList+0x144>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4313      	orrs	r3, r2
 800235a:	4a26      	ldr	r2, [pc, #152]	@ (80023f4 <prvAddNewTaskToReadyList+0x144>)
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002362:	4925      	ldr	r1, [pc, #148]	@ (80023f8 <prvAddNewTaskToReadyList+0x148>)
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	3204      	adds	r2, #4
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <prvAddNewTaskToReadyList+0x148>)
 80023a2:	441a      	add	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ac:	4912      	ldr	r1, [pc, #72]	@ (80023f8 <prvAddNewTaskToReadyList+0x148>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	480e      	ldr	r0, [pc, #56]	@ (80023f8 <prvAddNewTaskToReadyList+0x148>)
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4403      	add	r3, r0
 80023c8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023ca:	f001 fa89 	bl	80038e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023ce:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <prvAddNewTaskToReadyList+0x13c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <prvAddNewTaskToReadyList+0x138>)
 80023d8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdb0      	pop	{r4, r5, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000018c 	.word	0x2000018c
 80023e8:	200000b4 	.word	0x200000b4
 80023ec:	20000198 	.word	0x20000198
 80023f0:	200001a8 	.word	0x200001a8
 80023f4:	20000194 	.word	0x20000194
 80023f8:	200000b8 	.word	0x200000b8

080023fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002402:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <vTaskStartScheduler+0xa4>)
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2300      	movs	r3, #0
 800240c:	2282      	movs	r2, #130	@ 0x82
 800240e:	4925      	ldr	r1, [pc, #148]	@ (80024a4 <vTaskStartScheduler+0xa8>)
 8002410:	4825      	ldr	r0, [pc, #148]	@ (80024a8 <vTaskStartScheduler+0xac>)
 8002412:	f7ff fe77 	bl	8002104 <xTaskCreate>
 8002416:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800241e:	f000 fdf1 	bl	8003004 <xTimerCreateTimerTask>
 8002422:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d124      	bne.n	8002474 <vTaskStartScheduler+0x78>
        __asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	60bb      	str	r3, [r7, #8]
    }
 800243c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800243e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <vTaskStartScheduler+0xb0>)
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002446:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <vTaskStartScheduler+0xb4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <vTaskStartScheduler+0xb8>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <vTaskStartScheduler+0xbc>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <vTaskStartScheduler+0xa4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d102      	bne.n	8002464 <vTaskStartScheduler+0x68>
 800245e:	f003 f835 	bl	80054cc <SEGGER_SYSVIEW_OnIdle>
 8002462:	e004      	b.n	800246e <vTaskStartScheduler+0x72>
 8002464:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <vTaskStartScheduler+0xbc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 f88d 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800246e:	f001 f8e1 	bl	8003634 <xPortStartScheduler>
 8002472:	e00f      	b.n	8002494 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d10b      	bne.n	8002494 <vTaskStartScheduler+0x98>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	607b      	str	r3, [r7, #4]
    }
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <vTaskStartScheduler+0xc0>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200001b0 	.word	0x200001b0
 80024a4:	080059e8 	.word	0x080059e8
 80024a8:	08002d71 	.word	0x08002d71
 80024ac:	200001ac 	.word	0x200001ac
 80024b0:	20000198 	.word	0x20000198
 80024b4:	20000190 	.word	0x20000190
 80024b8:	200000b4 	.word	0x200000b4
 80024bc:	2000000c 	.word	0x2000000c

080024c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <vTaskSuspendAll+0x18>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a03      	ldr	r2, [pc, #12]	@ (80024d8 <vTaskSuspendAll+0x18>)
 80024cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	200001b4 	.word	0x200001b4

080024dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024ea:	4b6d      	ldr	r3, [pc, #436]	@ (80026a0 <xTaskResumeAll+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <xTaskResumeAll+0x2e>
        __asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	607b      	str	r3, [r7, #4]
    }
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	e7fd      	b.n	8002506 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800250a:	f001 f9b7 	bl	800387c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800250e:	4b64      	ldr	r3, [pc, #400]	@ (80026a0 <xTaskResumeAll+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3b01      	subs	r3, #1
 8002514:	4a62      	ldr	r2, [pc, #392]	@ (80026a0 <xTaskResumeAll+0x1c4>)
 8002516:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002518:	4b61      	ldr	r3, [pc, #388]	@ (80026a0 <xTaskResumeAll+0x1c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 80b8 	bne.w	8002692 <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002522:	4b60      	ldr	r3, [pc, #384]	@ (80026a4 <xTaskResumeAll+0x1c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80b3 	beq.w	8002692 <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800252c:	e08e      	b.n	800264c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800252e:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <xTaskResumeAll+0x1cc>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	6a12      	ldr	r2, [r2, #32]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	69d2      	ldr	r2, [r2, #28]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	3318      	adds	r3, #24
 8002558:	429a      	cmp	r2, r3
 800255a:	d103      	bne.n	8002564 <xTaskResumeAll+0x88>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1e5a      	subs	r2, r3, #1
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	6892      	ldr	r2, [r2, #8]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	429a      	cmp	r2, r3
 8002598:	d103      	bne.n	80025a2 <xTaskResumeAll+0xc6>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 f829 	bl	800560c <SEGGER_SYSVIEW_OnTaskStartReady>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	2201      	movs	r2, #1
 80025c0:	409a      	lsls	r2, r3
 80025c2:	4b3a      	ldr	r3, [pc, #232]	@ (80026ac <xTaskResumeAll+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	4a38      	ldr	r2, [pc, #224]	@ (80026ac <xTaskResumeAll+0x1d0>)
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d0:	4937      	ldr	r1, [pc, #220]	@ (80026b0 <xTaskResumeAll+0x1d4>)
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3304      	adds	r3, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	3204      	adds	r2, #4
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	1d1a      	adds	r2, r3, #4
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4a28      	ldr	r2, [pc, #160]	@ (80026b0 <xTaskResumeAll+0x1d4>)
 8002610:	441a      	add	r2, r3
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	615a      	str	r2, [r3, #20]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261a:	4925      	ldr	r1, [pc, #148]	@ (80026b0 <xTaskResumeAll+0x1d4>)
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1c59      	adds	r1, r3, #1
 800262a:	4821      	ldr	r0, [pc, #132]	@ (80026b0 <xTaskResumeAll+0x1d4>)
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4403      	add	r3, r0
 8002636:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <xTaskResumeAll+0x1d8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002646:	4b1c      	ldr	r3, [pc, #112]	@ (80026b8 <xTaskResumeAll+0x1dc>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800264c:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <xTaskResumeAll+0x1cc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f af6c 	bne.w	800252e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800265c:	f000 fc18 	bl	8002e90 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002660:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <xTaskResumeAll+0x1e0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800266c:	f000 f84a 	bl	8002704 <xTaskIncrementTick>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <xTaskResumeAll+0x1dc>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	3b01      	subs	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f1      	bne.n	800266c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <xTaskResumeAll+0x1e0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <xTaskResumeAll+0x1dc>)
 8002690:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002692:	f001 f925 	bl	80038e0 <vPortExitCritical>

    return xAlreadyYielded;
 8002696:	697b      	ldr	r3, [r7, #20]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200001b4 	.word	0x200001b4
 80026a4:	2000018c 	.word	0x2000018c
 80026a8:	2000014c 	.word	0x2000014c
 80026ac:	20000194 	.word	0x20000194
 80026b0:	200000b8 	.word	0x200000b8
 80026b4:	200000b4 	.word	0x200000b4
 80026b8:	200001a0 	.word	0x200001a0
 80026bc:	2000019c 	.word	0x2000019c

080026c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <xTaskGetTickCount+0x1c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000190 	.word	0x20000190

080026e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026e6:	f001 f9b9 	bl	8003a5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <xTaskGetTickCountFromISR+0x20>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026f4:	683b      	ldr	r3, [r7, #0]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000190 	.word	0x20000190

08002704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800270e:	4b70      	ldr	r3, [pc, #448]	@ (80028d0 <xTaskIncrementTick+0x1cc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 80d2 	bne.w	80028bc <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002718:	4b6e      	ldr	r3, [pc, #440]	@ (80028d4 <xTaskIncrementTick+0x1d0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002720:	4a6c      	ldr	r2, [pc, #432]	@ (80028d4 <xTaskIncrementTick+0x1d0>)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d121      	bne.n	8002770 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <xTaskIncrementTick+0x1d4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	607b      	str	r3, [r7, #4]
    }
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	e7fd      	b.n	800274a <xTaskIncrementTick+0x46>
 800274e:	4b62      	ldr	r3, [pc, #392]	@ (80028d8 <xTaskIncrementTick+0x1d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	4b61      	ldr	r3, [pc, #388]	@ (80028dc <xTaskIncrementTick+0x1d8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5f      	ldr	r2, [pc, #380]	@ (80028d8 <xTaskIncrementTick+0x1d4>)
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4a5f      	ldr	r2, [pc, #380]	@ (80028dc <xTaskIncrementTick+0x1d8>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b5f      	ldr	r3, [pc, #380]	@ (80028e0 <xTaskIncrementTick+0x1dc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a5d      	ldr	r2, [pc, #372]	@ (80028e0 <xTaskIncrementTick+0x1dc>)
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	f000 fb90 	bl	8002e90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002770:	4b5c      	ldr	r3, [pc, #368]	@ (80028e4 <xTaskIncrementTick+0x1e0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	429a      	cmp	r2, r3
 8002778:	f0c0 80a5 	bcc.w	80028c6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800277c:	4b56      	ldr	r3, [pc, #344]	@ (80028d8 <xTaskIncrementTick+0x1d4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002786:	4b57      	ldr	r3, [pc, #348]	@ (80028e4 <xTaskIncrementTick+0x1e0>)
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	601a      	str	r2, [r3, #0]
                    break;
 800278e:	e09a      	b.n	80028c6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002790:	4b51      	ldr	r3, [pc, #324]	@ (80028d8 <xTaskIncrementTick+0x1d4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d203      	bcs.n	80027b0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027a8:	4a4e      	ldr	r2, [pc, #312]	@ (80028e4 <xTaskIncrementTick+0x1e0>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80027ae:	e08a      	b.n	80028c6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	6892      	ldr	r2, [r2, #8]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3304      	adds	r3, #4
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d103      	bne.n	80027de <xTaskIncrementTick+0xda>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01e      	beq.n	8002834 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	6a12      	ldr	r2, [r2, #32]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	69d2      	ldr	r2, [r2, #28]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	3318      	adds	r3, #24
 8002818:	429a      	cmp	r2, r3
 800281a:	d103      	bne.n	8002824 <xTaskIncrementTick+0x120>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fee8 	bl	800560c <SEGGER_SYSVIEW_OnTaskStartReady>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	2201      	movs	r2, #1
 8002842:	409a      	lsls	r2, r3
 8002844:	4b28      	ldr	r3, [pc, #160]	@ (80028e8 <xTaskIncrementTick+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4313      	orrs	r3, r2
 800284a:	4a27      	ldr	r2, [pc, #156]	@ (80028e8 <xTaskIncrementTick+0x1e4>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002852:	4926      	ldr	r1, [pc, #152]	@ (80028ec <xTaskIncrementTick+0x1e8>)
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3304      	adds	r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	3204      	adds	r2, #4
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	1d1a      	adds	r2, r3, #4
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <xTaskIncrementTick+0x1e8>)
 8002892:	441a      	add	r2, r3
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	4913      	ldr	r1, [pc, #76]	@ (80028ec <xTaskIncrementTick+0x1e8>)
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1c59      	adds	r1, r3, #1
 80028ac:	480f      	ldr	r0, [pc, #60]	@ (80028ec <xTaskIncrementTick+0x1e8>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4403      	add	r3, r0
 80028b8:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ba:	e75f      	b.n	800277c <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <xTaskIncrementTick+0x1ec>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a0b      	ldr	r2, [pc, #44]	@ (80028f0 <xTaskIncrementTick+0x1ec>)
 80028c4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3728      	adds	r7, #40	@ 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200001b4 	.word	0x200001b4
 80028d4:	20000190 	.word	0x20000190
 80028d8:	20000144 	.word	0x20000144
 80028dc:	20000148 	.word	0x20000148
 80028e0:	200001a4 	.word	0x200001a4
 80028e4:	200001ac 	.word	0x200001ac
 80028e8:	20000194 	.word	0x20000194
 80028ec:	200000b8 	.word	0x200000b8
 80028f0:	2000019c 	.word	0x2000019c

080028f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028fa:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <vTaskSwitchContext+0xbc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002902:	4b2c      	ldr	r3, [pc, #176]	@ (80029b4 <vTaskSwitchContext+0xc0>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002908:	e04e      	b.n	80029a8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800290a:	4b2a      	ldr	r3, [pc, #168]	@ (80029b4 <vTaskSwitchContext+0xc0>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002910:	4b29      	ldr	r3, [pc, #164]	@ (80029b8 <vTaskSwitchContext+0xc4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800291e:	7afb      	ldrb	r3, [r7, #11]
 8002920:	f1c3 031f 	rsb	r3, r3, #31
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	4925      	ldr	r1, [pc, #148]	@ (80029bc <vTaskSwitchContext+0xc8>)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <vTaskSwitchContext+0x5e>
        __asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	607b      	str	r3, [r7, #4]
    }
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	e7fd      	b.n	800294e <vTaskSwitchContext+0x5a>
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <vTaskSwitchContext+0xc8>)
 800295e:	4413      	add	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	3308      	adds	r3, #8
 8002974:	429a      	cmp	r2, r3
 8002976:	d104      	bne.n	8002982 <vTaskSwitchContext+0x8e>
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <vTaskSwitchContext+0xcc>)
 800298a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <vTaskSwitchContext+0xcc>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <vTaskSwitchContext+0xd0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d102      	bne.n	800299e <vTaskSwitchContext+0xaa>
 8002998:	f002 fd98 	bl	80054cc <SEGGER_SYSVIEW_OnIdle>
}
 800299c:	e004      	b.n	80029a8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <vTaskSwitchContext+0xcc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fdf0 	bl	8005588 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200001b4 	.word	0x200001b4
 80029b4:	200001a0 	.word	0x200001a0
 80029b8:	20000194 	.word	0x20000194
 80029bc:	200000b8 	.word	0x200000b8
 80029c0:	200000b4 	.word	0x200000b4
 80029c4:	200001b0 	.word	0x200001b0

080029c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	60fb      	str	r3, [r7, #12]
    }
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029f0:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <vTaskPlaceOnEventList+0x48>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3318      	adds	r3, #24
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff f802 	bl	8001a02 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029fe:	2101      	movs	r1, #1
 8002a00:	6838      	ldr	r0, [r7, #0]
 8002a02:	f000 fa7f 	bl	8002f04 <prvAddCurrentTaskToDelayedList>
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200000b4 	.word	0x200000b4

08002a14 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	613b      	str	r3, [r7, #16]
    }
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	e7fd      	b.n	8002a3a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	61da      	str	r2, [r3, #28]
 8002a4c:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	621a      	str	r2, [r3, #32]
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	3218      	adds	r2, #24
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f103 0218 	add.w	r2, r3, #24
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002a8c:	2024      	movs	r0, #36	@ 0x24
 8002a8e:	f002 f81d 	bl	8004acc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	68b8      	ldr	r0, [r7, #8]
 8002a96:	f000 fa35 	bl	8002f04 <prvAddCurrentTaskToDelayedList>
    }
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200000b4 	.word	0x200000b4

08002aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8002abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	60fb      	str	r3, [r7, #12]
    }
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	e7fd      	b.n	8002ad2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	6a12      	ldr	r2, [r2, #32]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	6a3a      	ldr	r2, [r7, #32]
 8002aec:	69d2      	ldr	r2, [r2, #28]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	3318      	adds	r3, #24
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d103      	bne.n	8002b04 <xTaskRemoveFromEventList+0x5c>
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b14:	4b4b      	ldr	r3, [pc, #300]	@ (8002c44 <xTaskRemoveFromEventList+0x19c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d162      	bne.n	8002be2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	6a3a      	ldr	r2, [r7, #32]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	6892      	ldr	r2, [r2, #8]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d103      	bne.n	8002b4a <xTaskRemoveFromEventList+0xa2>
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fd55 	bl	800560c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	4b37      	ldr	r3, [pc, #220]	@ (8002c48 <xTaskRemoveFromEventList+0x1a0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	4a35      	ldr	r2, [pc, #212]	@ (8002c48 <xTaskRemoveFromEventList+0x1a0>)
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b78:	4934      	ldr	r1, [pc, #208]	@ (8002c4c <xTaskRemoveFromEventList+0x1a4>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3304      	adds	r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	6a3a      	ldr	r2, [r7, #32]
 8002b9e:	3204      	adds	r2, #4
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4a25      	ldr	r2, [pc, #148]	@ (8002c4c <xTaskRemoveFromEventList+0x1a4>)
 8002bb8:	441a      	add	r2, r3
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	615a      	str	r2, [r3, #20]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc2:	4922      	ldr	r1, [pc, #136]	@ (8002c4c <xTaskRemoveFromEventList+0x1a4>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c59      	adds	r1, r3, #1
 8002bd2:	481e      	ldr	r0, [pc, #120]	@ (8002c4c <xTaskRemoveFromEventList+0x1a4>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	6019      	str	r1, [r3, #0]
 8002be0:	e01b      	b.n	8002c1a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <xTaskRemoveFromEventList+0x1a8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	61da      	str	r2, [r3, #28]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	621a      	str	r2, [r3, #32]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	6a3a      	ldr	r2, [r7, #32]
 8002bfc:	3218      	adds	r2, #24
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f103 0218 	add.w	r2, r3, #24
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	4a10      	ldr	r2, [pc, #64]	@ (8002c50 <xTaskRemoveFromEventList+0x1a8>)
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c10:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <xTaskRemoveFromEventList+0x1a8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	4a0e      	ldr	r2, [pc, #56]	@ (8002c50 <xTaskRemoveFromEventList+0x1a8>)
 8002c18:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <xTaskRemoveFromEventList+0x1ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d905      	bls.n	8002c34 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <xTaskRemoveFromEventList+0x1b0>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e001      	b.n	8002c38 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3728      	adds	r7, #40	@ 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200001b4 	.word	0x200001b4
 8002c48:	20000194 	.word	0x20000194
 8002c4c:	200000b8 	.word	0x200000b8
 8002c50:	2000014c 	.word	0x2000014c
 8002c54:	200000b4 	.word	0x200000b4
 8002c58:	200001a0 	.word	0x200001a0

08002c5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <vTaskInternalSetTimeOutState+0x24>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <vTaskInternalSetTimeOutState+0x28>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	200001a4 	.word	0x200001a4
 8002c84:	20000190 	.word	0x20000190

08002c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	613b      	str	r3, [r7, #16]
    }
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60fb      	str	r3, [r7, #12]
    }
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8002cce:	f000 fdd5 	bl	800387c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <xTaskCheckForTimeOut+0xc8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d102      	bne.n	8002cf2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e026      	b.n	8002d40 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <xTaskCheckForTimeOut+0xcc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d00a      	beq.n	8002d14 <xTaskCheckForTimeOut+0x8c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d305      	bcc.n	8002d14 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e015      	b.n	8002d40 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d20b      	bcs.n	8002d36 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad2      	subs	r2, r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ff96 	bl	8002c5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	e004      	b.n	8002d40 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002d40:	f000 fdce 	bl	80038e0 <vPortExitCritical>

    return xReturn;
 8002d44:	69fb      	ldr	r3, [r7, #28]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000190 	.word	0x20000190
 8002d54:	200001a4 	.word	0x200001a4

08002d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <vTaskMissedYield+0x14>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	200001a0 	.word	0x200001a0

08002d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d78:	f000 f84c 	bl	8002e14 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <prvIdleTask+0x20>)
 8002d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d8c:	bf00      	nop
 8002d8e:	e7f3      	b.n	8002d78 <prvIdleTask+0x8>
 8002d90:	e000ed04 	.word	0xe000ed04

08002d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	e00c      	b.n	8002dba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4a12      	ldr	r2, [pc, #72]	@ (8002df4 <prvInitialiseTaskLists+0x60>)
 8002dac:	4413      	add	r3, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fdfa 	bl	80019a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3301      	adds	r3, #1
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d9ef      	bls.n	8002da0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dc0:	480d      	ldr	r0, [pc, #52]	@ (8002df8 <prvInitialiseTaskLists+0x64>)
 8002dc2:	f7fe fdf1 	bl	80019a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002dc6:	480d      	ldr	r0, [pc, #52]	@ (8002dfc <prvInitialiseTaskLists+0x68>)
 8002dc8:	f7fe fdee 	bl	80019a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002dcc:	480c      	ldr	r0, [pc, #48]	@ (8002e00 <prvInitialiseTaskLists+0x6c>)
 8002dce:	f7fe fdeb 	bl	80019a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002dd2:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <prvInitialiseTaskLists+0x70>)
 8002dd4:	f7fe fde8 	bl	80019a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002dd8:	480b      	ldr	r0, [pc, #44]	@ (8002e08 <prvInitialiseTaskLists+0x74>)
 8002dda:	f7fe fde5 	bl	80019a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <prvInitialiseTaskLists+0x78>)
 8002de0:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <prvInitialiseTaskLists+0x64>)
 8002de2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <prvInitialiseTaskLists+0x7c>)
 8002de6:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <prvInitialiseTaskLists+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200000b8 	.word	0x200000b8
 8002df8:	2000011c 	.word	0x2000011c
 8002dfc:	20000130 	.word	0x20000130
 8002e00:	2000014c 	.word	0x2000014c
 8002e04:	20000160 	.word	0x20000160
 8002e08:	20000178 	.word	0x20000178
 8002e0c:	20000144 	.word	0x20000144
 8002e10:	20000148 	.word	0x20000148

08002e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e1a:	e019      	b.n	8002e50 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002e1c:	f000 fd2e 	bl	800387c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e20:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <prvCheckTasksWaitingTermination+0x50>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fe21 	bl	8001a74 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <prvCheckTasksWaitingTermination+0x54>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	4a0b      	ldr	r2, [pc, #44]	@ (8002e68 <prvCheckTasksWaitingTermination+0x54>)
 8002e3a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <prvCheckTasksWaitingTermination+0x58>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <prvCheckTasksWaitingTermination+0x58>)
 8002e44:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002e46:	f000 fd4b 	bl	80038e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f810 	bl	8002e70 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <prvCheckTasksWaitingTermination+0x58>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e1      	bne.n	8002e1c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000160 	.word	0x20000160
 8002e68:	2000018c 	.word	0x2000018c
 8002e6c:	20000174 	.word	0x20000174

08002e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 feeb 	bl	8003c58 <vPortFree>
            vPortFree( pxTCB );
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fee8 	bl	8003c58 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <prvResetNextTaskUnblockTime+0x30>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <prvResetNextTaskUnblockTime+0x34>)
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ea6:	e005      	b.n	8002eb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <prvResetNextTaskUnblockTime+0x30>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <prvResetNextTaskUnblockTime+0x34>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000144 	.word	0x20000144
 8002ec4:	200001ac 	.word	0x200001ac

08002ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <xTaskGetSchedulerState+0x34>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	e008      	b.n	8002eee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002edc:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <xTaskGetSchedulerState+0x38>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	e001      	b.n	8002eee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002eee:	687b      	ldr	r3, [r7, #4]
    }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20000198 	.word	0x20000198
 8002f00:	200001b4 	.word	0x200001b4

08002f04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f0e:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f14:	4b35      	ldr	r3, [pc, #212]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fdaa 	bl	8001a74 <uxListRemove>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f26:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d124      	bne.n	8002f90 <prvAddCurrentTaskToDelayedList+0x8c>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d021      	beq.n	8002f90 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	4b21      	ldr	r3, [pc, #132]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	3204      	adds	r2, #4
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1d1a      	adds	r2, r3, #4
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f80:	615a      	str	r2, [r3, #20]
 8002f82:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f8e:	e026      	b.n	8002fde <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f98:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d209      	bcs.n	8002fbc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fa8:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f7fe fd24 	bl	8001a02 <vListInsert>
}
 8002fba:	e010      	b.n	8002fde <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fe fd1a 	bl	8001a02 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d202      	bcs.n	8002fde <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002fd8:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6013      	str	r3, [r2, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000190 	.word	0x20000190
 8002fec:	200000b4 	.word	0x200000b4
 8002ff0:	20000194 	.word	0x20000194
 8002ff4:	20000178 	.word	0x20000178
 8002ff8:	20000148 	.word	0x20000148
 8002ffc:	20000144 	.word	0x20000144
 8003000:	200001ac 	.word	0x200001ac

08003004 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800300e:	f000 fa4f 	bl	80034b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003012:	4b12      	ldr	r3, [pc, #72]	@ (800305c <xTimerCreateTimerTask+0x58>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <xTimerCreateTimerTask+0x5c>)
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2302      	movs	r3, #2
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003028:	490e      	ldr	r1, [pc, #56]	@ (8003064 <xTimerCreateTimerTask+0x60>)
 800302a:	480f      	ldr	r0, [pc, #60]	@ (8003068 <xTimerCreateTimerTask+0x64>)
 800302c:	f7ff f86a 	bl	8002104 <xTaskCreate>
 8003030:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	603b      	str	r3, [r7, #0]
    }
 800304a:	bf00      	nop
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003050:	687b      	ldr	r3, [r7, #4]
    }
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200001e8 	.word	0x200001e8
 8003060:	200001ec 	.word	0x200001ec
 8003064:	080059f0 	.word	0x080059f0
 8003068:	08003111 	.word	0x08003111

0800306c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003078:	e008      	b.n	800308c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4413      	add	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	18d1      	adds	r1, r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8df 	bl	800325c <prvInsertTimerInActiveList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ea      	bne.n	800307a <prvReloadTimer+0xe>
        }
    }
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <prvProcessExpiredTimer+0x5c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fcd3 	bl	8001a74 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ffc3 	bl	800306c <prvReloadTimer>
 80030e6:	e008      	b.n	80030fa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	4798      	blx	r3
    }
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200001e0 	.word	0x200001e0

08003110 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f859 	bl	80031d4 <prvGetNextExpireTime>
 8003122:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f805 	bl	8003138 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800312e:	f000 f8d7 	bl	80032e0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003132:	bf00      	nop
 8003134:	e7f0      	b.n	8003118 <prvTimerTask+0x8>
	...

08003138 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003142:	f7ff f9bd 	bl	80024c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f866 	bl	800321c <prvSampleTimeNow>
 8003150:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d130      	bne.n	80031ba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <prvProcessTimerOrBlockTask+0x3c>
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	429a      	cmp	r2, r3
 8003164:	d806      	bhi.n	8003174 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003166:	f7ff f9b9 	bl	80024dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff9f 	bl	80030b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003172:	e024      	b.n	80031be <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800317a:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <prvProcessTimerOrBlockTask+0x90>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <prvProcessTimerOrBlockTask+0x50>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <prvProcessTimerOrBlockTask+0x52>
 8003188:	2300      	movs	r3, #0
 800318a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <prvProcessTimerOrBlockTask+0x94>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	f7fe ff7f 	bl	800209c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800319e:	f7ff f99d 	bl	80024dc <xTaskResumeAll>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <prvProcessTimerOrBlockTask+0x98>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
    }
 80031b8:	e001      	b.n	80031be <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80031ba:	f7ff f98f 	bl	80024dc <xTaskResumeAll>
    }
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200001e4 	.word	0x200001e4
 80031cc:	200001e8 	.word	0x200001e8
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <prvGetNextExpireTime+0x44>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <prvGetNextExpireTime+0x16>
 80031e6:	2201      	movs	r2, #1
 80031e8:	e000      	b.n	80031ec <prvGetNextExpireTime+0x18>
 80031ea:	2200      	movs	r2, #0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031f8:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <prvGetNextExpireTime+0x44>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e001      	b.n	8003208 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003208:	68fb      	ldr	r3, [r7, #12]
    }
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	200001e0 	.word	0x200001e0

0800321c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003224:	f7ff fa4c 	bl	80026c0 <xTaskGetTickCount>
 8003228:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <prvSampleTimeNow+0x3c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d205      	bcs.n	8003240 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003234:	f000 f916 	bl	8003464 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e002      	b.n	8003246 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003246:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <prvSampleTimeNow+0x3c>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800324c:	68fb      	ldr	r3, [r7, #12]
    }
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200001f0 	.word	0x200001f0

0800325c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d812      	bhi.n	80032a8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	429a      	cmp	r2, r3
 800328e:	d302      	bcc.n	8003296 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e01b      	b.n	80032ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <prvInsertTimerInActiveList+0x7c>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3304      	adds	r3, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fe fbae 	bl	8001a02 <vListInsert>
 80032a6:	e012      	b.n	80032ce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d206      	bcs.n	80032be <prvInsertTimerInActiveList+0x62>
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e007      	b.n	80032ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032be:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <prvInsertTimerInActiveList+0x80>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7fe fb9a 	bl	8001a02 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032ce:	697b      	ldr	r3, [r7, #20]
    }
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200001e4 	.word	0x200001e4
 80032dc:	200001e0 	.word	0x200001e0

080032e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032e6:	e0a9      	b.n	800343c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f2c0 80a6 	blt.w	800343c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3304      	adds	r3, #4
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fbb7 	bl	8001a74 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff87 	bl	800321c <prvSampleTimeNow>
 800330e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3b01      	subs	r3, #1
 8003314:	2b08      	cmp	r3, #8
 8003316:	f200 808e 	bhi.w	8003436 <prvProcessReceivedCommands+0x156>
 800331a:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <prvProcessReceivedCommands+0x40>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003345 	.word	0x08003345
 8003324:	08003345 	.word	0x08003345
 8003328:	080033ad 	.word	0x080033ad
 800332c:	080033c1 	.word	0x080033c1
 8003330:	0800340d 	.word	0x0800340d
 8003334:	08003345 	.word	0x08003345
 8003338:	08003345 	.word	0x08003345
 800333c:	080033ad 	.word	0x080033ad
 8003340:	080033c1 	.word	0x080033c1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	b2da      	uxtb	r2, r3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	18d1      	adds	r1, r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	69f8      	ldr	r0, [r7, #28]
 8003364:	f7ff ff7a 	bl	800325c <prvInsertTimerInActiveList>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d065      	beq.n	800343a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	4413      	add	r3, r2
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4619      	mov	r1, r3
 8003388:	69f8      	ldr	r0, [r7, #28]
 800338a:	f7ff fe6f 	bl	800306c <prvReloadTimer>
 800338e:	e008      	b.n	80033a2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	b2da      	uxtb	r2, r3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	69f8      	ldr	r0, [r7, #28]
 80033a8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80033aa:	e046      	b.n	800343a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80033be:	e03d      	b.n	800343c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	617b      	str	r3, [r7, #20]
    }
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	18d1      	adds	r1, r2, r3
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	69f8      	ldr	r0, [r7, #28]
 8003406:	f7ff ff29 	bl	800325c <prvInsertTimerInActiveList>
                        break;
 800340a:	e017      	b.n	800343c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800341a:	69f8      	ldr	r0, [r7, #28]
 800341c:	f000 fc1c 	bl	8003c58 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003420:	e00c      	b.n	800343c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003434:	e002      	b.n	800343c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <prvProcessReceivedCommands+0x15c>
                        break;
 800343a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800343c:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <prvProcessReceivedCommands+0x180>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f107 0108 	add.w	r1, r7, #8
 8003444:	2200      	movs	r2, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fc3a 	bl	8001cc0 <xQueueReceive>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f af4a 	bne.w	80032e8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200001e8 	.word	0x200001e8

08003464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800346a:	e009      	b.n	8003480 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800346c:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <prvSwitchTimerLists+0x44>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003476:	f04f 31ff 	mov.w	r1, #4294967295
 800347a:	6838      	ldr	r0, [r7, #0]
 800347c:	f7ff fe18 	bl	80030b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003480:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <prvSwitchTimerLists+0x44>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800348a:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <prvSwitchTimerLists+0x44>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <prvSwitchTimerLists+0x48>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <prvSwitchTimerLists+0x44>)
 8003496:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003498:	4a04      	ldr	r2, [pc, #16]	@ (80034ac <prvSwitchTimerLists+0x48>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
    }
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200001e0 	.word	0x200001e0
 80034ac:	200001e4 	.word	0x200001e4

080034b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80034b4:	f000 f9e2 	bl	800387c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80034b8:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <prvCheckForValidListAndQueue+0x54>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11d      	bne.n	80034fc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80034c0:	4811      	ldr	r0, [pc, #68]	@ (8003508 <prvCheckForValidListAndQueue+0x58>)
 80034c2:	f7fe fa71 	bl	80019a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80034c6:	4811      	ldr	r0, [pc, #68]	@ (800350c <prvCheckForValidListAndQueue+0x5c>)
 80034c8:	f7fe fa6e 	bl	80019a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80034cc:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <prvCheckForValidListAndQueue+0x60>)
 80034ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003508 <prvCheckForValidListAndQueue+0x58>)
 80034d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <prvCheckForValidListAndQueue+0x64>)
 80034d4:	4a0d      	ldr	r2, [pc, #52]	@ (800350c <prvCheckForValidListAndQueue+0x5c>)
 80034d6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80034d8:	2200      	movs	r2, #0
 80034da:	210c      	movs	r1, #12
 80034dc:	200a      	movs	r0, #10
 80034de:	f7fe fb77 	bl	8001bd0 <xQueueGenericCreate>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <prvCheckForValidListAndQueue+0x54>)
 80034e6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80034e8:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <prvCheckForValidListAndQueue+0x54>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80034f0:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <prvCheckForValidListAndQueue+0x54>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4908      	ldr	r1, [pc, #32]	@ (8003518 <prvCheckForValidListAndQueue+0x68>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fd78 	bl	8001fec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80034fc:	f000 f9f0 	bl	80038e0 <vPortExitCritical>
    }
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200001e8 	.word	0x200001e8
 8003508:	200001b8 	.word	0x200001b8
 800350c:	200001cc 	.word	0x200001cc
 8003510:	200001e0 	.word	0x200001e0
 8003514:	200001e4 	.word	0x200001e4
 8003518:	080059f8 	.word	0x080059f8

0800351c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3b04      	subs	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003534:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b04      	subs	r3, #4
 800353a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 0201 	bic.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b04      	subs	r3, #4
 800354a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800354c:	4a0c      	ldr	r2, [pc, #48]	@ (8003580 <pxPortInitialiseStack+0x64>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3b14      	subs	r3, #20
 8003556:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b04      	subs	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f06f 0202 	mvn.w	r2, #2
 800356a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3b20      	subs	r3, #32
 8003570:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	08003585 	.word	0x08003585

08003584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800358e:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <prvTaskExitError+0x58>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d00b      	beq.n	80035b0 <prvTaskExitError+0x2c>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60fb      	str	r3, [r7, #12]
    }
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <prvTaskExitError+0x28>
        __asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	60bb      	str	r3, [r7, #8]
    }
 80035c2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80035c4:	bf00      	nop
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0fc      	beq.n	80035c6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000010 	.word	0x20000010

080035e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80035e0:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <pxCurrentTCBConst2>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ea:	f380 8809 	msr	PSP, r0
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	4770      	bx	lr
 80035fc:	f3af 8000 	nop.w

08003600 <pxCurrentTCBConst2>:
 8003600:	200000b4 	.word	0x200000b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003608:	4808      	ldr	r0, [pc, #32]	@ (800362c <prvPortStartFirstTask+0x24>)
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	6800      	ldr	r0, [r0, #0]
 800360e:	f380 8808 	msr	MSP, r0
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f380 8814 	msr	CONTROL, r0
 800361a:	b662      	cpsie	i
 800361c:	b661      	cpsie	f
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	df00      	svc	0
 8003628:	bf00      	nop
 800362a:	0000      	.short	0x0000
 800362c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop

08003634 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800363a:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <xPortStartScheduler+0x124>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a47      	ldr	r2, [pc, #284]	@ (800375c <xPortStartScheduler+0x128>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10b      	bne.n	800365c <xPortStartScheduler+0x28>
        __asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	613b      	str	r3, [r7, #16]
    }
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800365c:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <xPortStartScheduler+0x124>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3f      	ldr	r2, [pc, #252]	@ (8003760 <xPortStartScheduler+0x12c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10b      	bne.n	800367e <xPortStartScheduler+0x4a>
        __asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	60fb      	str	r3, [r7, #12]
    }
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	e7fd      	b.n	800367a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800367e:	4b39      	ldr	r3, [pc, #228]	@ (8003764 <xPortStartScheduler+0x130>)
 8003680:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	22ff      	movs	r2, #255	@ 0xff
 800368e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <xPortStartScheduler+0x134>)
 80036a4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036a6:	4b31      	ldr	r3, [pc, #196]	@ (800376c <xPortStartScheduler+0x138>)
 80036a8:	2207      	movs	r2, #7
 80036aa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036ac:	e009      	b.n	80036c2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80036ae:	4b2f      	ldr	r3, [pc, #188]	@ (800376c <xPortStartScheduler+0x138>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	4a2d      	ldr	r2, [pc, #180]	@ (800376c <xPortStartScheduler+0x138>)
 80036b6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b80      	cmp	r3, #128	@ 0x80
 80036cc:	d0ef      	beq.n	80036ae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036ce:	4b27      	ldr	r3, [pc, #156]	@ (800376c <xPortStartScheduler+0x138>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d00b      	beq.n	80036f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	60bb      	str	r3, [r7, #8]
    }
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036f2:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <xPortStartScheduler+0x138>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <xPortStartScheduler+0x138>)
 80036fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <xPortStartScheduler+0x138>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003704:	4a19      	ldr	r2, [pc, #100]	@ (800376c <xPortStartScheduler+0x138>)
 8003706:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <xPortStartScheduler+0x13c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <xPortStartScheduler+0x13c>)
 8003716:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800371a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <xPortStartScheduler+0x13c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a13      	ldr	r2, [pc, #76]	@ (8003770 <xPortStartScheduler+0x13c>)
 8003722:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003726:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003728:	f000 f968 	bl	80039fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800372c:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <xPortStartScheduler+0x140>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003732:	f000 f987 	bl	8003a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <xPortStartScheduler+0x144>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a0f      	ldr	r2, [pc, #60]	@ (8003778 <xPortStartScheduler+0x144>)
 800373c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003740:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003742:	f7ff ff61 	bl	8003608 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003746:	f7ff f8d5 	bl	80028f4 <vTaskSwitchContext>
    prvTaskExitError();
 800374a:	f7ff ff1b 	bl	8003584 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	e000ed00 	.word	0xe000ed00
 800375c:	410fc271 	.word	0x410fc271
 8003760:	410fc270 	.word	0x410fc270
 8003764:	e000e400 	.word	0xe000e400
 8003768:	200001f4 	.word	0x200001f4
 800376c:	200001f8 	.word	0x200001f8
 8003770:	e000ed20 	.word	0xe000ed20
 8003774:	20000010 	.word	0x20000010
 8003778:	e000ef34 	.word	0xe000ef34

0800377c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003782:	4b38      	ldr	r3, [pc, #224]	@ (8003864 <vInitPrioGroupValue+0xe8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <vInitPrioGroupValue+0xec>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10b      	bne.n	80037a4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	613b      	str	r3, [r7, #16]
    }
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <vInitPrioGroupValue+0xe8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a30      	ldr	r2, [pc, #192]	@ (800386c <vInitPrioGroupValue+0xf0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10b      	bne.n	80037c6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	60fb      	str	r3, [r7, #12]
    }
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <vInitPrioGroupValue+0xf4>)
 80037c8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	22ff      	movs	r2, #255	@ 0xff
 80037d6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b22      	ldr	r3, [pc, #136]	@ (8003874 <vInitPrioGroupValue+0xf8>)
 80037ec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037ee:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037f4:	e009      	b.n	800380a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 80037fe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003812:	2b80      	cmp	r3, #128	@ 0x80
 8003814:	d0ef      	beq.n	80037f6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003816:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00b      	beq.n	800383a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60bb      	str	r3, [r7, #8]
    }
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800383a:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	4a0d      	ldr	r2, [pc, #52]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 8003842:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800384c:	4a0a      	ldr	r2, [pc, #40]	@ (8003878 <vInitPrioGroupValue+0xfc>)
 800384e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00
 8003868:	410fc271 	.word	0x410fc271
 800386c:	410fc270 	.word	0x410fc270
 8003870:	e000e400 	.word	0xe000e400
 8003874:	200001f4 	.word	0x200001f4
 8003878:	200001f8 	.word	0x200001f8

0800387c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
        __asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	607b      	str	r3, [r7, #4]
    }
 8003894:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <vPortEnterCritical+0x5c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	4a0e      	ldr	r2, [pc, #56]	@ (80038d8 <vPortEnterCritical+0x5c>)
 800389e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <vPortEnterCritical+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038a8:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <vPortEnterCritical+0x60>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <vPortEnterCritical+0x4e>
        __asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	603b      	str	r3, [r7, #0]
    }
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <vPortEnterCritical+0x4a>
    }
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000010 	.word	0x20000010
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80038e6:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <vPortExitCritical+0x50>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <vPortExitCritical+0x26>
        __asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	607b      	str	r3, [r7, #4]
    }
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003906:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <vPortExitCritical+0x50>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3b01      	subs	r3, #1
 800390c:	4a08      	ldr	r2, [pc, #32]	@ (8003930 <vPortExitCritical+0x50>)
 800390e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <vPortExitCritical+0x50>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <vPortExitCritical+0x44>
 8003918:	2300      	movs	r3, #0
 800391a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003922:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	20000010 	.word	0x20000010
	...

08003940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003940:	f3ef 8009 	mrs	r0, PSP
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <pxCurrentTCBConst>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	f01e 0f10 	tst.w	lr, #16
 8003950:	bf08      	it	eq
 8003952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003964:	f380 8811 	msr	BASEPRI, r0
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f7fe ffc0 	bl	80028f4 <vTaskSwitchContext>
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f380 8811 	msr	BASEPRI, r0
 800397c:	bc09      	pop	{r0, r3}
 800397e:	6819      	ldr	r1, [r3, #0]
 8003980:	6808      	ldr	r0, [r1, #0]
 8003982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003986:	f01e 0f10 	tst.w	lr, #16
 800398a:	bf08      	it	eq
 800398c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003990:	f380 8809 	msr	PSP, r0
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w

080039a0 <pxCurrentTCBConst>:
 80039a0:	200000b4 	.word	0x200000b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop

080039a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
        __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	607b      	str	r3, [r7, #4]
    }
 80039c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80039c2:	f001 fd09 	bl	80053d8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80039c6:	f7fe fe9d 	bl	8002704 <xTaskIncrementTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80039d0:	f001 fd60 	bl	8005494 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039d4:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <SysTick_Handler+0x50>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e001      	b.n	80039e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80039de:	f001 fd3d 	bl	800545c <SEGGER_SYSVIEW_RecordExitISR>
 80039e2:	2300      	movs	r3, #0
 80039e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f383 8811 	msr	BASEPRI, r3
    }
 80039ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <vPortSetupTimerInterrupt+0x34>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <vPortSetupTimerInterrupt+0x38>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <vPortSetupTimerInterrupt+0x3c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <vPortSetupTimerInterrupt+0x40>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <vPortSetupTimerInterrupt+0x44>)
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a1e:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <vPortSetupTimerInterrupt+0x34>)
 8003a20:	2207      	movs	r2, #7
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e010 	.word	0xe000e010
 8003a34:	e000e018 	.word	0xe000e018
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	10624dd3 	.word	0x10624dd3
 8003a40:	e000e014 	.word	0xe000e014

08003a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003a54 <vPortEnableVFP+0x10>
 8003a48:	6801      	ldr	r1, [r0, #0]
 8003a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003a4e:	6001      	str	r1, [r0, #0]
 8003a50:	4770      	bx	lr
 8003a52:	0000      	.short	0x0000
 8003a54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop

08003a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d915      	bls.n	8003a9a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <vPortValidateInterruptPriority+0x74>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a78:	4b16      	ldr	r3, [pc, #88]	@ (8003ad4 <vPortValidateInterruptPriority+0x78>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	7afa      	ldrb	r2, [r7, #11]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d20b      	bcs.n	8003a9a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	607b      	str	r3, [r7, #4]
    }
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <vPortValidateInterruptPriority+0x7c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <vPortValidateInterruptPriority+0x80>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d90b      	bls.n	8003ac2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	603b      	str	r3, [r7, #0]
    }
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <vPortValidateInterruptPriority+0x62>
    }
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000e3f0 	.word	0xe000e3f0
 8003ad4:	200001f4 	.word	0x200001f4
 8003ad8:	e000ed0c 	.word	0xe000ed0c
 8003adc:	200001f8 	.word	0x200001f8

08003ae0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	@ 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003aec:	f7fe fce8 	bl	80024c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003af0:	4b54      	ldr	r3, [pc, #336]	@ (8003c44 <pvPortMalloc+0x164>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003af8:	f000 f90c 	bl	8003d14 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003b02:	2208      	movs	r2, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d804      	bhi.n	8003b24 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	4413      	add	r3, r2
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e001      	b.n	8003b28 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db71      	blt.n	8003c12 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d06e      	beq.n	8003c12 <pvPortMalloc+0x132>
 8003b34:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <pvPortMalloc+0x168>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d869      	bhi.n	8003c12 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b3e:	4b43      	ldr	r3, [pc, #268]	@ (8003c4c <pvPortMalloc+0x16c>)
 8003b40:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003b42:	4b42      	ldr	r3, [pc, #264]	@ (8003c4c <pvPortMalloc+0x16c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b48:	e004      	b.n	8003b54 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d903      	bls.n	8003b66 <pvPortMalloc+0x86>
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f1      	bne.n	8003b4a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b66:	4b37      	ldr	r3, [pc, #220]	@ (8003c44 <pvPortMalloc+0x164>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d050      	beq.n	8003c12 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2208      	movs	r2, #8
 8003b76:	4413      	add	r3, r2
 8003b78:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d920      	bls.n	8003bd4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <pvPortMalloc+0xdc>
        __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	613b      	str	r3, [r7, #16]
    }
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	1ad2      	subs	r2, r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f000 f8fc 	bl	8003dcc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <pvPortMalloc+0x168>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	4a1a      	ldr	r2, [pc, #104]	@ (8003c48 <pvPortMalloc+0x168>)
 8003be0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003be2:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <pvPortMalloc+0x168>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <pvPortMalloc+0x170>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d203      	bcs.n	8003bf6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bee:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <pvPortMalloc+0x168>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <pvPortMalloc+0x170>)
 8003bf4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003c08:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <pvPortMalloc+0x174>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	4a11      	ldr	r2, [pc, #68]	@ (8003c54 <pvPortMalloc+0x174>)
 8003c10:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003c12:	f7fe fc63 	bl	80024dc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <pvPortMalloc+0x158>
        __asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60fb      	str	r3, [r7, #12]
    }
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <pvPortMalloc+0x154>
    return pvReturn;
 8003c38:	69fb      	ldr	r3, [r7, #28]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3728      	adds	r7, #40	@ 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20012e04 	.word	0x20012e04
 8003c48:	20012e08 	.word	0x20012e08
 8003c4c:	20012dfc 	.word	0x20012dfc
 8003c50:	20012e0c 	.word	0x20012e0c
 8003c54:	20012e10 	.word	0x20012e10

08003c58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04b      	beq.n	8003d02 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4413      	add	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db0b      	blt.n	8003c98 <vPortFree+0x40>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
    }
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <vPortFree+0x60>
        __asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60bb      	str	r3, [r7, #8]
    }
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0fdb      	lsrs	r3, r3, #31
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d118      	bne.n	8003d02 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003cdc:	f7fe fbf0 	bl	80024c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <vPortFree+0xb4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <vPortFree+0xb4>)
 8003cec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cee:	6938      	ldr	r0, [r7, #16]
 8003cf0:	f000 f86c 	bl	8003dcc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <vPortFree+0xb8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a05      	ldr	r2, [pc, #20]	@ (8003d10 <vPortFree+0xb8>)
 8003cfc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003cfe:	f7fe fbed 	bl	80024dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20012e08 	.word	0x20012e08
 8003d10:	20012e14 	.word	0x20012e14

08003d14 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d1a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003d20:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <prvHeapInit+0xa4>)
 8003d22:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3307      	adds	r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0307 	bic.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	4a1d      	ldr	r2, [pc, #116]	@ (8003db8 <prvHeapInit+0xa4>)
 8003d44:	4413      	add	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dbc <prvHeapInit+0xa8>)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <prvHeapInit+0xa8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d60:	2208      	movs	r2, #8
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <prvHeapInit+0xac>)
 8003d74:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d76:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <prvHeapInit+0xac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <prvHeapInit+0xac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d94:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <prvHeapInit+0xac>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a08      	ldr	r2, [pc, #32]	@ (8003dc4 <prvHeapInit+0xb0>)
 8003da2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a07      	ldr	r2, [pc, #28]	@ (8003dc8 <prvHeapInit+0xb4>)
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	200001fc 	.word	0x200001fc
 8003dbc:	20012dfc 	.word	0x20012dfc
 8003dc0:	20012e04 	.word	0x20012e04
 8003dc4:	20012e0c 	.word	0x20012e0c
 8003dc8:	20012e08 	.word	0x20012e08

08003dcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003dd4:	4b28      	ldr	r3, [pc, #160]	@ (8003e78 <prvInsertBlockIntoFreeList+0xac>)
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e002      	b.n	8003de0 <prvInsertBlockIntoFreeList+0x14>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d8f7      	bhi.n	8003dda <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d108      	bne.n	8003e0e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	441a      	add	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d118      	bne.n	8003e54 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <prvInsertBlockIntoFreeList+0xb0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d00d      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e008      	b.n	8003e5c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <prvInsertBlockIntoFreeList+0xb0>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e003      	b.n	8003e5c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d002      	beq.n	8003e6a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20012dfc 	.word	0x20012dfc
 8003e7c:	20012e04 	.word	0x20012e04

08003e80 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e84:	4803      	ldr	r0, [pc, #12]	@ (8003e94 <_cbSendSystemDesc+0x14>)
 8003e86:	f001 fa51 	bl	800532c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e8a:	4803      	ldr	r0, [pc, #12]	@ (8003e98 <_cbSendSystemDesc+0x18>)
 8003e8c:	f001 fa4e 	bl	800532c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08005a00 	.word	0x08005a00
 8003e98:	08005a3c 	.word	0x08005a3c

08003e9c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003ea0:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <SEGGER_SYSVIEW_Conf+0x20>)
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <SEGGER_SYSVIEW_Conf+0x20>)
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <SEGGER_SYSVIEW_Conf+0x24>)
 8003eaa:	4a06      	ldr	r2, [pc, #24]	@ (8003ec4 <SEGGER_SYSVIEW_Conf+0x28>)
 8003eac:	f000 fdba 	bl	8004a24 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003eb0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003eb4:	f000 fdfa 	bl	8004aac <SEGGER_SYSVIEW_SetRAMBase>
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	08003e81 	.word	0x08003e81
 8003ec4:	08005ad8 	.word	0x08005ad8

08003ec8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	e033      	b.n	8003f3c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003ed4:	491e      	ldr	r1, [pc, #120]	@ (8003f50 <_cbSendTaskList+0x88>)
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	491a      	ldr	r1, [pc, #104]	@ (8003f50 <_cbSendTaskList+0x88>)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	4c16      	ldr	r4, [pc, #88]	@ (8003f50 <_cbSendTaskList+0x88>)
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4423      	add	r3, r4
 8003f04:	3308      	adds	r3, #8
 8003f06:	681c      	ldr	r4, [r3, #0]
 8003f08:	4d11      	ldr	r5, [pc, #68]	@ (8003f50 <_cbSendTaskList+0x88>)
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	442b      	add	r3, r5
 8003f16:	330c      	adds	r3, #12
 8003f18:	681d      	ldr	r5, [r3, #0]
 8003f1a:	4e0d      	ldr	r6, [pc, #52]	@ (8003f50 <_cbSendTaskList+0x88>)
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4433      	add	r3, r6
 8003f28:	3310      	adds	r3, #16
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	462b      	mov	r3, r5
 8003f30:	4622      	mov	r2, r4
 8003f32:	f000 f8bd 	bl	80040b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <_cbSendTaskList+0x8c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3c6      	bcc.n	8003ed4 <_cbSendTaskList+0xc>
  }
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f50:	20012e18 	.word	0x20012e18
 8003f54:	20012eb8 	.word	0x20012eb8

08003f58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003f60:	f7fe fbbe 	bl	80026e0 <xTaskGetTickCountFromISR>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2200      	movs	r2, #0
 8003f68:	469a      	mov	sl, r3
 8003f6a:	4693      	mov	fp, r2
 8003f6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	f04f 0a00 	mov.w	sl, #0
 8003f7c:	f04f 0b00 	mov.w	fp, #0
 8003f80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003f84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003f88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	465b      	mov	r3, fp
 8003f90:	1a14      	subs	r4, r2, r0
 8003f92:	eb63 0501 	sbc.w	r5, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	00ab      	lsls	r3, r5, #2
 8003fa0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003fa4:	00a2      	lsls	r2, r4, #2
 8003fa6:	4614      	mov	r4, r2
 8003fa8:	461d      	mov	r5, r3
 8003faa:	eb14 0800 	adds.w	r8, r4, r0
 8003fae:	eb45 0901 	adc.w	r9, r5, r1
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	4699      	mov	r9, r3
 8003fca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003fce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003fe0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003fee:	2205      	movs	r2, #5
 8003ff0:	492b      	ldr	r1, [pc, #172]	@ (80040a0 <SYSVIEW_AddTask+0xc0>)
 8003ff2:	68b8      	ldr	r0, [r7, #8]
 8003ff4:	f001 fc9e 	bl	8005934 <memcmp>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04b      	beq.n	8004096 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003ffe:	4b29      	ldr	r3, [pc, #164]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b07      	cmp	r3, #7
 8004004:	d903      	bls.n	800400e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004006:	4828      	ldr	r0, [pc, #160]	@ (80040a8 <SYSVIEW_AddTask+0xc8>)
 8004008:	f001 fc38 	bl	800587c <SEGGER_SYSVIEW_Warn>
    return;
 800400c:	e044      	b.n	8004098 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800400e:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4926      	ldr	r1, [pc, #152]	@ (80040ac <SYSVIEW_AddTask+0xcc>)
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4921      	ldr	r1, [pc, #132]	@ (80040ac <SYSVIEW_AddTask+0xcc>)
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	3304      	adds	r3, #4
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004038:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	491b      	ldr	r1, [pc, #108]	@ (80040ac <SYSVIEW_AddTask+0xcc>)
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3308      	adds	r3, #8
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800404e:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4916      	ldr	r1, [pc, #88]	@ (80040ac <SYSVIEW_AddTask+0xcc>)
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	330c      	adds	r3, #12
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004064:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4910      	ldr	r1, [pc, #64]	@ (80040ac <SYSVIEW_AddTask+0xcc>)
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3310      	adds	r3, #16
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800407a:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	4a08      	ldr	r2, [pc, #32]	@ (80040a4 <SYSVIEW_AddTask+0xc4>)
 8004082:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f80e 	bl	80040b0 <SYSVIEW_SendTaskInfo>
 8004094:	e000      	b.n	8004098 <SYSVIEW_AddTask+0xb8>
    return;
 8004096:	bf00      	nop

}
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	08005a4c 	.word	0x08005a4c
 80040a4:	20012eb8 	.word	0x20012eb8
 80040a8:	08005a54 	.word	0x08005a54
 80040ac:	20012e18 	.word	0x20012e18

080040b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	2214      	movs	r2, #20
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fc44 	bl	8005954 <memset>
  TaskInfo.TaskID     = TaskID;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f829 	bl	800513c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80040ea:	bf00      	nop
 80040ec:	3728      	adds	r7, #40	@ 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80040fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <USART2_IRQHandler+0x80>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d011      	beq.n	800412e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800410a:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <USART2_IRQHandler+0x84>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 030b 	and.w	r3, r3, #11
 8004118:	2b00      	cmp	r3, #0
 800411a:	d108      	bne.n	800412e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800411c:	4b17      	ldr	r3, [pc, #92]	@ (800417c <USART2_IRQHandler+0x88>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004124:	4b15      	ldr	r3, [pc, #84]	@ (800417c <USART2_IRQHandler+0x88>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	79fa      	ldrb	r2, [r7, #7]
 800412a:	4610      	mov	r0, r2
 800412c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <USART2_IRQHandler+0x8c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <USART2_IRQHandler+0x8c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1dfa      	adds	r2, r7, #7
 8004146:	4610      	mov	r0, r2
 8004148:	4798      	blx	r3
 800414a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <USART2_IRQHandler+0x90>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a0b      	ldr	r2, [pc, #44]	@ (8004184 <USART2_IRQHandler+0x90>)
 8004158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e006      	b.n	800416e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004160:	4b04      	ldr	r3, [pc, #16]	@ (8004174 <USART2_IRQHandler+0x80>)
 8004162:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004164:	79fa      	ldrb	r2, [r7, #7]
 8004166:	4b04      	ldr	r3, [pc, #16]	@ (8004178 <USART2_IRQHandler+0x84>)
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e000      	b.n	800416e <USART2_IRQHandler+0x7a>
      return;
 800416c:	bf00      	nop
    }
  }
}
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40004400 	.word	0x40004400
 8004178:	40004404 	.word	0x40004404
 800417c:	20012ebc 	.word	0x20012ebc
 8004180:	20012ec0 	.word	0x20012ec0
 8004184:	4000440c 	.word	0x4000440c

08004188 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a04      	ldr	r2, [pc, #16]	@ (80041a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	4000440c 	.word	0x4000440c

080041a8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80041ae:	4b26      	ldr	r3, [pc, #152]	@ (8004248 <_DoInit+0xa0>)
 80041b0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80041b2:	22a8      	movs	r2, #168	@ 0xa8
 80041b4:	2100      	movs	r1, #0
 80041b6:	6838      	ldr	r0, [r7, #0]
 80041b8:	f001 fbcc 	bl	8005954 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2203      	movs	r2, #3
 80041c0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2203      	movs	r2, #3
 80041c6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4a20      	ldr	r2, [pc, #128]	@ (800424c <_DoInit+0xa4>)
 80041cc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004250 <_DoInit+0xa8>)
 80041d2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041da:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4a16      	ldr	r2, [pc, #88]	@ (800424c <_DoInit+0xa4>)
 80041f2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <_DoInit+0xac>)
 80041f8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2200      	movs	r2, #0
 800420a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004212:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004216:	2300      	movs	r3, #0
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	e00c      	b.n	8004236 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1c3 030f 	rsb	r3, r3, #15
 8004222:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <_DoInit+0xb0>)
 8004224:	5cd1      	ldrb	r1, [r2, r3]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	460a      	mov	r2, r1
 800422e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3301      	adds	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b0f      	cmp	r3, #15
 800423a:	d9ef      	bls.n	800421c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800423c:	f3bf 8f5f 	dmb	sy
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20012ec4 	.word	0x20012ec4
 800424c:	08005aa4 	.word	0x08005aa4
 8004250:	20012f6c 	.word	0x20012f6c
 8004254:	2001336c 	.word	0x2001336c
 8004258:	08005ae0 	.word	0x08005ae0

0800425c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	@ 0x30
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004268:	4b3e      	ldr	r3, [pc, #248]	@ (8004364 <SEGGER_RTT_ReadNoLock+0x108>)
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b53      	cmp	r3, #83	@ 0x53
 8004274:	d001      	beq.n	800427a <SEGGER_RTT_ReadNoLock+0x1e>
 8004276:	f7ff ff97 	bl	80041a8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	3360      	adds	r3, #96	@ 0x60
 8004286:	4a37      	ldr	r2, [pc, #220]	@ (8004364 <SEGGER_RTT_ReadNoLock+0x108>)
 8004288:	4413      	add	r3, r2
 800428a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800429c:	2300      	movs	r3, #0
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80042a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d92b      	bls.n	8004300 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	bf28      	it	cs
 80042ba:	4613      	movcs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	4413      	add	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042ce:	f001 fb6d 	bl	80059ac <memcpy>
    NumBytesRead += NumBytesRem;
 80042d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4413      	add	r3, r2
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	4413      	add	r3, r2
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80042ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4413      	add	r3, r2
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d101      	bne.n	8004300 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4293      	cmp	r3, r2
 800430e:	bf28      	it	cs
 8004310:	4613      	movcs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d019      	beq.n	800434e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	4413      	add	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6939      	ldr	r1, [r7, #16]
 8004328:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800432a:	f001 fb3f 	bl	80059ac <memcpy>
    NumBytesRead += NumBytesRem;
 800432e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4413      	add	r3, r2
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4413      	add	r3, r2
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4413      	add	r3, r2
 800434c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004358:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800435a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800435c:	4618      	mov	r0, r3
 800435e:	3730      	adds	r7, #48	@ 0x30
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20012ec4 	.word	0x20012ec4

08004368 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004376:	4b3d      	ldr	r3, [pc, #244]	@ (800446c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b53      	cmp	r3, #83	@ 0x53
 8004382:	d001      	beq.n	8004388 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004384:	f7ff ff10 	bl	80041a8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004388:	f3ef 8311 	mrs	r3, BASEPRI
 800438c:	f04f 0120 	mov.w	r1, #32
 8004390:	f381 8811 	msr	BASEPRI, r1
 8004394:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004396:	4b35      	ldr	r3, [pc, #212]	@ (800446c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004398:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800439e:	6939      	ldr	r1, [r7, #16]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	4613      	mov	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	3304      	adds	r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	dbeb      	blt.n	800439e <SEGGER_RTT_AllocUpBuffer+0x36>
 80043c6:	e000      	b.n	80043ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80043c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	da3f      	bge.n	8004454 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80043e8:	6939      	ldr	r1, [r7, #16]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	440b      	add	r3, r1
 80043f8:	3304      	adds	r3, #4
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	3320      	adds	r3, #32
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004412:	6939      	ldr	r1, [r7, #16]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	3328      	adds	r3, #40	@ 0x28
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004426:	6939      	ldr	r1, [r7, #16]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	3324      	adds	r3, #36	@ 0x24
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	4613      	mov	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	440b      	add	r3, r1
 8004448:	332c      	adds	r3, #44	@ 0x2c
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800444e:	f3bf 8f5f 	dmb	sy
 8004452:	e002      	b.n	800445a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004460:	69fb      	ldr	r3, [r7, #28]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20012ec4 	.word	0x20012ec4

08004470 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	@ 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800447e:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b53      	cmp	r3, #83	@ 0x53
 800448a:	d001      	beq.n	8004490 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800448c:	f7ff fe8c 	bl	80041a8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004490:	4b1c      	ldr	r3, [pc, #112]	@ (8004504 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004492:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d82c      	bhi.n	80044f4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800449a:	f3ef 8311 	mrs	r3, BASEPRI
 800449e:	f04f 0120 	mov.w	r1, #32
 80044a2:	f381 8811 	msr	BASEPRI, r1
 80044a6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	3360      	adds	r3, #96	@ 0x60
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f2:	e002      	b.n	80044fa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3728      	adds	r7, #40	@ 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20012ec4 	.word	0x20012ec4

08004508 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	60fa      	str	r2, [r7, #12]
 800451e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d90a      	bls.n	800453c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800452a:	e007      	b.n	800453c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	1c53      	adds	r3, r2, #1
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	60f9      	str	r1, [r7, #12]
 8004538:	7812      	ldrb	r2, [r2, #0]
 800453a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <_EncodeStr+0x46>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3307      	adds	r3, #7
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004586:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <_HandleIncomingPacket+0xd8>)
 8004588:	7e1b      	ldrb	r3, [r3, #24]
 800458a:	4618      	mov	r0, r3
 800458c:	1cfb      	adds	r3, r7, #3
 800458e:	2201      	movs	r2, #1
 8004590:	4619      	mov	r1, r3
 8004592:	f7ff fe63 	bl	800425c <SEGGER_RTT_ReadNoLock>
 8004596:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d057      	beq.n	800464e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d031      	beq.n	8004608 <_HandleIncomingPacket+0x88>
 80045a4:	2b80      	cmp	r3, #128	@ 0x80
 80045a6:	dc40      	bgt.n	800462a <_HandleIncomingPacket+0xaa>
 80045a8:	2b07      	cmp	r3, #7
 80045aa:	dc15      	bgt.n	80045d8 <_HandleIncomingPacket+0x58>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dd3c      	ble.n	800462a <_HandleIncomingPacket+0xaa>
 80045b0:	3b01      	subs	r3, #1
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d839      	bhi.n	800462a <_HandleIncomingPacket+0xaa>
 80045b6:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <_HandleIncomingPacket+0x3c>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045df 	.word	0x080045df
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045eb 	.word	0x080045eb
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004603 	.word	0x08004603
 80045d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80045da:	d033      	beq.n	8004644 <_HandleIncomingPacket+0xc4>
 80045dc:	e025      	b.n	800462a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80045de:	f000 fc31 	bl	8004e44 <SEGGER_SYSVIEW_Start>
      break;
 80045e2:	e034      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80045e4:	f000 fcea 	bl	8004fbc <SEGGER_SYSVIEW_Stop>
      break;
 80045e8:	e031      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80045ea:	f000 fec3 	bl	8005374 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80045ee:	e02e      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80045f0:	f000 fe88 	bl	8005304 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80045f4:	e02b      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80045f6:	f000 fd07 	bl	8005008 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80045fa:	e028      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80045fc:	f001 f900 	bl	8005800 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004600:	e025      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004602:	f001 f8df 	bl	80057c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004606:	e022      	b.n	800464e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <_HandleIncomingPacket+0xd8>)
 800460a:	7e1b      	ldrb	r3, [r3, #24]
 800460c:	4618      	mov	r0, r3
 800460e:	1cfb      	adds	r3, r7, #3
 8004610:	2201      	movs	r2, #1
 8004612:	4619      	mov	r1, r3
 8004614:	f7ff fe22 	bl	800425c <SEGGER_RTT_ReadNoLock>
 8004618:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d013      	beq.n	8004648 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f844 	bl	80056b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004628:	e00e      	b.n	8004648 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	b25b      	sxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	da0c      	bge.n	800464c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004632:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <_HandleIncomingPacket+0xd8>)
 8004634:	7e1b      	ldrb	r3, [r3, #24]
 8004636:	4618      	mov	r0, r3
 8004638:	1cfb      	adds	r3, r7, #3
 800463a:	2201      	movs	r2, #1
 800463c:	4619      	mov	r1, r3
 800463e:	f7ff fe0d 	bl	800425c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004642:	e003      	b.n	800464c <_HandleIncomingPacket+0xcc>
      break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <_HandleIncomingPacket+0xce>
      break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <_HandleIncomingPacket+0xce>
      break;
 800464c:	bf00      	nop
    }
  }
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20014384 	.word	0x20014384

0800465c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	@ 0x30
 8004660:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004662:	2301      	movs	r3, #1
 8004664:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004670:	4b32      	ldr	r3, [pc, #200]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004676:	e00b      	b.n	8004690 <_TrySendOverflowPacket+0x34>
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	09db      	lsrs	r3, r3, #7
 800468e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	2b7f      	cmp	r3, #127	@ 0x7f
 8004694:	d8f0      	bhi.n	8004678 <_TrySendOverflowPacket+0x1c>
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800469c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046a6:	4b26      	ldr	r3, [pc, #152]	@ (8004740 <_TrySendOverflowPacket+0xe4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046ac:	4b23      	ldr	r3, [pc, #140]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	e00b      	b.n	80046d8 <_TrySendOverflowPacket+0x7c>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80046ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	09db      	lsrs	r3, r3, #7
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b7f      	cmp	r3, #127	@ 0x7f
 80046dc:	d8f0      	bhi.n	80046c0 <_TrySendOverflowPacket+0x64>
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80046ee:	4b13      	ldr	r3, [pc, #76]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	4618      	mov	r0, r3
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fb fd6e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004704:	4603      	mov	r3, r0
 8004706:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004708:	f7ff fd3e 	bl	8004188 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004718:	4b08      	ldr	r3, [pc, #32]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e004      	b.n	8004730 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004726:	4b05      	ldr	r3, [pc, #20]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	4a03      	ldr	r2, [pc, #12]	@ (800473c <_TrySendOverflowPacket+0xe0>)
 800472e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004730:	693b      	ldr	r3, [r7, #16]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3730      	adds	r7, #48	@ 0x30
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20014384 	.word	0x20014384
 8004740:	e0001004 	.word	0xe0001004

08004744 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	@ 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004750:	4b96      	ldr	r3, [pc, #600]	@ (80049ac <_SendPacket+0x268>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d010      	beq.n	800477a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004758:	4b94      	ldr	r3, [pc, #592]	@ (80049ac <_SendPacket+0x268>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8130 	beq.w	80049c2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004762:	4b92      	ldr	r3, [pc, #584]	@ (80049ac <_SendPacket+0x268>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d109      	bne.n	800477e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800476a:	f7ff ff77 	bl	800465c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800476e:	4b8f      	ldr	r3, [pc, #572]	@ (80049ac <_SendPacket+0x268>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	f040 8127 	bne.w	80049c6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004778:	e001      	b.n	800477e <_SendPacket+0x3a>
    goto Send;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <_SendPacket+0x3c>
Send:
 800477e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b1f      	cmp	r3, #31
 8004784:	d809      	bhi.n	800479a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004786:	4b89      	ldr	r3, [pc, #548]	@ (80049ac <_SendPacket+0x268>)
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 8118 	bne.w	80049ca <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b17      	cmp	r3, #23
 800479e:	d807      	bhi.n	80047b0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e0c4      	b.n	800493a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80047bc:	d912      	bls.n	80047e4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	09da      	lsrs	r2, r3, #7
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	3a01      	subs	r2, #1
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e006      	b.n	80047f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80047f6:	d807      	bhi.n	8004808 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e098      	b.n	800493a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800480e:	d212      	bcs.n	8004836 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	09da      	lsrs	r2, r3, #7
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	3a01      	subs	r2, #1
 8004828:	60fa      	str	r2, [r7, #12]
 800482a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e081      	b.n	800493a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800483c:	d21d      	bcs.n	800487a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0b9a      	lsrs	r2, r3, #14
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b01      	subs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	b2db      	uxtb	r3, r3
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	3a01      	subs	r2, #1
 8004858:	60fa      	str	r2, [r7, #12]
 800485a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	3a01      	subs	r2, #1
 800486c:	60fa      	str	r2, [r7, #12]
 800486e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e05f      	b.n	800493a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004880:	d228      	bcs.n	80048d4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0d5a      	lsrs	r2, r3, #21
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0b9b      	lsrs	r3, r3, #14
 8004896:	b2db      	uxtb	r3, r3
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	3a01      	subs	r2, #1
 800489c:	60fa      	str	r2, [r7, #12]
 800489e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	09db      	lsrs	r3, r3, #7
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	3a01      	subs	r2, #1
 80048b2:	60fa      	str	r2, [r7, #12]
 80048b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	3a01      	subs	r2, #1
 80048c6:	60fa      	str	r2, [r7, #12]
 80048c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e032      	b.n	800493a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0f1a      	lsrs	r2, r3, #28
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0d5b      	lsrs	r3, r3, #21
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	60fa      	str	r2, [r7, #12]
 80048f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0b9b      	lsrs	r3, r3, #14
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	3a01      	subs	r2, #1
 8004904:	60fa      	str	r2, [r7, #12]
 8004906:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	09db      	lsrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	3a01      	subs	r2, #1
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	3a01      	subs	r2, #1
 800492e:	60fa      	str	r2, [r7, #12]
 8004930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800493a:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <_SendPacket+0x26c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004940:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <_SendPacket+0x268>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	e00b      	b.n	800496c <_SendPacket+0x228>
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	6279      	str	r1, [r7, #36]	@ 0x24
 800495e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	09db      	lsrs	r3, r3, #7
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004970:	d8f0      	bhi.n	8004954 <_SendPacket+0x210>
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	627a      	str	r2, [r7, #36]	@ 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <_SendPacket+0x268>)
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	4618      	mov	r0, r3
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	461a      	mov	r2, r3
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	f7fb fc25 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004996:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004998:	f7ff fbf6 	bl	8004188 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049a2:	4a02      	ldr	r2, [pc, #8]	@ (80049ac <_SendPacket+0x268>)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	60d3      	str	r3, [r2, #12]
 80049a8:	e010      	b.n	80049cc <_SendPacket+0x288>
 80049aa:	bf00      	nop
 80049ac:	20014384 	.word	0x20014384
 80049b0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80049b4:	4b19      	ldr	r3, [pc, #100]	@ (8004a1c <_SendPacket+0x2d8>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	4b17      	ldr	r3, [pc, #92]	@ (8004a1c <_SendPacket+0x2d8>)
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e004      	b.n	80049cc <_SendPacket+0x288>
    goto SendDone;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <_SendPacket+0x288>
      goto SendDone;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <_SendPacket+0x288>
      goto SendDone;
 80049ca:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <_SendPacket+0x2d8>)
 80049ce:	7e1b      	ldrb	r3, [r3, #24]
 80049d0:	4619      	mov	r1, r3
 80049d2:	4a13      	ldr	r2, [pc, #76]	@ (8004a20 <_SendPacket+0x2dc>)
 80049d4:	460b      	mov	r3, r1
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	440b      	add	r3, r1
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4413      	add	r3, r2
 80049de:	336c      	adds	r3, #108	@ 0x6c
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <_SendPacket+0x2d8>)
 80049e4:	7e1b      	ldrb	r3, [r3, #24]
 80049e6:	4618      	mov	r0, r3
 80049e8:	490d      	ldr	r1, [pc, #52]	@ (8004a20 <_SendPacket+0x2dc>)
 80049ea:	4603      	mov	r3, r0
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4403      	add	r3, r0
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	440b      	add	r3, r1
 80049f4:	3370      	adds	r3, #112	@ 0x70
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d00b      	beq.n	8004a14 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <_SendPacket+0x2d8>)
 80049fe:	789b      	ldrb	r3, [r3, #2]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d107      	bne.n	8004a14 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <_SendPacket+0x2d8>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004a0a:	f7ff fdb9 	bl	8004580 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004a0e:	4b03      	ldr	r3, [pc, #12]	@ (8004a1c <_SendPacket+0x2d8>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004a14:	bf00      	nop
 8004a16:	3728      	adds	r7, #40	@ 0x28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20014384 	.word	0x20014384
 8004a20:	20012ec4 	.word	0x20012ec4

08004a24 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a32:	2300      	movs	r3, #0
 8004a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a38:	4917      	ldr	r1, [pc, #92]	@ (8004a98 <SEGGER_SYSVIEW_Init+0x74>)
 8004a3a:	4818      	ldr	r0, [pc, #96]	@ (8004a9c <SEGGER_SYSVIEW_Init+0x78>)
 8004a3c:	f7ff fc94 	bl	8004368 <SEGGER_RTT_AllocUpBuffer>
 8004a40:	4603      	mov	r3, r0
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a46:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004a48:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a4a:	785a      	ldrb	r2, [r3, #1]
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a4e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a52:	7e1b      	ldrb	r3, [r3, #24]
 8004a54:	4618      	mov	r0, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	4a11      	ldr	r2, [pc, #68]	@ (8004aa4 <SEGGER_SYSVIEW_Init+0x80>)
 8004a5e:	490f      	ldr	r1, [pc, #60]	@ (8004a9c <SEGGER_SYSVIEW_Init+0x78>)
 8004a60:	f7ff fd06 	bl	8004470 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa8 <SEGGER_SYSVIEW_Init+0x84>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a70:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004a72:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004a78:	4a09      	ldr	r2, [pc, #36]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004a7e:	4a08      	ldr	r2, [pc, #32]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004a84:	4a06      	ldr	r2, [pc, #24]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004a8a:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2001337c 	.word	0x2001337c
 8004a9c:	08005ab8 	.word	0x08005ab8
 8004aa0:	20014384 	.word	0x20014384
 8004aa4:	2001437c 	.word	0x2001437c
 8004aa8:	e0001004 	.word	0xe0001004

08004aac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ab4:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6113      	str	r3, [r2, #16]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20014384 	.word	0x20014384

08004acc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad8:	f04f 0120 	mov.w	r1, #32
 8004adc:	f381 8811 	msr	BASEPRI, r1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	4808      	ldr	r0, [pc, #32]	@ (8004b04 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ae4:	f7ff fd40 	bl	8004568 <_PreparePacket>
 8004ae8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f7ff fe28 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f383 8811 	msr	BASEPRI, r3
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200143b4 	.word	0x200143b4

08004b08 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b12:	f3ef 8311 	mrs	r3, BASEPRI
 8004b16:	f04f 0120 	mov.w	r1, #32
 8004b1a:	f381 8811 	msr	BASEPRI, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	4816      	ldr	r0, [pc, #88]	@ (8004b7c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004b22:	f7ff fd21 	bl	8004568 <_PreparePacket>
 8004b26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e00b      	b.n	8004b4e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1c59      	adds	r1, r3, #1
 8004b3e:	61f9      	str	r1, [r7, #28]
 8004b40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	09db      	lsrs	r3, r3, #7
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b52:	d8f0      	bhi.n	8004b36 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	6938      	ldr	r0, [r7, #16]
 8004b6a:	f7ff fdeb 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f383 8811 	msr	BASEPRI, r3
}
 8004b74:	bf00      	nop
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200143b4 	.word	0x200143b4

08004b80 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b90:	f04f 0120 	mov.w	r1, #32
 8004b94:	f381 8811 	msr	BASEPRI, r1
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	4825      	ldr	r0, [pc, #148]	@ (8004c30 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b9c:	f7ff fce4 	bl	8004568 <_PreparePacket>
 8004ba0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bae:	e00b      	b.n	8004bc8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004bba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	09db      	lsrs	r3, r3, #7
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bcc:	d8f0      	bhi.n	8004bb0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bdc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	e00b      	b.n	8004c00 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	09db      	lsrs	r3, r3, #7
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c04:	d8f0      	bhi.n	8004be8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6979      	ldr	r1, [r7, #20]
 8004c1a:	69b8      	ldr	r0, [r7, #24]
 8004c1c:	f7ff fd92 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f383 8811 	msr	BASEPRI, r3
}
 8004c26:	bf00      	nop
 8004c28:	3730      	adds	r7, #48	@ 0x30
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200143b4 	.word	0x200143b4

08004c34 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	@ 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c42:	f3ef 8311 	mrs	r3, BASEPRI
 8004c46:	f04f 0120 	mov.w	r1, #32
 8004c4a:	f381 8811 	msr	BASEPRI, r1
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	4832      	ldr	r0, [pc, #200]	@ (8004d1c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004c52:	f7ff fc89 	bl	8004568 <_PreparePacket>
 8004c56:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c64:	e00b      	b.n	8004c7e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004c70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	09db      	lsrs	r3, r3, #7
 8004c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c82:	d8f0      	bhi.n	8004c66 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c9c:	e00b      	b.n	8004cb6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ca8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cba:	d8f0      	bhi.n	8004c9e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	e00b      	b.n	8004cee <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	1c59      	adds	r1, r3, #1
 8004cde:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ce0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	09db      	lsrs	r3, r3, #7
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cf2:	d8f0      	bhi.n	8004cd6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cfa:	6a3a      	ldr	r2, [r7, #32]
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	69b8      	ldr	r0, [r7, #24]
 8004d0a:	f7ff fd1b 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f383 8811 	msr	BASEPRI, r3
}
 8004d14:	bf00      	nop
 8004d16:	3738      	adds	r7, #56	@ 0x38
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200143b4 	.word	0x200143b4

08004d20 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b090      	sub	sp, #64	@ 0x40
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d32:	f04f 0120 	mov.w	r1, #32
 8004d36:	f381 8811 	msr	BASEPRI, r1
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	4840      	ldr	r0, [pc, #256]	@ (8004e40 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004d3e:	f7ff fc13 	bl	8004568 <_PreparePacket>
 8004d42:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d50:	e00b      	b.n	8004d6a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004d5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6e:	d8f0      	bhi.n	8004d52 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d88:	e00b      	b.n	8004da2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	6379      	str	r1, [r7, #52]	@ 0x34
 8004d94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	09db      	lsrs	r3, r3, #7
 8004da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da6:	d8f0      	bhi.n	8004d8a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	637a      	str	r2, [r7, #52]	@ 0x34
 8004dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc0:	e00b      	b.n	8004dda <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dde:	d8f0      	bhi.n	8004dc2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	e00b      	b.n	8004e12 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	09db      	lsrs	r3, r3, #7
 8004e10:	623b      	str	r3, [r7, #32]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e16:	d8f0      	bhi.n	8004dfa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69b8      	ldr	r0, [r7, #24]
 8004e2e:	f7ff fc89 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f383 8811 	msr	BASEPRI, r3
}
 8004e38:	bf00      	nop
 8004e3a:	3740      	adds	r7, #64	@ 0x40
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200143b4 	.word	0x200143b4

08004e44 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08c      	sub	sp, #48	@ 0x30
 8004e48:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e4a:	4b59      	ldr	r3, [pc, #356]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e50:	f3ef 8311 	mrs	r3, BASEPRI
 8004e54:	f04f 0120 	mov.w	r1, #32
 8004e58:	f381 8811 	msr	BASEPRI, r1
 8004e5c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e5e:	4b54      	ldr	r3, [pc, #336]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	220a      	movs	r2, #10
 8004e64:	4953      	ldr	r1, [pc, #332]	@ (8004fb4 <SEGGER_SYSVIEW_Start+0x170>)
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fb f9ba 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e72:	f7ff f989 	bl	8004188 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e76:	200a      	movs	r0, #10
 8004e78:	f7ff fe28 	bl	8004acc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e80:	f04f 0120 	mov.w	r1, #32
 8004e84:	f381 8811 	msr	BASEPRI, r1
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	484b      	ldr	r0, [pc, #300]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x174>)
 8004e8c:	f7ff fb6c 	bl	8004568 <_PreparePacket>
 8004e90:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9a:	4b45      	ldr	r3, [pc, #276]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea0:	e00b      	b.n	8004eba <SEGGER_SYSVIEW_Start+0x76>
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	09db      	lsrs	r3, r3, #7
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ebe:	d8f0      	bhi.n	8004ea2 <SEGGER_SYSVIEW_Start+0x5e>
 8004ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ece:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed4:	4b36      	ldr	r3, [pc, #216]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	e00b      	b.n	8004ef4 <SEGGER_SYSVIEW_Start+0xb0>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	1c59      	adds	r1, r3, #1
 8004ee4:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ee6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	09db      	lsrs	r3, r3, #7
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef8:	d8f0      	bhi.n	8004edc <SEGGER_SYSVIEW_Start+0x98>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f00:	6a3a      	ldr	r2, [r7, #32]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	4b28      	ldr	r3, [pc, #160]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	e00b      	b.n	8004f2e <SEGGER_SYSVIEW_Start+0xea>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	1c59      	adds	r1, r3, #1
 8004f1e:	61f9      	str	r1, [r7, #28]
 8004f20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	09db      	lsrs	r3, r3, #7
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f32:	d8f0      	bhi.n	8004f16 <SEGGER_SYSVIEW_Start+0xd2>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	61fa      	str	r2, [r7, #28]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e00b      	b.n	8004f66 <SEGGER_SYSVIEW_Start+0x122>
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1c59      	adds	r1, r3, #1
 8004f56:	6179      	str	r1, [r7, #20]
 8004f58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	09db      	lsrs	r3, r3, #7
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f6a:	d8f0      	bhi.n	8004f4e <SEGGER_SYSVIEW_Start+0x10a>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	617a      	str	r2, [r7, #20]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f7c:	2218      	movs	r2, #24
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fbdf 	bl	8004744 <_SendPacket>
      RECORD_END();
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f8c:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f9a:	f000 f9eb 	bl	8005374 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f9e:	f000 f9b1 	bl	8005304 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004fa2:	f000 fc2d 	bl	8005800 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004fa6:	bf00      	nop
 8004fa8:	3730      	adds	r7, #48	@ 0x30
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20014384 	.word	0x20014384
 8004fb4:	08005af4 	.word	0x08005af4
 8004fb8:	200143b4 	.word	0x200143b4

08004fbc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc6:	f04f 0120 	mov.w	r1, #32
 8004fca:	f381 8811 	msr	BASEPRI, r1
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	480b      	ldr	r0, [pc, #44]	@ (8005000 <SEGGER_SYSVIEW_Stop+0x44>)
 8004fd2:	f7ff fac9 	bl	8004568 <_PreparePacket>
 8004fd6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <SEGGER_SYSVIEW_Stop+0x48>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004fe0:	220b      	movs	r2, #11
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6838      	ldr	r0, [r7, #0]
 8004fe6:	f7ff fbad 	bl	8004744 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <SEGGER_SYSVIEW_Stop+0x48>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f383 8811 	msr	BASEPRI, r3
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200143b4 	.word	0x200143b4
 8005004:	20014384 	.word	0x20014384

08005008 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	@ 0x30
 800500c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800500e:	f3ef 8311 	mrs	r3, BASEPRI
 8005012:	f04f 0120 	mov.w	r1, #32
 8005016:	f381 8811 	msr	BASEPRI, r1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	4845      	ldr	r0, [pc, #276]	@ (8005134 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800501e:	f7ff faa3 	bl	8004568 <_PreparePacket>
 8005022:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502c:	4b42      	ldr	r3, [pc, #264]	@ (8005138 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005032:	e00b      	b.n	800504c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	b2da      	uxtb	r2, r3
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	1c59      	adds	r1, r3, #1
 800503c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800503e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	09db      	lsrs	r3, r3, #7
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005050:	d8f0      	bhi.n	8005034 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005060:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
 8005066:	4b34      	ldr	r3, [pc, #208]	@ (8005138 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	e00b      	b.n	8005086 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1c59      	adds	r1, r3, #1
 8005076:	6279      	str	r1, [r7, #36]	@ 0x24
 8005078:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	09db      	lsrs	r3, r3, #7
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2b7f      	cmp	r3, #127	@ 0x7f
 800508a:	d8f0      	bhi.n	800506e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	627a      	str	r2, [r7, #36]	@ 0x24
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	4b25      	ldr	r3, [pc, #148]	@ (8005138 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e00b      	b.n	80050c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	1c59      	adds	r1, r3, #1
 80050b0:	61f9      	str	r1, [r7, #28]
 80050b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	09db      	lsrs	r3, r3, #7
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050c4:	d8f0      	bhi.n	80050a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	61fa      	str	r2, [r7, #28]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	e00b      	b.n	80050f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	6179      	str	r1, [r7, #20]
 80050ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	09db      	lsrs	r3, r3, #7
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80050fc:	d8f0      	bhi.n	80050e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	617a      	str	r2, [r7, #20]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800510e:	2218      	movs	r2, #24
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	68b8      	ldr	r0, [r7, #8]
 8005114:	f7ff fb16 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005126:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	4798      	blx	r3
  }
}
 800512c:	bf00      	nop
 800512e:	3730      	adds	r7, #48	@ 0x30
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200143b4 	.word	0x200143b4
 8005138:	20014384 	.word	0x20014384

0800513c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b092      	sub	sp, #72	@ 0x48
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005144:	f3ef 8311 	mrs	r3, BASEPRI
 8005148:	f04f 0120 	mov.w	r1, #32
 800514c:	f381 8811 	msr	BASEPRI, r1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	486a      	ldr	r0, [pc, #424]	@ (80052fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005154:	f7ff fa08 	bl	8004568 <_PreparePacket>
 8005158:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	647b      	str	r3, [r7, #68]	@ 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b66      	ldr	r3, [pc, #408]	@ (8005300 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	643b      	str	r3, [r7, #64]	@ 0x40
 800516e:	e00b      	b.n	8005188 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005172:	b2da      	uxtb	r2, r3
 8005174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	6479      	str	r1, [r7, #68]	@ 0x44
 800517a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005184:	09db      	lsrs	r3, r3, #7
 8005186:	643b      	str	r3, [r7, #64]	@ 0x40
 8005188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518a:	2b7f      	cmp	r3, #127	@ 0x7f
 800518c:	d8f0      	bhi.n	8005170 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800518e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	647a      	str	r2, [r7, #68]	@ 0x44
 8005194:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051a8:	e00b      	b.n	80051c2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80051b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051be:	09db      	lsrs	r3, r3, #7
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051c6:	d8f0      	bhi.n	80051aa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80051c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff f991 	bl	8004508 <_EncodeStr>
 80051e6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80051e8:	2209      	movs	r2, #9
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	6938      	ldr	r0, [r7, #16]
 80051ee:	f7ff faa9 	bl	8004744 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b40      	ldr	r3, [pc, #256]	@ (8005300 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	633b      	str	r3, [r7, #48]	@ 0x30
 8005206:	e00b      	b.n	8005220 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	b2da      	uxtb	r2, r3
 800520c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520e:	1c59      	adds	r1, r3, #1
 8005210:	6379      	str	r1, [r7, #52]	@ 0x34
 8005212:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	09db      	lsrs	r3, r3, #7
 800521e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	2b7f      	cmp	r3, #127	@ 0x7f
 8005224:	d8f0      	bhi.n	8005208 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	637a      	str	r2, [r7, #52]	@ 0x34
 800522c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005240:	e00b      	b.n	800525a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	b2da      	uxtb	r2, r3
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800524c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	09db      	lsrs	r3, r3, #7
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	2b7f      	cmp	r3, #127	@ 0x7f
 800525e:	d8f0      	bhi.n	8005242 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	627b      	str	r3, [r7, #36]	@ 0x24
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	e00b      	b.n	8005294 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	6279      	str	r1, [r7, #36]	@ 0x24
 8005286:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	09db      	lsrs	r3, r3, #7
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	2b7f      	cmp	r3, #127	@ 0x7f
 8005298:	d8f0      	bhi.n	800527c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	627a      	str	r2, [r7, #36]	@ 0x24
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	e00b      	b.n	80052cc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	61f9      	str	r1, [r7, #28]
 80052be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	09db      	lsrs	r3, r3, #7
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80052d0:	d8f0      	bhi.n	80052b4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	61fa      	str	r2, [r7, #28]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80052e2:	2215      	movs	r2, #21
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	6938      	ldr	r0, [r7, #16]
 80052e8:	f7ff fa2c 	bl	8004744 <_SendPacket>
  RECORD_END();
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f383 8811 	msr	BASEPRI, r3
}
 80052f2:	bf00      	nop
 80052f4:	3748      	adds	r7, #72	@ 0x48
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200143b4 	.word	0x200143b4
 8005300:	20014384 	.word	0x20014384

08005304 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005308:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800531a:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4798      	blx	r3
  }
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20014384 	.word	0x20014384

0800532c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005334:	f3ef 8311 	mrs	r3, BASEPRI
 8005338:	f04f 0120 	mov.w	r1, #32
 800533c:	f381 8811 	msr	BASEPRI, r1
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	480b      	ldr	r0, [pc, #44]	@ (8005370 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005344:	f7ff f910 	bl	8004568 <_PreparePacket>
 8005348:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	6938      	ldr	r0, [r7, #16]
 8005350:	f7ff f8da 	bl	8004508 <_EncodeStr>
 8005354:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005356:	220e      	movs	r2, #14
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	6938      	ldr	r0, [r7, #16]
 800535c:	f7ff f9f2 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f383 8811 	msr	BASEPRI, r3
}
 8005366:	bf00      	nop
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	200143b4 	.word	0x200143b4

08005374 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800537a:	4b15      	ldr	r3, [pc, #84]	@ (80053d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800538c:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4798      	blx	r3
 8005394:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005398:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800539a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	000a      	movs	r2, r1
 80053a8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053aa:	4613      	mov	r3, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4621      	mov	r1, r4
 80053b0:	200d      	movs	r0, #13
 80053b2:	f7ff fbe5 	bl	8004b80 <SEGGER_SYSVIEW_RecordU32x2>
 80053b6:	e006      	b.n	80053c6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80053b8:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4619      	mov	r1, r3
 80053be:	200c      	movs	r0, #12
 80053c0:	f7ff fba2 	bl	8004b08 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20014384 	.word	0x20014384
 80053d4:	e0001004 	.word	0xe0001004

080053d8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053de:	f3ef 8311 	mrs	r3, BASEPRI
 80053e2:	f04f 0120 	mov.w	r1, #32
 80053e6:	f381 8811 	msr	BASEPRI, r1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	4819      	ldr	r0, [pc, #100]	@ (8005454 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80053ee:	f7ff f8bb 	bl	8004568 <_PreparePacket>
 80053f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80053f8:	4b17      	ldr	r3, [pc, #92]	@ (8005458 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005400:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e00b      	b.n	8005424 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	6179      	str	r1, [r7, #20]
 8005416:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	09db      	lsrs	r3, r3, #7
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b7f      	cmp	r3, #127	@ 0x7f
 8005428:	d8f0      	bhi.n	800540c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	617a      	str	r2, [r7, #20]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800543a:	2202      	movs	r2, #2
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68b8      	ldr	r0, [r7, #8]
 8005440:	f7ff f980 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f383 8811 	msr	BASEPRI, r3
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200143b4 	.word	0x200143b4
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005462:	f3ef 8311 	mrs	r3, BASEPRI
 8005466:	f04f 0120 	mov.w	r1, #32
 800546a:	f381 8811 	msr	BASEPRI, r1
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	4807      	ldr	r0, [pc, #28]	@ (8005490 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005472:	f7ff f879 	bl	8004568 <_PreparePacket>
 8005476:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005478:	2203      	movs	r2, #3
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6838      	ldr	r0, [r7, #0]
 800547e:	f7ff f961 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f383 8811 	msr	BASEPRI, r3
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200143b4 	.word	0x200143b4

08005494 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800549a:	f3ef 8311 	mrs	r3, BASEPRI
 800549e:	f04f 0120 	mov.w	r1, #32
 80054a2:	f381 8811 	msr	BASEPRI, r1
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	4807      	ldr	r0, [pc, #28]	@ (80054c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80054aa:	f7ff f85d 	bl	8004568 <_PreparePacket>
 80054ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80054b0:	2212      	movs	r2, #18
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6838      	ldr	r0, [r7, #0]
 80054b6:	f7ff f945 	bl	8004744 <_SendPacket>
  RECORD_END();
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f383 8811 	msr	BASEPRI, r3
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200143b4 	.word	0x200143b4

080054cc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054d2:	f3ef 8311 	mrs	r3, BASEPRI
 80054d6:	f04f 0120 	mov.w	r1, #32
 80054da:	f381 8811 	msr	BASEPRI, r1
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	4807      	ldr	r0, [pc, #28]	@ (8005500 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80054e2:	f7ff f841 	bl	8004568 <_PreparePacket>
 80054e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80054e8:	2211      	movs	r2, #17
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	f7ff f929 	bl	8004744 <_SendPacket>
  RECORD_END();
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f383 8811 	msr	BASEPRI, r3
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	200143b4 	.word	0x200143b4

08005504 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800550c:	f3ef 8311 	mrs	r3, BASEPRI
 8005510:	f04f 0120 	mov.w	r1, #32
 8005514:	f381 8811 	msr	BASEPRI, r1
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	4819      	ldr	r0, [pc, #100]	@ (8005580 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800551c:	f7ff f824 	bl	8004568 <_PreparePacket>
 8005520:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005526:	4b17      	ldr	r3, [pc, #92]	@ (8005584 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	e00b      	b.n	8005552 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	1c59      	adds	r1, r3, #1
 8005542:	61f9      	str	r1, [r7, #28]
 8005544:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	09db      	lsrs	r3, r3, #7
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b7f      	cmp	r3, #127	@ 0x7f
 8005556:	d8f0      	bhi.n	800553a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	61fa      	str	r2, [r7, #28]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005568:	2208      	movs	r2, #8
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	6938      	ldr	r0, [r7, #16]
 800556e:	f7ff f8e9 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f383 8811 	msr	BASEPRI, r3
}
 8005578:	bf00      	nop
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200143b4 	.word	0x200143b4
 8005584:	20014384 	.word	0x20014384

08005588 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005590:	f3ef 8311 	mrs	r3, BASEPRI
 8005594:	f04f 0120 	mov.w	r1, #32
 8005598:	f381 8811 	msr	BASEPRI, r1
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	4819      	ldr	r0, [pc, #100]	@ (8005604 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80055a0:	f7fe ffe2 	bl	8004568 <_PreparePacket>
 80055a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055aa:	4b17      	ldr	r3, [pc, #92]	@ (8005608 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e00b      	b.n	80055d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c59      	adds	r1, r3, #1
 80055c6:	61f9      	str	r1, [r7, #28]
 80055c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	09db      	lsrs	r3, r3, #7
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055da:	d8f0      	bhi.n	80055be <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80055ec:	2204      	movs	r2, #4
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	6938      	ldr	r0, [r7, #16]
 80055f2:	f7ff f8a7 	bl	8004744 <_SendPacket>
  RECORD_END();
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f383 8811 	msr	BASEPRI, r3
}
 80055fc:	bf00      	nop
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	200143b4 	.word	0x200143b4
 8005608:	20014384 	.word	0x20014384

0800560c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005614:	f3ef 8311 	mrs	r3, BASEPRI
 8005618:	f04f 0120 	mov.w	r1, #32
 800561c:	f381 8811 	msr	BASEPRI, r1
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	4819      	ldr	r0, [pc, #100]	@ (8005688 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005624:	f7fe ffa0 	bl	8004568 <_PreparePacket>
 8005628:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800562e:	4b17      	ldr	r3, [pc, #92]	@ (800568c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e00b      	b.n	800565a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	1c59      	adds	r1, r3, #1
 800564a:	61f9      	str	r1, [r7, #28]
 800564c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	09db      	lsrs	r3, r3, #7
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b7f      	cmp	r3, #127	@ 0x7f
 800565e:	d8f0      	bhi.n	8005642 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	61fa      	str	r2, [r7, #28]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005670:	2206      	movs	r2, #6
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	6938      	ldr	r0, [r7, #16]
 8005676:	f7ff f865 	bl	8004744 <_SendPacket>
  RECORD_END();
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f383 8811 	msr	BASEPRI, r3
}
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	200143b4 	.word	0x200143b4
 800568c:	20014384 	.word	0x20014384

08005690 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20014384 	.word	0x20014384

080056b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	@ 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80056ba:	4b40      	ldr	r3, [pc, #256]	@ (80057bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d077      	beq.n	80057b2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80056c2:	4b3e      	ldr	r3, [pc, #248]	@ (80057bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80056c8:	2300      	movs	r3, #0
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056cc:	e008      	b.n	80056e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80056ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80056da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056dc:	3301      	adds	r3, #1
 80056de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d3f2      	bcc.n	80056ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80056e8:	e000      	b.n	80056ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80056ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80056ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d055      	beq.n	800579e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056f2:	f3ef 8311 	mrs	r3, BASEPRI
 80056f6:	f04f 0120 	mov.w	r1, #32
 80056fa:	f381 8811 	msr	BASEPRI, r1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	482f      	ldr	r0, [pc, #188]	@ (80057c0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005702:	f7fe ff31 	bl	8004568 <_PreparePacket>
 8005706:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	e00b      	b.n	800572e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005720:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	2b7f      	cmp	r3, #127	@ 0x7f
 8005732:	d8f0      	bhi.n	8005716 <SEGGER_SYSVIEW_SendModule+0x66>
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	627a      	str	r2, [r7, #36]	@ 0x24
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	e00b      	b.n	8005768 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	61f9      	str	r1, [r7, #28]
 800575a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	09db      	lsrs	r3, r3, #7
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b7f      	cmp	r3, #127	@ 0x7f
 800576c:	d8f0      	bhi.n	8005750 <SEGGER_SYSVIEW_SendModule+0xa0>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	61fa      	str	r2, [r7, #28]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2280      	movs	r2, #128	@ 0x80
 8005784:	4619      	mov	r1, r3
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f7fe febe 	bl	8004508 <_EncodeStr>
 800578c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800578e:	2216      	movs	r2, #22
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	6938      	ldr	r0, [r7, #16]
 8005794:	f7fe ffd6 	bl	8004744 <_SendPacket>
      RECORD_END();
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d006      	beq.n	80057b2 <SEGGER_SYSVIEW_SendModule+0x102>
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80057ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4798      	blx	r3
    }
  }
}
 80057b2:	bf00      	nop
 80057b4:	3730      	adds	r7, #48	@ 0x30
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200143ac 	.word	0x200143ac
 80057c0:	200143b4 	.word	0x200143b4

080057c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80057ca:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00f      	beq.n	80057f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f2      	bne.n	80057d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200143ac 	.word	0x200143ac

08005800 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005806:	f3ef 8311 	mrs	r3, BASEPRI
 800580a:	f04f 0120 	mov.w	r1, #32
 800580e:	f381 8811 	msr	BASEPRI, r1
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	4817      	ldr	r0, [pc, #92]	@ (8005874 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005816:	f7fe fea7 	bl	8004568 <_PreparePacket>
 800581a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	4b14      	ldr	r3, [pc, #80]	@ (8005878 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e00b      	b.n	8005844 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1c59      	adds	r1, r3, #1
 8005834:	6179      	str	r1, [r7, #20]
 8005836:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	09db      	lsrs	r3, r3, #7
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b7f      	cmp	r3, #127	@ 0x7f
 8005848:	d8f0      	bhi.n	800582c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	617a      	str	r2, [r7, #20]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800585a:	221b      	movs	r2, #27
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68b8      	ldr	r0, [r7, #8]
 8005860:	f7fe ff70 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f383 8811 	msr	BASEPRI, r3
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200143b4 	.word	0x200143b4
 8005878:	200143b0 	.word	0x200143b0

0800587c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005884:	f3ef 8311 	mrs	r3, BASEPRI
 8005888:	f04f 0120 	mov.w	r1, #32
 800588c:	f381 8811 	msr	BASEPRI, r1
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	4827      	ldr	r0, [pc, #156]	@ (8005930 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005894:	f7fe fe68 	bl	8004568 <_PreparePacket>
 8005898:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800589a:	2280      	movs	r2, #128	@ 0x80
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	6938      	ldr	r0, [r7, #16]
 80058a0:	f7fe fe32 	bl	8004508 <_EncodeStr>
 80058a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058aa:	2301      	movs	r3, #1
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	e00b      	b.n	80058c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80058ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	09db      	lsrs	r3, r3, #7
 80058c6:	623b      	str	r3, [r7, #32]
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80058cc:	d8f0      	bhi.n	80058b0 <SEGGER_SYSVIEW_Warn+0x34>
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e00b      	b.n	8005900 <SEGGER_SYSVIEW_Warn+0x84>
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	1c59      	adds	r1, r3, #1
 80058f0:	61f9      	str	r1, [r7, #28]
 80058f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	09db      	lsrs	r3, r3, #7
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b7f      	cmp	r3, #127	@ 0x7f
 8005904:	d8f0      	bhi.n	80058e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	61fa      	str	r2, [r7, #28]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005916:	221a      	movs	r2, #26
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	6938      	ldr	r0, [r7, #16]
 800591c:	f7fe ff12 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f383 8811 	msr	BASEPRI, r3
}
 8005926:	bf00      	nop
 8005928:	3728      	adds	r7, #40	@ 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	200143b4 	.word	0x200143b4

08005934 <memcmp>:
 8005934:	b510      	push	{r4, lr}
 8005936:	3901      	subs	r1, #1
 8005938:	4402      	add	r2, r0
 800593a:	4290      	cmp	r0, r2
 800593c:	d101      	bne.n	8005942 <memcmp+0xe>
 800593e:	2000      	movs	r0, #0
 8005940:	e005      	b.n	800594e <memcmp+0x1a>
 8005942:	7803      	ldrb	r3, [r0, #0]
 8005944:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005948:	42a3      	cmp	r3, r4
 800594a:	d001      	beq.n	8005950 <memcmp+0x1c>
 800594c:	1b18      	subs	r0, r3, r4
 800594e:	bd10      	pop	{r4, pc}
 8005950:	3001      	adds	r0, #1
 8005952:	e7f2      	b.n	800593a <memcmp+0x6>

08005954 <memset>:
 8005954:	4402      	add	r2, r0
 8005956:	4603      	mov	r3, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	f803 1b01 	strb.w	r1, [r3], #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <__libc_init_array>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4d0d      	ldr	r5, [pc, #52]	@ (800599c <__libc_init_array+0x38>)
 8005968:	4c0d      	ldr	r4, [pc, #52]	@ (80059a0 <__libc_init_array+0x3c>)
 800596a:	1b64      	subs	r4, r4, r5
 800596c:	10a4      	asrs	r4, r4, #2
 800596e:	2600      	movs	r6, #0
 8005970:	42a6      	cmp	r6, r4
 8005972:	d109      	bne.n	8005988 <__libc_init_array+0x24>
 8005974:	4d0b      	ldr	r5, [pc, #44]	@ (80059a4 <__libc_init_array+0x40>)
 8005976:	4c0c      	ldr	r4, [pc, #48]	@ (80059a8 <__libc_init_array+0x44>)
 8005978:	f000 f826 	bl	80059c8 <_init>
 800597c:	1b64      	subs	r4, r4, r5
 800597e:	10a4      	asrs	r4, r4, #2
 8005980:	2600      	movs	r6, #0
 8005982:	42a6      	cmp	r6, r4
 8005984:	d105      	bne.n	8005992 <__libc_init_array+0x2e>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	f855 3b04 	ldr.w	r3, [r5], #4
 800598c:	4798      	blx	r3
 800598e:	3601      	adds	r6, #1
 8005990:	e7ee      	b.n	8005970 <__libc_init_array+0xc>
 8005992:	f855 3b04 	ldr.w	r3, [r5], #4
 8005996:	4798      	blx	r3
 8005998:	3601      	adds	r6, #1
 800599a:	e7f2      	b.n	8005982 <__libc_init_array+0x1e>
 800599c:	08005b08 	.word	0x08005b08
 80059a0:	08005b08 	.word	0x08005b08
 80059a4:	08005b08 	.word	0x08005b08
 80059a8:	08005b0c 	.word	0x08005b0c

080059ac <memcpy>:
 80059ac:	440a      	add	r2, r1
 80059ae:	4291      	cmp	r1, r2
 80059b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b4:	d100      	bne.n	80059b8 <memcpy+0xc>
 80059b6:	4770      	bx	lr
 80059b8:	b510      	push	{r4, lr}
 80059ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059c2:	4291      	cmp	r1, r2
 80059c4:	d1f9      	bne.n	80059ba <memcpy+0xe>
 80059c6:	bd10      	pop	{r4, pc}

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
