
1_UltraSuonar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004348  08004348  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004350  08004350  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  080043c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080043c8  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c198  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cbc  00000000  00000000  0002c238  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  0002def8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f90  00000000  00000000  0002f600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b58  00000000  00000000  00046590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c89a  00000000  00000000  0004f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000dba00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004260 	.word	0x08004260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004260 	.word	0x08004260

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <main>:
uint32_t pMillis;
uint32_t val1 = 0;
uint32_t val2 = 0;
uint16_t distance  = 0;
int main(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
	int count = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 fbd7 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f89b 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 f99d 	bl	80010b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d76:	f000 f901 	bl	8000f7c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d7a:	f000 f94b 	bl	8001014 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 1 */
	HAL_TIM_Base_Start(&htim2);
 8000d7e:	4842      	ldr	r0, [pc, #264]	; (8000e88 <main+0x128>)
 8000d80:	f001 fb5f 	bl	8002442 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2102      	movs	r1, #2
 8000d88:	4840      	ldr	r0, [pc, #256]	; (8000e8c <main+0x12c>)
 8000d8a:	f000 fea7 	bl	8001adc <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	483e      	ldr	r0, [pc, #248]	; (8000e8c <main+0x12c>)
 8000d94:	f000 fea2 	bl	8001adc <HAL_GPIO_WritePin>
	  	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <main+0x128>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
	  	   while (__HAL_TIM_GET_COUNTER (&htim2) < 10);
 8000da0:	bf00      	nop
 8000da2:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <main+0x128>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d9fa      	bls.n	8000da2 <main+0x42>

	  	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	4836      	ldr	r0, [pc, #216]	; (8000e8c <main+0x12c>)
 8000db2:	f000 fe93 	bl	8001adc <HAL_GPIO_WritePin>

	  	   pMillis = HAL_GetTick();
 8000db6:	f000 fbe7 	bl	8001588 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <main+0x130>)
 8000dbe:	601a      	str	r2, [r3, #0]
	  	   while (!(HAL_GPIO_ReadPin (ECCO_PORT, ECCO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000dc0:	bf00      	nop
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4831      	ldr	r0, [pc, #196]	; (8000e8c <main+0x12c>)
 8000dc6:	f000 fe71 	bl	8001aac <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d108      	bne.n	8000de2 <main+0x82>
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <main+0x130>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f103 040a 	add.w	r4, r3, #10
 8000dd8:	f000 fbd6 	bl	8001588 <HAL_GetTick>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	d8ef      	bhi.n	8000dc2 <main+0x62>
	  	   val1 = __HAL_TIM_GET_COUNTER (&htim2);
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <main+0x128>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <main+0x134>)
 8000dea:	6013      	str	r3, [r2, #0]

	  	   pMillis = HAL_GetTick();
 8000dec:	f000 fbcc 	bl	8001588 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <main+0x130>)
 8000df4:	601a      	str	r2, [r3, #0]
	  	   while ((HAL_GPIO_ReadPin (ECCO_PORT, ECCO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000df6:	bf00      	nop
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4824      	ldr	r0, [pc, #144]	; (8000e8c <main+0x12c>)
 8000dfc:	f000 fe56 	bl	8001aac <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <main+0xb8>
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <main+0x130>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e0e:	f000 fbbb 	bl	8001588 <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d8ef      	bhi.n	8000df8 <main+0x98>
	  	   val2 = __HAL_TIM_GET_COUNTER (&htim2);
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <main+0x128>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <main+0x138>)
 8000e20:	6013      	str	r3, [r2, #0]

	  	   distance = (val2-val1)* 0.034/2;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <main+0x138>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <main+0x134>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb69 	bl	8000504 <__aeabi_ui2d>
 8000e32:	a313      	add	r3, pc, #76	; (adr r3, 8000e80 <main+0x120>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fbde 	bl	80005f8 <__aeabi_dmul>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	460c      	mov	r4, r1
 8000e40:	4618      	mov	r0, r3
 8000e42:	4621      	mov	r1, r4
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4c:	f7ff fcfe 	bl	800084c <__aeabi_ddiv>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	4618      	mov	r0, r3
 8000e56:	4621      	mov	r1, r4
 8000e58:	f7ff fde0 	bl	8000a1c <__aeabi_d2uiz>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <main+0x13c>)
 8000e62:	801a      	strh	r2, [r3, #0]
	  	  printf("Sensor is working...\r\n");
 8000e64:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <main+0x140>)
 8000e66:	f002 fb27 	bl	80034b8 <puts>
	  	   printf("%d cm\r\n",distance);
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <main+0x13c>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <main+0x144>)
 8000e72:	f002 faad 	bl	80033d0 <iprintf>
	  	   HAL_Delay(50);
 8000e76:	2032      	movs	r0, #50	; 0x32
 8000e78:	f000 fb92 	bl	80015a0 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000e7c:	e787      	b.n	8000d8e <main+0x2e>
 8000e7e:	bf00      	nop
 8000e80:	b020c49c 	.word	0xb020c49c
 8000e84:	3fa16872 	.word	0x3fa16872
 8000e88:	200000a8 	.word	0x200000a8
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	200000a4 	.word	0x200000a4
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	20000090 	.word	0x20000090
 8000e9c:	20000094 	.word	0x20000094
 8000ea0:	08004278 	.word	0x08004278
 8000ea4:	08004290 	.word	0x08004290

08000ea8 <SystemClock_Config>:
  * @retval None
  */


void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fa82 	bl	80033c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef4:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f10:	2310      	movs	r3, #16
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f14:	2302      	movs	r3, #2
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f20:	2348      	movs	r3, #72	; 0x48
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fded 	bl	8001b10 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f3c:	f000 f8f2 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 f847 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f68:	f000 f8dc 	bl	8001124 <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_TIM2_Init+0x94>)
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fa2:	2247      	movs	r2, #71	; 0x47
 8000fa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fc2:	f001 fa13 	bl	80023ec <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fcc:	f000 f8aa 	bl	8001124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_TIM2_Init+0x94>)
 8000fde:	f001 fb80 	bl	80026e2 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe8:	f000 f89c 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_TIM2_Init+0x94>)
 8000ffa:	f001 fd6b 	bl	8002ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001004:	f000 f88e 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000a8 	.word	0x200000a8

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART2_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800104c:	f001 fdc4 	bl	8002bd8 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f865 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000e8 	.word	0x200000e8
 8001064:	40004400 	.word	0x40004400

08001068 <uart2_write>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
int uart2_write(int ch)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	while (!(USART2->SR &0x0080)){}
 8001070:	bf00      	nop
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <uart2_write+0x2c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <uart2_write+0x2c>)
 8001082:	b2db      	uxtb	r3, r3
 8001084:	6053      	str	r3, [r2, #4]

	return ch;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40004400 	.word	0x40004400

08001098 <__io_putchar>:

int __io_putchar(int ch)
	{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe1 	bl	8001068 <uart2_write>
	return ch;
 80010a6:	687b      	ldr	r3, [r7, #4]
	}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_GPIO_Init+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <MX_GPIO_Init+0x4c>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_GPIO_Init+0x4c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_GPIO_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <MX_GPIO_Init+0x4c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_GPIO_Init+0x4c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f000 fa25 	bl	8001560 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010000 	.word	0x40010000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_MspInit+0x4c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x4c>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001194:	d10d      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_UART_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12b      	bne.n	800123e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x88>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_MspInit+0x88>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_UART_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800121e:	230c      	movs	r3, #12
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122e:	2307      	movs	r3, #7
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0x8c>)
 800123a:	f000 fab5 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40004400 	.word	0x40004400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2019      	movs	r0, #25
 800126a:	f000 fa73 	bl	8001754 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800126e:	2019      	movs	r0, #25
 8001270:	f000 fa8c 	bl	800178c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_InitTick+0xa0>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_InitTick+0xa0>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6453      	str	r3, [r2, #68]	; 0x44
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_InitTick+0xa0>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f874 	bl	8002388 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012a0:	f001 f85e 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80012a4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <HAL_InitTick+0xa4>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9b      	lsrs	r3, r3, #18
 80012b0:	3b01      	subs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_InitTick+0xa8>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_InitTick+0xac>)
 80012b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_InitTick+0xa8>)
 80012bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_InitTick+0xa8>)
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_InitTick+0xa8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_InitTick+0xa8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <HAL_InitTick+0xa8>)
 80012d6:	f001 f889 	bl	80023ec <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d104      	bne.n	80012ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <HAL_InitTick+0xa8>)
 80012e2:	f001 f8d2 	bl	800248a <HAL_TIM_Base_Start_IT>
 80012e6:	4603      	mov	r3, r0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3730      	adds	r7, #48	; 0x30
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	20000128 	.word	0x20000128
 8001300:	40010000 	.word	0x40010000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800135a:	f001 f8ba 	bl	80024d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000128 	.word	0x20000128

08001368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
	}

return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe6b 	bl	8001098 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
	}
	return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	605a      	str	r2, [r3, #4]
	return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x50>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x16>
		heap_end = &end;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <_sbrk+0x50>)
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <_sbrk+0x54>)
 8001458:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <_sbrk+0x50>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <_sbrk+0x50>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	466a      	mov	r2, sp
 800146a:	4293      	cmp	r3, r2
 800146c:	d907      	bls.n	800147e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800146e:	f001 ff7d 	bl	800336c <__errno>
 8001472:	4602      	mov	r2, r0
 8001474:	230c      	movs	r3, #12
 8001476:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	e006      	b.n	800148c <_sbrk+0x48>
	}

	heap_end += incr;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <_sbrk+0x50>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a03      	ldr	r2, [pc, #12]	; (8001494 <_sbrk+0x50>)
 8001488:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000098 	.word	0x20000098
 8001498:	20000170 	.word	0x20000170

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SystemInit+0x28>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <SystemInit+0x28>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SystemInit+0x28>)
 80014b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b6:	609a      	str	r2, [r3, #8]
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
  ldr  r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f2:	f7ff ffd3 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f001 ff3f 	bl	8003378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff fc31 	bl	8000d60 <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001504:	08004358 	.word	0x08004358
  ldr  r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800150c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001510:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001514:	20000170 	.word	0x20000170

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f8fa 	bl	800173e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fe82 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fdf0 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	20000168 	.word	0x20000168

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000168 	.word	0x20000168

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_Delay+0x40>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff4c 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001766:	f7ff ff61 	bl	800162c <__NVIC_GetPriorityGrouping>
 800176a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff ffb1 	bl	80016d8 <NVIC_EncodePriority>
 8001776:	4602      	mov	r2, r0
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff80 	bl	8001684 <__NVIC_SetPriority>
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff54 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e159      	b.n	8001a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8148 	bne.w	8001a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d00b      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f6:	2b11      	cmp	r3, #17
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0xfc>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a2 	beq.w	8001a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x202>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x1fe>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a46      	ldr	r2, [pc, #280]	; (8001a9c <HAL_GPIO_Init+0x2f4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a45      	ldr	r2, [pc, #276]	; (8001aa0 <HAL_GPIO_Init+0x2f8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x1f6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a44      	ldr	r2, [pc, #272]	; (8001aa4 <HAL_GPIO_Init+0x2fc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x1f2>
 8001996:	2304      	movs	r3, #4
 8001998:	e008      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199a:	2307      	movs	r3, #7
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019aa:	2300      	movs	r3, #0
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019bc:	4934      	ldr	r1, [pc, #208]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ee:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a18:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	f67f aea2 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a80:	bf00      	nop
 8001a82:	3724      	adds	r7, #36	; 0x24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40013c00 	.word	0x40013c00

08001aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e25b      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	4ba3      	ldr	r3, [pc, #652]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b9d      	ldr	r3, [pc, #628]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e236      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x74>
 8001b76:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a90      	ldr	r2, [pc, #576]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a8a      	ldr	r2, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a87      	ldr	r2, [pc, #540]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a83      	ldr	r2, [pc, #524]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a80      	ldr	r2, [pc, #512]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fcde 	bl	8001588 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fcda 	bl	8001588 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1fb      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fcca 	bl	8001588 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fcc6 	bl	8001588 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1e7      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1bb      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4952      	ldr	r1, [pc, #328]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_RCC_OscConfig+0x2b0>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fc7f 	bl	8001588 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fc7b 	bl	8001588 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e19c      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4940      	ldr	r1, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x2b0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fc5e 	bl	8001588 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc5a 	bl	8001588 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e17b      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d030      	beq.n	8001d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff fc3e 	bl	8001588 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc3a 	bl	8001588 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e15b      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x200>
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x2b4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fc27 	bl	8001588 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc23 	bl	8001588 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e144      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a0 	beq.w	8001eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x2b8>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fbe9 	bl	8001588 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e011      	b.n	8001dde <HAL_RCC_OscConfig+0x2ce>
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
 8001dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7ff fbdc 	bl	8001588 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0fd      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x4d4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
 8001df2:	4b7d      	ldr	r3, [pc, #500]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a7c      	ldr	r2, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	e01c      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d10c      	bne.n	8001e22 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a76      	ldr	r2, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a73      	ldr	r2, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	e00b      	b.n	8001e3a <HAL_RCC_OscConfig+0x32a>
 8001e22:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d015      	beq.n	8001e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff fba1 	bl	8001588 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7ff fb9d 	bl	8001588 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0bc      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ee      	beq.n	8001e4a <HAL_RCC_OscConfig+0x33a>
 8001e6c:	e014      	b.n	8001e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb8b 	bl	8001588 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff fb87 	bl	8001588 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0a6      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8092 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d05c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d141      	bne.n	8001f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec8:	4b48      	ldr	r3, [pc, #288]	; (8001fec <HAL_RCC_OscConfig+0x4dc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fb5b 	bl	8001588 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fb57 	bl	8001588 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e078      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	019b      	lsls	r3, r3, #6
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	4933      	ldr	r1, [pc, #204]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fb30 	bl	8001588 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff fb2c 	bl	8001588 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e04d      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x41c>
 8001f4a:	e045      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x4dc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fb19 	bl	8001588 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff fb15 	bl	8001588 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e036      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x44a>
 8001f78:	e02e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e029      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_RCC_OscConfig+0x4d8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d115      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fae:	4013      	ands	r3, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470060 	.word	0x42470060

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7ff fa52 	bl	8001588 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff fa4e 	bl	8001588 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f85c 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08004298 	.word	0x08004298
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d2:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d007      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x32>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d008      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x38>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 808d 	bne.w	8002302 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021ea:	60bb      	str	r3, [r7, #8]
       break;
 80021ec:	e08c      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ee:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_GetSysClockFreq+0x160>)
 80021f0:	60bb      	str	r3, [r7, #8]
      break;
 80021f2:	e089      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d023      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	f04f 0400 	mov.w	r4, #0
 8002214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	ea03 0501 	and.w	r5, r3, r1
 8002220:	ea04 0602 	and.w	r6, r4, r2
 8002224:	4a3d      	ldr	r2, [pc, #244]	; (800231c <HAL_RCC_GetSysClockFreq+0x160>)
 8002226:	fb02 f106 	mul.w	r1, r2, r6
 800222a:	2200      	movs	r2, #0
 800222c:	fb02 f205 	mul.w	r2, r2, r5
 8002230:	440a      	add	r2, r1
 8002232:	493a      	ldr	r1, [pc, #232]	; (800231c <HAL_RCC_GetSysClockFreq+0x160>)
 8002234:	fba5 0101 	umull	r0, r1, r5, r1
 8002238:	1853      	adds	r3, r2, r1
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	461a      	mov	r2, r3
 8002244:	4623      	mov	r3, r4
 8002246:	f7fe fc09 	bl	8000a5c <__aeabi_uldivmod>
 800224a:	4603      	mov	r3, r0
 800224c:	460c      	mov	r4, r1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e049      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	f04f 0400 	mov.w	r4, #0
 800225c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	ea03 0501 	and.w	r5, r3, r1
 8002268:	ea04 0602 	and.w	r6, r4, r2
 800226c:	4629      	mov	r1, r5
 800226e:	4632      	mov	r2, r6
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	f04f 0400 	mov.w	r4, #0
 8002278:	0154      	lsls	r4, r2, #5
 800227a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800227e:	014b      	lsls	r3, r1, #5
 8002280:	4619      	mov	r1, r3
 8002282:	4622      	mov	r2, r4
 8002284:	1b49      	subs	r1, r1, r5
 8002286:	eb62 0206 	sbc.w	r2, r2, r6
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	f04f 0400 	mov.w	r4, #0
 8002292:	0194      	lsls	r4, r2, #6
 8002294:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002298:	018b      	lsls	r3, r1, #6
 800229a:	1a5b      	subs	r3, r3, r1
 800229c:	eb64 0402 	sbc.w	r4, r4, r2
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	00e2      	lsls	r2, r4, #3
 80022aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022ae:	00d9      	lsls	r1, r3, #3
 80022b0:	460b      	mov	r3, r1
 80022b2:	4614      	mov	r4, r2
 80022b4:	195b      	adds	r3, r3, r5
 80022b6:	eb44 0406 	adc.w	r4, r4, r6
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	02a2      	lsls	r2, r4, #10
 80022c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022c8:	0299      	lsls	r1, r3, #10
 80022ca:	460b      	mov	r3, r1
 80022cc:	4614      	mov	r4, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	f7fe fbbe 	bl	8000a5c <__aeabi_uldivmod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetSysClockFreq+0x158>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	3301      	adds	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	60bb      	str	r3, [r7, #8]
      break;
 8002300:	e002      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002304:	60bb      	str	r3, [r7, #8]
      break;
 8002306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002308:	68bb      	ldr	r3, [r7, #8]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	017d7840 	.word	0x017d7840

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_GetHCLKFreq+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff0 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002340:	4601      	mov	r1, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	080042a8 	.word	0x080042a8

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002364:	f7ff ffdc 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002368:	4601      	mov	r1, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0b5b      	lsrs	r3, r3, #13
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	080042a8 	.word	0x080042a8

08002388 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	220f      	movs	r2, #15
 8002396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_GetClockConfig+0x5c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0203 	and.w	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCC_GetClockConfig+0x60>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 020f 	and.w	r2, r3, #15
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40023c00 	.word	0x40023c00

080023ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e01d      	b.n	800243a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe feb6 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f000 fa38 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d007      	beq.n	8002474 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d007      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d122      	bne.n	800252e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d11b      	bne.n	800252e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0202 	mvn.w	r2, #2
 80024fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f9a5 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 800251a:	e005      	b.n	8002528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f997 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9a8 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d122      	bne.n	8002582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d11b      	bne.n	8002582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0204 	mvn.w	r2, #4
 8002552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f97b 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 800256e:	e005      	b.n	800257c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f96d 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f97e 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b08      	cmp	r3, #8
 800258e:	d122      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11b      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f06f 0208 	mvn.w	r2, #8
 80025a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f951 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 80025c2:	e005      	b.n	80025d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f943 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f954 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d122      	bne.n	800262a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d11b      	bne.n	800262a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0210 	mvn.w	r2, #16
 80025fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2208      	movs	r2, #8
 8002600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f927 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8002616:	e005      	b.n	8002624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f919 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f92a 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10e      	bne.n	8002656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f06f 0201 	mvn.w	r2, #1
 800264e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe fd55 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d10e      	bne.n	8002682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d107      	bne.n	8002682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 faa1 	bl	8002bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d10e      	bne.n	80026ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d107      	bne.n	80026ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f8ef 	bl	800288c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d10e      	bne.n	80026da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d107      	bne.n	80026da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0220 	mvn.w	r2, #32
 80026d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fa6b 	bl	8002bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_ConfigClockSource+0x18>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0a6      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x166>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002718:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002720:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d067      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x120>
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d80b      	bhi.n	800274e <HAL_TIM_ConfigClockSource+0x6c>
 8002736:	2b10      	cmp	r3, #16
 8002738:	d073      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x140>
 800273a:	2b10      	cmp	r3, #16
 800273c:	d802      	bhi.n	8002744 <HAL_TIM_ConfigClockSource+0x62>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06f      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002742:	e078      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002744:	2b20      	cmp	r3, #32
 8002746:	d06c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x140>
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d06a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800274c:	e073      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800274e:	2b70      	cmp	r3, #112	; 0x70
 8002750:	d00d      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x8c>
 8002752:	2b70      	cmp	r3, #112	; 0x70
 8002754:	d804      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x7e>
 8002756:	2b50      	cmp	r3, #80	; 0x50
 8002758:	d033      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xe0>
 800275a:	2b60      	cmp	r3, #96	; 0x60
 800275c:	d041      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800275e:	e06a      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	d066      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0x152>
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d017      	beq.n	800279c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800276c:	e063      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f000 f989 	bl	8002a94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002790:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
      break;
 800279a:	e04c      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f000 f972 	bl	8002a94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e039      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f8e6 	bl	80029a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	; 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f93f 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 80027e0:	e029      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f905 	bl	80029fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	; 0x60
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f92f 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002800:	e019      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f8c6 	bl	80029a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f91f 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002820:	e009      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 f916 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002832:	e000      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a31      	ldr	r2, [pc, #196]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a30      	ldr	r2, [pc, #192]	; (800298c <TIM_Base_SetConfig+0xec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d017      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a22      	ldr	r2, [pc, #136]	; (8002988 <TIM_Base_SetConfig+0xe8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a21      	ldr	r2, [pc, #132]	; (800298c <TIM_Base_SetConfig+0xec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a20      	ldr	r2, [pc, #128]	; (8002990 <TIM_Base_SetConfig+0xf0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <TIM_Base_SetConfig+0xf4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <TIM_Base_SetConfig+0xf8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <TIM_Base_SetConfig+0xfc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <TIM_Base_SetConfig+0xe4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0201 	bic.w	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 030a 	bic.w	r3, r3, #10
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0210 	bic.w	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	031b      	lsls	r3, r3, #12
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f043 0307 	orr.w	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e050      	b.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d013      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10c      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40014000 	.word	0x40014000

08002bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e03f      	b.n	8002c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fae0 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f829 	bl	8002c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cb6:	f023 030c 	bic.w	r3, r3, #12
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	68f9      	ldr	r1, [r7, #12]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce2:	f040 818b 	bne.w	8002ffc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4ac1      	ldr	r2, [pc, #772]	; (8002ff0 <UART_SetConfig+0x37c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d005      	beq.n	8002cfc <UART_SetConfig+0x88>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4abf      	ldr	r2, [pc, #764]	; (8002ff4 <UART_SetConfig+0x380>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f040 80bd 	bne.w	8002e76 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cfc:	f7ff fb30 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8002d00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	461d      	mov	r5, r3
 8002d06:	f04f 0600 	mov.w	r6, #0
 8002d0a:	46a8      	mov	r8, r5
 8002d0c:	46b1      	mov	r9, r6
 8002d0e:	eb18 0308 	adds.w	r3, r8, r8
 8002d12:	eb49 0409 	adc.w	r4, r9, r9
 8002d16:	4698      	mov	r8, r3
 8002d18:	46a1      	mov	r9, r4
 8002d1a:	eb18 0805 	adds.w	r8, r8, r5
 8002d1e:	eb49 0906 	adc.w	r9, r9, r6
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d36:	4688      	mov	r8, r1
 8002d38:	4691      	mov	r9, r2
 8002d3a:	eb18 0005 	adds.w	r0, r8, r5
 8002d3e:	eb49 0106 	adc.w	r1, r9, r6
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	461d      	mov	r5, r3
 8002d48:	f04f 0600 	mov.w	r6, #0
 8002d4c:	196b      	adds	r3, r5, r5
 8002d4e:	eb46 0406 	adc.w	r4, r6, r6
 8002d52:	461a      	mov	r2, r3
 8002d54:	4623      	mov	r3, r4
 8002d56:	f7fd fe81 	bl	8000a5c <__aeabi_uldivmod>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4ba5      	ldr	r3, [pc, #660]	; (8002ff8 <UART_SetConfig+0x384>)
 8002d62:	fba3 2302 	umull	r2, r3, r3, r2
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	461d      	mov	r5, r3
 8002d70:	f04f 0600 	mov.w	r6, #0
 8002d74:	46a9      	mov	r9, r5
 8002d76:	46b2      	mov	sl, r6
 8002d78:	eb19 0309 	adds.w	r3, r9, r9
 8002d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d80:	4699      	mov	r9, r3
 8002d82:	46a2      	mov	sl, r4
 8002d84:	eb19 0905 	adds.w	r9, r9, r5
 8002d88:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002da0:	4689      	mov	r9, r1
 8002da2:	4692      	mov	sl, r2
 8002da4:	eb19 0005 	adds.w	r0, r9, r5
 8002da8:	eb4a 0106 	adc.w	r1, sl, r6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	461d      	mov	r5, r3
 8002db2:	f04f 0600 	mov.w	r6, #0
 8002db6:	196b      	adds	r3, r5, r5
 8002db8:	eb46 0406 	adc.w	r4, r6, r6
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	f7fd fe4c 	bl	8000a5c <__aeabi_uldivmod>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b8b      	ldr	r3, [pc, #556]	; (8002ff8 <UART_SetConfig+0x384>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	3332      	adds	r3, #50	; 0x32
 8002dde:	4a86      	ldr	r2, [pc, #536]	; (8002ff8 <UART_SetConfig+0x384>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dec:	4498      	add	r8, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	461d      	mov	r5, r3
 8002df2:	f04f 0600 	mov.w	r6, #0
 8002df6:	46a9      	mov	r9, r5
 8002df8:	46b2      	mov	sl, r6
 8002dfa:	eb19 0309 	adds.w	r3, r9, r9
 8002dfe:	eb4a 040a 	adc.w	r4, sl, sl
 8002e02:	4699      	mov	r9, r3
 8002e04:	46a2      	mov	sl, r4
 8002e06:	eb19 0905 	adds.w	r9, r9, r5
 8002e0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e22:	4689      	mov	r9, r1
 8002e24:	4692      	mov	sl, r2
 8002e26:	eb19 0005 	adds.w	r0, r9, r5
 8002e2a:	eb4a 0106 	adc.w	r1, sl, r6
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	461d      	mov	r5, r3
 8002e34:	f04f 0600 	mov.w	r6, #0
 8002e38:	196b      	adds	r3, r5, r5
 8002e3a:	eb46 0406 	adc.w	r4, r6, r6
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4623      	mov	r3, r4
 8002e42:	f7fd fe0b 	bl	8000a5c <__aeabi_uldivmod>
 8002e46:	4603      	mov	r3, r0
 8002e48:	460c      	mov	r4, r1
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <UART_SetConfig+0x384>)
 8002e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2164      	movs	r1, #100	; 0x64
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	3332      	adds	r3, #50	; 0x32
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <UART_SetConfig+0x384>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	f003 0207 	and.w	r2, r3, #7
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4442      	add	r2, r8
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	e26f      	b.n	8003356 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e76:	f7ff fa5f 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002e7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	461d      	mov	r5, r3
 8002e80:	f04f 0600 	mov.w	r6, #0
 8002e84:	46a8      	mov	r8, r5
 8002e86:	46b1      	mov	r9, r6
 8002e88:	eb18 0308 	adds.w	r3, r8, r8
 8002e8c:	eb49 0409 	adc.w	r4, r9, r9
 8002e90:	4698      	mov	r8, r3
 8002e92:	46a1      	mov	r9, r4
 8002e94:	eb18 0805 	adds.w	r8, r8, r5
 8002e98:	eb49 0906 	adc.w	r9, r9, r6
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ea8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002eac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002eb0:	4688      	mov	r8, r1
 8002eb2:	4691      	mov	r9, r2
 8002eb4:	eb18 0005 	adds.w	r0, r8, r5
 8002eb8:	eb49 0106 	adc.w	r1, r9, r6
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	461d      	mov	r5, r3
 8002ec2:	f04f 0600 	mov.w	r6, #0
 8002ec6:	196b      	adds	r3, r5, r5
 8002ec8:	eb46 0406 	adc.w	r4, r6, r6
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4623      	mov	r3, r4
 8002ed0:	f7fd fdc4 	bl	8000a5c <__aeabi_uldivmod>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <UART_SetConfig+0x384>)
 8002edc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	461d      	mov	r5, r3
 8002eea:	f04f 0600 	mov.w	r6, #0
 8002eee:	46a9      	mov	r9, r5
 8002ef0:	46b2      	mov	sl, r6
 8002ef2:	eb19 0309 	adds.w	r3, r9, r9
 8002ef6:	eb4a 040a 	adc.w	r4, sl, sl
 8002efa:	4699      	mov	r9, r3
 8002efc:	46a2      	mov	sl, r4
 8002efe:	eb19 0905 	adds.w	r9, r9, r5
 8002f02:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f1a:	4689      	mov	r9, r1
 8002f1c:	4692      	mov	sl, r2
 8002f1e:	eb19 0005 	adds.w	r0, r9, r5
 8002f22:	eb4a 0106 	adc.w	r1, sl, r6
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	f04f 0600 	mov.w	r6, #0
 8002f30:	196b      	adds	r3, r5, r5
 8002f32:	eb46 0406 	adc.w	r4, r6, r6
 8002f36:	461a      	mov	r2, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f7fd fd8f 	bl	8000a5c <__aeabi_uldivmod>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <UART_SetConfig+0x384>)
 8002f46:	fba3 1302 	umull	r1, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2164      	movs	r1, #100	; 0x64
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	3332      	adds	r3, #50	; 0x32
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <UART_SetConfig+0x384>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f66:	4498      	add	r8, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	461d      	mov	r5, r3
 8002f6c:	f04f 0600 	mov.w	r6, #0
 8002f70:	46a9      	mov	r9, r5
 8002f72:	46b2      	mov	sl, r6
 8002f74:	eb19 0309 	adds.w	r3, r9, r9
 8002f78:	eb4a 040a 	adc.w	r4, sl, sl
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	46a2      	mov	sl, r4
 8002f80:	eb19 0905 	adds.w	r9, r9, r5
 8002f84:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f9c:	4689      	mov	r9, r1
 8002f9e:	4692      	mov	sl, r2
 8002fa0:	eb19 0005 	adds.w	r0, r9, r5
 8002fa4:	eb4a 0106 	adc.w	r1, sl, r6
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	461d      	mov	r5, r3
 8002fae:	f04f 0600 	mov.w	r6, #0
 8002fb2:	196b      	adds	r3, r5, r5
 8002fb4:	eb46 0406 	adc.w	r4, r6, r6
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	f7fd fd4e 	bl	8000a5c <__aeabi_uldivmod>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <UART_SetConfig+0x384>)
 8002fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	2164      	movs	r1, #100	; 0x64
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3332      	adds	r3, #50	; 0x32
 8002fda:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <UART_SetConfig+0x384>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	f003 0207 	and.w	r2, r3, #7
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4442      	add	r2, r8
 8002fec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002fee:	e1b2      	b.n	8003356 <UART_SetConfig+0x6e2>
 8002ff0:	40011000 	.word	0x40011000
 8002ff4:	40011400 	.word	0x40011400
 8002ff8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4ad7      	ldr	r2, [pc, #860]	; (8003360 <UART_SetConfig+0x6ec>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d005      	beq.n	8003012 <UART_SetConfig+0x39e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4ad6      	ldr	r2, [pc, #856]	; (8003364 <UART_SetConfig+0x6f0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	f040 80d1 	bne.w	80031b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003012:	f7ff f9a5 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8003016:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	469a      	mov	sl, r3
 800301c:	f04f 0b00 	mov.w	fp, #0
 8003020:	46d0      	mov	r8, sl
 8003022:	46d9      	mov	r9, fp
 8003024:	eb18 0308 	adds.w	r3, r8, r8
 8003028:	eb49 0409 	adc.w	r4, r9, r9
 800302c:	4698      	mov	r8, r3
 800302e:	46a1      	mov	r9, r4
 8003030:	eb18 080a 	adds.w	r8, r8, sl
 8003034:	eb49 090b 	adc.w	r9, r9, fp
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003044:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003048:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800304c:	4688      	mov	r8, r1
 800304e:	4691      	mov	r9, r2
 8003050:	eb1a 0508 	adds.w	r5, sl, r8
 8003054:	eb4b 0609 	adc.w	r6, fp, r9
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4619      	mov	r1, r3
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f04f 0400 	mov.w	r4, #0
 800306a:	0094      	lsls	r4, r2, #2
 800306c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003070:	008b      	lsls	r3, r1, #2
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	4628      	mov	r0, r5
 8003078:	4631      	mov	r1, r6
 800307a:	f7fd fcef 	bl	8000a5c <__aeabi_uldivmod>
 800307e:	4603      	mov	r3, r0
 8003080:	460c      	mov	r4, r1
 8003082:	461a      	mov	r2, r3
 8003084:	4bb8      	ldr	r3, [pc, #736]	; (8003368 <UART_SetConfig+0x6f4>)
 8003086:	fba3 2302 	umull	r2, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	469b      	mov	fp, r3
 8003094:	f04f 0c00 	mov.w	ip, #0
 8003098:	46d9      	mov	r9, fp
 800309a:	46e2      	mov	sl, ip
 800309c:	eb19 0309 	adds.w	r3, r9, r9
 80030a0:	eb4a 040a 	adc.w	r4, sl, sl
 80030a4:	4699      	mov	r9, r3
 80030a6:	46a2      	mov	sl, r4
 80030a8:	eb19 090b 	adds.w	r9, r9, fp
 80030ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030c4:	4689      	mov	r9, r1
 80030c6:	4692      	mov	sl, r2
 80030c8:	eb1b 0509 	adds.w	r5, fp, r9
 80030cc:	eb4c 060a 	adc.w	r6, ip, sl
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	0094      	lsls	r4, r2, #2
 80030e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030e8:	008b      	lsls	r3, r1, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	4623      	mov	r3, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	4631      	mov	r1, r6
 80030f2:	f7fd fcb3 	bl	8000a5c <__aeabi_uldivmod>
 80030f6:	4603      	mov	r3, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b9a      	ldr	r3, [pc, #616]	; (8003368 <UART_SetConfig+0x6f4>)
 80030fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2164      	movs	r1, #100	; 0x64
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	3332      	adds	r3, #50	; 0x32
 8003110:	4a95      	ldr	r2, [pc, #596]	; (8003368 <UART_SetConfig+0x6f4>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311c:	4498      	add	r8, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	469b      	mov	fp, r3
 8003122:	f04f 0c00 	mov.w	ip, #0
 8003126:	46d9      	mov	r9, fp
 8003128:	46e2      	mov	sl, ip
 800312a:	eb19 0309 	adds.w	r3, r9, r9
 800312e:	eb4a 040a 	adc.w	r4, sl, sl
 8003132:	4699      	mov	r9, r3
 8003134:	46a2      	mov	sl, r4
 8003136:	eb19 090b 	adds.w	r9, r9, fp
 800313a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800314a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800314e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003152:	4689      	mov	r9, r1
 8003154:	4692      	mov	sl, r2
 8003156:	eb1b 0509 	adds.w	r5, fp, r9
 800315a:	eb4c 060a 	adc.w	r6, ip, sl
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4619      	mov	r1, r3
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	f04f 0400 	mov.w	r4, #0
 8003170:	0094      	lsls	r4, r2, #2
 8003172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003176:	008b      	lsls	r3, r1, #2
 8003178:	461a      	mov	r2, r3
 800317a:	4623      	mov	r3, r4
 800317c:	4628      	mov	r0, r5
 800317e:	4631      	mov	r1, r6
 8003180:	f7fd fc6c 	bl	8000a5c <__aeabi_uldivmod>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	461a      	mov	r2, r3
 800318a:	4b77      	ldr	r3, [pc, #476]	; (8003368 <UART_SetConfig+0x6f4>)
 800318c:	fba3 1302 	umull	r1, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	2164      	movs	r1, #100	; 0x64
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	3332      	adds	r3, #50	; 0x32
 800319e:	4a72      	ldr	r2, [pc, #456]	; (8003368 <UART_SetConfig+0x6f4>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4442      	add	r2, r8
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	e0d0      	b.n	8003356 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f8c0 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 80031b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	469a      	mov	sl, r3
 80031be:	f04f 0b00 	mov.w	fp, #0
 80031c2:	46d0      	mov	r8, sl
 80031c4:	46d9      	mov	r9, fp
 80031c6:	eb18 0308 	adds.w	r3, r8, r8
 80031ca:	eb49 0409 	adc.w	r4, r9, r9
 80031ce:	4698      	mov	r8, r3
 80031d0:	46a1      	mov	r9, r4
 80031d2:	eb18 080a 	adds.w	r8, r8, sl
 80031d6:	eb49 090b 	adc.w	r9, r9, fp
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031ee:	4688      	mov	r8, r1
 80031f0:	4691      	mov	r9, r2
 80031f2:	eb1a 0508 	adds.w	r5, sl, r8
 80031f6:	eb4b 0609 	adc.w	r6, fp, r9
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4619      	mov	r1, r3
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	f04f 0400 	mov.w	r4, #0
 800320c:	0094      	lsls	r4, r2, #2
 800320e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003212:	008b      	lsls	r3, r1, #2
 8003214:	461a      	mov	r2, r3
 8003216:	4623      	mov	r3, r4
 8003218:	4628      	mov	r0, r5
 800321a:	4631      	mov	r1, r6
 800321c:	f7fd fc1e 	bl	8000a5c <__aeabi_uldivmod>
 8003220:	4603      	mov	r3, r0
 8003222:	460c      	mov	r4, r1
 8003224:	461a      	mov	r2, r3
 8003226:	4b50      	ldr	r3, [pc, #320]	; (8003368 <UART_SetConfig+0x6f4>)
 8003228:	fba3 2302 	umull	r2, r3, r3, r2
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	469b      	mov	fp, r3
 8003236:	f04f 0c00 	mov.w	ip, #0
 800323a:	46d9      	mov	r9, fp
 800323c:	46e2      	mov	sl, ip
 800323e:	eb19 0309 	adds.w	r3, r9, r9
 8003242:	eb4a 040a 	adc.w	r4, sl, sl
 8003246:	4699      	mov	r9, r3
 8003248:	46a2      	mov	sl, r4
 800324a:	eb19 090b 	adds.w	r9, r9, fp
 800324e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003266:	4689      	mov	r9, r1
 8003268:	4692      	mov	sl, r2
 800326a:	eb1b 0509 	adds.w	r5, fp, r9
 800326e:	eb4c 060a 	adc.w	r6, ip, sl
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4619      	mov	r1, r3
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f04f 0400 	mov.w	r4, #0
 8003284:	0094      	lsls	r4, r2, #2
 8003286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800328a:	008b      	lsls	r3, r1, #2
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	4628      	mov	r0, r5
 8003292:	4631      	mov	r1, r6
 8003294:	f7fd fbe2 	bl	8000a5c <__aeabi_uldivmod>
 8003298:	4603      	mov	r3, r0
 800329a:	460c      	mov	r4, r1
 800329c:	461a      	mov	r2, r3
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <UART_SetConfig+0x6f4>)
 80032a0:	fba3 1302 	umull	r1, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	2164      	movs	r1, #100	; 0x64
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <UART_SetConfig+0x6f4>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032be:	4498      	add	r8, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	469b      	mov	fp, r3
 80032c4:	f04f 0c00 	mov.w	ip, #0
 80032c8:	46d9      	mov	r9, fp
 80032ca:	46e2      	mov	sl, ip
 80032cc:	eb19 0309 	adds.w	r3, r9, r9
 80032d0:	eb4a 040a 	adc.w	r4, sl, sl
 80032d4:	4699      	mov	r9, r3
 80032d6:	46a2      	mov	sl, r4
 80032d8:	eb19 090b 	adds.w	r9, r9, fp
 80032dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032f4:	4689      	mov	r9, r1
 80032f6:	4692      	mov	sl, r2
 80032f8:	eb1b 0509 	adds.w	r5, fp, r9
 80032fc:	eb4c 060a 	adc.w	r6, ip, sl
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	0094      	lsls	r4, r2, #2
 8003314:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003318:	008b      	lsls	r3, r1, #2
 800331a:	461a      	mov	r2, r3
 800331c:	4623      	mov	r3, r4
 800331e:	4628      	mov	r0, r5
 8003320:	4631      	mov	r1, r6
 8003322:	f7fd fb9b 	bl	8000a5c <__aeabi_uldivmod>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	461a      	mov	r2, r3
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <UART_SetConfig+0x6f4>)
 800332e:	fba3 1302 	umull	r1, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	3332      	adds	r3, #50	; 0x32
 8003340:	4a09      	ldr	r2, [pc, #36]	; (8003368 <UART_SetConfig+0x6f4>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4442      	add	r2, r8
 8003352:	609a      	str	r2, [r3, #8]
}
 8003354:	e7ff      	b.n	8003356 <UART_SetConfig+0x6e2>
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003360:	40011000 	.word	0x40011000
 8003364:	40011400 	.word	0x40011400
 8003368:	51eb851f 	.word	0x51eb851f

0800336c <__errno>:
 800336c:	4b01      	ldr	r3, [pc, #4]	; (8003374 <__errno+0x8>)
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	2000000c 	.word	0x2000000c

08003378 <__libc_init_array>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	4e0d      	ldr	r6, [pc, #52]	; (80033b0 <__libc_init_array+0x38>)
 800337c:	4c0d      	ldr	r4, [pc, #52]	; (80033b4 <__libc_init_array+0x3c>)
 800337e:	1ba4      	subs	r4, r4, r6
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	2500      	movs	r5, #0
 8003384:	42a5      	cmp	r5, r4
 8003386:	d109      	bne.n	800339c <__libc_init_array+0x24>
 8003388:	4e0b      	ldr	r6, [pc, #44]	; (80033b8 <__libc_init_array+0x40>)
 800338a:	4c0c      	ldr	r4, [pc, #48]	; (80033bc <__libc_init_array+0x44>)
 800338c:	f000 ff68 	bl	8004260 <_init>
 8003390:	1ba4      	subs	r4, r4, r6
 8003392:	10a4      	asrs	r4, r4, #2
 8003394:	2500      	movs	r5, #0
 8003396:	42a5      	cmp	r5, r4
 8003398:	d105      	bne.n	80033a6 <__libc_init_array+0x2e>
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a0:	4798      	blx	r3
 80033a2:	3501      	adds	r5, #1
 80033a4:	e7ee      	b.n	8003384 <__libc_init_array+0xc>
 80033a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033aa:	4798      	blx	r3
 80033ac:	3501      	adds	r5, #1
 80033ae:	e7f2      	b.n	8003396 <__libc_init_array+0x1e>
 80033b0:	08004350 	.word	0x08004350
 80033b4:	08004350 	.word	0x08004350
 80033b8:	08004350 	.word	0x08004350
 80033bc:	08004354 	.word	0x08004354

080033c0 <memset>:
 80033c0:	4402      	add	r2, r0
 80033c2:	4603      	mov	r3, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <iprintf>:
 80033d0:	b40f      	push	{r0, r1, r2, r3}
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <iprintf+0x2c>)
 80033d4:	b513      	push	{r0, r1, r4, lr}
 80033d6:	681c      	ldr	r4, [r3, #0]
 80033d8:	b124      	cbz	r4, 80033e4 <iprintf+0x14>
 80033da:	69a3      	ldr	r3, [r4, #24]
 80033dc:	b913      	cbnz	r3, 80033e4 <iprintf+0x14>
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 fa22 	bl	8003828 <__sinit>
 80033e4:	ab05      	add	r3, sp, #20
 80033e6:	9a04      	ldr	r2, [sp, #16]
 80033e8:	68a1      	ldr	r1, [r4, #8]
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	4620      	mov	r0, r4
 80033ee:	f000 fbdb 	bl	8003ba8 <_vfiprintf_r>
 80033f2:	b002      	add	sp, #8
 80033f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f8:	b004      	add	sp, #16
 80033fa:	4770      	bx	lr
 80033fc:	2000000c 	.word	0x2000000c

08003400 <_puts_r>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	460e      	mov	r6, r1
 8003404:	4605      	mov	r5, r0
 8003406:	b118      	cbz	r0, 8003410 <_puts_r+0x10>
 8003408:	6983      	ldr	r3, [r0, #24]
 800340a:	b90b      	cbnz	r3, 8003410 <_puts_r+0x10>
 800340c:	f000 fa0c 	bl	8003828 <__sinit>
 8003410:	69ab      	ldr	r3, [r5, #24]
 8003412:	68ac      	ldr	r4, [r5, #8]
 8003414:	b913      	cbnz	r3, 800341c <_puts_r+0x1c>
 8003416:	4628      	mov	r0, r5
 8003418:	f000 fa06 	bl	8003828 <__sinit>
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <_puts_r+0xac>)
 800341e:	429c      	cmp	r4, r3
 8003420:	d117      	bne.n	8003452 <_puts_r+0x52>
 8003422:	686c      	ldr	r4, [r5, #4]
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	071b      	lsls	r3, r3, #28
 8003428:	d51d      	bpl.n	8003466 <_puts_r+0x66>
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	b1db      	cbz	r3, 8003466 <_puts_r+0x66>
 800342e:	3e01      	subs	r6, #1
 8003430:	68a3      	ldr	r3, [r4, #8]
 8003432:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003436:	3b01      	subs	r3, #1
 8003438:	60a3      	str	r3, [r4, #8]
 800343a:	b9e9      	cbnz	r1, 8003478 <_puts_r+0x78>
 800343c:	2b00      	cmp	r3, #0
 800343e:	da2e      	bge.n	800349e <_puts_r+0x9e>
 8003440:	4622      	mov	r2, r4
 8003442:	210a      	movs	r1, #10
 8003444:	4628      	mov	r0, r5
 8003446:	f000 f83f 	bl	80034c8 <__swbuf_r>
 800344a:	3001      	adds	r0, #1
 800344c:	d011      	beq.n	8003472 <_puts_r+0x72>
 800344e:	200a      	movs	r0, #10
 8003450:	e011      	b.n	8003476 <_puts_r+0x76>
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <_puts_r+0xb0>)
 8003454:	429c      	cmp	r4, r3
 8003456:	d101      	bne.n	800345c <_puts_r+0x5c>
 8003458:	68ac      	ldr	r4, [r5, #8]
 800345a:	e7e3      	b.n	8003424 <_puts_r+0x24>
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <_puts_r+0xb4>)
 800345e:	429c      	cmp	r4, r3
 8003460:	bf08      	it	eq
 8003462:	68ec      	ldreq	r4, [r5, #12]
 8003464:	e7de      	b.n	8003424 <_puts_r+0x24>
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 f87f 	bl	800356c <__swsetup_r>
 800346e:	2800      	cmp	r0, #0
 8003470:	d0dd      	beq.n	800342e <_puts_r+0x2e>
 8003472:	f04f 30ff 	mov.w	r0, #4294967295
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	2b00      	cmp	r3, #0
 800347a:	da04      	bge.n	8003486 <_puts_r+0x86>
 800347c:	69a2      	ldr	r2, [r4, #24]
 800347e:	429a      	cmp	r2, r3
 8003480:	dc06      	bgt.n	8003490 <_puts_r+0x90>
 8003482:	290a      	cmp	r1, #10
 8003484:	d004      	beq.n	8003490 <_puts_r+0x90>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	6022      	str	r2, [r4, #0]
 800348c:	7019      	strb	r1, [r3, #0]
 800348e:	e7cf      	b.n	8003430 <_puts_r+0x30>
 8003490:	4622      	mov	r2, r4
 8003492:	4628      	mov	r0, r5
 8003494:	f000 f818 	bl	80034c8 <__swbuf_r>
 8003498:	3001      	adds	r0, #1
 800349a:	d1c9      	bne.n	8003430 <_puts_r+0x30>
 800349c:	e7e9      	b.n	8003472 <_puts_r+0x72>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	200a      	movs	r0, #10
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	7018      	strb	r0, [r3, #0]
 80034a8:	e7e5      	b.n	8003476 <_puts_r+0x76>
 80034aa:	bf00      	nop
 80034ac:	080042d4 	.word	0x080042d4
 80034b0:	080042f4 	.word	0x080042f4
 80034b4:	080042b4 	.word	0x080042b4

080034b8 <puts>:
 80034b8:	4b02      	ldr	r3, [pc, #8]	; (80034c4 <puts+0xc>)
 80034ba:	4601      	mov	r1, r0
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	f7ff bf9f 	b.w	8003400 <_puts_r>
 80034c2:	bf00      	nop
 80034c4:	2000000c 	.word	0x2000000c

080034c8 <__swbuf_r>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	460e      	mov	r6, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	4605      	mov	r5, r0
 80034d0:	b118      	cbz	r0, 80034da <__swbuf_r+0x12>
 80034d2:	6983      	ldr	r3, [r0, #24]
 80034d4:	b90b      	cbnz	r3, 80034da <__swbuf_r+0x12>
 80034d6:	f000 f9a7 	bl	8003828 <__sinit>
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <__swbuf_r+0x98>)
 80034dc:	429c      	cmp	r4, r3
 80034de:	d12a      	bne.n	8003536 <__swbuf_r+0x6e>
 80034e0:	686c      	ldr	r4, [r5, #4]
 80034e2:	69a3      	ldr	r3, [r4, #24]
 80034e4:	60a3      	str	r3, [r4, #8]
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	071a      	lsls	r2, r3, #28
 80034ea:	d52e      	bpl.n	800354a <__swbuf_r+0x82>
 80034ec:	6923      	ldr	r3, [r4, #16]
 80034ee:	b363      	cbz	r3, 800354a <__swbuf_r+0x82>
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	1ac0      	subs	r0, r0, r3
 80034f6:	6963      	ldr	r3, [r4, #20]
 80034f8:	b2f6      	uxtb	r6, r6
 80034fa:	4283      	cmp	r3, r0
 80034fc:	4637      	mov	r7, r6
 80034fe:	dc04      	bgt.n	800350a <__swbuf_r+0x42>
 8003500:	4621      	mov	r1, r4
 8003502:	4628      	mov	r0, r5
 8003504:	f000 f926 	bl	8003754 <_fflush_r>
 8003508:	bb28      	cbnz	r0, 8003556 <__swbuf_r+0x8e>
 800350a:	68a3      	ldr	r3, [r4, #8]
 800350c:	3b01      	subs	r3, #1
 800350e:	60a3      	str	r3, [r4, #8]
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	6022      	str	r2, [r4, #0]
 8003516:	701e      	strb	r6, [r3, #0]
 8003518:	6963      	ldr	r3, [r4, #20]
 800351a:	3001      	adds	r0, #1
 800351c:	4283      	cmp	r3, r0
 800351e:	d004      	beq.n	800352a <__swbuf_r+0x62>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	07db      	lsls	r3, r3, #31
 8003524:	d519      	bpl.n	800355a <__swbuf_r+0x92>
 8003526:	2e0a      	cmp	r6, #10
 8003528:	d117      	bne.n	800355a <__swbuf_r+0x92>
 800352a:	4621      	mov	r1, r4
 800352c:	4628      	mov	r0, r5
 800352e:	f000 f911 	bl	8003754 <_fflush_r>
 8003532:	b190      	cbz	r0, 800355a <__swbuf_r+0x92>
 8003534:	e00f      	b.n	8003556 <__swbuf_r+0x8e>
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <__swbuf_r+0x9c>)
 8003538:	429c      	cmp	r4, r3
 800353a:	d101      	bne.n	8003540 <__swbuf_r+0x78>
 800353c:	68ac      	ldr	r4, [r5, #8]
 800353e:	e7d0      	b.n	80034e2 <__swbuf_r+0x1a>
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <__swbuf_r+0xa0>)
 8003542:	429c      	cmp	r4, r3
 8003544:	bf08      	it	eq
 8003546:	68ec      	ldreq	r4, [r5, #12]
 8003548:	e7cb      	b.n	80034e2 <__swbuf_r+0x1a>
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f000 f80d 	bl	800356c <__swsetup_r>
 8003552:	2800      	cmp	r0, #0
 8003554:	d0cc      	beq.n	80034f0 <__swbuf_r+0x28>
 8003556:	f04f 37ff 	mov.w	r7, #4294967295
 800355a:	4638      	mov	r0, r7
 800355c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355e:	bf00      	nop
 8003560:	080042d4 	.word	0x080042d4
 8003564:	080042f4 	.word	0x080042f4
 8003568:	080042b4 	.word	0x080042b4

0800356c <__swsetup_r>:
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <__swsetup_r+0xcc>)
 800356e:	b570      	push	{r4, r5, r6, lr}
 8003570:	681d      	ldr	r5, [r3, #0]
 8003572:	4606      	mov	r6, r0
 8003574:	460c      	mov	r4, r1
 8003576:	b125      	cbz	r5, 8003582 <__swsetup_r+0x16>
 8003578:	69ab      	ldr	r3, [r5, #24]
 800357a:	b913      	cbnz	r3, 8003582 <__swsetup_r+0x16>
 800357c:	4628      	mov	r0, r5
 800357e:	f000 f953 	bl	8003828 <__sinit>
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <__swsetup_r+0xd0>)
 8003584:	429c      	cmp	r4, r3
 8003586:	d10f      	bne.n	80035a8 <__swsetup_r+0x3c>
 8003588:	686c      	ldr	r4, [r5, #4]
 800358a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358e:	b29a      	uxth	r2, r3
 8003590:	0715      	lsls	r5, r2, #28
 8003592:	d42c      	bmi.n	80035ee <__swsetup_r+0x82>
 8003594:	06d0      	lsls	r0, r2, #27
 8003596:	d411      	bmi.n	80035bc <__swsetup_r+0x50>
 8003598:	2209      	movs	r2, #9
 800359a:	6032      	str	r2, [r6, #0]
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	f04f 30ff 	mov.w	r0, #4294967295
 80035a6:	e03e      	b.n	8003626 <__swsetup_r+0xba>
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <__swsetup_r+0xd4>)
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d101      	bne.n	80035b2 <__swsetup_r+0x46>
 80035ae:	68ac      	ldr	r4, [r5, #8]
 80035b0:	e7eb      	b.n	800358a <__swsetup_r+0x1e>
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <__swsetup_r+0xd8>)
 80035b4:	429c      	cmp	r4, r3
 80035b6:	bf08      	it	eq
 80035b8:	68ec      	ldreq	r4, [r5, #12]
 80035ba:	e7e6      	b.n	800358a <__swsetup_r+0x1e>
 80035bc:	0751      	lsls	r1, r2, #29
 80035be:	d512      	bpl.n	80035e6 <__swsetup_r+0x7a>
 80035c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035c2:	b141      	cbz	r1, 80035d6 <__swsetup_r+0x6a>
 80035c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d002      	beq.n	80035d2 <__swsetup_r+0x66>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f000 fa19 	bl	8003a04 <_free_r>
 80035d2:	2300      	movs	r3, #0
 80035d4:	6363      	str	r3, [r4, #52]	; 0x34
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035dc:	81a3      	strh	r3, [r4, #12]
 80035de:	2300      	movs	r3, #0
 80035e0:	6063      	str	r3, [r4, #4]
 80035e2:	6923      	ldr	r3, [r4, #16]
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	b94b      	cbnz	r3, 8003606 <__swsetup_r+0x9a>
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fc:	d003      	beq.n	8003606 <__swsetup_r+0x9a>
 80035fe:	4621      	mov	r1, r4
 8003600:	4630      	mov	r0, r6
 8003602:	f000 f9bf 	bl	8003984 <__smakebuf_r>
 8003606:	89a2      	ldrh	r2, [r4, #12]
 8003608:	f012 0301 	ands.w	r3, r2, #1
 800360c:	d00c      	beq.n	8003628 <__swsetup_r+0xbc>
 800360e:	2300      	movs	r3, #0
 8003610:	60a3      	str	r3, [r4, #8]
 8003612:	6963      	ldr	r3, [r4, #20]
 8003614:	425b      	negs	r3, r3
 8003616:	61a3      	str	r3, [r4, #24]
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	b953      	cbnz	r3, 8003632 <__swsetup_r+0xc6>
 800361c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003620:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003624:	d1ba      	bne.n	800359c <__swsetup_r+0x30>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	0792      	lsls	r2, r2, #30
 800362a:	bf58      	it	pl
 800362c:	6963      	ldrpl	r3, [r4, #20]
 800362e:	60a3      	str	r3, [r4, #8]
 8003630:	e7f2      	b.n	8003618 <__swsetup_r+0xac>
 8003632:	2000      	movs	r0, #0
 8003634:	e7f7      	b.n	8003626 <__swsetup_r+0xba>
 8003636:	bf00      	nop
 8003638:	2000000c 	.word	0x2000000c
 800363c:	080042d4 	.word	0x080042d4
 8003640:	080042f4 	.word	0x080042f4
 8003644:	080042b4 	.word	0x080042b4

08003648 <__sflush_r>:
 8003648:	898a      	ldrh	r2, [r1, #12]
 800364a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364e:	4605      	mov	r5, r0
 8003650:	0710      	lsls	r0, r2, #28
 8003652:	460c      	mov	r4, r1
 8003654:	d458      	bmi.n	8003708 <__sflush_r+0xc0>
 8003656:	684b      	ldr	r3, [r1, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	dc05      	bgt.n	8003668 <__sflush_r+0x20>
 800365c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	dc02      	bgt.n	8003668 <__sflush_r+0x20>
 8003662:	2000      	movs	r0, #0
 8003664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800366a:	2e00      	cmp	r6, #0
 800366c:	d0f9      	beq.n	8003662 <__sflush_r+0x1a>
 800366e:	2300      	movs	r3, #0
 8003670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003674:	682f      	ldr	r7, [r5, #0]
 8003676:	6a21      	ldr	r1, [r4, #32]
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	d032      	beq.n	80036e2 <__sflush_r+0x9a>
 800367c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	075a      	lsls	r2, r3, #29
 8003682:	d505      	bpl.n	8003690 <__sflush_r+0x48>
 8003684:	6863      	ldr	r3, [r4, #4]
 8003686:	1ac0      	subs	r0, r0, r3
 8003688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800368a:	b10b      	cbz	r3, 8003690 <__sflush_r+0x48>
 800368c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368e:	1ac0      	subs	r0, r0, r3
 8003690:	2300      	movs	r3, #0
 8003692:	4602      	mov	r2, r0
 8003694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003696:	6a21      	ldr	r1, [r4, #32]
 8003698:	4628      	mov	r0, r5
 800369a:	47b0      	blx	r6
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	d106      	bne.n	80036b0 <__sflush_r+0x68>
 80036a2:	6829      	ldr	r1, [r5, #0]
 80036a4:	291d      	cmp	r1, #29
 80036a6:	d848      	bhi.n	800373a <__sflush_r+0xf2>
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <__sflush_r+0x108>)
 80036aa:	40ca      	lsrs	r2, r1
 80036ac:	07d6      	lsls	r6, r2, #31
 80036ae:	d544      	bpl.n	800373a <__sflush_r+0xf2>
 80036b0:	2200      	movs	r2, #0
 80036b2:	6062      	str	r2, [r4, #4]
 80036b4:	04d9      	lsls	r1, r3, #19
 80036b6:	6922      	ldr	r2, [r4, #16]
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	d504      	bpl.n	80036c6 <__sflush_r+0x7e>
 80036bc:	1c42      	adds	r2, r0, #1
 80036be:	d101      	bne.n	80036c4 <__sflush_r+0x7c>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b903      	cbnz	r3, 80036c6 <__sflush_r+0x7e>
 80036c4:	6560      	str	r0, [r4, #84]	; 0x54
 80036c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c8:	602f      	str	r7, [r5, #0]
 80036ca:	2900      	cmp	r1, #0
 80036cc:	d0c9      	beq.n	8003662 <__sflush_r+0x1a>
 80036ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036d2:	4299      	cmp	r1, r3
 80036d4:	d002      	beq.n	80036dc <__sflush_r+0x94>
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 f994 	bl	8003a04 <_free_r>
 80036dc:	2000      	movs	r0, #0
 80036de:	6360      	str	r0, [r4, #52]	; 0x34
 80036e0:	e7c0      	b.n	8003664 <__sflush_r+0x1c>
 80036e2:	2301      	movs	r3, #1
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	1c41      	adds	r1, r0, #1
 80036ea:	d1c8      	bne.n	800367e <__sflush_r+0x36>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0c5      	beq.n	800367e <__sflush_r+0x36>
 80036f2:	2b1d      	cmp	r3, #29
 80036f4:	d001      	beq.n	80036fa <__sflush_r+0xb2>
 80036f6:	2b16      	cmp	r3, #22
 80036f8:	d101      	bne.n	80036fe <__sflush_r+0xb6>
 80036fa:	602f      	str	r7, [r5, #0]
 80036fc:	e7b1      	b.n	8003662 <__sflush_r+0x1a>
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7ad      	b.n	8003664 <__sflush_r+0x1c>
 8003708:	690f      	ldr	r7, [r1, #16]
 800370a:	2f00      	cmp	r7, #0
 800370c:	d0a9      	beq.n	8003662 <__sflush_r+0x1a>
 800370e:	0793      	lsls	r3, r2, #30
 8003710:	680e      	ldr	r6, [r1, #0]
 8003712:	bf08      	it	eq
 8003714:	694b      	ldreq	r3, [r1, #20]
 8003716:	600f      	str	r7, [r1, #0]
 8003718:	bf18      	it	ne
 800371a:	2300      	movne	r3, #0
 800371c:	eba6 0807 	sub.w	r8, r6, r7
 8003720:	608b      	str	r3, [r1, #8]
 8003722:	f1b8 0f00 	cmp.w	r8, #0
 8003726:	dd9c      	ble.n	8003662 <__sflush_r+0x1a>
 8003728:	4643      	mov	r3, r8
 800372a:	463a      	mov	r2, r7
 800372c:	6a21      	ldr	r1, [r4, #32]
 800372e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003730:	4628      	mov	r0, r5
 8003732:	47b0      	blx	r6
 8003734:	2800      	cmp	r0, #0
 8003736:	dc06      	bgt.n	8003746 <__sflush_r+0xfe>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	e78e      	b.n	8003664 <__sflush_r+0x1c>
 8003746:	4407      	add	r7, r0
 8003748:	eba8 0800 	sub.w	r8, r8, r0
 800374c:	e7e9      	b.n	8003722 <__sflush_r+0xda>
 800374e:	bf00      	nop
 8003750:	20400001 	.word	0x20400001

08003754 <_fflush_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	4605      	mov	r5, r0
 800375a:	460c      	mov	r4, r1
 800375c:	b1db      	cbz	r3, 8003796 <_fflush_r+0x42>
 800375e:	b118      	cbz	r0, 8003768 <_fflush_r+0x14>
 8003760:	6983      	ldr	r3, [r0, #24]
 8003762:	b90b      	cbnz	r3, 8003768 <_fflush_r+0x14>
 8003764:	f000 f860 	bl	8003828 <__sinit>
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <_fflush_r+0x48>)
 800376a:	429c      	cmp	r4, r3
 800376c:	d109      	bne.n	8003782 <_fflush_r+0x2e>
 800376e:	686c      	ldr	r4, [r5, #4]
 8003770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003774:	b17b      	cbz	r3, 8003796 <_fflush_r+0x42>
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800377e:	f7ff bf63 	b.w	8003648 <__sflush_r>
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <_fflush_r+0x4c>)
 8003784:	429c      	cmp	r4, r3
 8003786:	d101      	bne.n	800378c <_fflush_r+0x38>
 8003788:	68ac      	ldr	r4, [r5, #8]
 800378a:	e7f1      	b.n	8003770 <_fflush_r+0x1c>
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <_fflush_r+0x50>)
 800378e:	429c      	cmp	r4, r3
 8003790:	bf08      	it	eq
 8003792:	68ec      	ldreq	r4, [r5, #12]
 8003794:	e7ec      	b.n	8003770 <_fflush_r+0x1c>
 8003796:	2000      	movs	r0, #0
 8003798:	bd38      	pop	{r3, r4, r5, pc}
 800379a:	bf00      	nop
 800379c:	080042d4 	.word	0x080042d4
 80037a0:	080042f4 	.word	0x080042f4
 80037a4:	080042b4 	.word	0x080042b4

080037a8 <std>:
 80037a8:	2300      	movs	r3, #0
 80037aa:	b510      	push	{r4, lr}
 80037ac:	4604      	mov	r4, r0
 80037ae:	e9c0 3300 	strd	r3, r3, [r0]
 80037b2:	6083      	str	r3, [r0, #8]
 80037b4:	8181      	strh	r1, [r0, #12]
 80037b6:	6643      	str	r3, [r0, #100]	; 0x64
 80037b8:	81c2      	strh	r2, [r0, #14]
 80037ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037be:	6183      	str	r3, [r0, #24]
 80037c0:	4619      	mov	r1, r3
 80037c2:	2208      	movs	r2, #8
 80037c4:	305c      	adds	r0, #92	; 0x5c
 80037c6:	f7ff fdfb 	bl	80033c0 <memset>
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <std+0x38>)
 80037cc:	6263      	str	r3, [r4, #36]	; 0x24
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <std+0x3c>)
 80037d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <std+0x40>)
 80037d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <std+0x44>)
 80037d8:	6224      	str	r4, [r4, #32]
 80037da:	6323      	str	r3, [r4, #48]	; 0x30
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	bf00      	nop
 80037e0:	08004105 	.word	0x08004105
 80037e4:	08004127 	.word	0x08004127
 80037e8:	0800415f 	.word	0x0800415f
 80037ec:	08004183 	.word	0x08004183

080037f0 <_cleanup_r>:
 80037f0:	4901      	ldr	r1, [pc, #4]	; (80037f8 <_cleanup_r+0x8>)
 80037f2:	f000 b885 	b.w	8003900 <_fwalk_reent>
 80037f6:	bf00      	nop
 80037f8:	08003755 	.word	0x08003755

080037fc <__sfmoreglue>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	1e4a      	subs	r2, r1, #1
 8003800:	2568      	movs	r5, #104	; 0x68
 8003802:	4355      	muls	r5, r2
 8003804:	460e      	mov	r6, r1
 8003806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800380a:	f000 f949 	bl	8003aa0 <_malloc_r>
 800380e:	4604      	mov	r4, r0
 8003810:	b140      	cbz	r0, 8003824 <__sfmoreglue+0x28>
 8003812:	2100      	movs	r1, #0
 8003814:	e9c0 1600 	strd	r1, r6, [r0]
 8003818:	300c      	adds	r0, #12
 800381a:	60a0      	str	r0, [r4, #8]
 800381c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003820:	f7ff fdce 	bl	80033c0 <memset>
 8003824:	4620      	mov	r0, r4
 8003826:	bd70      	pop	{r4, r5, r6, pc}

08003828 <__sinit>:
 8003828:	6983      	ldr	r3, [r0, #24]
 800382a:	b510      	push	{r4, lr}
 800382c:	4604      	mov	r4, r0
 800382e:	bb33      	cbnz	r3, 800387e <__sinit+0x56>
 8003830:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003834:	6503      	str	r3, [r0, #80]	; 0x50
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <__sinit+0x58>)
 8003838:	4a12      	ldr	r2, [pc, #72]	; (8003884 <__sinit+0x5c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6282      	str	r2, [r0, #40]	; 0x28
 800383e:	4298      	cmp	r0, r3
 8003840:	bf04      	itt	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	6183      	streq	r3, [r0, #24]
 8003846:	f000 f81f 	bl	8003888 <__sfp>
 800384a:	6060      	str	r0, [r4, #4]
 800384c:	4620      	mov	r0, r4
 800384e:	f000 f81b 	bl	8003888 <__sfp>
 8003852:	60a0      	str	r0, [r4, #8]
 8003854:	4620      	mov	r0, r4
 8003856:	f000 f817 	bl	8003888 <__sfp>
 800385a:	2200      	movs	r2, #0
 800385c:	60e0      	str	r0, [r4, #12]
 800385e:	2104      	movs	r1, #4
 8003860:	6860      	ldr	r0, [r4, #4]
 8003862:	f7ff ffa1 	bl	80037a8 <std>
 8003866:	2201      	movs	r2, #1
 8003868:	2109      	movs	r1, #9
 800386a:	68a0      	ldr	r0, [r4, #8]
 800386c:	f7ff ff9c 	bl	80037a8 <std>
 8003870:	2202      	movs	r2, #2
 8003872:	2112      	movs	r1, #18
 8003874:	68e0      	ldr	r0, [r4, #12]
 8003876:	f7ff ff97 	bl	80037a8 <std>
 800387a:	2301      	movs	r3, #1
 800387c:	61a3      	str	r3, [r4, #24]
 800387e:	bd10      	pop	{r4, pc}
 8003880:	080042b0 	.word	0x080042b0
 8003884:	080037f1 	.word	0x080037f1

08003888 <__sfp>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <__sfp+0x70>)
 800388c:	681e      	ldr	r6, [r3, #0]
 800388e:	69b3      	ldr	r3, [r6, #24]
 8003890:	4607      	mov	r7, r0
 8003892:	b913      	cbnz	r3, 800389a <__sfp+0x12>
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff ffc7 	bl	8003828 <__sinit>
 800389a:	3648      	adds	r6, #72	; 0x48
 800389c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	d503      	bpl.n	80038ac <__sfp+0x24>
 80038a4:	6833      	ldr	r3, [r6, #0]
 80038a6:	b133      	cbz	r3, 80038b6 <__sfp+0x2e>
 80038a8:	6836      	ldr	r6, [r6, #0]
 80038aa:	e7f7      	b.n	800389c <__sfp+0x14>
 80038ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038b0:	b16d      	cbz	r5, 80038ce <__sfp+0x46>
 80038b2:	3468      	adds	r4, #104	; 0x68
 80038b4:	e7f4      	b.n	80038a0 <__sfp+0x18>
 80038b6:	2104      	movs	r1, #4
 80038b8:	4638      	mov	r0, r7
 80038ba:	f7ff ff9f 	bl	80037fc <__sfmoreglue>
 80038be:	6030      	str	r0, [r6, #0]
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d1f1      	bne.n	80038a8 <__sfp+0x20>
 80038c4:	230c      	movs	r3, #12
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4604      	mov	r4, r0
 80038ca:	4620      	mov	r0, r4
 80038cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <__sfp+0x74>)
 80038d0:	6665      	str	r5, [r4, #100]	; 0x64
 80038d2:	e9c4 5500 	strd	r5, r5, [r4]
 80038d6:	60a5      	str	r5, [r4, #8]
 80038d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038e0:	2208      	movs	r2, #8
 80038e2:	4629      	mov	r1, r5
 80038e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038e8:	f7ff fd6a 	bl	80033c0 <memset>
 80038ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038f4:	e7e9      	b.n	80038ca <__sfp+0x42>
 80038f6:	bf00      	nop
 80038f8:	080042b0 	.word	0x080042b0
 80038fc:	ffff0001 	.word	0xffff0001

08003900 <_fwalk_reent>:
 8003900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003904:	4680      	mov	r8, r0
 8003906:	4689      	mov	r9, r1
 8003908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800390c:	2600      	movs	r6, #0
 800390e:	b914      	cbnz	r4, 8003916 <_fwalk_reent+0x16>
 8003910:	4630      	mov	r0, r6
 8003912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003916:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800391a:	3f01      	subs	r7, #1
 800391c:	d501      	bpl.n	8003922 <_fwalk_reent+0x22>
 800391e:	6824      	ldr	r4, [r4, #0]
 8003920:	e7f5      	b.n	800390e <_fwalk_reent+0xe>
 8003922:	89ab      	ldrh	r3, [r5, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d907      	bls.n	8003938 <_fwalk_reent+0x38>
 8003928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800392c:	3301      	adds	r3, #1
 800392e:	d003      	beq.n	8003938 <_fwalk_reent+0x38>
 8003930:	4629      	mov	r1, r5
 8003932:	4640      	mov	r0, r8
 8003934:	47c8      	blx	r9
 8003936:	4306      	orrs	r6, r0
 8003938:	3568      	adds	r5, #104	; 0x68
 800393a:	e7ee      	b.n	800391a <_fwalk_reent+0x1a>

0800393c <__swhatbuf_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	460e      	mov	r6, r1
 8003940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003944:	2900      	cmp	r1, #0
 8003946:	b096      	sub	sp, #88	; 0x58
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	da07      	bge.n	800395e <__swhatbuf_r+0x22>
 800394e:	2300      	movs	r3, #0
 8003950:	602b      	str	r3, [r5, #0]
 8003952:	89b3      	ldrh	r3, [r6, #12]
 8003954:	061a      	lsls	r2, r3, #24
 8003956:	d410      	bmi.n	800397a <__swhatbuf_r+0x3e>
 8003958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395c:	e00e      	b.n	800397c <__swhatbuf_r+0x40>
 800395e:	466a      	mov	r2, sp
 8003960:	f000 fc36 	bl	80041d0 <_fstat_r>
 8003964:	2800      	cmp	r0, #0
 8003966:	dbf2      	blt.n	800394e <__swhatbuf_r+0x12>
 8003968:	9a01      	ldr	r2, [sp, #4]
 800396a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800396e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003972:	425a      	negs	r2, r3
 8003974:	415a      	adcs	r2, r3
 8003976:	602a      	str	r2, [r5, #0]
 8003978:	e7ee      	b.n	8003958 <__swhatbuf_r+0x1c>
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	2000      	movs	r0, #0
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	b016      	add	sp, #88	; 0x58
 8003982:	bd70      	pop	{r4, r5, r6, pc}

08003984 <__smakebuf_r>:
 8003984:	898b      	ldrh	r3, [r1, #12]
 8003986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003988:	079d      	lsls	r5, r3, #30
 800398a:	4606      	mov	r6, r0
 800398c:	460c      	mov	r4, r1
 800398e:	d507      	bpl.n	80039a0 <__smakebuf_r+0x1c>
 8003990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	6123      	str	r3, [r4, #16]
 8003998:	2301      	movs	r3, #1
 800399a:	6163      	str	r3, [r4, #20]
 800399c:	b002      	add	sp, #8
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	ab01      	add	r3, sp, #4
 80039a2:	466a      	mov	r2, sp
 80039a4:	f7ff ffca 	bl	800393c <__swhatbuf_r>
 80039a8:	9900      	ldr	r1, [sp, #0]
 80039aa:	4605      	mov	r5, r0
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f877 	bl	8003aa0 <_malloc_r>
 80039b2:	b948      	cbnz	r0, 80039c8 <__smakebuf_r+0x44>
 80039b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039b8:	059a      	lsls	r2, r3, #22
 80039ba:	d4ef      	bmi.n	800399c <__smakebuf_r+0x18>
 80039bc:	f023 0303 	bic.w	r3, r3, #3
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	81a3      	strh	r3, [r4, #12]
 80039c6:	e7e3      	b.n	8003990 <__smakebuf_r+0xc>
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <__smakebuf_r+0x7c>)
 80039ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	6020      	str	r0, [r4, #0]
 80039d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	9b00      	ldr	r3, [sp, #0]
 80039d8:	6163      	str	r3, [r4, #20]
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	6120      	str	r0, [r4, #16]
 80039de:	b15b      	cbz	r3, 80039f8 <__smakebuf_r+0x74>
 80039e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 fc05 	bl	80041f4 <_isatty_r>
 80039ea:	b128      	cbz	r0, 80039f8 <__smakebuf_r+0x74>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	431d      	orrs	r5, r3
 80039fc:	81a5      	strh	r5, [r4, #12]
 80039fe:	e7cd      	b.n	800399c <__smakebuf_r+0x18>
 8003a00:	080037f1 	.word	0x080037f1

08003a04 <_free_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4605      	mov	r5, r0
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d045      	beq.n	8003a98 <_free_r+0x94>
 8003a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a10:	1f0c      	subs	r4, r1, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bfb8      	it	lt
 8003a16:	18e4      	addlt	r4, r4, r3
 8003a18:	f000 fc0e 	bl	8004238 <__malloc_lock>
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <_free_r+0x98>)
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	4610      	mov	r0, r2
 8003a22:	b933      	cbnz	r3, 8003a32 <_free_r+0x2e>
 8003a24:	6063      	str	r3, [r4, #4]
 8003a26:	6014      	str	r4, [r2, #0]
 8003a28:	4628      	mov	r0, r5
 8003a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a2e:	f000 bc04 	b.w	800423a <__malloc_unlock>
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	d90c      	bls.n	8003a50 <_free_r+0x4c>
 8003a36:	6821      	ldr	r1, [r4, #0]
 8003a38:	1862      	adds	r2, r4, r1
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	bf04      	itt	eq
 8003a3e:	681a      	ldreq	r2, [r3, #0]
 8003a40:	685b      	ldreq	r3, [r3, #4]
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	bf04      	itt	eq
 8003a46:	1852      	addeq	r2, r2, r1
 8003a48:	6022      	streq	r2, [r4, #0]
 8003a4a:	6004      	str	r4, [r0, #0]
 8003a4c:	e7ec      	b.n	8003a28 <_free_r+0x24>
 8003a4e:	4613      	mov	r3, r2
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	b10a      	cbz	r2, 8003a58 <_free_r+0x54>
 8003a54:	42a2      	cmp	r2, r4
 8003a56:	d9fa      	bls.n	8003a4e <_free_r+0x4a>
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	1858      	adds	r0, r3, r1
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d10b      	bne.n	8003a78 <_free_r+0x74>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	4401      	add	r1, r0
 8003a64:	1858      	adds	r0, r3, r1
 8003a66:	4282      	cmp	r2, r0
 8003a68:	6019      	str	r1, [r3, #0]
 8003a6a:	d1dd      	bne.n	8003a28 <_free_r+0x24>
 8003a6c:	6810      	ldr	r0, [r2, #0]
 8003a6e:	6852      	ldr	r2, [r2, #4]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	4401      	add	r1, r0
 8003a74:	6019      	str	r1, [r3, #0]
 8003a76:	e7d7      	b.n	8003a28 <_free_r+0x24>
 8003a78:	d902      	bls.n	8003a80 <_free_r+0x7c>
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	602b      	str	r3, [r5, #0]
 8003a7e:	e7d3      	b.n	8003a28 <_free_r+0x24>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	1821      	adds	r1, r4, r0
 8003a84:	428a      	cmp	r2, r1
 8003a86:	bf04      	itt	eq
 8003a88:	6811      	ldreq	r1, [r2, #0]
 8003a8a:	6852      	ldreq	r2, [r2, #4]
 8003a8c:	6062      	str	r2, [r4, #4]
 8003a8e:	bf04      	itt	eq
 8003a90:	1809      	addeq	r1, r1, r0
 8003a92:	6021      	streq	r1, [r4, #0]
 8003a94:	605c      	str	r4, [r3, #4]
 8003a96:	e7c7      	b.n	8003a28 <_free_r+0x24>
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000009c 	.word	0x2000009c

08003aa0 <_malloc_r>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	1ccd      	adds	r5, r1, #3
 8003aa4:	f025 0503 	bic.w	r5, r5, #3
 8003aa8:	3508      	adds	r5, #8
 8003aaa:	2d0c      	cmp	r5, #12
 8003aac:	bf38      	it	cc
 8003aae:	250c      	movcc	r5, #12
 8003ab0:	2d00      	cmp	r5, #0
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	db01      	blt.n	8003aba <_malloc_r+0x1a>
 8003ab6:	42a9      	cmp	r1, r5
 8003ab8:	d903      	bls.n	8003ac2 <_malloc_r+0x22>
 8003aba:	230c      	movs	r3, #12
 8003abc:	6033      	str	r3, [r6, #0]
 8003abe:	2000      	movs	r0, #0
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	f000 fbb9 	bl	8004238 <__malloc_lock>
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <_malloc_r+0xac>)
 8003ac8:	6814      	ldr	r4, [r2, #0]
 8003aca:	4621      	mov	r1, r4
 8003acc:	b991      	cbnz	r1, 8003af4 <_malloc_r+0x54>
 8003ace:	4c20      	ldr	r4, [pc, #128]	; (8003b50 <_malloc_r+0xb0>)
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	b91b      	cbnz	r3, 8003adc <_malloc_r+0x3c>
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f000 fb05 	bl	80040e4 <_sbrk_r>
 8003ada:	6020      	str	r0, [r4, #0]
 8003adc:	4629      	mov	r1, r5
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 fb00 	bl	80040e4 <_sbrk_r>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d124      	bne.n	8003b32 <_malloc_r+0x92>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	6033      	str	r3, [r6, #0]
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 fba4 	bl	800423a <__malloc_unlock>
 8003af2:	e7e4      	b.n	8003abe <_malloc_r+0x1e>
 8003af4:	680b      	ldr	r3, [r1, #0]
 8003af6:	1b5b      	subs	r3, r3, r5
 8003af8:	d418      	bmi.n	8003b2c <_malloc_r+0x8c>
 8003afa:	2b0b      	cmp	r3, #11
 8003afc:	d90f      	bls.n	8003b1e <_malloc_r+0x7e>
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	50cd      	str	r5, [r1, r3]
 8003b02:	18cc      	adds	r4, r1, r3
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 fb98 	bl	800423a <__malloc_unlock>
 8003b0a:	f104 000b 	add.w	r0, r4, #11
 8003b0e:	1d23      	adds	r3, r4, #4
 8003b10:	f020 0007 	bic.w	r0, r0, #7
 8003b14:	1ac3      	subs	r3, r0, r3
 8003b16:	d0d3      	beq.n	8003ac0 <_malloc_r+0x20>
 8003b18:	425a      	negs	r2, r3
 8003b1a:	50e2      	str	r2, [r4, r3]
 8003b1c:	e7d0      	b.n	8003ac0 <_malloc_r+0x20>
 8003b1e:	428c      	cmp	r4, r1
 8003b20:	684b      	ldr	r3, [r1, #4]
 8003b22:	bf16      	itet	ne
 8003b24:	6063      	strne	r3, [r4, #4]
 8003b26:	6013      	streq	r3, [r2, #0]
 8003b28:	460c      	movne	r4, r1
 8003b2a:	e7eb      	b.n	8003b04 <_malloc_r+0x64>
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	6849      	ldr	r1, [r1, #4]
 8003b30:	e7cc      	b.n	8003acc <_malloc_r+0x2c>
 8003b32:	1cc4      	adds	r4, r0, #3
 8003b34:	f024 0403 	bic.w	r4, r4, #3
 8003b38:	42a0      	cmp	r0, r4
 8003b3a:	d005      	beq.n	8003b48 <_malloc_r+0xa8>
 8003b3c:	1a21      	subs	r1, r4, r0
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f000 fad0 	bl	80040e4 <_sbrk_r>
 8003b44:	3001      	adds	r0, #1
 8003b46:	d0cf      	beq.n	8003ae8 <_malloc_r+0x48>
 8003b48:	6025      	str	r5, [r4, #0]
 8003b4a:	e7db      	b.n	8003b04 <_malloc_r+0x64>
 8003b4c:	2000009c 	.word	0x2000009c
 8003b50:	200000a0 	.word	0x200000a0

08003b54 <__sfputc_r>:
 8003b54:	6893      	ldr	r3, [r2, #8]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	b410      	push	{r4}
 8003b5c:	6093      	str	r3, [r2, #8]
 8003b5e:	da08      	bge.n	8003b72 <__sfputc_r+0x1e>
 8003b60:	6994      	ldr	r4, [r2, #24]
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	db01      	blt.n	8003b6a <__sfputc_r+0x16>
 8003b66:	290a      	cmp	r1, #10
 8003b68:	d103      	bne.n	8003b72 <__sfputc_r+0x1e>
 8003b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b6e:	f7ff bcab 	b.w	80034c8 <__swbuf_r>
 8003b72:	6813      	ldr	r3, [r2, #0]
 8003b74:	1c58      	adds	r0, r3, #1
 8003b76:	6010      	str	r0, [r2, #0]
 8003b78:	7019      	strb	r1, [r3, #0]
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <__sfputs_r>:
 8003b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b84:	4606      	mov	r6, r0
 8003b86:	460f      	mov	r7, r1
 8003b88:	4614      	mov	r4, r2
 8003b8a:	18d5      	adds	r5, r2, r3
 8003b8c:	42ac      	cmp	r4, r5
 8003b8e:	d101      	bne.n	8003b94 <__sfputs_r+0x12>
 8003b90:	2000      	movs	r0, #0
 8003b92:	e007      	b.n	8003ba4 <__sfputs_r+0x22>
 8003b94:	463a      	mov	r2, r7
 8003b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffda 	bl	8003b54 <__sfputc_r>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d1f3      	bne.n	8003b8c <__sfputs_r+0xa>
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ba8 <_vfiprintf_r>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	460c      	mov	r4, r1
 8003bae:	b09d      	sub	sp, #116	; 0x74
 8003bb0:	4617      	mov	r7, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	b118      	cbz	r0, 8003bc0 <_vfiprintf_r+0x18>
 8003bb8:	6983      	ldr	r3, [r0, #24]
 8003bba:	b90b      	cbnz	r3, 8003bc0 <_vfiprintf_r+0x18>
 8003bbc:	f7ff fe34 	bl	8003828 <__sinit>
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <_vfiprintf_r+0x20c>)
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	d158      	bne.n	8003c78 <_vfiprintf_r+0xd0>
 8003bc6:	6874      	ldr	r4, [r6, #4]
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	0718      	lsls	r0, r3, #28
 8003bcc:	d55e      	bpl.n	8003c8c <_vfiprintf_r+0xe4>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <_vfiprintf_r+0xe4>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd8:	2320      	movs	r3, #32
 8003bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bde:	2330      	movs	r3, #48	; 0x30
 8003be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003be4:	9503      	str	r5, [sp, #12]
 8003be6:	f04f 0b01 	mov.w	fp, #1
 8003bea:	46b8      	mov	r8, r7
 8003bec:	4645      	mov	r5, r8
 8003bee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bf2:	b10b      	cbz	r3, 8003bf8 <_vfiprintf_r+0x50>
 8003bf4:	2b25      	cmp	r3, #37	; 0x25
 8003bf6:	d154      	bne.n	8003ca2 <_vfiprintf_r+0xfa>
 8003bf8:	ebb8 0a07 	subs.w	sl, r8, r7
 8003bfc:	d00b      	beq.n	8003c16 <_vfiprintf_r+0x6e>
 8003bfe:	4653      	mov	r3, sl
 8003c00:	463a      	mov	r2, r7
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	f7ff ffbc 	bl	8003b82 <__sfputs_r>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f000 80c2 	beq.w	8003d94 <_vfiprintf_r+0x1ec>
 8003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c12:	4453      	add	r3, sl
 8003c14:	9309      	str	r3, [sp, #36]	; 0x24
 8003c16:	f898 3000 	ldrb.w	r3, [r8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80ba 	beq.w	8003d94 <_vfiprintf_r+0x1ec>
 8003c20:	2300      	movs	r3, #0
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	9307      	str	r3, [sp, #28]
 8003c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c32:	931a      	str	r3, [sp, #104]	; 0x68
 8003c34:	46a8      	mov	r8, r5
 8003c36:	2205      	movs	r2, #5
 8003c38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c3c:	485e      	ldr	r0, [pc, #376]	; (8003db8 <_vfiprintf_r+0x210>)
 8003c3e:	f7fc facf 	bl	80001e0 <memchr>
 8003c42:	9b04      	ldr	r3, [sp, #16]
 8003c44:	bb78      	cbnz	r0, 8003ca6 <_vfiprintf_r+0xfe>
 8003c46:	06d9      	lsls	r1, r3, #27
 8003c48:	bf44      	itt	mi
 8003c4a:	2220      	movmi	r2, #32
 8003c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c50:	071a      	lsls	r2, r3, #28
 8003c52:	bf44      	itt	mi
 8003c54:	222b      	movmi	r2, #43	; 0x2b
 8003c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c5a:	782a      	ldrb	r2, [r5, #0]
 8003c5c:	2a2a      	cmp	r2, #42	; 0x2a
 8003c5e:	d02a      	beq.n	8003cb6 <_vfiprintf_r+0x10e>
 8003c60:	9a07      	ldr	r2, [sp, #28]
 8003c62:	46a8      	mov	r8, r5
 8003c64:	2000      	movs	r0, #0
 8003c66:	250a      	movs	r5, #10
 8003c68:	4641      	mov	r1, r8
 8003c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c6e:	3b30      	subs	r3, #48	; 0x30
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d969      	bls.n	8003d48 <_vfiprintf_r+0x1a0>
 8003c74:	b360      	cbz	r0, 8003cd0 <_vfiprintf_r+0x128>
 8003c76:	e024      	b.n	8003cc2 <_vfiprintf_r+0x11a>
 8003c78:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <_vfiprintf_r+0x214>)
 8003c7a:	429c      	cmp	r4, r3
 8003c7c:	d101      	bne.n	8003c82 <_vfiprintf_r+0xda>
 8003c7e:	68b4      	ldr	r4, [r6, #8]
 8003c80:	e7a2      	b.n	8003bc8 <_vfiprintf_r+0x20>
 8003c82:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <_vfiprintf_r+0x218>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	bf08      	it	eq
 8003c88:	68f4      	ldreq	r4, [r6, #12]
 8003c8a:	e79d      	b.n	8003bc8 <_vfiprintf_r+0x20>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f7ff fc6c 	bl	800356c <__swsetup_r>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d09d      	beq.n	8003bd4 <_vfiprintf_r+0x2c>
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	b01d      	add	sp, #116	; 0x74
 8003c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca2:	46a8      	mov	r8, r5
 8003ca4:	e7a2      	b.n	8003bec <_vfiprintf_r+0x44>
 8003ca6:	4a44      	ldr	r2, [pc, #272]	; (8003db8 <_vfiprintf_r+0x210>)
 8003ca8:	1a80      	subs	r0, r0, r2
 8003caa:	fa0b f000 	lsl.w	r0, fp, r0
 8003cae:	4318      	orrs	r0, r3
 8003cb0:	9004      	str	r0, [sp, #16]
 8003cb2:	4645      	mov	r5, r8
 8003cb4:	e7be      	b.n	8003c34 <_vfiprintf_r+0x8c>
 8003cb6:	9a03      	ldr	r2, [sp, #12]
 8003cb8:	1d11      	adds	r1, r2, #4
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	9103      	str	r1, [sp, #12]
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	db01      	blt.n	8003cc6 <_vfiprintf_r+0x11e>
 8003cc2:	9207      	str	r2, [sp, #28]
 8003cc4:	e004      	b.n	8003cd0 <_vfiprintf_r+0x128>
 8003cc6:	4252      	negs	r2, r2
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	9207      	str	r2, [sp, #28]
 8003cce:	9304      	str	r3, [sp, #16]
 8003cd0:	f898 3000 	ldrb.w	r3, [r8]
 8003cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8003cd6:	d10e      	bne.n	8003cf6 <_vfiprintf_r+0x14e>
 8003cd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8003cde:	d138      	bne.n	8003d52 <_vfiprintf_r+0x1aa>
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	9203      	str	r2, [sp, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bfb8      	it	lt
 8003cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cf0:	f108 0802 	add.w	r8, r8, #2
 8003cf4:	9305      	str	r3, [sp, #20]
 8003cf6:	4d33      	ldr	r5, [pc, #204]	; (8003dc4 <_vfiprintf_r+0x21c>)
 8003cf8:	f898 1000 	ldrb.w	r1, [r8]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7fc fa6e 	bl	80001e0 <memchr>
 8003d04:	b140      	cbz	r0, 8003d18 <_vfiprintf_r+0x170>
 8003d06:	2340      	movs	r3, #64	; 0x40
 8003d08:	1b40      	subs	r0, r0, r5
 8003d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d0e:	9b04      	ldr	r3, [sp, #16]
 8003d10:	4303      	orrs	r3, r0
 8003d12:	f108 0801 	add.w	r8, r8, #1
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	f898 1000 	ldrb.w	r1, [r8]
 8003d1c:	482a      	ldr	r0, [pc, #168]	; (8003dc8 <_vfiprintf_r+0x220>)
 8003d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d22:	2206      	movs	r2, #6
 8003d24:	f108 0701 	add.w	r7, r8, #1
 8003d28:	f7fc fa5a 	bl	80001e0 <memchr>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d037      	beq.n	8003da0 <_vfiprintf_r+0x1f8>
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <_vfiprintf_r+0x224>)
 8003d32:	bb1b      	cbnz	r3, 8003d7c <_vfiprintf_r+0x1d4>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	3307      	adds	r3, #7
 8003d38:	f023 0307 	bic.w	r3, r3, #7
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d42:	444b      	add	r3, r9
 8003d44:	9309      	str	r3, [sp, #36]	; 0x24
 8003d46:	e750      	b.n	8003bea <_vfiprintf_r+0x42>
 8003d48:	fb05 3202 	mla	r2, r5, r2, r3
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	4688      	mov	r8, r1
 8003d50:	e78a      	b.n	8003c68 <_vfiprintf_r+0xc0>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f108 0801 	add.w	r8, r8, #1
 8003d58:	9305      	str	r3, [sp, #20]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	250a      	movs	r5, #10
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d64:	3a30      	subs	r2, #48	; 0x30
 8003d66:	2a09      	cmp	r2, #9
 8003d68:	d903      	bls.n	8003d72 <_vfiprintf_r+0x1ca>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0c3      	beq.n	8003cf6 <_vfiprintf_r+0x14e>
 8003d6e:	9105      	str	r1, [sp, #20]
 8003d70:	e7c1      	b.n	8003cf6 <_vfiprintf_r+0x14e>
 8003d72:	fb05 2101 	mla	r1, r5, r1, r2
 8003d76:	2301      	movs	r3, #1
 8003d78:	4680      	mov	r8, r0
 8003d7a:	e7f0      	b.n	8003d5e <_vfiprintf_r+0x1b6>
 8003d7c:	ab03      	add	r3, sp, #12
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4622      	mov	r2, r4
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <_vfiprintf_r+0x228>)
 8003d84:	a904      	add	r1, sp, #16
 8003d86:	4630      	mov	r0, r6
 8003d88:	f3af 8000 	nop.w
 8003d8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d90:	4681      	mov	r9, r0
 8003d92:	d1d5      	bne.n	8003d40 <_vfiprintf_r+0x198>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	065b      	lsls	r3, r3, #25
 8003d98:	f53f af7e 	bmi.w	8003c98 <_vfiprintf_r+0xf0>
 8003d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d9e:	e77d      	b.n	8003c9c <_vfiprintf_r+0xf4>
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4622      	mov	r2, r4
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <_vfiprintf_r+0x228>)
 8003da8:	a904      	add	r1, sp, #16
 8003daa:	4630      	mov	r0, r6
 8003dac:	f000 f888 	bl	8003ec0 <_printf_i>
 8003db0:	e7ec      	b.n	8003d8c <_vfiprintf_r+0x1e4>
 8003db2:	bf00      	nop
 8003db4:	080042d4 	.word	0x080042d4
 8003db8:	08004314 	.word	0x08004314
 8003dbc:	080042f4 	.word	0x080042f4
 8003dc0:	080042b4 	.word	0x080042b4
 8003dc4:	0800431a 	.word	0x0800431a
 8003dc8:	0800431e 	.word	0x0800431e
 8003dcc:	00000000 	.word	0x00000000
 8003dd0:	08003b83 	.word	0x08003b83

08003dd4 <_printf_common>:
 8003dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd8:	4691      	mov	r9, r2
 8003dda:	461f      	mov	r7, r3
 8003ddc:	688a      	ldr	r2, [r1, #8]
 8003dde:	690b      	ldr	r3, [r1, #16]
 8003de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bfb8      	it	lt
 8003de8:	4613      	movlt	r3, r2
 8003dea:	f8c9 3000 	str.w	r3, [r9]
 8003dee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003df2:	4606      	mov	r6, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	b112      	cbz	r2, 8003dfe <_printf_common+0x2a>
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f8c9 3000 	str.w	r3, [r9]
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	0699      	lsls	r1, r3, #26
 8003e02:	bf42      	ittt	mi
 8003e04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e08:	3302      	addmi	r3, #2
 8003e0a:	f8c9 3000 	strmi.w	r3, [r9]
 8003e0e:	6825      	ldr	r5, [r4, #0]
 8003e10:	f015 0506 	ands.w	r5, r5, #6
 8003e14:	d107      	bne.n	8003e26 <_printf_common+0x52>
 8003e16:	f104 0a19 	add.w	sl, r4, #25
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	42ab      	cmp	r3, r5
 8003e24:	dc28      	bgt.n	8003e78 <_printf_common+0xa4>
 8003e26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	3300      	adds	r3, #0
 8003e2e:	bf18      	it	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	0692      	lsls	r2, r2, #26
 8003e34:	d42d      	bmi.n	8003e92 <_printf_common+0xbe>
 8003e36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e3a:	4639      	mov	r1, r7
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	47c0      	blx	r8
 8003e40:	3001      	adds	r0, #1
 8003e42:	d020      	beq.n	8003e86 <_printf_common+0xb2>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	68e5      	ldr	r5, [r4, #12]
 8003e48:	f8d9 2000 	ldr.w	r2, [r9]
 8003e4c:	f003 0306 	and.w	r3, r3, #6
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	bf08      	it	eq
 8003e54:	1aad      	subeq	r5, r5, r2
 8003e56:	68a3      	ldr	r3, [r4, #8]
 8003e58:	6922      	ldr	r2, [r4, #16]
 8003e5a:	bf0c      	ite	eq
 8003e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e60:	2500      	movne	r5, #0
 8003e62:	4293      	cmp	r3, r2
 8003e64:	bfc4      	itt	gt
 8003e66:	1a9b      	subgt	r3, r3, r2
 8003e68:	18ed      	addgt	r5, r5, r3
 8003e6a:	f04f 0900 	mov.w	r9, #0
 8003e6e:	341a      	adds	r4, #26
 8003e70:	454d      	cmp	r5, r9
 8003e72:	d11a      	bne.n	8003eaa <_printf_common+0xd6>
 8003e74:	2000      	movs	r0, #0
 8003e76:	e008      	b.n	8003e8a <_printf_common+0xb6>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	47c0      	blx	r8
 8003e82:	3001      	adds	r0, #1
 8003e84:	d103      	bne.n	8003e8e <_printf_common+0xba>
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8e:	3501      	adds	r5, #1
 8003e90:	e7c3      	b.n	8003e1a <_printf_common+0x46>
 8003e92:	18e1      	adds	r1, r4, r3
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	2030      	movs	r0, #48	; 0x30
 8003e98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e9c:	4422      	add	r2, r4
 8003e9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ea2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	e7c5      	b.n	8003e36 <_printf_common+0x62>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4622      	mov	r2, r4
 8003eae:	4639      	mov	r1, r7
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	47c0      	blx	r8
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d0e6      	beq.n	8003e86 <_printf_common+0xb2>
 8003eb8:	f109 0901 	add.w	r9, r9, #1
 8003ebc:	e7d8      	b.n	8003e70 <_printf_common+0x9c>
	...

08003ec0 <_printf_i>:
 8003ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ec4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ec8:	460c      	mov	r4, r1
 8003eca:	7e09      	ldrb	r1, [r1, #24]
 8003ecc:	b085      	sub	sp, #20
 8003ece:	296e      	cmp	r1, #110	; 0x6e
 8003ed0:	4617      	mov	r7, r2
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	4698      	mov	r8, r3
 8003ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ed8:	f000 80b3 	beq.w	8004042 <_printf_i+0x182>
 8003edc:	d822      	bhi.n	8003f24 <_printf_i+0x64>
 8003ede:	2963      	cmp	r1, #99	; 0x63
 8003ee0:	d036      	beq.n	8003f50 <_printf_i+0x90>
 8003ee2:	d80a      	bhi.n	8003efa <_printf_i+0x3a>
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	f000 80b9 	beq.w	800405c <_printf_i+0x19c>
 8003eea:	2958      	cmp	r1, #88	; 0x58
 8003eec:	f000 8083 	beq.w	8003ff6 <_printf_i+0x136>
 8003ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ef8:	e032      	b.n	8003f60 <_printf_i+0xa0>
 8003efa:	2964      	cmp	r1, #100	; 0x64
 8003efc:	d001      	beq.n	8003f02 <_printf_i+0x42>
 8003efe:	2969      	cmp	r1, #105	; 0x69
 8003f00:	d1f6      	bne.n	8003ef0 <_printf_i+0x30>
 8003f02:	6820      	ldr	r0, [r4, #0]
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	0605      	lsls	r5, r0, #24
 8003f08:	f103 0104 	add.w	r1, r3, #4
 8003f0c:	d52a      	bpl.n	8003f64 <_printf_i+0xa4>
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da03      	bge.n	8003f1e <_printf_i+0x5e>
 8003f16:	222d      	movs	r2, #45	; 0x2d
 8003f18:	425b      	negs	r3, r3
 8003f1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f1e:	486f      	ldr	r0, [pc, #444]	; (80040dc <_printf_i+0x21c>)
 8003f20:	220a      	movs	r2, #10
 8003f22:	e039      	b.n	8003f98 <_printf_i+0xd8>
 8003f24:	2973      	cmp	r1, #115	; 0x73
 8003f26:	f000 809d 	beq.w	8004064 <_printf_i+0x1a4>
 8003f2a:	d808      	bhi.n	8003f3e <_printf_i+0x7e>
 8003f2c:	296f      	cmp	r1, #111	; 0x6f
 8003f2e:	d020      	beq.n	8003f72 <_printf_i+0xb2>
 8003f30:	2970      	cmp	r1, #112	; 0x70
 8003f32:	d1dd      	bne.n	8003ef0 <_printf_i+0x30>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f043 0320 	orr.w	r3, r3, #32
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	e003      	b.n	8003f46 <_printf_i+0x86>
 8003f3e:	2975      	cmp	r1, #117	; 0x75
 8003f40:	d017      	beq.n	8003f72 <_printf_i+0xb2>
 8003f42:	2978      	cmp	r1, #120	; 0x78
 8003f44:	d1d4      	bne.n	8003ef0 <_printf_i+0x30>
 8003f46:	2378      	movs	r3, #120	; 0x78
 8003f48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f4c:	4864      	ldr	r0, [pc, #400]	; (80040e0 <_printf_i+0x220>)
 8003f4e:	e055      	b.n	8003ffc <_printf_i+0x13c>
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	1d19      	adds	r1, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6011      	str	r1, [r2, #0]
 8003f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f60:	2301      	movs	r3, #1
 8003f62:	e08c      	b.n	800407e <_printf_i+0x1be>
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6011      	str	r1, [r2, #0]
 8003f68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f6c:	bf18      	it	ne
 8003f6e:	b21b      	sxthne	r3, r3
 8003f70:	e7cf      	b.n	8003f12 <_printf_i+0x52>
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	6825      	ldr	r5, [r4, #0]
 8003f76:	1d18      	adds	r0, r3, #4
 8003f78:	6010      	str	r0, [r2, #0]
 8003f7a:	0628      	lsls	r0, r5, #24
 8003f7c:	d501      	bpl.n	8003f82 <_printf_i+0xc2>
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	e002      	b.n	8003f88 <_printf_i+0xc8>
 8003f82:	0668      	lsls	r0, r5, #25
 8003f84:	d5fb      	bpl.n	8003f7e <_printf_i+0xbe>
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	4854      	ldr	r0, [pc, #336]	; (80040dc <_printf_i+0x21c>)
 8003f8a:	296f      	cmp	r1, #111	; 0x6f
 8003f8c:	bf14      	ite	ne
 8003f8e:	220a      	movne	r2, #10
 8003f90:	2208      	moveq	r2, #8
 8003f92:	2100      	movs	r1, #0
 8003f94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f98:	6865      	ldr	r5, [r4, #4]
 8003f9a:	60a5      	str	r5, [r4, #8]
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	f2c0 8095 	blt.w	80040cc <_printf_i+0x20c>
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	f021 0104 	bic.w	r1, r1, #4
 8003fa8:	6021      	str	r1, [r4, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d13d      	bne.n	800402a <_printf_i+0x16a>
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	f040 808e 	bne.w	80040d0 <_printf_i+0x210>
 8003fb4:	4665      	mov	r5, ip
 8003fb6:	2a08      	cmp	r2, #8
 8003fb8:	d10b      	bne.n	8003fd2 <_printf_i+0x112>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	07db      	lsls	r3, r3, #31
 8003fbe:	d508      	bpl.n	8003fd2 <_printf_i+0x112>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	6862      	ldr	r2, [r4, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bfde      	ittt	le
 8003fc8:	2330      	movle	r3, #48	; 0x30
 8003fca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fd2:	ebac 0305 	sub.w	r3, ip, r5
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	f8cd 8000 	str.w	r8, [sp]
 8003fdc:	463b      	mov	r3, r7
 8003fde:	aa03      	add	r2, sp, #12
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f7ff fef6 	bl	8003dd4 <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d14d      	bne.n	8004088 <_printf_i+0x1c8>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b005      	add	sp, #20
 8003ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ff6:	4839      	ldr	r0, [pc, #228]	; (80040dc <_printf_i+0x21c>)
 8003ff8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ffc:	6813      	ldr	r3, [r2, #0]
 8003ffe:	6821      	ldr	r1, [r4, #0]
 8004000:	1d1d      	adds	r5, r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6015      	str	r5, [r2, #0]
 8004006:	060a      	lsls	r2, r1, #24
 8004008:	d50b      	bpl.n	8004022 <_printf_i+0x162>
 800400a:	07ca      	lsls	r2, r1, #31
 800400c:	bf44      	itt	mi
 800400e:	f041 0120 	orrmi.w	r1, r1, #32
 8004012:	6021      	strmi	r1, [r4, #0]
 8004014:	b91b      	cbnz	r3, 800401e <_printf_i+0x15e>
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	f022 0220 	bic.w	r2, r2, #32
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	2210      	movs	r2, #16
 8004020:	e7b7      	b.n	8003f92 <_printf_i+0xd2>
 8004022:	064d      	lsls	r5, r1, #25
 8004024:	bf48      	it	mi
 8004026:	b29b      	uxthmi	r3, r3
 8004028:	e7ef      	b.n	800400a <_printf_i+0x14a>
 800402a:	4665      	mov	r5, ip
 800402c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004030:	fb02 3311 	mls	r3, r2, r1, r3
 8004034:	5cc3      	ldrb	r3, [r0, r3]
 8004036:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800403a:	460b      	mov	r3, r1
 800403c:	2900      	cmp	r1, #0
 800403e:	d1f5      	bne.n	800402c <_printf_i+0x16c>
 8004040:	e7b9      	b.n	8003fb6 <_printf_i+0xf6>
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	6825      	ldr	r5, [r4, #0]
 8004046:	6961      	ldr	r1, [r4, #20]
 8004048:	1d18      	adds	r0, r3, #4
 800404a:	6010      	str	r0, [r2, #0]
 800404c:	0628      	lsls	r0, r5, #24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	d501      	bpl.n	8004056 <_printf_i+0x196>
 8004052:	6019      	str	r1, [r3, #0]
 8004054:	e002      	b.n	800405c <_printf_i+0x19c>
 8004056:	066a      	lsls	r2, r5, #25
 8004058:	d5fb      	bpl.n	8004052 <_printf_i+0x192>
 800405a:	8019      	strh	r1, [r3, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	4665      	mov	r5, ip
 8004062:	e7b9      	b.n	8003fd8 <_printf_i+0x118>
 8004064:	6813      	ldr	r3, [r2, #0]
 8004066:	1d19      	adds	r1, r3, #4
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	681d      	ldr	r5, [r3, #0]
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	2100      	movs	r1, #0
 8004070:	4628      	mov	r0, r5
 8004072:	f7fc f8b5 	bl	80001e0 <memchr>
 8004076:	b108      	cbz	r0, 800407c <_printf_i+0x1bc>
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	6060      	str	r0, [r4, #4]
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	2300      	movs	r3, #0
 8004082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004086:	e7a7      	b.n	8003fd8 <_printf_i+0x118>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	462a      	mov	r2, r5
 800408c:	4639      	mov	r1, r7
 800408e:	4630      	mov	r0, r6
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d0aa      	beq.n	8003fec <_printf_i+0x12c>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	079b      	lsls	r3, r3, #30
 800409a:	d413      	bmi.n	80040c4 <_printf_i+0x204>
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	4298      	cmp	r0, r3
 80040a2:	bfb8      	it	lt
 80040a4:	4618      	movlt	r0, r3
 80040a6:	e7a3      	b.n	8003ff0 <_printf_i+0x130>
 80040a8:	2301      	movs	r3, #1
 80040aa:	464a      	mov	r2, r9
 80040ac:	4639      	mov	r1, r7
 80040ae:	4630      	mov	r0, r6
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d09a      	beq.n	8003fec <_printf_i+0x12c>
 80040b6:	3501      	adds	r5, #1
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	9a03      	ldr	r2, [sp, #12]
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	42ab      	cmp	r3, r5
 80040c0:	dcf2      	bgt.n	80040a8 <_printf_i+0x1e8>
 80040c2:	e7eb      	b.n	800409c <_printf_i+0x1dc>
 80040c4:	2500      	movs	r5, #0
 80040c6:	f104 0919 	add.w	r9, r4, #25
 80040ca:	e7f5      	b.n	80040b8 <_printf_i+0x1f8>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1ac      	bne.n	800402a <_printf_i+0x16a>
 80040d0:	7803      	ldrb	r3, [r0, #0]
 80040d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040da:	e76c      	b.n	8003fb6 <_printf_i+0xf6>
 80040dc:	08004325 	.word	0x08004325
 80040e0:	08004336 	.word	0x08004336

080040e4 <_sbrk_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4c06      	ldr	r4, [pc, #24]	; (8004100 <_sbrk_r+0x1c>)
 80040e8:	2300      	movs	r3, #0
 80040ea:	4605      	mov	r5, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	f7fd f9a8 	bl	8001444 <_sbrk>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_sbrk_r+0x1a>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_sbrk_r+0x1a>
 80040fc:	602b      	str	r3, [r5, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	2000016c 	.word	0x2000016c

08004104 <__sread>:
 8004104:	b510      	push	{r4, lr}
 8004106:	460c      	mov	r4, r1
 8004108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800410c:	f000 f896 	bl	800423c <_read_r>
 8004110:	2800      	cmp	r0, #0
 8004112:	bfab      	itete	ge
 8004114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004116:	89a3      	ldrhlt	r3, [r4, #12]
 8004118:	181b      	addge	r3, r3, r0
 800411a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800411e:	bfac      	ite	ge
 8004120:	6563      	strge	r3, [r4, #84]	; 0x54
 8004122:	81a3      	strhlt	r3, [r4, #12]
 8004124:	bd10      	pop	{r4, pc}

08004126 <__swrite>:
 8004126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412a:	461f      	mov	r7, r3
 800412c:	898b      	ldrh	r3, [r1, #12]
 800412e:	05db      	lsls	r3, r3, #23
 8004130:	4605      	mov	r5, r0
 8004132:	460c      	mov	r4, r1
 8004134:	4616      	mov	r6, r2
 8004136:	d505      	bpl.n	8004144 <__swrite+0x1e>
 8004138:	2302      	movs	r3, #2
 800413a:	2200      	movs	r2, #0
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 f868 	bl	8004214 <_lseek_r>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800414a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	4632      	mov	r2, r6
 8004152:	463b      	mov	r3, r7
 8004154:	4628      	mov	r0, r5
 8004156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	f000 b817 	b.w	800418c <_write_r>

0800415e <__sseek>:
 800415e:	b510      	push	{r4, lr}
 8004160:	460c      	mov	r4, r1
 8004162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004166:	f000 f855 	bl	8004214 <_lseek_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	bf15      	itete	ne
 8004170:	6560      	strne	r0, [r4, #84]	; 0x54
 8004172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800417a:	81a3      	strheq	r3, [r4, #12]
 800417c:	bf18      	it	ne
 800417e:	81a3      	strhne	r3, [r4, #12]
 8004180:	bd10      	pop	{r4, pc}

08004182 <__sclose>:
 8004182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004186:	f000 b813 	b.w	80041b0 <_close_r>
	...

0800418c <_write_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4c07      	ldr	r4, [pc, #28]	; (80041ac <_write_r+0x20>)
 8004190:	4605      	mov	r5, r0
 8004192:	4608      	mov	r0, r1
 8004194:	4611      	mov	r1, r2
 8004196:	2200      	movs	r2, #0
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f7fd f901 	bl	80013a2 <_write>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_write_r+0x1e>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_write_r+0x1e>
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	2000016c 	.word	0x2000016c

080041b0 <_close_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4c06      	ldr	r4, [pc, #24]	; (80041cc <_close_r+0x1c>)
 80041b4:	2300      	movs	r3, #0
 80041b6:	4605      	mov	r5, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	f7fd f90d 	bl	80013da <_close>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_close_r+0x1a>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_close_r+0x1a>
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	2000016c 	.word	0x2000016c

080041d0 <_fstat_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4c07      	ldr	r4, [pc, #28]	; (80041f0 <_fstat_r+0x20>)
 80041d4:	2300      	movs	r3, #0
 80041d6:	4605      	mov	r5, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	f7fd f908 	bl	80013f2 <_fstat>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d102      	bne.n	80041ec <_fstat_r+0x1c>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	b103      	cbz	r3, 80041ec <_fstat_r+0x1c>
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	bd38      	pop	{r3, r4, r5, pc}
 80041ee:	bf00      	nop
 80041f0:	2000016c 	.word	0x2000016c

080041f4 <_isatty_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4c06      	ldr	r4, [pc, #24]	; (8004210 <_isatty_r+0x1c>)
 80041f8:	2300      	movs	r3, #0
 80041fa:	4605      	mov	r5, r0
 80041fc:	4608      	mov	r0, r1
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	f7fd f907 	bl	8001412 <_isatty>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_isatty_r+0x1a>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	b103      	cbz	r3, 800420e <_isatty_r+0x1a>
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	2000016c 	.word	0x2000016c

08004214 <_lseek_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4c07      	ldr	r4, [pc, #28]	; (8004234 <_lseek_r+0x20>)
 8004218:	4605      	mov	r5, r0
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	2200      	movs	r2, #0
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fd f900 	bl	8001428 <_lseek>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_lseek_r+0x1e>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	b103      	cbz	r3, 8004232 <_lseek_r+0x1e>
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000016c 	.word	0x2000016c

08004238 <__malloc_lock>:
 8004238:	4770      	bx	lr

0800423a <__malloc_unlock>:
 800423a:	4770      	bx	lr

0800423c <_read_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4c07      	ldr	r4, [pc, #28]	; (800425c <_read_r+0x20>)
 8004240:	4605      	mov	r5, r0
 8004242:	4608      	mov	r0, r1
 8004244:	4611      	mov	r1, r2
 8004246:	2200      	movs	r2, #0
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	f7fd f88c 	bl	8001368 <_read>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_read_r+0x1e>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	b103      	cbz	r3, 800425a <_read_r+0x1e>
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	2000016c 	.word	0x2000016c

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
