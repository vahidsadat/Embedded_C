
1_task_Creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac0  20000074  08005f70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b34  08005f70  00024b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019338  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003140  00000000  00000000  000393dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003c520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003d870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004645  00000000  00000000  0003ea68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1e1  00000000  00000000  000430ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009694f  00000000  00000000  0005228e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8bdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  000e8c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dd4 	.word	0x08005dd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005dd4 	.word	0x08005dd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
void vRedLEDControllerTask(void *pvParameters);
void vGreenLEDControllerTask(void *pvParameters);
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler,GreenTaskProfiler;
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  HAL_Init();
 8000586:	f000 fac3 	bl	8000b10 <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f839 	bl	8000600 <SystemClock_Config>
  MX_GPIO_Init();
 800058e:	f000 f8c1 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f895 	bl	80006c0 <MX_USART2_UART_Init>
//  xTaskCreate(vBlueLEDControllerTask,"Blue LED Controller", 200, NULL, 1, NULL);
  xTaskCreate(vRedLEDControllerTask,"Red LED Controller", 100, NULL, 1, NULL);
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2264      	movs	r2, #100	; 0x64
 80005a2:	4903      	ldr	r1, [pc, #12]	; (80005b0 <main+0x30>)
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <main+0x34>)
 80005a6:	f002 fea7 	bl	80032f8 <xTaskCreate>
//  xTaskCreate(vGreenLEDControllerTask,"Red LED Controller", 200, NULL, 1, NULL);
  vTaskStartScheduler();
 80005aa:	f003 f801 	bl	80035b0 <vTaskStartScheduler>

  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0x2e>
 80005b0:	08005dec 	.word	0x08005dec
 80005b4:	080005b9 	.word	0x080005b9

080005b8 <vRedLEDControllerTask>:
		BlueTaskProfiler++;
		}

	}
void vRedLEDControllerTask(void *pvParameters)
	{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	while(1)
		{
		RedTaskProfiler++;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <vRedLEDControllerTask+0x1c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <vRedLEDControllerTask+0x1c>)
 80005c8:	6013      	str	r3, [r2, #0]
		printf("vRedLEDControllerTask running... \n\r");
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <vRedLEDControllerTask+0x20>)
 80005cc:	f004 fdd8 	bl	8005180 <iprintf>
		RedTaskProfiler++;
 80005d0:	e7f6      	b.n	80005c0 <vRedLEDControllerTask+0x8>
 80005d2:	bf00      	nop
 80005d4:	20004a64 	.word	0x20004a64
 80005d8:	08005e00 	.word	0x08005e00

080005dc <__io_putchar>:
		}

	}

int __io_putchar(int ch)
	{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t* )&ch, 1, 0xFFFFFF);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <__io_putchar+0x20>)
 80005ee:	f001 fc0e 	bl	8001e0e <HAL_UART_Transmit>
	return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
	}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20004a6c 	.word	0x20004a6c

08000600 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fd53 	bl	80050ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xb8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <SystemClock_Config+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xbc>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fcf1 	bl	800105c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 f874 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff4c 	bl	800153c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f85f 	bl	800076c <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f001 fb3c 	bl	8001d74 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f833 	bl	800076c <Error_Handler>
  }

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20004a6c 	.word	0x20004a6c
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_GPIO_Init+0x30>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <MX_GPIO_Init+0x30>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_GPIO_Init+0x30>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d101      	bne.n	800075e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075a:	f000 f9fb 	bl	8000b54 <HAL_IncTick>
  }
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40010000 	.word	0x40010000

0800076c <Error_Handler>:

void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <HAL_MspInit+0x54>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_MspInit+0x54>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 fa9f 	bl	8000d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_UART_MspInit+0x84>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12b      	bne.n	800084e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_UART_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_UART_MspInit+0x88>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_UART_MspInit+0x88>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_UART_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <HAL_UART_MspInit+0x88>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_UART_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800082e:	230c      	movs	r3, #12
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083e:	2307      	movs	r3, #7
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <HAL_UART_MspInit+0x8c>)
 800084a:	f000 fa85 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40004400 	.word	0x40004400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2019      	movs	r0, #25
 800087a:	f000 fa43 	bl	8000d04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800087e:	2019      	movs	r0, #25
 8000880:	f000 fa5c 	bl	8000d3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <HAL_InitTick+0xa0>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <HAL_InitTick+0xa0>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6453      	str	r3, [r2, #68]	; 0x44
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_InitTick+0xa0>)
 8000896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f812 	bl	80018d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008b0:	f000 fffc 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 80008b4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <HAL_InitTick+0xa4>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0c9b      	lsrs	r3, r3, #18
 80008c0:	3b01      	subs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_InitTick+0xa8>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <HAL_InitTick+0xac>)
 80008c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_InitTick+0xa8>)
 80008cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_InitTick+0xa8>)
 80008d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_InitTick+0xa8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_InitTick+0xa8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_InitTick+0xa8>)
 80008e6:	f001 f827 	bl	8001938 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <HAL_InitTick+0xa8>)
 80008f2:	f001 f856 	bl	80019a2 <HAL_TIM_Base_Start_IT>
 80008f6:	4603      	mov	r3, r0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	431bde83 	.word	0x431bde83
 800090c:	20004aac 	.word	0x20004aac
 8000910:	40010000 	.word	0x40010000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094e:	f001 f84c 	bl	80019ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20004aac 	.word	0x20004aac

0800095c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e00a      	b.n	8000984 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800096e:	f3af 8000 	nop.w
 8000972:	4601      	mov	r1, r0
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	60ba      	str	r2, [r7, #8]
 800097a:	b2ca      	uxtb	r2, r1
 800097c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbf0      	blt.n	800096e <_read+0x12>
	}

return len;
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e009      	b.n	80009bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	60ba      	str	r2, [r7, #8]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe13 	bl	80005dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbf1      	blt.n	80009a8 <_write+0x12>
	}
	return len;
 80009c4:	687b      	ldr	r3, [r7, #4]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_close>:

int _close(int file)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
	return -1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	605a      	str	r2, [r3, #4]
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_isatty>:

int _isatty(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x50>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x16>
		heap_end = &end;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <_sbrk+0x50>)
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <_sbrk+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <_sbrk+0x50>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <_sbrk+0x50>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	466a      	mov	r2, sp
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d907      	bls.n	8000a72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a62:	f004 fa2b 	bl	8004ebc <__errno>
 8000a66:	4602      	mov	r2, r0
 8000a68:	230c      	movs	r3, #12
 8000a6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	e006      	b.n	8000a80 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <_sbrk+0x50>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <_sbrk+0x50>)
 8000a7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000090 	.word	0x20000090
 8000a8c:	20004b38 	.word	0x20004b38

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <SystemInit+0x28>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <SystemInit+0x28>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SystemInit+0x28>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000adc:	f842 3b04 	str.w	r3, [r2], #4

08000ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd3 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f004 fab7 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd47 	bl	8000580 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000af8:	08005efc 	.word	0x08005efc
  ldr  r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b00:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b04:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b08:	20004b34 	.word	0x20004b34

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f8d8 	bl	8000cee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fe90 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe1a 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20004aec 	.word	0x20004aec

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20004aec 	.word	0x20004aec

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff4c 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d16:	f7ff ff61 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff ffb1 	bl	8000c88 <NVIC_EncodePriority>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff80 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff54 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e159      	b.n	8001028 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8148 	bne.w	8001022 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d00b      	beq.n	8000db2 <HAL_GPIO_Init+0x5a>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da6:	2b11      	cmp	r3, #17
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d130      	bne.n	8000e14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0201 	and.w	r2, r3, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0xfc>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b12      	cmp	r3, #18
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80a2 	beq.w	8001022 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b56      	ldr	r3, [pc, #344]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a55      	ldr	r2, [pc, #340]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b53      	ldr	r3, [pc, #332]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a51      	ldr	r2, [pc, #324]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a48      	ldr	r2, [pc, #288]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x202>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a47      	ldr	r2, [pc, #284]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x1fe>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_GPIO_Init+0x2f4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a45      	ldr	r2, [pc, #276]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x1f2>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4934      	ldr	r1, [pc, #208]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9e:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc8:	4a23      	ldr	r2, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_GPIO_Init+0x300>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f aea2 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e25b      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d075      	beq.n	8001166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107a:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d112      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b99      	ldr	r3, [pc, #612]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d05b      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d157      	bne.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e236      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x74>
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a90      	ldr	r2, [pc, #576]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a8a      	ldr	r2, [pc, #552]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a87      	ldr	r2, [pc, #540]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a83      	ldr	r2, [pc, #524]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b81      	ldr	r3, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a80      	ldr	r2, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fd32 	bl	8000b7c <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fd2e 	bl	8000b7c <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1fb      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xc0>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fd1e 	bl	8000b7c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fd1a 	bl	8000b7c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1e7      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e1bb      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b56      	ldr	r3, [pc, #344]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4952      	ldr	r1, [pc, #328]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fcd3 	bl	8000b7c <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fccf 	bl	8000b7c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e19c      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4940      	ldr	r1, [pc, #256]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fcb2 	bl	8000b7c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fcae 	bl	8000b7c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e17b      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d030      	beq.n	80012a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fc92 	bl	8000b7c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc8e 	bl	8000b7c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e15b      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x200>
 800127a:	e015      	b.n	80012a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fc7b 	bl	8000b7c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fc77 	bl	8000b7c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e144      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a0 	beq.w	80013f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d121      	bne.n	8001336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc3d 	bl	8000b7c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e011      	b.n	800132a <HAL_RCC_OscConfig+0x2ce>
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
 8001314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff fc30 	bl	8000b7c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0fd      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_RCC_OscConfig+0x4d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
 800133e:	4b7d      	ldr	r3, [pc, #500]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a7c      	ldr	r2, [pc, #496]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	e01c      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x312>
 8001354:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	4a76      	ldr	r2, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6713      	str	r3, [r2, #112]	; 0x70
 8001360:	4b74      	ldr	r3, [pc, #464]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a73      	ldr	r2, [pc, #460]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800136e:	4b71      	ldr	r3, [pc, #452]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a70      	ldr	r2, [pc, #448]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	4b6e      	ldr	r3, [pc, #440]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a6d      	ldr	r2, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d015      	beq.n	80013ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff fbf5 	bl	8000b7c <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fbf1 	bl	8000b7c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0bc      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <HAL_RCC_OscConfig+0x33a>
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbdf 	bl	8000b7c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fbdb 	bl	8000b7c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0a6      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b52      	ldr	r3, [pc, #328]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8092 	beq.w	8001524 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d05c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d141      	bne.n	8001498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b48      	ldr	r3, [pc, #288]	; (8001538 <HAL_RCC_OscConfig+0x4dc>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fbaf 	bl	8000b7c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fbab 	bl	8000b7c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e078      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001434:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	019b      	lsls	r3, r3, #6
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	061b      	lsls	r3, r3, #24
 8001464:	4933      	ldr	r1, [pc, #204]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x4dc>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb84 	bl	8000b7c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fb80 	bl	8000b7c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e04d      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x41c>
 8001496:	e045      	b.n	8001524 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x4dc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb6d 	bl	8000b7c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb69 	bl	8000b7c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e036      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x44a>
 80014c4:	e02e      	b.n	8001524 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e029      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d11c      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d115      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014fa:	4013      	ands	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001500:	4293      	cmp	r3, r2
 8001502:	d10d      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40007000 	.word	0x40007000
 8001534:	40023800 	.word	0x40023800
 8001538:	42470060 	.word	0x42470060

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0cc      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d90c      	bls.n	8001578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b8      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800159a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	494d      	ldr	r1, [pc, #308]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d044      	beq.n	800165c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e067      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4934      	ldr	r1, [pc, #208]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800162c:	f7ff faa6 	bl	8000b7c <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff faa2 	bl	8000b7c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e04f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d20c      	bcs.n	8001684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e032      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4916      	ldr	r1, [pc, #88]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c2:	f000 f821 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016c6:	4601      	mov	r1, r0
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	fa21 f303 	lsr.w	r3, r1, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f8be 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	08005e3c 	.word	0x08005e3c
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_GetSysClockFreq+0x158>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d007      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x32>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d008      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x38>
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 808d 	bne.w	800184e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001736:	60bb      	str	r3, [r7, #8]
       break;
 8001738:	e08c      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800173a:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 800173c:	60bb      	str	r3, [r7, #8]
      break;
 800173e:	e089      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_GetSysClockFreq+0x158>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174a:	4b45      	ldr	r3, [pc, #276]	; (8001860 <HAL_RCC_GetSysClockFreq+0x158>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d023      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_RCC_GetSysClockFreq+0x158>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	ea03 0501 	and.w	r5, r3, r1
 800176c:	ea04 0602 	and.w	r6, r4, r2
 8001770:	4a3d      	ldr	r2, [pc, #244]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 8001772:	fb02 f106 	mul.w	r1, r2, r6
 8001776:	2200      	movs	r2, #0
 8001778:	fb02 f205 	mul.w	r2, r2, r5
 800177c:	440a      	add	r2, r1
 800177e:	493a      	ldr	r1, [pc, #232]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 8001780:	fba5 0101 	umull	r0, r1, r5, r1
 8001784:	1853      	adds	r3, r2, r1
 8001786:	4619      	mov	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	461a      	mov	r2, r3
 8001790:	4623      	mov	r3, r4
 8001792:	f7fe fd75 	bl	8000280 <__aeabi_uldivmod>
 8001796:	4603      	mov	r3, r0
 8001798:	460c      	mov	r4, r1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e049      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_RCC_GetSysClockFreq+0x158>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	099b      	lsrs	r3, r3, #6
 80017a4:	f04f 0400 	mov.w	r4, #0
 80017a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	ea03 0501 	and.w	r5, r3, r1
 80017b4:	ea04 0602 	and.w	r6, r4, r2
 80017b8:	4629      	mov	r1, r5
 80017ba:	4632      	mov	r2, r6
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f04f 0400 	mov.w	r4, #0
 80017c4:	0154      	lsls	r4, r2, #5
 80017c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017ca:	014b      	lsls	r3, r1, #5
 80017cc:	4619      	mov	r1, r3
 80017ce:	4622      	mov	r2, r4
 80017d0:	1b49      	subs	r1, r1, r5
 80017d2:	eb62 0206 	sbc.w	r2, r2, r6
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	f04f 0400 	mov.w	r4, #0
 80017de:	0194      	lsls	r4, r2, #6
 80017e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017e4:	018b      	lsls	r3, r1, #6
 80017e6:	1a5b      	subs	r3, r3, r1
 80017e8:	eb64 0402 	sbc.w	r4, r4, r2
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	00e2      	lsls	r2, r4, #3
 80017f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017fa:	00d9      	lsls	r1, r3, #3
 80017fc:	460b      	mov	r3, r1
 80017fe:	4614      	mov	r4, r2
 8001800:	195b      	adds	r3, r3, r5
 8001802:	eb44 0406 	adc.w	r4, r4, r6
 8001806:	f04f 0100 	mov.w	r1, #0
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	02a2      	lsls	r2, r4, #10
 8001810:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001814:	0299      	lsls	r1, r3, #10
 8001816:	460b      	mov	r3, r1
 8001818:	4614      	mov	r4, r2
 800181a:	4618      	mov	r0, r3
 800181c:	4621      	mov	r1, r4
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	f7fe fd2a 	bl	8000280 <__aeabi_uldivmod>
 800182c:	4603      	mov	r3, r0
 800182e:	460c      	mov	r4, r1
 8001830:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_GetSysClockFreq+0x158>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	3301      	adds	r3, #1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	60bb      	str	r3, [r7, #8]
      break;
 800184c:	e002      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001850:	60bb      	str	r3, [r7, #8]
      break;
 8001852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001854:	68bb      	ldr	r3, [r7, #8]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400
 8001868:	017d7840 	.word	0x017d7840

0800186c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_RCC_GetHCLKFreq+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000000 	.word	0x20000000

08001884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001888:	f7ff fff0 	bl	800186c <HAL_RCC_GetHCLKFreq>
 800188c:	4601      	mov	r1, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	0a9b      	lsrs	r3, r3, #10
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	08005e4c 	.word	0x08005e4c

080018ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b0:	f7ff ffdc 	bl	800186c <HAL_RCC_GetHCLKFreq>
 80018b4:	4601      	mov	r1, r0
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0b5b      	lsrs	r3, r3, #13
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08005e4c 	.word	0x08005e4c

080018d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	220f      	movs	r2, #15
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_RCC_GetClockConfig+0x60>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 020f 	and.w	r2, r3, #15
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	601a      	str	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e01d      	b.n	8001986 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f815 	bl	800198e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 f968 	bl	8001c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b06      	cmp	r3, #6
 80019ca:	d007      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d122      	bne.n	8001a46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d11b      	bne.n	8001a46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f06f 0202 	mvn.w	r2, #2
 8001a16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8ee 	bl	8001c0e <HAL_TIM_IC_CaptureCallback>
 8001a32:	e005      	b.n	8001a40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8e0 	bl	8001bfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f8f1 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d122      	bne.n	8001a9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d11b      	bne.n	8001a9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f06f 0204 	mvn.w	r2, #4
 8001a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8c4 	bl	8001c0e <HAL_TIM_IC_CaptureCallback>
 8001a86:	e005      	b.n	8001a94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8b6 	bl	8001bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8c7 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d122      	bne.n	8001aee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11b      	bne.n	8001aee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0208 	mvn.w	r2, #8
 8001abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f89a 	bl	8001c0e <HAL_TIM_IC_CaptureCallback>
 8001ada:	e005      	b.n	8001ae8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f88c 	bl	8001bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f89d 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d122      	bne.n	8001b42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d11b      	bne.n	8001b42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0210 	mvn.w	r2, #16
 8001b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2208      	movs	r2, #8
 8001b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f870 	bl	8001c0e <HAL_TIM_IC_CaptureCallback>
 8001b2e:	e005      	b.n	8001b3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f862 	bl	8001bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f873 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10e      	bne.n	8001b6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0201 	mvn.w	r2, #1
 8001b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7fe fded 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	d10e      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	d107      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8e3 	bl	8001d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d107      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f838 	bl	8001c36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d10e      	bne.n	8001bf2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d107      	bne.n	8001bf2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f06f 0220 	mvn.w	r2, #32
 8001bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8ad 	bl	8001d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a34      	ldr	r2, [pc, #208]	; (8001d30 <TIM_Base_SetConfig+0xe4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00f      	beq.n	8001c84 <TIM_Base_SetConfig+0x38>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6a:	d00b      	beq.n	8001c84 <TIM_Base_SetConfig+0x38>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <TIM_Base_SetConfig+0xe8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d007      	beq.n	8001c84 <TIM_Base_SetConfig+0x38>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <TIM_Base_SetConfig+0xec>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d003      	beq.n	8001c84 <TIM_Base_SetConfig+0x38>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <TIM_Base_SetConfig+0xf0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d108      	bne.n	8001c96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <TIM_Base_SetConfig+0xe4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01b      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca4:	d017      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <TIM_Base_SetConfig+0xe8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <TIM_Base_SetConfig+0xec>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00f      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <TIM_Base_SetConfig+0xf0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <TIM_Base_SetConfig+0xf4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <TIM_Base_SetConfig+0xf8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <TIM_Base_SetConfig+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <TIM_Base_SetConfig+0xfc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <TIM_Base_SetConfig+0xe4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d103      	bne.n	8001d1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	615a      	str	r2, [r3, #20]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40014000 	.word	0x40014000
 8001d44:	40014400 	.word	0x40014400
 8001d48:	40014800 	.word	0x40014800

08001d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e03f      	b.n	8001e06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd1a 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f90b 	bl	8001fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b088      	sub	sp, #32
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	f040 8083 	bne.w	8001f36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_UART_Transmit+0x2e>
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e07b      	b.n	8001f38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_UART_Transmit+0x40>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e074      	b.n	8001f38 <HAL_UART_Transmit+0x12a>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2221      	movs	r2, #33	; 0x21
 8001e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e64:	f7fe fe8a 	bl	8000b7c <HAL_GetTick>
 8001e68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e7e:	e042      	b.n	8001f06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e96:	d122      	bne.n	8001ede <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f84c 	bl	8001f40 <UART_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e042      	b.n	8001f38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	e017      	b.n	8001f06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	e013      	b.n	8001f06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f829 	bl	8001f40 <UART_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e01f      	b.n	8001f38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	60ba      	str	r2, [r7, #8]
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1b7      	bne.n	8001e80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2200      	movs	r2, #0
 8001f18:	2140      	movs	r1, #64	; 0x40
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f810 	bl	8001f40 <UART_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e006      	b.n	8001f38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f50:	e02c      	b.n	8001fac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d028      	beq.n	8001fac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f60:	f7fe fe0c 	bl	8000b7c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d21d      	bcs.n	8001fac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e00f      	b.n	8001fcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d0c3      	beq.n	8001f52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002016:	f023 030c 	bic.w	r3, r3, #12
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	430b      	orrs	r3, r1
 8002022:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002042:	f040 818b 	bne.w	800235c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4ac1      	ldr	r2, [pc, #772]	; (8002350 <UART_SetConfig+0x37c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d005      	beq.n	800205c <UART_SetConfig+0x88>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4abf      	ldr	r2, [pc, #764]	; (8002354 <UART_SetConfig+0x380>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f040 80bd 	bne.w	80021d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800205c:	f7ff fc26 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002060:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	461d      	mov	r5, r3
 8002066:	f04f 0600 	mov.w	r6, #0
 800206a:	46a8      	mov	r8, r5
 800206c:	46b1      	mov	r9, r6
 800206e:	eb18 0308 	adds.w	r3, r8, r8
 8002072:	eb49 0409 	adc.w	r4, r9, r9
 8002076:	4698      	mov	r8, r3
 8002078:	46a1      	mov	r9, r4
 800207a:	eb18 0805 	adds.w	r8, r8, r5
 800207e:	eb49 0906 	adc.w	r9, r9, r6
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800208e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002092:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002096:	4688      	mov	r8, r1
 8002098:	4691      	mov	r9, r2
 800209a:	eb18 0005 	adds.w	r0, r8, r5
 800209e:	eb49 0106 	adc.w	r1, r9, r6
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	461d      	mov	r5, r3
 80020a8:	f04f 0600 	mov.w	r6, #0
 80020ac:	196b      	adds	r3, r5, r5
 80020ae:	eb46 0406 	adc.w	r4, r6, r6
 80020b2:	461a      	mov	r2, r3
 80020b4:	4623      	mov	r3, r4
 80020b6:	f7fe f8e3 	bl	8000280 <__aeabi_uldivmod>
 80020ba:	4603      	mov	r3, r0
 80020bc:	460c      	mov	r4, r1
 80020be:	461a      	mov	r2, r3
 80020c0:	4ba5      	ldr	r3, [pc, #660]	; (8002358 <UART_SetConfig+0x384>)
 80020c2:	fba3 2302 	umull	r2, r3, r3, r2
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	461d      	mov	r5, r3
 80020d0:	f04f 0600 	mov.w	r6, #0
 80020d4:	46a9      	mov	r9, r5
 80020d6:	46b2      	mov	sl, r6
 80020d8:	eb19 0309 	adds.w	r3, r9, r9
 80020dc:	eb4a 040a 	adc.w	r4, sl, sl
 80020e0:	4699      	mov	r9, r3
 80020e2:	46a2      	mov	sl, r4
 80020e4:	eb19 0905 	adds.w	r9, r9, r5
 80020e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002100:	4689      	mov	r9, r1
 8002102:	4692      	mov	sl, r2
 8002104:	eb19 0005 	adds.w	r0, r9, r5
 8002108:	eb4a 0106 	adc.w	r1, sl, r6
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	461d      	mov	r5, r3
 8002112:	f04f 0600 	mov.w	r6, #0
 8002116:	196b      	adds	r3, r5, r5
 8002118:	eb46 0406 	adc.w	r4, r6, r6
 800211c:	461a      	mov	r2, r3
 800211e:	4623      	mov	r3, r4
 8002120:	f7fe f8ae 	bl	8000280 <__aeabi_uldivmod>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	461a      	mov	r2, r3
 800212a:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <UART_SetConfig+0x384>)
 800212c:	fba3 1302 	umull	r1, r3, r3, r2
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	2164      	movs	r1, #100	; 0x64
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	3332      	adds	r3, #50	; 0x32
 800213e:	4a86      	ldr	r2, [pc, #536]	; (8002358 <UART_SetConfig+0x384>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800214c:	4498      	add	r8, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	461d      	mov	r5, r3
 8002152:	f04f 0600 	mov.w	r6, #0
 8002156:	46a9      	mov	r9, r5
 8002158:	46b2      	mov	sl, r6
 800215a:	eb19 0309 	adds.w	r3, r9, r9
 800215e:	eb4a 040a 	adc.w	r4, sl, sl
 8002162:	4699      	mov	r9, r3
 8002164:	46a2      	mov	sl, r4
 8002166:	eb19 0905 	adds.w	r9, r9, r5
 800216a:	eb4a 0a06 	adc.w	sl, sl, r6
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800217a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800217e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002182:	4689      	mov	r9, r1
 8002184:	4692      	mov	sl, r2
 8002186:	eb19 0005 	adds.w	r0, r9, r5
 800218a:	eb4a 0106 	adc.w	r1, sl, r6
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	461d      	mov	r5, r3
 8002194:	f04f 0600 	mov.w	r6, #0
 8002198:	196b      	adds	r3, r5, r5
 800219a:	eb46 0406 	adc.w	r4, r6, r6
 800219e:	461a      	mov	r2, r3
 80021a0:	4623      	mov	r3, r4
 80021a2:	f7fe f86d 	bl	8000280 <__aeabi_uldivmod>
 80021a6:	4603      	mov	r3, r0
 80021a8:	460c      	mov	r4, r1
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <UART_SetConfig+0x384>)
 80021ae:	fba3 1302 	umull	r1, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	3332      	adds	r3, #50	; 0x32
 80021c0:	4a65      	ldr	r2, [pc, #404]	; (8002358 <UART_SetConfig+0x384>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	f003 0207 	and.w	r2, r3, #7
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4442      	add	r2, r8
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e26f      	b.n	80026b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021d6:	f7ff fb55 	bl	8001884 <HAL_RCC_GetPCLK1Freq>
 80021da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	461d      	mov	r5, r3
 80021e0:	f04f 0600 	mov.w	r6, #0
 80021e4:	46a8      	mov	r8, r5
 80021e6:	46b1      	mov	r9, r6
 80021e8:	eb18 0308 	adds.w	r3, r8, r8
 80021ec:	eb49 0409 	adc.w	r4, r9, r9
 80021f0:	4698      	mov	r8, r3
 80021f2:	46a1      	mov	r9, r4
 80021f4:	eb18 0805 	adds.w	r8, r8, r5
 80021f8:	eb49 0906 	adc.w	r9, r9, r6
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002208:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800220c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002210:	4688      	mov	r8, r1
 8002212:	4691      	mov	r9, r2
 8002214:	eb18 0005 	adds.w	r0, r8, r5
 8002218:	eb49 0106 	adc.w	r1, r9, r6
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	461d      	mov	r5, r3
 8002222:	f04f 0600 	mov.w	r6, #0
 8002226:	196b      	adds	r3, r5, r5
 8002228:	eb46 0406 	adc.w	r4, r6, r6
 800222c:	461a      	mov	r2, r3
 800222e:	4623      	mov	r3, r4
 8002230:	f7fe f826 	bl	8000280 <__aeabi_uldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	461a      	mov	r2, r3
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <UART_SetConfig+0x384>)
 800223c:	fba3 2302 	umull	r2, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	461d      	mov	r5, r3
 800224a:	f04f 0600 	mov.w	r6, #0
 800224e:	46a9      	mov	r9, r5
 8002250:	46b2      	mov	sl, r6
 8002252:	eb19 0309 	adds.w	r3, r9, r9
 8002256:	eb4a 040a 	adc.w	r4, sl, sl
 800225a:	4699      	mov	r9, r3
 800225c:	46a2      	mov	sl, r4
 800225e:	eb19 0905 	adds.w	r9, r9, r5
 8002262:	eb4a 0a06 	adc.w	sl, sl, r6
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800227a:	4689      	mov	r9, r1
 800227c:	4692      	mov	sl, r2
 800227e:	eb19 0005 	adds.w	r0, r9, r5
 8002282:	eb4a 0106 	adc.w	r1, sl, r6
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	461d      	mov	r5, r3
 800228c:	f04f 0600 	mov.w	r6, #0
 8002290:	196b      	adds	r3, r5, r5
 8002292:	eb46 0406 	adc.w	r4, r6, r6
 8002296:	461a      	mov	r2, r3
 8002298:	4623      	mov	r3, r4
 800229a:	f7fd fff1 	bl	8000280 <__aeabi_uldivmod>
 800229e:	4603      	mov	r3, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <UART_SetConfig+0x384>)
 80022a6:	fba3 1302 	umull	r1, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2164      	movs	r1, #100	; 0x64
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	3332      	adds	r3, #50	; 0x32
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <UART_SetConfig+0x384>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c6:	4498      	add	r8, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	461d      	mov	r5, r3
 80022cc:	f04f 0600 	mov.w	r6, #0
 80022d0:	46a9      	mov	r9, r5
 80022d2:	46b2      	mov	sl, r6
 80022d4:	eb19 0309 	adds.w	r3, r9, r9
 80022d8:	eb4a 040a 	adc.w	r4, sl, sl
 80022dc:	4699      	mov	r9, r3
 80022de:	46a2      	mov	sl, r4
 80022e0:	eb19 0905 	adds.w	r9, r9, r5
 80022e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022fc:	4689      	mov	r9, r1
 80022fe:	4692      	mov	sl, r2
 8002300:	eb19 0005 	adds.w	r0, r9, r5
 8002304:	eb4a 0106 	adc.w	r1, sl, r6
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	461d      	mov	r5, r3
 800230e:	f04f 0600 	mov.w	r6, #0
 8002312:	196b      	adds	r3, r5, r5
 8002314:	eb46 0406 	adc.w	r4, r6, r6
 8002318:	461a      	mov	r2, r3
 800231a:	4623      	mov	r3, r4
 800231c:	f7fd ffb0 	bl	8000280 <__aeabi_uldivmod>
 8002320:	4603      	mov	r3, r0
 8002322:	460c      	mov	r4, r1
 8002324:	461a      	mov	r2, r3
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <UART_SetConfig+0x384>)
 8002328:	fba3 1302 	umull	r1, r3, r3, r2
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	2164      	movs	r1, #100	; 0x64
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	3332      	adds	r3, #50	; 0x32
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <UART_SetConfig+0x384>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	f003 0207 	and.w	r2, r3, #7
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4442      	add	r2, r8
 800234c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800234e:	e1b2      	b.n	80026b6 <UART_SetConfig+0x6e2>
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4ad7      	ldr	r2, [pc, #860]	; (80026c0 <UART_SetConfig+0x6ec>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d005      	beq.n	8002372 <UART_SetConfig+0x39e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4ad6      	ldr	r2, [pc, #856]	; (80026c4 <UART_SetConfig+0x6f0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	f040 80d1 	bne.w	8002514 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002372:	f7ff fa9b 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002376:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	469a      	mov	sl, r3
 800237c:	f04f 0b00 	mov.w	fp, #0
 8002380:	46d0      	mov	r8, sl
 8002382:	46d9      	mov	r9, fp
 8002384:	eb18 0308 	adds.w	r3, r8, r8
 8002388:	eb49 0409 	adc.w	r4, r9, r9
 800238c:	4698      	mov	r8, r3
 800238e:	46a1      	mov	r9, r4
 8002390:	eb18 080a 	adds.w	r8, r8, sl
 8002394:	eb49 090b 	adc.w	r9, r9, fp
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023ac:	4688      	mov	r8, r1
 80023ae:	4691      	mov	r9, r2
 80023b0:	eb1a 0508 	adds.w	r5, sl, r8
 80023b4:	eb4b 0609 	adc.w	r6, fp, r9
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	f04f 0400 	mov.w	r4, #0
 80023ca:	0094      	lsls	r4, r2, #2
 80023cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023d0:	008b      	lsls	r3, r1, #2
 80023d2:	461a      	mov	r2, r3
 80023d4:	4623      	mov	r3, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	4631      	mov	r1, r6
 80023da:	f7fd ff51 	bl	8000280 <__aeabi_uldivmod>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	461a      	mov	r2, r3
 80023e4:	4bb8      	ldr	r3, [pc, #736]	; (80026c8 <UART_SetConfig+0x6f4>)
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	469b      	mov	fp, r3
 80023f4:	f04f 0c00 	mov.w	ip, #0
 80023f8:	46d9      	mov	r9, fp
 80023fa:	46e2      	mov	sl, ip
 80023fc:	eb19 0309 	adds.w	r3, r9, r9
 8002400:	eb4a 040a 	adc.w	r4, sl, sl
 8002404:	4699      	mov	r9, r3
 8002406:	46a2      	mov	sl, r4
 8002408:	eb19 090b 	adds.w	r9, r9, fp
 800240c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800241c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002420:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002424:	4689      	mov	r9, r1
 8002426:	4692      	mov	sl, r2
 8002428:	eb1b 0509 	adds.w	r5, fp, r9
 800242c:	eb4c 060a 	adc.w	r6, ip, sl
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4619      	mov	r1, r3
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f04f 0400 	mov.w	r4, #0
 8002442:	0094      	lsls	r4, r2, #2
 8002444:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002448:	008b      	lsls	r3, r1, #2
 800244a:	461a      	mov	r2, r3
 800244c:	4623      	mov	r3, r4
 800244e:	4628      	mov	r0, r5
 8002450:	4631      	mov	r1, r6
 8002452:	f7fd ff15 	bl	8000280 <__aeabi_uldivmod>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	461a      	mov	r2, r3
 800245c:	4b9a      	ldr	r3, [pc, #616]	; (80026c8 <UART_SetConfig+0x6f4>)
 800245e:	fba3 1302 	umull	r1, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2164      	movs	r1, #100	; 0x64
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	3332      	adds	r3, #50	; 0x32
 8002470:	4a95      	ldr	r2, [pc, #596]	; (80026c8 <UART_SetConfig+0x6f4>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247c:	4498      	add	r8, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	469b      	mov	fp, r3
 8002482:	f04f 0c00 	mov.w	ip, #0
 8002486:	46d9      	mov	r9, fp
 8002488:	46e2      	mov	sl, ip
 800248a:	eb19 0309 	adds.w	r3, r9, r9
 800248e:	eb4a 040a 	adc.w	r4, sl, sl
 8002492:	4699      	mov	r9, r3
 8002494:	46a2      	mov	sl, r4
 8002496:	eb19 090b 	adds.w	r9, r9, fp
 800249a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024b2:	4689      	mov	r9, r1
 80024b4:	4692      	mov	sl, r2
 80024b6:	eb1b 0509 	adds.w	r5, fp, r9
 80024ba:	eb4c 060a 	adc.w	r6, ip, sl
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	0094      	lsls	r4, r2, #2
 80024d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024d6:	008b      	lsls	r3, r1, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	4628      	mov	r0, r5
 80024de:	4631      	mov	r1, r6
 80024e0:	f7fd fece 	bl	8000280 <__aeabi_uldivmod>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b77      	ldr	r3, [pc, #476]	; (80026c8 <UART_SetConfig+0x6f4>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	2164      	movs	r1, #100	; 0x64
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	3332      	adds	r3, #50	; 0x32
 80024fe:	4a72      	ldr	r2, [pc, #456]	; (80026c8 <UART_SetConfig+0x6f4>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4442      	add	r2, r8
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	e0d0      	b.n	80026b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002514:	f7ff f9b6 	bl	8001884 <HAL_RCC_GetPCLK1Freq>
 8002518:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	469a      	mov	sl, r3
 800251e:	f04f 0b00 	mov.w	fp, #0
 8002522:	46d0      	mov	r8, sl
 8002524:	46d9      	mov	r9, fp
 8002526:	eb18 0308 	adds.w	r3, r8, r8
 800252a:	eb49 0409 	adc.w	r4, r9, r9
 800252e:	4698      	mov	r8, r3
 8002530:	46a1      	mov	r9, r4
 8002532:	eb18 080a 	adds.w	r8, r8, sl
 8002536:	eb49 090b 	adc.w	r9, r9, fp
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002546:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800254a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800254e:	4688      	mov	r8, r1
 8002550:	4691      	mov	r9, r2
 8002552:	eb1a 0508 	adds.w	r5, sl, r8
 8002556:	eb4b 0609 	adc.w	r6, fp, r9
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f04f 0400 	mov.w	r4, #0
 800256c:	0094      	lsls	r4, r2, #2
 800256e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002572:	008b      	lsls	r3, r1, #2
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	4628      	mov	r0, r5
 800257a:	4631      	mov	r1, r6
 800257c:	f7fd fe80 	bl	8000280 <__aeabi_uldivmod>
 8002580:	4603      	mov	r3, r0
 8002582:	460c      	mov	r4, r1
 8002584:	461a      	mov	r2, r3
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <UART_SetConfig+0x6f4>)
 8002588:	fba3 2302 	umull	r2, r3, r3, r2
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	469b      	mov	fp, r3
 8002596:	f04f 0c00 	mov.w	ip, #0
 800259a:	46d9      	mov	r9, fp
 800259c:	46e2      	mov	sl, ip
 800259e:	eb19 0309 	adds.w	r3, r9, r9
 80025a2:	eb4a 040a 	adc.w	r4, sl, sl
 80025a6:	4699      	mov	r9, r3
 80025a8:	46a2      	mov	sl, r4
 80025aa:	eb19 090b 	adds.w	r9, r9, fp
 80025ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025c6:	4689      	mov	r9, r1
 80025c8:	4692      	mov	sl, r2
 80025ca:	eb1b 0509 	adds.w	r5, fp, r9
 80025ce:	eb4c 060a 	adc.w	r6, ip, sl
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	0094      	lsls	r4, r2, #2
 80025e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ea:	008b      	lsls	r3, r1, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	4628      	mov	r0, r5
 80025f2:	4631      	mov	r1, r6
 80025f4:	f7fd fe44 	bl	8000280 <__aeabi_uldivmod>
 80025f8:	4603      	mov	r3, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <UART_SetConfig+0x6f4>)
 8002600:	fba3 1302 	umull	r1, r3, r3, r2
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	2164      	movs	r1, #100	; 0x64
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	3332      	adds	r3, #50	; 0x32
 8002612:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <UART_SetConfig+0x6f4>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261e:	4498      	add	r8, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	469b      	mov	fp, r3
 8002624:	f04f 0c00 	mov.w	ip, #0
 8002628:	46d9      	mov	r9, fp
 800262a:	46e2      	mov	sl, ip
 800262c:	eb19 0309 	adds.w	r3, r9, r9
 8002630:	eb4a 040a 	adc.w	r4, sl, sl
 8002634:	4699      	mov	r9, r3
 8002636:	46a2      	mov	sl, r4
 8002638:	eb19 090b 	adds.w	r9, r9, fp
 800263c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002654:	4689      	mov	r9, r1
 8002656:	4692      	mov	sl, r2
 8002658:	eb1b 0509 	adds.w	r5, fp, r9
 800265c:	eb4c 060a 	adc.w	r6, ip, sl
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	f04f 0400 	mov.w	r4, #0
 8002672:	0094      	lsls	r4, r2, #2
 8002674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002678:	008b      	lsls	r3, r1, #2
 800267a:	461a      	mov	r2, r3
 800267c:	4623      	mov	r3, r4
 800267e:	4628      	mov	r0, r5
 8002680:	4631      	mov	r1, r6
 8002682:	f7fd fdfd 	bl	8000280 <__aeabi_uldivmod>
 8002686:	4603      	mov	r3, r0
 8002688:	460c      	mov	r4, r1
 800268a:	461a      	mov	r2, r3
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <UART_SetConfig+0x6f4>)
 800268e:	fba3 1302 	umull	r1, r3, r3, r2
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2164      	movs	r1, #100	; 0x64
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	3332      	adds	r3, #50	; 0x32
 80026a0:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <UART_SetConfig+0x6f4>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4442      	add	r2, r8
 80026b2:	609a      	str	r2, [r3, #8]
}
 80026b4:	e7ff      	b.n	80026b6 <UART_SetConfig+0x6e2>
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40011400 	.word	0x40011400
 80026c8:	51eb851f 	.word	0x51eb851f

080026cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80026dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <vApplicationGetIdleTaskMemory+0x30>)
 80026e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000094 	.word	0x20000094
 80026fc:	20000150 	.word	0x20000150

08002700 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <vApplicationGetTimerTaskMemory+0x2c>)
 8002710:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <vApplicationGetTimerTaskMemory+0x30>)
 8002716:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000350 	.word	0x20000350
 8002730:	2000040c 	.word	0x2000040c

08002734 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f103 0208 	add.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f103 0208 	add.w	r2, r3, #8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0208 	add.w	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d103      	bne.n	80027f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e00c      	b.n	8002810 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3308      	adds	r3, #8
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e002      	b.n	8002804 <vListInsert+0x2e>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d2f6      	bcs.n	80027fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6892      	ldr	r2, [r2, #8]
 800285e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6852      	ldr	r2, [r2, #4]
 8002868:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d103      	bne.n	800287c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	e7fe      	b.n	80028c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80028c4:	f002 f80a 	bl	80048dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	441a      	add	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	3b01      	subs	r3, #1
 80028f6:	68f9      	ldr	r1, [r7, #12]
 80028f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	441a      	add	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d114      	bne.n	8002944 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01a      	beq.n	8002958 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3310      	adds	r3, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f001 f8d4 	bl	8003ad4 <xTaskRemoveFromEventList>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <xQueueGenericReset+0xcc>)
 8002934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	e009      	b.n	8002958 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3310      	adds	r3, #16
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fef3 	bl	8002734 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3324      	adds	r3, #36	; 0x24
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff feee 	bl	8002734 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002958:	f001 ffee 	bl	8004938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <xQueueGenericCreateStatic+0x28>
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
 8002992:	e7fe      	b.n	8002992 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <xQueueGenericCreateStatic+0x42>
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	e7fe      	b.n	80029ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <xQueueGenericCreateStatic+0x4e>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <xQueueGenericCreateStatic+0x52>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueGenericCreateStatic+0x54>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <xQueueGenericCreateStatic+0x6c>
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	623b      	str	r3, [r7, #32]
 80029d6:	e7fe      	b.n	80029d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <xQueueGenericCreateStatic+0x78>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <xQueueGenericCreateStatic+0x7c>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <xQueueGenericCreateStatic+0x7e>
 80029e8:	2300      	movs	r3, #0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <xQueueGenericCreateStatic+0x96>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	e7fe      	b.n	8002a00 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a02:	2350      	movs	r3, #80	; 0x50
 8002a04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b50      	cmp	r3, #80	; 0x50
 8002a0a:	d009      	beq.n	8002a20 <xQueueGenericCreateStatic+0xb4>
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e7fe      	b.n	8002a1e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00d      	beq.n	8002a48 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a34:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f805 	bl	8002a52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3730      	adds	r7, #48	; 0x30
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e002      	b.n	8002a74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a80:	2101      	movs	r1, #1
 8002a82:	69b8      	ldr	r0, [r7, #24]
 8002a84:	f7ff ff0a 	bl	800289c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08e      	sub	sp, #56	; 0x38
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <xQueueGenericSend+0x30>
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <xQueueGenericSend+0x3e>
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueGenericSend+0x42>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueGenericSend+0x44>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <xQueueGenericSend+0x5c>
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	e7fe      	b.n	8002af2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d103      	bne.n	8002b02 <xQueueGenericSend+0x6a>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <xQueueGenericSend+0x6e>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericSend+0x70>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <xQueueGenericSend+0x88>
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	e7fe      	b.n	8002b1e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b20:	f001 f994 	bl	8003e4c <xTaskGetSchedulerState>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <xQueueGenericSend+0x98>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <xQueueGenericSend+0x9c>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <xQueueGenericSend+0x9e>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <xQueueGenericSend+0xb6>
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b4e:	f001 fec5 	bl	80048dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <xQueueGenericSend+0xcc>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d129      	bne.n	8002bb8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6a:	f000 f9ff 	bl	8002f6c <prvCopyDataToQueue>
 8002b6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	3324      	adds	r3, #36	; 0x24
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 ffa9 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <xQueueGenericSend+0x1f0>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	e00a      	b.n	8002bb0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <xQueueGenericSend+0x1f0>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bb0:	f001 fec2 	bl	8004938 <vPortExitCritical>
				return pdPASS;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e063      	b.n	8002c80 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bbe:	f001 febb 	bl	8004938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e05c      	b.n	8002c80 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 ffe1 	bl	8003b98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bda:	f001 fead 	bl	8004938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bde:	f000 fd55 	bl	800368c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002be2:	f001 fe7b 	bl	80048dc <vPortEnterCritical>
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d103      	bne.n	8002bfc <xQueueGenericSend+0x164>
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <xQueueGenericSend+0x17a>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c12:	f001 fe91 	bl	8004938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c16:	1d3a      	adds	r2, r7, #4
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 ffd0 	bl	8003bc4 <xTaskCheckForTimeOut>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d124      	bne.n	8002c74 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2c:	f000 fa96 	bl	800315c <prvIsQueueFull>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	3310      	adds	r3, #16
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fefa 	bl	8003a38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c46:	f000 fa21 	bl	800308c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c4a:	f000 fd2d 	bl	80036a8 <xTaskResumeAll>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af7c 	bne.w	8002b4e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <xQueueGenericSend+0x1f0>)
 8002c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	e772      	b.n	8002b4e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6a:	f000 fa0f 	bl	800308c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c6e:	f000 fd1b 	bl	80036a8 <xTaskResumeAll>
 8002c72:	e76c      	b.n	8002b4e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c76:	f000 fa09 	bl	800308c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c7a:	f000 fd15 	bl	80036a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <xQueueGenericSendFromISR+0x2c>
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x3a>
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <xQueueGenericSendFromISR+0x3e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueGenericSendFromISR+0x40>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x58>
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	e7fe      	b.n	8002ce2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSendFromISR+0x66>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericSendFromISR+0x6a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericSendFromISR+0x6c>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <xQueueGenericSendFromISR+0x84>
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e7fe      	b.n	8002d0e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d10:	f001 fec0 	bl	8004a94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d14:	f3ef 8211 	mrs	r2, BASEPRI
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61ba      	str	r2, [r7, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <xQueueGenericSendFromISR+0xb6>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d12c      	bne.n	8002d9c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d52:	f000 f90b 	bl	8002f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d56:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d112      	bne.n	8002d86 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d016      	beq.n	8002d96 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 feb1 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e007      	b.n	8002d96 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	b25a      	sxtb	r2, r3
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d96:	2301      	movs	r3, #1
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d9a:	e001      	b.n	8002da0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3738      	adds	r7, #56	; 0x38
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <xQueueReceive+0x2e>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	e7fe      	b.n	8002de0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <xQueueReceive+0x3c>
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <xQueueReceive+0x40>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <xQueueReceive+0x42>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <xQueueReceive+0x5a>
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	e7fe      	b.n	8002e0c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e0e:	f001 f81d 	bl	8003e4c <xTaskGetSchedulerState>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <xQueueReceive+0x6a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <xQueueReceive+0x6e>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <xQueueReceive+0x70>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <xQueueReceive+0x88>
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e7fe      	b.n	8002e3a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e3c:	f001 fd4e 	bl	80048dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01f      	beq.n	8002e8c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e50:	f000 f8f6 	bl	8003040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00f      	beq.n	8002e84 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	3310      	adds	r3, #16
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fe33 	bl	8003ad4 <xTaskRemoveFromEventList>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e74:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <xQueueReceive+0x1b4>)
 8002e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e84:	f001 fd58 	bl	8004938 <vPortExitCritical>
				return pdPASS;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e069      	b.n	8002f60 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e92:	f001 fd51 	bl	8004938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e062      	b.n	8002f60 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fe77 	bl	8003b98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eae:	f001 fd43 	bl	8004938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eb2:	f000 fbeb 	bl	800368c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eb6:	f001 fd11 	bl	80048dc <vPortEnterCritical>
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d103      	bne.n	8002ed0 <xQueueReceive+0x11c>
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d103      	bne.n	8002ee6 <xQueueReceive+0x132>
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee6:	f001 fd27 	bl	8004938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eea:	1d3a      	adds	r2, r7, #4
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fe66 	bl	8003bc4 <xTaskCheckForTimeOut>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d123      	bne.n	8002f46 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f00:	f000 f916 	bl	8003130 <prvIsQueueEmpty>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d017      	beq.n	8002f3a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	3324      	adds	r3, #36	; 0x24
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd90 	bl	8003a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1a:	f000 f8b7 	bl	800308c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f1e:	f000 fbc3 	bl	80036a8 <xTaskResumeAll>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d189      	bne.n	8002e3c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <xQueueReceive+0x1b4>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	e780      	b.n	8002e3c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3c:	f000 f8a6 	bl	800308c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f40:	f000 fbb2 	bl	80036a8 <xTaskResumeAll>
 8002f44:	e77a      	b.n	8002e3c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f48:	f000 f8a0 	bl	800308c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f4c:	f000 fbac 	bl	80036a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f000 f8ed 	bl	8003130 <prvIsQueueEmpty>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f43f af6f 	beq.w	8002e3c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3730      	adds	r7, #48	; 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d14d      	bne.n	800302e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 ff76 	bl	8003e88 <xTaskPriorityDisinherit>
 8002f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e043      	b.n	800302e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d119      	bne.n	8002fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6858      	ldr	r0, [r3, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	f002 f874 	bl	80050a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d32b      	bcc.n	800302e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	e026      	b.n	800302e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68d8      	ldr	r0, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	f002 f85a 	bl	80050a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d207      	bcs.n	800301c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	425b      	negs	r3, r3
 8003016:	441a      	add	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d105      	bne.n	800302e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3b01      	subs	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003036:	697b      	ldr	r3, [r7, #20]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d018      	beq.n	8003084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	441a      	add	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d303      	bcc.n	8003074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	461a      	mov	r2, r3
 800307e:	6838      	ldr	r0, [r7, #0]
 8003080:	f002 f810 	bl	80050a4 <memcpy>
	}
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003094:	f001 fc22 	bl	80048dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800309e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030a0:	e011      	b.n	80030c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d012      	beq.n	80030d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3324      	adds	r3, #36	; 0x24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fd10 	bl	8003ad4 <xTaskRemoveFromEventList>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030ba:	f000 fde3 	bl	8003c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	dce9      	bgt.n	80030a2 <prvUnlockQueue+0x16>
 80030ce:	e000      	b.n	80030d2 <prvUnlockQueue+0x46>
					break;
 80030d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	22ff      	movs	r2, #255	; 0xff
 80030d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030da:	f001 fc2d 	bl	8004938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030de:	f001 fbfd 	bl	80048dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ea:	e011      	b.n	8003110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3310      	adds	r3, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fceb 	bl	8003ad4 <xTaskRemoveFromEventList>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003104:	f000 fdbe 	bl	8003c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003108:	7bbb      	ldrb	r3, [r7, #14]
 800310a:	3b01      	subs	r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003114:	2b00      	cmp	r3, #0
 8003116:	dce9      	bgt.n	80030ec <prvUnlockQueue+0x60>
 8003118:	e000      	b.n	800311c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800311a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	22ff      	movs	r2, #255	; 0xff
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003124:	f001 fc08 	bl	8004938 <vPortExitCritical>
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003138:	f001 fbd0 	bl	80048dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e001      	b.n	800314e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800314e:	f001 fbf3 	bl	8004938 <vPortExitCritical>

	return xReturn;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003164:	f001 fbba 	bl	80048dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	429a      	cmp	r2, r3
 8003172:	d102      	bne.n	800317a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003174:	2301      	movs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e001      	b.n	800317e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800317e:	f001 fbdb 	bl	8004938 <vPortExitCritical>

	return xReturn;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e014      	b.n	80031c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800319c:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <vQueueAddToRegistry+0x4c>)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <vQueueAddToRegistry+0x4c>)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <vQueueAddToRegistry+0x4c>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031be:	e005      	b.n	80031cc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b07      	cmp	r3, #7
 80031ca:	d9e7      	bls.n	800319c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20004af0 	.word	0x20004af0

080031dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031ec:	f001 fb76 	bl	80048dc <vPortEnterCritical>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d103      	bne.n	8003206 <vQueueWaitForMessageRestricted+0x2a>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d103      	bne.n	800321c <vQueueWaitForMessageRestricted+0x40>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800321c:	f001 fb8c 	bl	8004938 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fc25 	bl	8003a80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003236:	6978      	ldr	r0, [r7, #20]
 8003238:	f7ff ff28 	bl	800308c <prvUnlockQueue>
	}
 800323c:	bf00      	nop
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	; 0x38
 8003248:	af04      	add	r7, sp, #16
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <xTaskCreateStatic+0x28>
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	623b      	str	r3, [r7, #32]
 800326a:	e7fe      	b.n	800326a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <xTaskCreateStatic+0x42>
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	e7fe      	b.n	8003284 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003286:	23bc      	movs	r3, #188	; 0xbc
 8003288:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2bbc      	cmp	r3, #188	; 0xbc
 800328e:	d009      	beq.n	80032a4 <xTaskCreateStatic+0x60>
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e7fe      	b.n	80032a2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01e      	beq.n	80032ea <xTaskCreateStatic+0xa6>
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01b      	beq.n	80032ea <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032c4:	2300      	movs	r3, #0
 80032c6:	9303      	str	r3, [sp, #12]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f851 	bl	8003384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e4:	f000 f8f4 	bl	80034d0 <prvAddNewTaskToReadyList>
 80032e8:	e001      	b.n	80032ee <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032ee:	697b      	ldr	r3, [r7, #20]
	}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f001 fbff 	bl	8004b10 <pvPortMalloc>
 8003312:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00e      	beq.n	8003338 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800331a:	20bc      	movs	r0, #188	; 0xbc
 800331c:	f001 fbf8 	bl	8004b10 <pvPortMalloc>
 8003320:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
 800332e:	e005      	b.n	800333c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003330:	6978      	ldr	r0, [r7, #20]
 8003332:	f001 fcaf 	bl	8004c94 <vPortFree>
 8003336:	e001      	b.n	800333c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d017      	beq.n	8003372 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	2300      	movs	r3, #0
 800334e:	9303      	str	r3, [sp, #12]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f80f 	bl	8003384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003366:	69f8      	ldr	r0, [r7, #28]
 8003368:	f000 f8b2 	bl	80034d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	e002      	b.n	8003378 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003378:	69bb      	ldr	r3, [r7, #24]
	}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	461a      	mov	r2, r3
 800339c:	21a5      	movs	r1, #165	; 0xa5
 800339e:	f001 fe8c 	bl	80050ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033ac:	3b01      	subs	r3, #1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f023 0307 	bic.w	r3, r3, #7
 80033ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <prvInitialiseNewTask+0x56>
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e7fe      	b.n	80033d8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01f      	beq.n	8003420 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e012      	b.n	800340c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	7819      	ldrb	r1, [r3, #0]
 80033ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	3334      	adds	r3, #52	; 0x34
 80033f6:	460a      	mov	r2, r1
 80033f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d9e9      	bls.n	80033e6 <prvInitialiseNewTask+0x62>
 8003412:	e000      	b.n	8003416 <prvInitialiseNewTask+0x92>
			{
				break;
 8003414:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800341e:	e003      	b.n	8003428 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	2b37      	cmp	r3, #55	; 0x37
 800342c:	d901      	bls.n	8003432 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800342e:	2337      	movs	r3, #55	; 0x37
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff f993 	bl	8002774 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	3318      	adds	r3, #24
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f98e 	bl	8002774 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2200      	movs	r2, #0
 8003472:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	2200      	movs	r2, #0
 800347a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	3354      	adds	r3, #84	; 0x54
 8003482:	2260      	movs	r2, #96	; 0x60
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fe17 	bl	80050ba <memset>
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <prvInitialiseNewTask+0x140>)
 8003490:	659a      	str	r2, [r3, #88]	; 0x58
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <prvInitialiseNewTask+0x144>)
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <prvInitialiseNewTask+0x148>)
 800349c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68f9      	ldr	r1, [r7, #12]
 80034a2:	69b8      	ldr	r0, [r7, #24]
 80034a4:	f001 f8f6 	bl	8004694 <pxPortInitialiseStack>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ba:	bf00      	nop
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	08005e74 	.word	0x08005e74
 80034c8:	08005e94 	.word	0x08005e94
 80034cc:	08005e54 	.word	0x08005e54

080034d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034d8:	f001 fa00 	bl	80048dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <prvAddNewTaskToReadyList+0xc4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <prvAddNewTaskToReadyList+0xc4>)
 80034e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034e6:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <prvAddNewTaskToReadyList+0xc4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d110      	bne.n	800351e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034fc:	f000 fbe6 	bl	8003ccc <prvInitialiseTaskLists>
 8003500:	e00d      	b.n	800351e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <prvAddNewTaskToReadyList+0xcc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d802      	bhi.n	800351e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <prvAddNewTaskToReadyList+0xd0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <prvAddNewTaskToReadyList+0xd0>)
 8003526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <prvAddNewTaskToReadyList+0xd0>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <prvAddNewTaskToReadyList+0xd4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d903      	bls.n	8003544 <prvAddNewTaskToReadyList+0x74>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <prvAddNewTaskToReadyList+0xd4>)
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <prvAddNewTaskToReadyList+0xd8>)
 8003552:	441a      	add	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f7ff f917 	bl	800278e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003560:	f001 f9ea 	bl	8004938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <prvAddNewTaskToReadyList+0xcc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <prvAddNewTaskToReadyList+0xc8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	429a      	cmp	r2, r3
 8003578:	d207      	bcs.n	800358a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <prvAddNewTaskToReadyList+0xdc>)
 800357c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000ce0 	.word	0x20000ce0
 8003598:	2000080c 	.word	0x2000080c
 800359c:	20000cec 	.word	0x20000cec
 80035a0:	20000cfc 	.word	0x20000cfc
 80035a4:	20000ce8 	.word	0x20000ce8
 80035a8:	20000810 	.word	0x20000810
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035be:	463a      	mov	r2, r7
 80035c0:	1d39      	adds	r1, r7, #4
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f880 	bl	80026cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	9202      	str	r2, [sp, #8]
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2300      	movs	r3, #0
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2300      	movs	r3, #0
 80035dc:	460a      	mov	r2, r1
 80035de:	4923      	ldr	r1, [pc, #140]	; (800366c <vTaskStartScheduler+0xbc>)
 80035e0:	4823      	ldr	r0, [pc, #140]	; (8003670 <vTaskStartScheduler+0xc0>)
 80035e2:	f7ff fe2f 	bl	8003244 <xTaskCreateStatic>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b22      	ldr	r3, [pc, #136]	; (8003674 <vTaskStartScheduler+0xc4>)
 80035ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <vTaskStartScheduler+0xc4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e001      	b.n	80035fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003604:	f000 fd00 	bl	8004008 <xTimerCreateTimerTask>
 8003608:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d11a      	bne.n	8003646 <vTaskStartScheduler+0x96>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <vTaskStartScheduler+0xc8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3354      	adds	r3, #84	; 0x54
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <vTaskStartScheduler+0xcc>)
 800362a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <vTaskStartScheduler+0xd0>)
 800362e:	f04f 32ff 	mov.w	r2, #4294967295
 8003632:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <vTaskStartScheduler+0xd4>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <vTaskStartScheduler+0xd8>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003640:	f001 f8ae 	bl	80047a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003644:	e00d      	b.n	8003662 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d109      	bne.n	8003662 <vTaskStartScheduler+0xb2>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e7fe      	b.n	8003660 <vTaskStartScheduler+0xb0>
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	08005e24 	.word	0x08005e24
 8003670:	08003c9d 	.word	0x08003c9d
 8003674:	20000d04 	.word	0x20000d04
 8003678:	2000080c 	.word	0x2000080c
 800367c:	20000010 	.word	0x20000010
 8003680:	20000d00 	.word	0x20000d00
 8003684:	20000cec 	.word	0x20000cec
 8003688:	20000ce4 	.word	0x20000ce4

0800368c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <vTaskSuspendAll+0x18>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <vTaskSuspendAll+0x18>)
 8003698:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000d08 	.word	0x20000d08

080036a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <xTaskResumeAll+0x114>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <xTaskResumeAll+0x2a>
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	e7fe      	b.n	80036d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036d2:	f001 f903 	bl	80048dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <xTaskResumeAll+0x114>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4a37      	ldr	r2, [pc, #220]	; (80037bc <xTaskResumeAll+0x114>)
 80036de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <xTaskResumeAll+0x114>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d162      	bne.n	80037ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <xTaskResumeAll+0x118>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05e      	beq.n	80037ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f0:	e02f      	b.n	8003752 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <xTaskResumeAll+0x11c>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3318      	adds	r3, #24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f8a2 	bl	8002848 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f89d 	bl	8002848 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <xTaskResumeAll+0x120>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d903      	bls.n	8003722 <xTaskResumeAll+0x7a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <xTaskResumeAll+0x120>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a27      	ldr	r2, [pc, #156]	; (80037cc <xTaskResumeAll+0x124>)
 8003730:	441a      	add	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7ff f828 	bl	800278e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <xTaskResumeAll+0x128>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <xTaskResumeAll+0x12c>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <xTaskResumeAll+0x11c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cb      	bne.n	80036f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003760:	f000 fb54 	bl	8003e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <xTaskResumeAll+0x130>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003770:	f000 f846 	bl	8003800 <xTaskIncrementTick>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <xTaskResumeAll+0x12c>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f1      	bne.n	8003770 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <xTaskResumeAll+0x130>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <xTaskResumeAll+0x12c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800379a:	2301      	movs	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <xTaskResumeAll+0x134>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 f8c3 	bl	8004938 <vPortExitCritical>

	return xAlreadyYielded;
 80037b2:	68bb      	ldr	r3, [r7, #8]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000d08 	.word	0x20000d08
 80037c0:	20000ce0 	.word	0x20000ce0
 80037c4:	20000ca0 	.word	0x20000ca0
 80037c8:	20000ce8 	.word	0x20000ce8
 80037cc:	20000810 	.word	0x20000810
 80037d0:	2000080c 	.word	0x2000080c
 80037d4:	20000cf4 	.word	0x20000cf4
 80037d8:	20000cf0 	.word	0x20000cf0
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <xTaskGetTickCount+0x1c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037ec:	687b      	ldr	r3, [r7, #4]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000ce4 	.word	0x20000ce4

08003800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380a:	4b4e      	ldr	r3, [pc, #312]	; (8003944 <xTaskIncrementTick+0x144>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8088 	bne.w	8003924 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003814:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <xTaskIncrementTick+0x148>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800381c:	4a4a      	ldr	r2, [pc, #296]	; (8003948 <xTaskIncrementTick+0x148>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11f      	bne.n	8003868 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003828:	4b48      	ldr	r3, [pc, #288]	; (800394c <xTaskIncrementTick+0x14c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <xTaskIncrementTick+0x46>
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	e7fe      	b.n	8003844 <xTaskIncrementTick+0x44>
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <xTaskIncrementTick+0x14c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <xTaskIncrementTick+0x150>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a3e      	ldr	r2, [pc, #248]	; (800394c <xTaskIncrementTick+0x14c>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4a3e      	ldr	r2, [pc, #248]	; (8003950 <xTaskIncrementTick+0x150>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <xTaskIncrementTick+0x154>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	4a3c      	ldr	r2, [pc, #240]	; (8003954 <xTaskIncrementTick+0x154>)
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	f000 fad2 	bl	8003e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003868:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <xTaskIncrementTick+0x158>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	429a      	cmp	r2, r3
 8003870:	d349      	bcc.n	8003906 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <xTaskIncrementTick+0x14c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <xTaskIncrementTick+0x158>)
 800387e:	f04f 32ff 	mov.w	r2, #4294967295
 8003882:	601a      	str	r2, [r3, #0]
					break;
 8003884:	e03f      	b.n	8003906 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003886:	4b31      	ldr	r3, [pc, #196]	; (800394c <xTaskIncrementTick+0x14c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d203      	bcs.n	80038a6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800389e:	4a2e      	ldr	r2, [pc, #184]	; (8003958 <xTaskIncrementTick+0x158>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038a4:	e02f      	b.n	8003906 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ffcc 	bl	8002848 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3318      	adds	r3, #24
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe ffc3 	bl	8002848 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <xTaskIncrementTick+0x15c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d903      	bls.n	80038d6 <xTaskIncrementTick+0xd6>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	4a22      	ldr	r2, [pc, #136]	; (800395c <xTaskIncrementTick+0x15c>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <xTaskIncrementTick+0x160>)
 80038e4:	441a      	add	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3304      	adds	r3, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f7fe ff4e 	bl	800278e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <xTaskIncrementTick+0x164>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3b8      	bcc.n	8003872 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003904:	e7b5      	b.n	8003872 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <xTaskIncrementTick+0x164>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	4914      	ldr	r1, [pc, #80]	; (8003960 <xTaskIncrementTick+0x160>)
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d907      	bls.n	800392e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800391e:	2301      	movs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e004      	b.n	800392e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <xTaskIncrementTick+0x168>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <xTaskIncrementTick+0x168>)
 800392c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <xTaskIncrementTick+0x16c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003936:	2301      	movs	r3, #1
 8003938:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800393a:	697b      	ldr	r3, [r7, #20]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000d08 	.word	0x20000d08
 8003948:	20000ce4 	.word	0x20000ce4
 800394c:	20000c98 	.word	0x20000c98
 8003950:	20000c9c 	.word	0x20000c9c
 8003954:	20000cf8 	.word	0x20000cf8
 8003958:	20000d00 	.word	0x20000d00
 800395c:	20000ce8 	.word	0x20000ce8
 8003960:	20000810 	.word	0x20000810
 8003964:	2000080c 	.word	0x2000080c
 8003968:	20000cf0 	.word	0x20000cf0
 800396c:	20000cf4 	.word	0x20000cf4

08003970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <vTaskSwitchContext+0xb0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800397e:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <vTaskSwitchContext+0xb4>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003984:	e045      	b.n	8003a12 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003986:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <vTaskSwitchContext+0xb4>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398c:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <vTaskSwitchContext+0xb8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e00f      	b.n	80039b4 <vTaskSwitchContext+0x44>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <vTaskSwitchContext+0x3e>
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e7fe      	b.n	80039ac <vTaskSwitchContext+0x3c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	491d      	ldr	r1, [pc, #116]	; (8003a2c <vTaskSwitchContext+0xbc>)
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0e5      	beq.n	8003994 <vTaskSwitchContext+0x24>
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <vTaskSwitchContext+0xbc>)
 80039d4:	4413      	add	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3308      	adds	r3, #8
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d104      	bne.n	80039f8 <vTaskSwitchContext+0x88>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <vTaskSwitchContext+0xc0>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <vTaskSwitchContext+0xb8>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <vTaskSwitchContext+0xc0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3354      	adds	r3, #84	; 0x54
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <vTaskSwitchContext+0xc4>)
 8003a10:	6013      	str	r3, [r2, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000d08 	.word	0x20000d08
 8003a24:	20000cf4 	.word	0x20000cf4
 8003a28:	20000ce8 	.word	0x20000ce8
 8003a2c:	20000810 	.word	0x20000810
 8003a30:	2000080c 	.word	0x2000080c
 8003a34:	20000010 	.word	0x20000010

08003a38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <vTaskPlaceOnEventList+0x24>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e7fe      	b.n	8003a5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <vTaskPlaceOnEventList+0x44>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3318      	adds	r3, #24
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe feb6 	bl	80027d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f000 fa77 	bl	8003f60 <prvAddCurrentTaskToDelayedList>
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	2000080c 	.word	0x2000080c

08003a80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <vTaskPlaceOnEventListRestricted+0x26>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e7fe      	b.n	8003aa4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <vTaskPlaceOnEventListRestricted+0x50>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3318      	adds	r3, #24
 8003aac:	4619      	mov	r1, r3
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7fe fe6d 	bl	800278e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68b8      	ldr	r0, [r7, #8]
 8003ac4:	f000 fa4c 	bl	8003f60 <prvAddCurrentTaskToDelayedList>
	}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2000080c 	.word	0x2000080c

08003ad4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <xTaskRemoveFromEventList+0x2a>
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	e7fe      	b.n	8003afc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fea0 	bl	8002848 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <xTaskRemoveFromEventList+0xac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11d      	bne.n	8003b4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fe97 	bl	8002848 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <xTaskRemoveFromEventList+0xb0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d903      	bls.n	8003b2e <xTaskRemoveFromEventList+0x5a>
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <xTaskRemoveFromEventList+0xb0>)
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <xTaskRemoveFromEventList+0xb4>)
 8003b3c:	441a      	add	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7fe fe22 	bl	800278e <vListInsertEnd>
 8003b4a:	e005      	b.n	8003b58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4619      	mov	r1, r3
 8003b52:	480e      	ldr	r0, [pc, #56]	; (8003b8c <xTaskRemoveFromEventList+0xb8>)
 8003b54:	f7fe fe1b 	bl	800278e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <xTaskRemoveFromEventList+0xbc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d905      	bls.n	8003b72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <xTaskRemoveFromEventList+0xc0>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e001      	b.n	8003b76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b76:	697b      	ldr	r3, [r7, #20]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000d08 	.word	0x20000d08
 8003b84:	20000ce8 	.word	0x20000ce8
 8003b88:	20000810 	.word	0x20000810
 8003b8c:	20000ca0 	.word	0x20000ca0
 8003b90:	2000080c 	.word	0x2000080c
 8003b94:	20000cf4 	.word	0x20000cf4

08003b98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <vTaskInternalSetTimeOutState+0x24>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <vTaskInternalSetTimeOutState+0x28>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	605a      	str	r2, [r3, #4]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20000cf8 	.word	0x20000cf8
 8003bc0:	20000ce4 	.word	0x20000ce4

08003bc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <xTaskCheckForTimeOut+0x24>
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	e7fe      	b.n	8003be6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <xTaskCheckForTimeOut+0x3e>
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e7fe      	b.n	8003c00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003c02:	f000 fe6b 	bl	80048dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <xTaskCheckForTimeOut+0xb8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d102      	bne.n	8003c26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	e023      	b.n	8003c6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <xTaskCheckForTimeOut+0xbc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d007      	beq.n	8003c42 <xTaskCheckForTimeOut+0x7e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e015      	b.n	8003c6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d20b      	bcs.n	8003c64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff9d 	bl	8003b98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e004      	b.n	8003c6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c6e:	f000 fe63 	bl	8004938 <vPortExitCritical>

	return xReturn;
 8003c72:	69fb      	ldr	r3, [r7, #28]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000ce4 	.word	0x20000ce4
 8003c80:	20000cf8 	.word	0x20000cf8

08003c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <vTaskMissedYield+0x14>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	20000cf4 	.word	0x20000cf4

08003c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ca4:	f000 f852 	bl	8003d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <prvIdleTask+0x28>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d9f9      	bls.n	8003ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <prvIdleTask+0x2c>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cc0:	e7f0      	b.n	8003ca4 <prvIdleTask+0x8>
 8003cc2:	bf00      	nop
 8003cc4:	20000810 	.word	0x20000810
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	e00c      	b.n	8003cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <prvInitialiseTaskLists+0x60>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fd24 	bl	8002734 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b37      	cmp	r3, #55	; 0x37
 8003cf6:	d9ef      	bls.n	8003cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cf8:	480d      	ldr	r0, [pc, #52]	; (8003d30 <prvInitialiseTaskLists+0x64>)
 8003cfa:	f7fe fd1b 	bl	8002734 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cfe:	480d      	ldr	r0, [pc, #52]	; (8003d34 <prvInitialiseTaskLists+0x68>)
 8003d00:	f7fe fd18 	bl	8002734 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <prvInitialiseTaskLists+0x6c>)
 8003d06:	f7fe fd15 	bl	8002734 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d0a:	480c      	ldr	r0, [pc, #48]	; (8003d3c <prvInitialiseTaskLists+0x70>)
 8003d0c:	f7fe fd12 	bl	8002734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d10:	480b      	ldr	r0, [pc, #44]	; (8003d40 <prvInitialiseTaskLists+0x74>)
 8003d12:	f7fe fd0f 	bl	8002734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <prvInitialiseTaskLists+0x78>)
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <prvInitialiseTaskLists+0x64>)
 8003d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvInitialiseTaskLists+0x7c>)
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <prvInitialiseTaskLists+0x68>)
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000810 	.word	0x20000810
 8003d30:	20000c70 	.word	0x20000c70
 8003d34:	20000c84 	.word	0x20000c84
 8003d38:	20000ca0 	.word	0x20000ca0
 8003d3c:	20000cb4 	.word	0x20000cb4
 8003d40:	20000ccc 	.word	0x20000ccc
 8003d44:	20000c98 	.word	0x20000c98
 8003d48:	20000c9c 	.word	0x20000c9c

08003d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d52:	e019      	b.n	8003d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d54:	f000 fdc2 	bl	80048dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <prvCheckTasksWaitingTermination+0x4c>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fd6f 	bl	8002848 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <prvCheckTasksWaitingTermination+0x50>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <prvCheckTasksWaitingTermination+0x50>)
 8003d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <prvCheckTasksWaitingTermination+0x54>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	4a09      	ldr	r2, [pc, #36]	; (8003da0 <prvCheckTasksWaitingTermination+0x54>)
 8003d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d7e:	f000 fddb 	bl	8004938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f80e 	bl	8003da4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <prvCheckTasksWaitingTermination+0x54>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e1      	bne.n	8003d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000cb4 	.word	0x20000cb4
 8003d9c:	20000ce0 	.word	0x20000ce0
 8003da0:	20000cc8 	.word	0x20000cc8

08003da4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3354      	adds	r3, #84	; 0x54
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fa0b 	bl	80051cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 ff65 	bl	8004c94 <vPortFree>
				vPortFree( pxTCB );
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 ff62 	bl	8004c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dd0:	e017      	b.n	8003e02 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d103      	bne.n	8003de4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 ff59 	bl	8004c94 <vPortFree>
	}
 8003de2:	e00e      	b.n	8003e02 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d009      	beq.n	8003e02 <prvDeleteTCB+0x5e>
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e7fe      	b.n	8003e00 <prvDeleteTCB+0x5c>
	}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <prvResetNextTaskUnblockTime+0x38>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <prvResetNextTaskUnblockTime+0x3c>)
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e24:	e008      	b.n	8003e38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <prvResetNextTaskUnblockTime+0x38>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <prvResetNextTaskUnblockTime+0x3c>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	20000c98 	.word	0x20000c98
 8003e48:	20000d00 	.word	0x20000d00

08003e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <xTaskGetSchedulerState+0x34>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e008      	b.n	8003e72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <xTaskGetSchedulerState+0x38>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	e001      	b.n	8003e72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e72:	687b      	ldr	r3, [r7, #4]
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000cec 	.word	0x20000cec
 8003e84:	20000d08 	.word	0x20000d08

08003e88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d054      	beq.n	8003f48 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <xTaskPriorityDisinherit+0xcc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d009      	beq.n	8003ebc <xTaskPriorityDisinherit+0x34>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e7fe      	b.n	8003eba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <xTaskPriorityDisinherit+0x50>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	e7fe      	b.n	8003ed6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d02c      	beq.n	8003f48 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d128      	bne.n	8003f48 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fca4 	bl	8002848 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <xTaskPriorityDisinherit+0xd0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d903      	bls.n	8003f28 <xTaskPriorityDisinherit+0xa0>
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <xTaskPriorityDisinherit+0xd0>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <xTaskPriorityDisinherit+0xd4>)
 8003f36:	441a      	add	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fe fc25 	bl	800278e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f48:	697b      	ldr	r3, [r7, #20]
	}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000080c 	.word	0x2000080c
 8003f58:	20000ce8 	.word	0x20000ce8
 8003f5c:	20000810 	.word	0x20000810

08003f60 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f70:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fc66 	bl	8002848 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d10a      	bne.n	8003f9a <prvAddCurrentTaskToDelayedList+0x3a>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4819      	ldr	r0, [pc, #100]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f94:	f7fe fbfb 	bl	800278e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f98:	e026      	b.n	8003fe8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d209      	bcs.n	8003fc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7fe fc09 	bl	80027d6 <vListInsert>
}
 8003fc4:	e010      	b.n	8003fe8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe fbff 	bl	80027d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d202      	bcs.n	8003fe8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000ce4 	.word	0x20000ce4
 8003ff4:	2000080c 	.word	0x2000080c
 8003ff8:	20000ccc 	.word	0x20000ccc
 8003ffc:	20000c9c 	.word	0x20000c9c
 8004000:	20000c98 	.word	0x20000c98
 8004004:	20000d00 	.word	0x20000d00

08004008 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004012:	f000 faff 	bl	8004614 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <xTimerCreateTimerTask+0x80>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d021      	beq.n	8004062 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004026:	1d3a      	adds	r2, r7, #4
 8004028:	f107 0108 	add.w	r1, r7, #8
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fb65 	bl	8002700 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	9202      	str	r2, [sp, #8]
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2302      	movs	r3, #2
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	460a      	mov	r2, r1
 8004048:	4910      	ldr	r1, [pc, #64]	; (800408c <xTimerCreateTimerTask+0x84>)
 800404a:	4811      	ldr	r0, [pc, #68]	; (8004090 <xTimerCreateTimerTask+0x88>)
 800404c:	f7ff f8fa 	bl	8003244 <xTaskCreateStatic>
 8004050:	4602      	mov	r2, r0
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <xTimerCreateTimerTask+0x8c>)
 8004054:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <xTimerCreateTimerTask+0x8c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800405e:	2301      	movs	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <xTimerCreateTimerTask+0x74>
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e7fe      	b.n	800407a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800407c:	697b      	ldr	r3, [r7, #20]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000d3c 	.word	0x20000d3c
 800408c:	08005e2c 	.word	0x08005e2c
 8004090:	080041c9 	.word	0x080041c9
 8004094:	20000d40 	.word	0x20000d40

08004098 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <xTimerGenericCommand+0x2c>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	e7fe      	b.n	80040c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <xTimerGenericCommand+0x94>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02a      	beq.n	8004122 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	dc18      	bgt.n	8004110 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040de:	f7ff feb5 	bl	8003e4c <xTaskGetSchedulerState>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d109      	bne.n	80040fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040e8:	4b10      	ldr	r3, [pc, #64]	; (800412c <xTimerGenericCommand+0x94>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	f107 0110 	add.w	r1, r7, #16
 80040f0:	2300      	movs	r3, #0
 80040f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f4:	f7fe fcd0 	bl	8002a98 <xQueueGenericSend>
 80040f8:	6278      	str	r0, [r7, #36]	; 0x24
 80040fa:	e012      	b.n	8004122 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <xTimerGenericCommand+0x94>)
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	f107 0110 	add.w	r1, r7, #16
 8004104:	2300      	movs	r3, #0
 8004106:	2200      	movs	r2, #0
 8004108:	f7fe fcc6 	bl	8002a98 <xQueueGenericSend>
 800410c:	6278      	str	r0, [r7, #36]	; 0x24
 800410e:	e008      	b.n	8004122 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <xTimerGenericCommand+0x94>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	f107 0110 	add.w	r1, r7, #16
 8004118:	2300      	movs	r3, #0
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	f7fe fdb6 	bl	8002c8c <xQueueGenericSendFromISR>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004124:	4618      	mov	r0, r3
 8004126:	3728      	adds	r7, #40	; 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000d3c 	.word	0x20000d3c

08004130 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <prvProcessExpiredTimer+0x94>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fb7d 	bl	8002848 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d021      	beq.n	80041a0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	18d1      	adds	r1, r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	6978      	ldr	r0, [r7, #20]
 800416a:	f000 f8d1 	bl	8004310 <prvInsertTimerInActiveList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01e      	beq.n	80041b2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004174:	2300      	movs	r3, #0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	2100      	movs	r1, #0
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff8a 	bl	8004098 <xTimerGenericCommand>
 8004184:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d112      	bne.n	80041b2 <prvProcessExpiredTimer+0x82>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e7fe      	b.n	800419e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	4798      	blx	r3
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000d34 	.word	0x20000d34

080041c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f857 	bl	8004288 <prvGetNextExpireTime>
 80041da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4619      	mov	r1, r3
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f803 	bl	80041ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041e6:	f000 f8d5 	bl	8004394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ea:	e7f1      	b.n	80041d0 <prvTimerTask+0x8>

080041ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041f6:	f7ff fa49 	bl	800368c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f866 	bl	80042d0 <prvSampleTimeNow>
 8004204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d130      	bne.n	800426e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <prvProcessTimerOrBlockTask+0x3c>
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	429a      	cmp	r2, r3
 8004218:	d806      	bhi.n	8004228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800421a:	f7ff fa45 	bl	80036a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff85 	bl	8004130 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004226:	e024      	b.n	8004272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <prvProcessTimerOrBlockTask+0x90>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <prvProcessTimerOrBlockTask+0x50>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <prvProcessTimerOrBlockTask+0x52>
 800423c:	2300      	movs	r3, #0
 800423e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <prvProcessTimerOrBlockTask+0x94>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	f7fe ffc5 	bl	80031dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004252:	f7ff fa29 	bl	80036a8 <xTaskResumeAll>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <prvProcessTimerOrBlockTask+0x98>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
}
 800426c:	e001      	b.n	8004272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800426e:	f7ff fa1b 	bl	80036a8 <xTaskResumeAll>
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000d38 	.word	0x20000d38
 8004280:	20000d3c 	.word	0x20000d3c
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <prvGetNextExpireTime+0x44>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <prvGetNextExpireTime+0x16>
 800429a:	2201      	movs	r2, #1
 800429c:	e000      	b.n	80042a0 <prvGetNextExpireTime+0x18>
 800429e:	2200      	movs	r2, #0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <prvGetNextExpireTime+0x44>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e001      	b.n	80042bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000d34 	.word	0x20000d34

080042d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042d8:	f7ff fa82 	bl	80037e0 <xTaskGetTickCount>
 80042dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <prvSampleTimeNow+0x3c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d205      	bcs.n	80042f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042e8:	f000 f930 	bl	800454c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e002      	b.n	80042fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <prvSampleTimeNow+0x3c>)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000d44 	.word	0x20000d44

08004310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d812      	bhi.n	800435c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad2      	subs	r2, r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e01b      	b.n	8004382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <prvInsertTimerInActiveList+0x7c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fe fa3e 	bl	80027d6 <vListInsert>
 800435a:	e012      	b.n	8004382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d206      	bcs.n	8004372 <prvInsertTimerInActiveList+0x62>
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e007      	b.n	8004382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <prvInsertTimerInActiveList+0x80>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7fe fa2a 	bl	80027d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004382:	697b      	ldr	r3, [r7, #20]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000d38 	.word	0x20000d38
 8004390:	20000d34 	.word	0x20000d34

08004394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800439a:	e0c6      	b.n	800452a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da17      	bge.n	80043d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	3304      	adds	r3, #4
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <prvProcessReceivedCommands+0x2e>
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e7fe      	b.n	80043c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c8:	6850      	ldr	r0, [r2, #4]
 80043ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043cc:	6892      	ldr	r2, [r2, #8]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f2c0 80a7 	blt.w	8004528 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fa2c 	bl	8002848 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043f0:	463b      	mov	r3, r7
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff ff6c 	bl	80042d0 <prvSampleTimeNow>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	f200 8094 	bhi.w	800452a <prvProcessReceivedCommands+0x196>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <prvProcessReceivedCommands+0x74>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004431 	.word	0x08004431
 800440c:	08004431 	.word	0x08004431
 8004410:	08004431 	.word	0x08004431
 8004414:	080044a3 	.word	0x080044a3
 8004418:	080044b7 	.word	0x080044b7
 800441c:	080044ff 	.word	0x080044ff
 8004420:	08004431 	.word	0x08004431
 8004424:	08004431 	.word	0x08004431
 8004428:	080044a3 	.word	0x080044a3
 800442c:	080044b7 	.word	0x080044b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	18d1      	adds	r1, r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004450:	f7ff ff5e 	bl	8004310 <prvInsertTimerInActiveList>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d067      	beq.n	800452a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004460:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d05c      	beq.n	800452a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	441a      	add	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	2100      	movs	r1, #0
 8004480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004482:	f7ff fe09 	bl	8004098 <xTimerGenericCommand>
 8004486:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d14d      	bne.n	800452a <prvProcessReceivedCommands+0x196>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e7fe      	b.n	80044a0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80044b4:	e039      	b.n	800452a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <prvProcessReceivedCommands+0x156>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e7fe      	b.n	80044e8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	18d1      	adds	r1, r2, r3
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f8:	f7ff ff0a 	bl	8004310 <prvInsertTimerInActiveList>
					break;
 80044fc:	e015      	b.n	800452a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450e:	f000 fbc1 	bl	8004c94 <vPortFree>
 8004512:	e00a      	b.n	800452a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004526:	e000      	b.n	800452a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <prvProcessReceivedCommands+0x1b4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	1d39      	adds	r1, r7, #4
 8004530:	2200      	movs	r2, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fc3e 	bl	8002db4 <xQueueReceive>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f47f af2e 	bne.w	800439c <prvProcessReceivedCommands+0x8>
	}
}
 8004540:	bf00      	nop
 8004542:	3730      	adds	r7, #48	; 0x30
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000d3c 	.word	0x20000d3c

0800454c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004552:	e047      	b.n	80045e4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004554:	4b2d      	ldr	r3, [pc, #180]	; (800460c <prvSwitchTimerLists+0xc0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <prvSwitchTimerLists+0xc0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3304      	adds	r3, #4
 800456c:	4618      	mov	r0, r3
 800456e:	f7fe f96b 	bl	8002848 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02d      	beq.n	80045e4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	429a      	cmp	r2, r3
 8004598:	d90e      	bls.n	80045b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <prvSwitchTimerLists+0xc0>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f7fe f910 	bl	80027d6 <vListInsert>
 80045b6:	e015      	b.n	80045e4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2300      	movs	r3, #0
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	2100      	movs	r1, #0
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff fd68 	bl	8004098 <xTimerGenericCommand>
 80045c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <prvSwitchTimerLists+0x98>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	e7fe      	b.n	80045e2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <prvSwitchTimerLists+0xc0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1b2      	bne.n	8004554 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <prvSwitchTimerLists+0xc0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <prvSwitchTimerLists+0xc4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <prvSwitchTimerLists+0xc0>)
 80045fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <prvSwitchTimerLists+0xc4>)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	6013      	str	r3, [r2, #0]
}
 8004602:	bf00      	nop
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000d34 	.word	0x20000d34
 8004610:	20000d38 	.word	0x20000d38

08004614 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800461a:	f000 f95f 	bl	80048dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <prvCheckForValidListAndQueue+0x60>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d120      	bne.n	8004668 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004626:	4814      	ldr	r0, [pc, #80]	; (8004678 <prvCheckForValidListAndQueue+0x64>)
 8004628:	f7fe f884 	bl	8002734 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800462c:	4813      	ldr	r0, [pc, #76]	; (800467c <prvCheckForValidListAndQueue+0x68>)
 800462e:	f7fe f881 	bl	8002734 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <prvCheckForValidListAndQueue+0x6c>)
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <prvCheckForValidListAndQueue+0x64>)
 8004636:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <prvCheckForValidListAndQueue+0x70>)
 800463a:	4a10      	ldr	r2, [pc, #64]	; (800467c <prvCheckForValidListAndQueue+0x68>)
 800463c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <prvCheckForValidListAndQueue+0x74>)
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <prvCheckForValidListAndQueue+0x78>)
 8004646:	2110      	movs	r1, #16
 8004648:	200a      	movs	r0, #10
 800464a:	f7fe f98f 	bl	800296c <xQueueGenericCreateStatic>
 800464e:	4602      	mov	r2, r0
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <prvCheckForValidListAndQueue+0x60>)
 8004652:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <prvCheckForValidListAndQueue+0x60>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <prvCheckForValidListAndQueue+0x60>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	490b      	ldr	r1, [pc, #44]	; (8004690 <prvCheckForValidListAndQueue+0x7c>)
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fd92 	bl	800318c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004668:	f000 f966 	bl	8004938 <vPortExitCritical>
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000d3c 	.word	0x20000d3c
 8004678:	20000d0c 	.word	0x20000d0c
 800467c:	20000d20 	.word	0x20000d20
 8004680:	20000d34 	.word	0x20000d34
 8004684:	20000d38 	.word	0x20000d38
 8004688:	20000de8 	.word	0x20000de8
 800468c:	20000d48 	.word	0x20000d48
 8004690:	08005e34 	.word	0x08005e34

08004694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3b04      	subs	r3, #4
 80046a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3b04      	subs	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f023 0201 	bic.w	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3b04      	subs	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046c4:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <pxPortInitialiseStack+0x64>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b14      	subs	r3, #20
 80046ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b04      	subs	r3, #4
 80046da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f06f 0202 	mvn.w	r2, #2
 80046e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3b20      	subs	r3, #32
 80046e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	080046fd 	.word	0x080046fd

080046fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <prvTaskExitError+0x50>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d009      	beq.n	8004724 <prvTaskExitError+0x28>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	e7fe      	b.n	8004722 <prvTaskExitError+0x26>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004736:	bf00      	nop
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0fc      	beq.n	8004738 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c

08004750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <pxCurrentTCBConst2>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6808      	ldr	r0, [r1, #0]
 8004756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475a:	f380 8809 	msr	PSP, r0
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	4770      	bx	lr
 800476c:	f3af 8000 	nop.w

08004770 <pxCurrentTCBConst2>:
 8004770:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004778:	4808      	ldr	r0, [pc, #32]	; (800479c <prvPortStartFirstTask+0x24>)
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f380 8808 	msr	MSP, r0
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8814 	msr	CONTROL, r0
 800478a:	b662      	cpsie	i
 800478c:	b661      	cpsie	f
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	df00      	svc	0
 8004798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800479a:	bf00      	nop
 800479c:	e000ed08 	.word	0xe000ed08

080047a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <xPortStartScheduler+0x118>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a44      	ldr	r2, [pc, #272]	; (80048bc <xPortStartScheduler+0x11c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d109      	bne.n	80047c4 <xPortStartScheduler+0x24>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e7fe      	b.n	80047c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047c4:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <xPortStartScheduler+0x118>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a3d      	ldr	r2, [pc, #244]	; (80048c0 <xPortStartScheduler+0x120>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d109      	bne.n	80047e2 <xPortStartScheduler+0x42>
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e7fe      	b.n	80047e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <xPortStartScheduler+0x124>)
 80047e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <xPortStartScheduler+0x128>)
 8004808:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <xPortStartScheduler+0x12c>)
 800480c:	2207      	movs	r2, #7
 800480e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004810:	e009      	b.n	8004826 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004812:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <xPortStartScheduler+0x12c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <xPortStartScheduler+0x12c>)
 800481a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d0ef      	beq.n	8004812 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <xPortStartScheduler+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1c3 0307 	rsb	r3, r3, #7
 800483a:	2b04      	cmp	r3, #4
 800483c:	d009      	beq.n	8004852 <xPortStartScheduler+0xb2>
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	e7fe      	b.n	8004850 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <xPortStartScheduler+0x12c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <xPortStartScheduler+0x12c>)
 800485a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <xPortStartScheduler+0x12c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <xPortStartScheduler+0x12c>)
 8004866:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004870:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <xPortStartScheduler+0x130>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a16      	ldr	r2, [pc, #88]	; (80048d0 <xPortStartScheduler+0x130>)
 8004876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800487a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800487c:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <xPortStartScheduler+0x130>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <xPortStartScheduler+0x130>)
 8004882:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004886:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004888:	f000 f8d6 	bl	8004a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <xPortStartScheduler+0x134>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004892:	f000 f8f5 	bl	8004a80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <xPortStartScheduler+0x138>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <xPortStartScheduler+0x138>)
 800489c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048a2:	f7ff ff69 	bl	8004778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048a6:	f7ff f863 	bl	8003970 <vTaskSwitchContext>
	prvTaskExitError();
 80048aa:	f7ff ff27 	bl	80046fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	e000ed00 	.word	0xe000ed00
 80048bc:	410fc271 	.word	0x410fc271
 80048c0:	410fc270 	.word	0x410fc270
 80048c4:	e000e400 	.word	0xe000e400
 80048c8:	20000e38 	.word	0x20000e38
 80048cc:	20000e3c 	.word	0x20000e3c
 80048d0:	e000ed20 	.word	0xe000ed20
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	e000ef34 	.word	0xe000ef34

080048dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <vPortEnterCritical+0x54>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <vPortEnterCritical+0x54>)
 80048fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <vPortEnterCritical+0x54>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d10e      	bne.n	8004924 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vPortEnterCritical+0x58>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <vPortEnterCritical+0x48>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	e7fe      	b.n	8004922 <vPortEnterCritical+0x46>
	}
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	2000000c 	.word	0x2000000c
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <vPortExitCritical+0x4c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <vPortExitCritical+0x22>
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e7fe      	b.n	8004958 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <vPortExitCritical+0x4c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <vPortExitCritical+0x4c>)
 8004962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <vPortExitCritical+0x4c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <vPortExitCritical+0x3e>
 800496c:	2300      	movs	r3, #0
 800496e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c
	...

08004990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004990:	f3ef 8009 	mrs	r0, PSP
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <pxCurrentTCBConst>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f01e 0f10 	tst.w	lr, #16
 80049a0:	bf08      	it	eq
 80049a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	6010      	str	r0, [r2, #0]
 80049ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049b4:	f380 8811 	msr	BASEPRI, r0
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f7fe ffd6 	bl	8003970 <vTaskSwitchContext>
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f380 8811 	msr	BASEPRI, r0
 80049cc:	bc09      	pop	{r0, r3}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d6:	f01e 0f10 	tst.w	lr, #16
 80049da:	bf08      	it	eq
 80049dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049e0:	f380 8809 	msr	PSP, r0
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst>:
 80049f0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a10:	f7fe fef6 	bl	8003800 <xTaskIncrementTick>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <SysTick_Handler+0x3c>)
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <vPortSetupTimerInterrupt+0x34>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortSetupTimerInterrupt+0x38>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <vPortSetupTimerInterrupt+0x3c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <vPortSetupTimerInterrupt+0x40>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vPortSetupTimerInterrupt+0x44>)
 8004a56:	3b01      	subs	r3, #1
 8004a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <vPortSetupTimerInterrupt+0x34>)
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	601a      	str	r2, [r3, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000e010 	.word	0xe000e010
 8004a70:	e000e018 	.word	0xe000e018
 8004a74:	20000000 	.word	0x20000000
 8004a78:	10624dd3 	.word	0x10624dd3
 8004a7c:	e000e014 	.word	0xe000e014

08004a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a90 <vPortEnableVFP+0x10>
 8004a84:	6801      	ldr	r1, [r0, #0]
 8004a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a8a:	6001      	str	r1, [r0, #0]
 8004a8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a8e:	bf00      	nop
 8004a90:	e000ed88 	.word	0xe000ed88

08004a94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a9a:	f3ef 8305 	mrs	r3, IPSR
 8004a9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	d913      	bls.n	8004ace <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <vPortValidateInterruptPriority+0x6c>)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <vPortValidateInterruptPriority+0x70>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	7afa      	ldrb	r2, [r7, #11]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d209      	bcs.n	8004ace <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e7fe      	b.n	8004acc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <vPortValidateInterruptPriority+0x74>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <vPortValidateInterruptPriority+0x78>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d909      	bls.n	8004af2 <vPortValidateInterruptPriority+0x5e>
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	e7fe      	b.n	8004af0 <vPortValidateInterruptPriority+0x5c>
	}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e3f0 	.word	0xe000e3f0
 8004b04:	20000e38 	.word	0x20000e38
 8004b08:	e000ed0c 	.word	0xe000ed0c
 8004b0c:	20000e3c 	.word	0x20000e3c

08004b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b1c:	f7fe fdb6 	bl	800368c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b20:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <pvPortMalloc+0x170>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b28:	f000 f90c 	bl	8004d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b2c:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <pvPortMalloc+0x174>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 808c 	bne.w	8004c52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01c      	beq.n	8004b7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004b40:	2208      	movs	r2, #8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d013      	beq.n	8004b7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	3308      	adds	r3, #8
 8004b5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <pvPortMalloc+0x6a>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e7fe      	b.n	8004b78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d068      	beq.n	8004c52 <pvPortMalloc+0x142>
 8004b80:	4b41      	ldr	r3, [pc, #260]	; (8004c88 <pvPortMalloc+0x178>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d863      	bhi.n	8004c52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b8a:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <pvPortMalloc+0x17c>)
 8004b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <pvPortMalloc+0x17c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b94:	e004      	b.n	8004ba0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d903      	bls.n	8004bb2 <pvPortMalloc+0xa2>
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f1      	bne.n	8004b96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bb2:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <pvPortMalloc+0x170>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d04a      	beq.n	8004c52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d91e      	bls.n	8004c1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <pvPortMalloc+0xf4>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	e7fe      	b.n	8004c02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c16:	69b8      	ldr	r0, [r7, #24]
 8004c18:	f000 f8f6 	bl	8004e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <pvPortMalloc+0x178>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <pvPortMalloc+0x178>)
 8004c28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c2a:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <pvPortMalloc+0x178>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <pvPortMalloc+0x180>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d203      	bcs.n	8004c3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <pvPortMalloc+0x178>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <pvPortMalloc+0x180>)
 8004c3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <pvPortMalloc+0x174>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c52:	f7fe fd29 	bl	80036a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <pvPortMalloc+0x164>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e7fe      	b.n	8004c72 <pvPortMalloc+0x162>
	return pvReturn;
 8004c74:	69fb      	ldr	r3, [r7, #28]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20004a48 	.word	0x20004a48
 8004c84:	20004a54 	.word	0x20004a54
 8004c88:	20004a4c 	.word	0x20004a4c
 8004c8c:	20004a40 	.word	0x20004a40
 8004c90:	20004a50 	.word	0x20004a50

08004c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d046      	beq.n	8004d34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	425b      	negs	r3, r3
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4413      	add	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <vPortFree+0xa8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <vPortFree+0x42>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e7fe      	b.n	8004cd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <vPortFree+0x5e>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	e7fe      	b.n	8004cf0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <vPortFree+0xa8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d019      	beq.n	8004d34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d115      	bne.n	8004d34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <vPortFree+0xa8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d18:	f7fe fcb8 	bl	800368c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vPortFree+0xac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	4a06      	ldr	r2, [pc, #24]	; (8004d40 <vPortFree+0xac>)
 8004d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f86c 	bl	8004e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d30:	f7fe fcba 	bl	80036a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d34:	bf00      	nop
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20004a54 	.word	0x20004a54
 8004d40:	20004a4c 	.word	0x20004a4c

08004d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <prvHeapInit+0xac>)
 8004d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <prvHeapInit+0xac>)
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <prvHeapInit+0xb0>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d82:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <prvHeapInit+0xb0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d90:	2208      	movs	r2, #8
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0307 	bic.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <prvHeapInit+0xb4>)
 8004da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <prvHeapInit+0xb4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <prvHeapInit+0xb4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <prvHeapInit+0xb4>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <prvHeapInit+0xb8>)
 8004dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <prvHeapInit+0xbc>)
 8004dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <prvHeapInit+0xc0>)
 8004dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000e40 	.word	0x20000e40
 8004df4:	20004a40 	.word	0x20004a40
 8004df8:	20004a48 	.word	0x20004a48
 8004dfc:	20004a50 	.word	0x20004a50
 8004e00:	20004a4c 	.word	0x20004a4c
 8004e04:	20004a54 	.word	0x20004a54

08004e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <prvInsertBlockIntoFreeList+0xac>)
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e002      	b.n	8004e1c <prvInsertBlockIntoFreeList+0x14>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d8f7      	bhi.n	8004e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4413      	add	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d108      	bne.n	8004e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d118      	bne.n	8004e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d00d      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e008      	b.n	8004e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e003      	b.n	8004e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d002      	beq.n	8004ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20004a40 	.word	0x20004a40
 8004eb8:	20004a48 	.word	0x20004a48

08004ebc <__errno>:
 8004ebc:	4b01      	ldr	r3, [pc, #4]	; (8004ec4 <__errno+0x8>)
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000010 	.word	0x20000010

08004ec8 <std>:
 8004ec8:	2300      	movs	r3, #0
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	4604      	mov	r4, r0
 8004ece:	e9c0 3300 	strd	r3, r3, [r0]
 8004ed2:	6083      	str	r3, [r0, #8]
 8004ed4:	8181      	strh	r1, [r0, #12]
 8004ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed8:	81c2      	strh	r2, [r0, #14]
 8004eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ede:	6183      	str	r3, [r0, #24]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	305c      	adds	r0, #92	; 0x5c
 8004ee6:	f000 f8e8 	bl	80050ba <memset>
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <std+0x38>)
 8004eec:	6263      	str	r3, [r4, #36]	; 0x24
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <std+0x3c>)
 8004ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <std+0x40>)
 8004ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <std+0x44>)
 8004ef8:	6224      	str	r4, [r4, #32]
 8004efa:	6323      	str	r3, [r4, #48]	; 0x30
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	bf00      	nop
 8004f00:	080052a5 	.word	0x080052a5
 8004f04:	080052c7 	.word	0x080052c7
 8004f08:	080052ff 	.word	0x080052ff
 8004f0c:	08005323 	.word	0x08005323

08004f10 <_cleanup_r>:
 8004f10:	4901      	ldr	r1, [pc, #4]	; (8004f18 <_cleanup_r+0x8>)
 8004f12:	f000 b885 	b.w	8005020 <_fwalk_reent>
 8004f16:	bf00      	nop
 8004f18:	0800547d 	.word	0x0800547d

08004f1c <__sfmoreglue>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	1e4a      	subs	r2, r1, #1
 8004f20:	2568      	movs	r5, #104	; 0x68
 8004f22:	4355      	muls	r5, r2
 8004f24:	460e      	mov	r6, r1
 8004f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f2a:	f000 f8cf 	bl	80050cc <_malloc_r>
 8004f2e:	4604      	mov	r4, r0
 8004f30:	b140      	cbz	r0, 8004f44 <__sfmoreglue+0x28>
 8004f32:	2100      	movs	r1, #0
 8004f34:	e9c0 1600 	strd	r1, r6, [r0]
 8004f38:	300c      	adds	r0, #12
 8004f3a:	60a0      	str	r0, [r4, #8]
 8004f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f40:	f000 f8bb 	bl	80050ba <memset>
 8004f44:	4620      	mov	r0, r4
 8004f46:	bd70      	pop	{r4, r5, r6, pc}

08004f48 <__sinit>:
 8004f48:	6983      	ldr	r3, [r0, #24]
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	bb33      	cbnz	r3, 8004f9e <__sinit+0x56>
 8004f50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f54:	6503      	str	r3, [r0, #80]	; 0x50
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <__sinit+0x58>)
 8004f58:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <__sinit+0x5c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6282      	str	r2, [r0, #40]	; 0x28
 8004f5e:	4298      	cmp	r0, r3
 8004f60:	bf04      	itt	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	6183      	streq	r3, [r0, #24]
 8004f66:	f000 f81f 	bl	8004fa8 <__sfp>
 8004f6a:	6060      	str	r0, [r4, #4]
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f000 f81b 	bl	8004fa8 <__sfp>
 8004f72:	60a0      	str	r0, [r4, #8]
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 f817 	bl	8004fa8 <__sfp>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	60e0      	str	r0, [r4, #12]
 8004f7e:	2104      	movs	r1, #4
 8004f80:	6860      	ldr	r0, [r4, #4]
 8004f82:	f7ff ffa1 	bl	8004ec8 <std>
 8004f86:	2201      	movs	r2, #1
 8004f88:	2109      	movs	r1, #9
 8004f8a:	68a0      	ldr	r0, [r4, #8]
 8004f8c:	f7ff ff9c 	bl	8004ec8 <std>
 8004f90:	2202      	movs	r2, #2
 8004f92:	2112      	movs	r1, #18
 8004f94:	68e0      	ldr	r0, [r4, #12]
 8004f96:	f7ff ff97 	bl	8004ec8 <std>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61a3      	str	r3, [r4, #24]
 8004f9e:	bd10      	pop	{r4, pc}
 8004fa0:	08005eb4 	.word	0x08005eb4
 8004fa4:	08004f11 	.word	0x08004f11

08004fa8 <__sfp>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <__sfp+0x70>)
 8004fac:	681e      	ldr	r6, [r3, #0]
 8004fae:	69b3      	ldr	r3, [r6, #24]
 8004fb0:	4607      	mov	r7, r0
 8004fb2:	b913      	cbnz	r3, 8004fba <__sfp+0x12>
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff ffc7 	bl	8004f48 <__sinit>
 8004fba:	3648      	adds	r6, #72	; 0x48
 8004fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	d503      	bpl.n	8004fcc <__sfp+0x24>
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	b133      	cbz	r3, 8004fd6 <__sfp+0x2e>
 8004fc8:	6836      	ldr	r6, [r6, #0]
 8004fca:	e7f7      	b.n	8004fbc <__sfp+0x14>
 8004fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fd0:	b16d      	cbz	r5, 8004fee <__sfp+0x46>
 8004fd2:	3468      	adds	r4, #104	; 0x68
 8004fd4:	e7f4      	b.n	8004fc0 <__sfp+0x18>
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f7ff ff9f 	bl	8004f1c <__sfmoreglue>
 8004fde:	6030      	str	r0, [r6, #0]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1f1      	bne.n	8004fc8 <__sfp+0x20>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4604      	mov	r4, r0
 8004fea:	4620      	mov	r0, r4
 8004fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <__sfp+0x74>)
 8004ff0:	6665      	str	r5, [r4, #100]	; 0x64
 8004ff2:	e9c4 5500 	strd	r5, r5, [r4]
 8004ff6:	60a5      	str	r5, [r4, #8]
 8004ff8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ffc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005000:	2208      	movs	r2, #8
 8005002:	4629      	mov	r1, r5
 8005004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005008:	f000 f857 	bl	80050ba <memset>
 800500c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005014:	e7e9      	b.n	8004fea <__sfp+0x42>
 8005016:	bf00      	nop
 8005018:	08005eb4 	.word	0x08005eb4
 800501c:	ffff0001 	.word	0xffff0001

08005020 <_fwalk_reent>:
 8005020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800502c:	2600      	movs	r6, #0
 800502e:	b914      	cbnz	r4, 8005036 <_fwalk_reent+0x16>
 8005030:	4630      	mov	r0, r6
 8005032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005036:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800503a:	3f01      	subs	r7, #1
 800503c:	d501      	bpl.n	8005042 <_fwalk_reent+0x22>
 800503e:	6824      	ldr	r4, [r4, #0]
 8005040:	e7f5      	b.n	800502e <_fwalk_reent+0xe>
 8005042:	89ab      	ldrh	r3, [r5, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d907      	bls.n	8005058 <_fwalk_reent+0x38>
 8005048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800504c:	3301      	adds	r3, #1
 800504e:	d003      	beq.n	8005058 <_fwalk_reent+0x38>
 8005050:	4629      	mov	r1, r5
 8005052:	4640      	mov	r0, r8
 8005054:	47c8      	blx	r9
 8005056:	4306      	orrs	r6, r0
 8005058:	3568      	adds	r5, #104	; 0x68
 800505a:	e7ee      	b.n	800503a <_fwalk_reent+0x1a>

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4e0d      	ldr	r6, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1ba4      	subs	r4, r4, r6
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2500      	movs	r5, #0
 8005068:	42a5      	cmp	r5, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4e0b      	ldr	r6, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f000 feb0 	bl	8005dd4 <_init>
 8005074:	1ba4      	subs	r4, r4, r6
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2500      	movs	r5, #0
 800507a:	42a5      	cmp	r5, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005084:	4798      	blx	r3
 8005086:	3501      	adds	r5, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508e:	4798      	blx	r3
 8005090:	3501      	adds	r5, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	08005ef4 	.word	0x08005ef4
 8005098:	08005ef4 	.word	0x08005ef4
 800509c:	08005ef4 	.word	0x08005ef4
 80050a0:	08005ef8 	.word	0x08005ef8

080050a4 <memcpy>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	1e43      	subs	r3, r0, #1
 80050a8:	440a      	add	r2, r1
 80050aa:	4291      	cmp	r1, r2
 80050ac:	d100      	bne.n	80050b0 <memcpy+0xc>
 80050ae:	bd10      	pop	{r4, pc}
 80050b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b8:	e7f7      	b.n	80050aa <memcpy+0x6>

080050ba <memset>:
 80050ba:	4402      	add	r2, r0
 80050bc:	4603      	mov	r3, r0
 80050be:	4293      	cmp	r3, r2
 80050c0:	d100      	bne.n	80050c4 <memset+0xa>
 80050c2:	4770      	bx	lr
 80050c4:	f803 1b01 	strb.w	r1, [r3], #1
 80050c8:	e7f9      	b.n	80050be <memset+0x4>
	...

080050cc <_malloc_r>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	1ccd      	adds	r5, r1, #3
 80050d0:	f025 0503 	bic.w	r5, r5, #3
 80050d4:	3508      	adds	r5, #8
 80050d6:	2d0c      	cmp	r5, #12
 80050d8:	bf38      	it	cc
 80050da:	250c      	movcc	r5, #12
 80050dc:	2d00      	cmp	r5, #0
 80050de:	4606      	mov	r6, r0
 80050e0:	db01      	blt.n	80050e6 <_malloc_r+0x1a>
 80050e2:	42a9      	cmp	r1, r5
 80050e4:	d903      	bls.n	80050ee <_malloc_r+0x22>
 80050e6:	230c      	movs	r3, #12
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	2000      	movs	r0, #0
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	f000 fa01 	bl	80054f4 <__malloc_lock>
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <_malloc_r+0xac>)
 80050f4:	6814      	ldr	r4, [r2, #0]
 80050f6:	4621      	mov	r1, r4
 80050f8:	b991      	cbnz	r1, 8005120 <_malloc_r+0x54>
 80050fa:	4c20      	ldr	r4, [pc, #128]	; (800517c <_malloc_r+0xb0>)
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	b91b      	cbnz	r3, 8005108 <_malloc_r+0x3c>
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f8bf 	bl	8005284 <_sbrk_r>
 8005106:	6020      	str	r0, [r4, #0]
 8005108:	4629      	mov	r1, r5
 800510a:	4630      	mov	r0, r6
 800510c:	f000 f8ba 	bl	8005284 <_sbrk_r>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d124      	bne.n	800515e <_malloc_r+0x92>
 8005114:	230c      	movs	r3, #12
 8005116:	6033      	str	r3, [r6, #0]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f9ec 	bl	80054f6 <__malloc_unlock>
 800511e:	e7e4      	b.n	80050ea <_malloc_r+0x1e>
 8005120:	680b      	ldr	r3, [r1, #0]
 8005122:	1b5b      	subs	r3, r3, r5
 8005124:	d418      	bmi.n	8005158 <_malloc_r+0x8c>
 8005126:	2b0b      	cmp	r3, #11
 8005128:	d90f      	bls.n	800514a <_malloc_r+0x7e>
 800512a:	600b      	str	r3, [r1, #0]
 800512c:	50cd      	str	r5, [r1, r3]
 800512e:	18cc      	adds	r4, r1, r3
 8005130:	4630      	mov	r0, r6
 8005132:	f000 f9e0 	bl	80054f6 <__malloc_unlock>
 8005136:	f104 000b 	add.w	r0, r4, #11
 800513a:	1d23      	adds	r3, r4, #4
 800513c:	f020 0007 	bic.w	r0, r0, #7
 8005140:	1ac3      	subs	r3, r0, r3
 8005142:	d0d3      	beq.n	80050ec <_malloc_r+0x20>
 8005144:	425a      	negs	r2, r3
 8005146:	50e2      	str	r2, [r4, r3]
 8005148:	e7d0      	b.n	80050ec <_malloc_r+0x20>
 800514a:	428c      	cmp	r4, r1
 800514c:	684b      	ldr	r3, [r1, #4]
 800514e:	bf16      	itet	ne
 8005150:	6063      	strne	r3, [r4, #4]
 8005152:	6013      	streq	r3, [r2, #0]
 8005154:	460c      	movne	r4, r1
 8005156:	e7eb      	b.n	8005130 <_malloc_r+0x64>
 8005158:	460c      	mov	r4, r1
 800515a:	6849      	ldr	r1, [r1, #4]
 800515c:	e7cc      	b.n	80050f8 <_malloc_r+0x2c>
 800515e:	1cc4      	adds	r4, r0, #3
 8005160:	f024 0403 	bic.w	r4, r4, #3
 8005164:	42a0      	cmp	r0, r4
 8005166:	d005      	beq.n	8005174 <_malloc_r+0xa8>
 8005168:	1a21      	subs	r1, r4, r0
 800516a:	4630      	mov	r0, r6
 800516c:	f000 f88a 	bl	8005284 <_sbrk_r>
 8005170:	3001      	adds	r0, #1
 8005172:	d0cf      	beq.n	8005114 <_malloc_r+0x48>
 8005174:	6025      	str	r5, [r4, #0]
 8005176:	e7db      	b.n	8005130 <_malloc_r+0x64>
 8005178:	20004a58 	.word	0x20004a58
 800517c:	20004a5c 	.word	0x20004a5c

08005180 <iprintf>:
 8005180:	b40f      	push	{r0, r1, r2, r3}
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <iprintf+0x2c>)
 8005184:	b513      	push	{r0, r1, r4, lr}
 8005186:	681c      	ldr	r4, [r3, #0]
 8005188:	b124      	cbz	r4, 8005194 <iprintf+0x14>
 800518a:	69a3      	ldr	r3, [r4, #24]
 800518c:	b913      	cbnz	r3, 8005194 <iprintf+0x14>
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff feda 	bl	8004f48 <__sinit>
 8005194:	ab05      	add	r3, sp, #20
 8005196:	9a04      	ldr	r2, [sp, #16]
 8005198:	68a1      	ldr	r1, [r4, #8]
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	4620      	mov	r0, r4
 800519e:	f000 fa23 	bl	80055e8 <_vfiprintf_r>
 80051a2:	b002      	add	sp, #8
 80051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a8:	b004      	add	sp, #16
 80051aa:	4770      	bx	lr
 80051ac:	20000010 	.word	0x20000010

080051b0 <cleanup_glue>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	460c      	mov	r4, r1
 80051b4:	6809      	ldr	r1, [r1, #0]
 80051b6:	4605      	mov	r5, r0
 80051b8:	b109      	cbz	r1, 80051be <cleanup_glue+0xe>
 80051ba:	f7ff fff9 	bl	80051b0 <cleanup_glue>
 80051be:	4621      	mov	r1, r4
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c6:	f000 b997 	b.w	80054f8 <_free_r>
	...

080051cc <_reclaim_reent>:
 80051cc:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <_reclaim_reent+0xb4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4283      	cmp	r3, r0
 80051d2:	b570      	push	{r4, r5, r6, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	d051      	beq.n	800527c <_reclaim_reent+0xb0>
 80051d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051da:	b143      	cbz	r3, 80051ee <_reclaim_reent+0x22>
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d14a      	bne.n	8005278 <_reclaim_reent+0xac>
 80051e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e4:	6819      	ldr	r1, [r3, #0]
 80051e6:	b111      	cbz	r1, 80051ee <_reclaim_reent+0x22>
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 f985 	bl	80054f8 <_free_r>
 80051ee:	6961      	ldr	r1, [r4, #20]
 80051f0:	b111      	cbz	r1, 80051f8 <_reclaim_reent+0x2c>
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f980 	bl	80054f8 <_free_r>
 80051f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051fa:	b111      	cbz	r1, 8005202 <_reclaim_reent+0x36>
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 f97b 	bl	80054f8 <_free_r>
 8005202:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005204:	b111      	cbz	r1, 800520c <_reclaim_reent+0x40>
 8005206:	4620      	mov	r0, r4
 8005208:	f000 f976 	bl	80054f8 <_free_r>
 800520c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800520e:	b111      	cbz	r1, 8005216 <_reclaim_reent+0x4a>
 8005210:	4620      	mov	r0, r4
 8005212:	f000 f971 	bl	80054f8 <_free_r>
 8005216:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005218:	b111      	cbz	r1, 8005220 <_reclaim_reent+0x54>
 800521a:	4620      	mov	r0, r4
 800521c:	f000 f96c 	bl	80054f8 <_free_r>
 8005220:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005222:	b111      	cbz	r1, 800522a <_reclaim_reent+0x5e>
 8005224:	4620      	mov	r0, r4
 8005226:	f000 f967 	bl	80054f8 <_free_r>
 800522a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800522c:	b111      	cbz	r1, 8005234 <_reclaim_reent+0x68>
 800522e:	4620      	mov	r0, r4
 8005230:	f000 f962 	bl	80054f8 <_free_r>
 8005234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005236:	b111      	cbz	r1, 800523e <_reclaim_reent+0x72>
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f95d 	bl	80054f8 <_free_r>
 800523e:	69a3      	ldr	r3, [r4, #24]
 8005240:	b1e3      	cbz	r3, 800527c <_reclaim_reent+0xb0>
 8005242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005244:	4620      	mov	r0, r4
 8005246:	4798      	blx	r3
 8005248:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800524a:	b1b9      	cbz	r1, 800527c <_reclaim_reent+0xb0>
 800524c:	4620      	mov	r0, r4
 800524e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005252:	f7ff bfad 	b.w	80051b0 <cleanup_glue>
 8005256:	5949      	ldr	r1, [r1, r5]
 8005258:	b941      	cbnz	r1, 800526c <_reclaim_reent+0xa0>
 800525a:	3504      	adds	r5, #4
 800525c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800525e:	2d80      	cmp	r5, #128	; 0x80
 8005260:	68d9      	ldr	r1, [r3, #12]
 8005262:	d1f8      	bne.n	8005256 <_reclaim_reent+0x8a>
 8005264:	4620      	mov	r0, r4
 8005266:	f000 f947 	bl	80054f8 <_free_r>
 800526a:	e7ba      	b.n	80051e2 <_reclaim_reent+0x16>
 800526c:	680e      	ldr	r6, [r1, #0]
 800526e:	4620      	mov	r0, r4
 8005270:	f000 f942 	bl	80054f8 <_free_r>
 8005274:	4631      	mov	r1, r6
 8005276:	e7ef      	b.n	8005258 <_reclaim_reent+0x8c>
 8005278:	2500      	movs	r5, #0
 800527a:	e7ef      	b.n	800525c <_reclaim_reent+0x90>
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	bf00      	nop
 8005280:	20000010 	.word	0x20000010

08005284 <_sbrk_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4c06      	ldr	r4, [pc, #24]	; (80052a0 <_sbrk_r+0x1c>)
 8005288:	2300      	movs	r3, #0
 800528a:	4605      	mov	r5, r0
 800528c:	4608      	mov	r0, r1
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	f7fb fbd2 	bl	8000a38 <_sbrk>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_sbrk_r+0x1a>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	b103      	cbz	r3, 800529e <_sbrk_r+0x1a>
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20004b30 	.word	0x20004b30

080052a4 <__sread>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	460c      	mov	r4, r1
 80052a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ac:	f000 fc3a 	bl	8005b24 <_read_r>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	bfab      	itete	ge
 80052b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052b6:	89a3      	ldrhlt	r3, [r4, #12]
 80052b8:	181b      	addge	r3, r3, r0
 80052ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052be:	bfac      	ite	ge
 80052c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052c2:	81a3      	strhlt	r3, [r4, #12]
 80052c4:	bd10      	pop	{r4, pc}

080052c6 <__swrite>:
 80052c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ca:	461f      	mov	r7, r3
 80052cc:	898b      	ldrh	r3, [r1, #12]
 80052ce:	05db      	lsls	r3, r3, #23
 80052d0:	4605      	mov	r5, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	4616      	mov	r6, r2
 80052d6:	d505      	bpl.n	80052e4 <__swrite+0x1e>
 80052d8:	2302      	movs	r3, #2
 80052da:	2200      	movs	r2, #0
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	f000 f8f6 	bl	80054d0 <_lseek_r>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	4632      	mov	r2, r6
 80052f2:	463b      	mov	r3, r7
 80052f4:	4628      	mov	r0, r5
 80052f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052fa:	f000 b817 	b.w	800532c <_write_r>

080052fe <__sseek>:
 80052fe:	b510      	push	{r4, lr}
 8005300:	460c      	mov	r4, r1
 8005302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005306:	f000 f8e3 	bl	80054d0 <_lseek_r>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	bf15      	itete	ne
 8005310:	6560      	strne	r0, [r4, #84]	; 0x54
 8005312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800531a:	81a3      	strheq	r3, [r4, #12]
 800531c:	bf18      	it	ne
 800531e:	81a3      	strhne	r3, [r4, #12]
 8005320:	bd10      	pop	{r4, pc}

08005322 <__sclose>:
 8005322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005326:	f000 b813 	b.w	8005350 <_close_r>
	...

0800532c <_write_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4c07      	ldr	r4, [pc, #28]	; (800534c <_write_r+0x20>)
 8005330:	4605      	mov	r5, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fb fb2b 	bl	8000996 <_write>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_write_r+0x1e>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	b103      	cbz	r3, 800534a <_write_r+0x1e>
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20004b30 	.word	0x20004b30

08005350 <_close_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4c06      	ldr	r4, [pc, #24]	; (800536c <_close_r+0x1c>)
 8005354:	2300      	movs	r3, #0
 8005356:	4605      	mov	r5, r0
 8005358:	4608      	mov	r0, r1
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	f7fb fb37 	bl	80009ce <_close>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_close_r+0x1a>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	b103      	cbz	r3, 800536a <_close_r+0x1a>
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	20004b30 	.word	0x20004b30

08005370 <__sflush_r>:
 8005370:	898a      	ldrh	r2, [r1, #12]
 8005372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	4605      	mov	r5, r0
 8005378:	0710      	lsls	r0, r2, #28
 800537a:	460c      	mov	r4, r1
 800537c:	d458      	bmi.n	8005430 <__sflush_r+0xc0>
 800537e:	684b      	ldr	r3, [r1, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	dc05      	bgt.n	8005390 <__sflush_r+0x20>
 8005384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	dc02      	bgt.n	8005390 <__sflush_r+0x20>
 800538a:	2000      	movs	r0, #0
 800538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005392:	2e00      	cmp	r6, #0
 8005394:	d0f9      	beq.n	800538a <__sflush_r+0x1a>
 8005396:	2300      	movs	r3, #0
 8005398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800539c:	682f      	ldr	r7, [r5, #0]
 800539e:	6a21      	ldr	r1, [r4, #32]
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	d032      	beq.n	800540a <__sflush_r+0x9a>
 80053a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	075a      	lsls	r2, r3, #29
 80053aa:	d505      	bpl.n	80053b8 <__sflush_r+0x48>
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	1ac0      	subs	r0, r0, r3
 80053b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053b2:	b10b      	cbz	r3, 80053b8 <__sflush_r+0x48>
 80053b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053b6:	1ac0      	subs	r0, r0, r3
 80053b8:	2300      	movs	r3, #0
 80053ba:	4602      	mov	r2, r0
 80053bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053be:	6a21      	ldr	r1, [r4, #32]
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b0      	blx	r6
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	d106      	bne.n	80053d8 <__sflush_r+0x68>
 80053ca:	6829      	ldr	r1, [r5, #0]
 80053cc:	291d      	cmp	r1, #29
 80053ce:	d848      	bhi.n	8005462 <__sflush_r+0xf2>
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <__sflush_r+0x108>)
 80053d2:	40ca      	lsrs	r2, r1
 80053d4:	07d6      	lsls	r6, r2, #31
 80053d6:	d544      	bpl.n	8005462 <__sflush_r+0xf2>
 80053d8:	2200      	movs	r2, #0
 80053da:	6062      	str	r2, [r4, #4]
 80053dc:	04d9      	lsls	r1, r3, #19
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	6022      	str	r2, [r4, #0]
 80053e2:	d504      	bpl.n	80053ee <__sflush_r+0x7e>
 80053e4:	1c42      	adds	r2, r0, #1
 80053e6:	d101      	bne.n	80053ec <__sflush_r+0x7c>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b903      	cbnz	r3, 80053ee <__sflush_r+0x7e>
 80053ec:	6560      	str	r0, [r4, #84]	; 0x54
 80053ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053f0:	602f      	str	r7, [r5, #0]
 80053f2:	2900      	cmp	r1, #0
 80053f4:	d0c9      	beq.n	800538a <__sflush_r+0x1a>
 80053f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d002      	beq.n	8005404 <__sflush_r+0x94>
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f87a 	bl	80054f8 <_free_r>
 8005404:	2000      	movs	r0, #0
 8005406:	6360      	str	r0, [r4, #52]	; 0x34
 8005408:	e7c0      	b.n	800538c <__sflush_r+0x1c>
 800540a:	2301      	movs	r3, #1
 800540c:	4628      	mov	r0, r5
 800540e:	47b0      	blx	r6
 8005410:	1c41      	adds	r1, r0, #1
 8005412:	d1c8      	bne.n	80053a6 <__sflush_r+0x36>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0c5      	beq.n	80053a6 <__sflush_r+0x36>
 800541a:	2b1d      	cmp	r3, #29
 800541c:	d001      	beq.n	8005422 <__sflush_r+0xb2>
 800541e:	2b16      	cmp	r3, #22
 8005420:	d101      	bne.n	8005426 <__sflush_r+0xb6>
 8005422:	602f      	str	r7, [r5, #0]
 8005424:	e7b1      	b.n	800538a <__sflush_r+0x1a>
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	e7ad      	b.n	800538c <__sflush_r+0x1c>
 8005430:	690f      	ldr	r7, [r1, #16]
 8005432:	2f00      	cmp	r7, #0
 8005434:	d0a9      	beq.n	800538a <__sflush_r+0x1a>
 8005436:	0793      	lsls	r3, r2, #30
 8005438:	680e      	ldr	r6, [r1, #0]
 800543a:	bf08      	it	eq
 800543c:	694b      	ldreq	r3, [r1, #20]
 800543e:	600f      	str	r7, [r1, #0]
 8005440:	bf18      	it	ne
 8005442:	2300      	movne	r3, #0
 8005444:	eba6 0807 	sub.w	r8, r6, r7
 8005448:	608b      	str	r3, [r1, #8]
 800544a:	f1b8 0f00 	cmp.w	r8, #0
 800544e:	dd9c      	ble.n	800538a <__sflush_r+0x1a>
 8005450:	4643      	mov	r3, r8
 8005452:	463a      	mov	r2, r7
 8005454:	6a21      	ldr	r1, [r4, #32]
 8005456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005458:	4628      	mov	r0, r5
 800545a:	47b0      	blx	r6
 800545c:	2800      	cmp	r0, #0
 800545e:	dc06      	bgt.n	800546e <__sflush_r+0xfe>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e78e      	b.n	800538c <__sflush_r+0x1c>
 800546e:	4407      	add	r7, r0
 8005470:	eba8 0800 	sub.w	r8, r8, r0
 8005474:	e7e9      	b.n	800544a <__sflush_r+0xda>
 8005476:	bf00      	nop
 8005478:	20400001 	.word	0x20400001

0800547c <_fflush_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	690b      	ldr	r3, [r1, #16]
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	b1db      	cbz	r3, 80054be <_fflush_r+0x42>
 8005486:	b118      	cbz	r0, 8005490 <_fflush_r+0x14>
 8005488:	6983      	ldr	r3, [r0, #24]
 800548a:	b90b      	cbnz	r3, 8005490 <_fflush_r+0x14>
 800548c:	f7ff fd5c 	bl	8004f48 <__sinit>
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <_fflush_r+0x48>)
 8005492:	429c      	cmp	r4, r3
 8005494:	d109      	bne.n	80054aa <_fflush_r+0x2e>
 8005496:	686c      	ldr	r4, [r5, #4]
 8005498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549c:	b17b      	cbz	r3, 80054be <_fflush_r+0x42>
 800549e:	4621      	mov	r1, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a6:	f7ff bf63 	b.w	8005370 <__sflush_r>
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <_fflush_r+0x4c>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d101      	bne.n	80054b4 <_fflush_r+0x38>
 80054b0:	68ac      	ldr	r4, [r5, #8]
 80054b2:	e7f1      	b.n	8005498 <_fflush_r+0x1c>
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <_fflush_r+0x50>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	bf08      	it	eq
 80054ba:	68ec      	ldreq	r4, [r5, #12]
 80054bc:	e7ec      	b.n	8005498 <_fflush_r+0x1c>
 80054be:	2000      	movs	r0, #0
 80054c0:	bd38      	pop	{r3, r4, r5, pc}
 80054c2:	bf00      	nop
 80054c4:	08005e74 	.word	0x08005e74
 80054c8:	08005e94 	.word	0x08005e94
 80054cc:	08005e54 	.word	0x08005e54

080054d0 <_lseek_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4c07      	ldr	r4, [pc, #28]	; (80054f0 <_lseek_r+0x20>)
 80054d4:	4605      	mov	r5, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fb fa9c 	bl	8000a1c <_lseek>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_lseek_r+0x1e>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_lseek_r+0x1e>
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20004b30 	.word	0x20004b30

080054f4 <__malloc_lock>:
 80054f4:	4770      	bx	lr

080054f6 <__malloc_unlock>:
 80054f6:	4770      	bx	lr

080054f8 <_free_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4605      	mov	r5, r0
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d045      	beq.n	800558c <_free_r+0x94>
 8005500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005504:	1f0c      	subs	r4, r1, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	bfb8      	it	lt
 800550a:	18e4      	addlt	r4, r4, r3
 800550c:	f7ff fff2 	bl	80054f4 <__malloc_lock>
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <_free_r+0x98>)
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	4610      	mov	r0, r2
 8005516:	b933      	cbnz	r3, 8005526 <_free_r+0x2e>
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	6014      	str	r4, [r2, #0]
 800551c:	4628      	mov	r0, r5
 800551e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005522:	f7ff bfe8 	b.w	80054f6 <__malloc_unlock>
 8005526:	42a3      	cmp	r3, r4
 8005528:	d90c      	bls.n	8005544 <_free_r+0x4c>
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	1862      	adds	r2, r4, r1
 800552e:	4293      	cmp	r3, r2
 8005530:	bf04      	itt	eq
 8005532:	681a      	ldreq	r2, [r3, #0]
 8005534:	685b      	ldreq	r3, [r3, #4]
 8005536:	6063      	str	r3, [r4, #4]
 8005538:	bf04      	itt	eq
 800553a:	1852      	addeq	r2, r2, r1
 800553c:	6022      	streq	r2, [r4, #0]
 800553e:	6004      	str	r4, [r0, #0]
 8005540:	e7ec      	b.n	800551c <_free_r+0x24>
 8005542:	4613      	mov	r3, r2
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	b10a      	cbz	r2, 800554c <_free_r+0x54>
 8005548:	42a2      	cmp	r2, r4
 800554a:	d9fa      	bls.n	8005542 <_free_r+0x4a>
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	1858      	adds	r0, r3, r1
 8005550:	42a0      	cmp	r0, r4
 8005552:	d10b      	bne.n	800556c <_free_r+0x74>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	4401      	add	r1, r0
 8005558:	1858      	adds	r0, r3, r1
 800555a:	4282      	cmp	r2, r0
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	d1dd      	bne.n	800551c <_free_r+0x24>
 8005560:	6810      	ldr	r0, [r2, #0]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	4401      	add	r1, r0
 8005568:	6019      	str	r1, [r3, #0]
 800556a:	e7d7      	b.n	800551c <_free_r+0x24>
 800556c:	d902      	bls.n	8005574 <_free_r+0x7c>
 800556e:	230c      	movs	r3, #12
 8005570:	602b      	str	r3, [r5, #0]
 8005572:	e7d3      	b.n	800551c <_free_r+0x24>
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	1821      	adds	r1, r4, r0
 8005578:	428a      	cmp	r2, r1
 800557a:	bf04      	itt	eq
 800557c:	6811      	ldreq	r1, [r2, #0]
 800557e:	6852      	ldreq	r2, [r2, #4]
 8005580:	6062      	str	r2, [r4, #4]
 8005582:	bf04      	itt	eq
 8005584:	1809      	addeq	r1, r1, r0
 8005586:	6021      	streq	r1, [r4, #0]
 8005588:	605c      	str	r4, [r3, #4]
 800558a:	e7c7      	b.n	800551c <_free_r+0x24>
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	20004a58 	.word	0x20004a58

08005594 <__sfputc_r>:
 8005594:	6893      	ldr	r3, [r2, #8]
 8005596:	3b01      	subs	r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	b410      	push	{r4}
 800559c:	6093      	str	r3, [r2, #8]
 800559e:	da08      	bge.n	80055b2 <__sfputc_r+0x1e>
 80055a0:	6994      	ldr	r4, [r2, #24]
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	db01      	blt.n	80055aa <__sfputc_r+0x16>
 80055a6:	290a      	cmp	r1, #10
 80055a8:	d103      	bne.n	80055b2 <__sfputc_r+0x1e>
 80055aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ae:	f000 bacb 	b.w	8005b48 <__swbuf_r>
 80055b2:	6813      	ldr	r3, [r2, #0]
 80055b4:	1c58      	adds	r0, r3, #1
 80055b6:	6010      	str	r0, [r2, #0]
 80055b8:	7019      	strb	r1, [r3, #0]
 80055ba:	4608      	mov	r0, r1
 80055bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <__sfputs_r>:
 80055c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	18d5      	adds	r5, r2, r3
 80055cc:	42ac      	cmp	r4, r5
 80055ce:	d101      	bne.n	80055d4 <__sfputs_r+0x12>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e007      	b.n	80055e4 <__sfputs_r+0x22>
 80055d4:	463a      	mov	r2, r7
 80055d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055da:	4630      	mov	r0, r6
 80055dc:	f7ff ffda 	bl	8005594 <__sfputc_r>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d1f3      	bne.n	80055cc <__sfputs_r+0xa>
 80055e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e8 <_vfiprintf_r>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	460c      	mov	r4, r1
 80055ee:	b09d      	sub	sp, #116	; 0x74
 80055f0:	4617      	mov	r7, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	4606      	mov	r6, r0
 80055f6:	b118      	cbz	r0, 8005600 <_vfiprintf_r+0x18>
 80055f8:	6983      	ldr	r3, [r0, #24]
 80055fa:	b90b      	cbnz	r3, 8005600 <_vfiprintf_r+0x18>
 80055fc:	f7ff fca4 	bl	8004f48 <__sinit>
 8005600:	4b7c      	ldr	r3, [pc, #496]	; (80057f4 <_vfiprintf_r+0x20c>)
 8005602:	429c      	cmp	r4, r3
 8005604:	d158      	bne.n	80056b8 <_vfiprintf_r+0xd0>
 8005606:	6874      	ldr	r4, [r6, #4]
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	0718      	lsls	r0, r3, #28
 800560c:	d55e      	bpl.n	80056cc <_vfiprintf_r+0xe4>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05b      	beq.n	80056cc <_vfiprintf_r+0xe4>
 8005614:	2300      	movs	r3, #0
 8005616:	9309      	str	r3, [sp, #36]	; 0x24
 8005618:	2320      	movs	r3, #32
 800561a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561e:	2330      	movs	r3, #48	; 0x30
 8005620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005624:	9503      	str	r5, [sp, #12]
 8005626:	f04f 0b01 	mov.w	fp, #1
 800562a:	46b8      	mov	r8, r7
 800562c:	4645      	mov	r5, r8
 800562e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005632:	b10b      	cbz	r3, 8005638 <_vfiprintf_r+0x50>
 8005634:	2b25      	cmp	r3, #37	; 0x25
 8005636:	d154      	bne.n	80056e2 <_vfiprintf_r+0xfa>
 8005638:	ebb8 0a07 	subs.w	sl, r8, r7
 800563c:	d00b      	beq.n	8005656 <_vfiprintf_r+0x6e>
 800563e:	4653      	mov	r3, sl
 8005640:	463a      	mov	r2, r7
 8005642:	4621      	mov	r1, r4
 8005644:	4630      	mov	r0, r6
 8005646:	f7ff ffbc 	bl	80055c2 <__sfputs_r>
 800564a:	3001      	adds	r0, #1
 800564c:	f000 80c2 	beq.w	80057d4 <_vfiprintf_r+0x1ec>
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	4453      	add	r3, sl
 8005654:	9309      	str	r3, [sp, #36]	; 0x24
 8005656:	f898 3000 	ldrb.w	r3, [r8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80ba 	beq.w	80057d4 <_vfiprintf_r+0x1ec>
 8005660:	2300      	movs	r3, #0
 8005662:	f04f 32ff 	mov.w	r2, #4294967295
 8005666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800566a:	9304      	str	r3, [sp, #16]
 800566c:	9307      	str	r3, [sp, #28]
 800566e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005672:	931a      	str	r3, [sp, #104]	; 0x68
 8005674:	46a8      	mov	r8, r5
 8005676:	2205      	movs	r2, #5
 8005678:	f818 1b01 	ldrb.w	r1, [r8], #1
 800567c:	485e      	ldr	r0, [pc, #376]	; (80057f8 <_vfiprintf_r+0x210>)
 800567e:	f7fa fdaf 	bl	80001e0 <memchr>
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	bb78      	cbnz	r0, 80056e6 <_vfiprintf_r+0xfe>
 8005686:	06d9      	lsls	r1, r3, #27
 8005688:	bf44      	itt	mi
 800568a:	2220      	movmi	r2, #32
 800568c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005690:	071a      	lsls	r2, r3, #28
 8005692:	bf44      	itt	mi
 8005694:	222b      	movmi	r2, #43	; 0x2b
 8005696:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800569a:	782a      	ldrb	r2, [r5, #0]
 800569c:	2a2a      	cmp	r2, #42	; 0x2a
 800569e:	d02a      	beq.n	80056f6 <_vfiprintf_r+0x10e>
 80056a0:	9a07      	ldr	r2, [sp, #28]
 80056a2:	46a8      	mov	r8, r5
 80056a4:	2000      	movs	r0, #0
 80056a6:	250a      	movs	r5, #10
 80056a8:	4641      	mov	r1, r8
 80056aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ae:	3b30      	subs	r3, #48	; 0x30
 80056b0:	2b09      	cmp	r3, #9
 80056b2:	d969      	bls.n	8005788 <_vfiprintf_r+0x1a0>
 80056b4:	b360      	cbz	r0, 8005710 <_vfiprintf_r+0x128>
 80056b6:	e024      	b.n	8005702 <_vfiprintf_r+0x11a>
 80056b8:	4b50      	ldr	r3, [pc, #320]	; (80057fc <_vfiprintf_r+0x214>)
 80056ba:	429c      	cmp	r4, r3
 80056bc:	d101      	bne.n	80056c2 <_vfiprintf_r+0xda>
 80056be:	68b4      	ldr	r4, [r6, #8]
 80056c0:	e7a2      	b.n	8005608 <_vfiprintf_r+0x20>
 80056c2:	4b4f      	ldr	r3, [pc, #316]	; (8005800 <_vfiprintf_r+0x218>)
 80056c4:	429c      	cmp	r4, r3
 80056c6:	bf08      	it	eq
 80056c8:	68f4      	ldreq	r4, [r6, #12]
 80056ca:	e79d      	b.n	8005608 <_vfiprintf_r+0x20>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 fa8c 	bl	8005bec <__swsetup_r>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d09d      	beq.n	8005614 <_vfiprintf_r+0x2c>
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	b01d      	add	sp, #116	; 0x74
 80056de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e2:	46a8      	mov	r8, r5
 80056e4:	e7a2      	b.n	800562c <_vfiprintf_r+0x44>
 80056e6:	4a44      	ldr	r2, [pc, #272]	; (80057f8 <_vfiprintf_r+0x210>)
 80056e8:	1a80      	subs	r0, r0, r2
 80056ea:	fa0b f000 	lsl.w	r0, fp, r0
 80056ee:	4318      	orrs	r0, r3
 80056f0:	9004      	str	r0, [sp, #16]
 80056f2:	4645      	mov	r5, r8
 80056f4:	e7be      	b.n	8005674 <_vfiprintf_r+0x8c>
 80056f6:	9a03      	ldr	r2, [sp, #12]
 80056f8:	1d11      	adds	r1, r2, #4
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	9103      	str	r1, [sp, #12]
 80056fe:	2a00      	cmp	r2, #0
 8005700:	db01      	blt.n	8005706 <_vfiprintf_r+0x11e>
 8005702:	9207      	str	r2, [sp, #28]
 8005704:	e004      	b.n	8005710 <_vfiprintf_r+0x128>
 8005706:	4252      	negs	r2, r2
 8005708:	f043 0302 	orr.w	r3, r3, #2
 800570c:	9207      	str	r2, [sp, #28]
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	f898 3000 	ldrb.w	r3, [r8]
 8005714:	2b2e      	cmp	r3, #46	; 0x2e
 8005716:	d10e      	bne.n	8005736 <_vfiprintf_r+0x14e>
 8005718:	f898 3001 	ldrb.w	r3, [r8, #1]
 800571c:	2b2a      	cmp	r3, #42	; 0x2a
 800571e:	d138      	bne.n	8005792 <_vfiprintf_r+0x1aa>
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9203      	str	r2, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb8      	it	lt
 800572c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005730:	f108 0802 	add.w	r8, r8, #2
 8005734:	9305      	str	r3, [sp, #20]
 8005736:	4d33      	ldr	r5, [pc, #204]	; (8005804 <_vfiprintf_r+0x21c>)
 8005738:	f898 1000 	ldrb.w	r1, [r8]
 800573c:	2203      	movs	r2, #3
 800573e:	4628      	mov	r0, r5
 8005740:	f7fa fd4e 	bl	80001e0 <memchr>
 8005744:	b140      	cbz	r0, 8005758 <_vfiprintf_r+0x170>
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	1b40      	subs	r0, r0, r5
 800574a:	fa03 f000 	lsl.w	r0, r3, r0
 800574e:	9b04      	ldr	r3, [sp, #16]
 8005750:	4303      	orrs	r3, r0
 8005752:	f108 0801 	add.w	r8, r8, #1
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	f898 1000 	ldrb.w	r1, [r8]
 800575c:	482a      	ldr	r0, [pc, #168]	; (8005808 <_vfiprintf_r+0x220>)
 800575e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005762:	2206      	movs	r2, #6
 8005764:	f108 0701 	add.w	r7, r8, #1
 8005768:	f7fa fd3a 	bl	80001e0 <memchr>
 800576c:	2800      	cmp	r0, #0
 800576e:	d037      	beq.n	80057e0 <_vfiprintf_r+0x1f8>
 8005770:	4b26      	ldr	r3, [pc, #152]	; (800580c <_vfiprintf_r+0x224>)
 8005772:	bb1b      	cbnz	r3, 80057bc <_vfiprintf_r+0x1d4>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	3307      	adds	r3, #7
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	3308      	adds	r3, #8
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005782:	444b      	add	r3, r9
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	e750      	b.n	800562a <_vfiprintf_r+0x42>
 8005788:	fb05 3202 	mla	r2, r5, r2, r3
 800578c:	2001      	movs	r0, #1
 800578e:	4688      	mov	r8, r1
 8005790:	e78a      	b.n	80056a8 <_vfiprintf_r+0xc0>
 8005792:	2300      	movs	r3, #0
 8005794:	f108 0801 	add.w	r8, r8, #1
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	4619      	mov	r1, r3
 800579c:	250a      	movs	r5, #10
 800579e:	4640      	mov	r0, r8
 80057a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a4:	3a30      	subs	r2, #48	; 0x30
 80057a6:	2a09      	cmp	r2, #9
 80057a8:	d903      	bls.n	80057b2 <_vfiprintf_r+0x1ca>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0c3      	beq.n	8005736 <_vfiprintf_r+0x14e>
 80057ae:	9105      	str	r1, [sp, #20]
 80057b0:	e7c1      	b.n	8005736 <_vfiprintf_r+0x14e>
 80057b2:	fb05 2101 	mla	r1, r5, r1, r2
 80057b6:	2301      	movs	r3, #1
 80057b8:	4680      	mov	r8, r0
 80057ba:	e7f0      	b.n	800579e <_vfiprintf_r+0x1b6>
 80057bc:	ab03      	add	r3, sp, #12
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	4622      	mov	r2, r4
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <_vfiprintf_r+0x228>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	4630      	mov	r0, r6
 80057c8:	f3af 8000 	nop.w
 80057cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057d0:	4681      	mov	r9, r0
 80057d2:	d1d5      	bne.n	8005780 <_vfiprintf_r+0x198>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	065b      	lsls	r3, r3, #25
 80057d8:	f53f af7e 	bmi.w	80056d8 <_vfiprintf_r+0xf0>
 80057dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057de:	e77d      	b.n	80056dc <_vfiprintf_r+0xf4>
 80057e0:	ab03      	add	r3, sp, #12
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4622      	mov	r2, r4
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <_vfiprintf_r+0x228>)
 80057e8:	a904      	add	r1, sp, #16
 80057ea:	4630      	mov	r0, r6
 80057ec:	f000 f888 	bl	8005900 <_printf_i>
 80057f0:	e7ec      	b.n	80057cc <_vfiprintf_r+0x1e4>
 80057f2:	bf00      	nop
 80057f4:	08005e74 	.word	0x08005e74
 80057f8:	08005eb8 	.word	0x08005eb8
 80057fc:	08005e94 	.word	0x08005e94
 8005800:	08005e54 	.word	0x08005e54
 8005804:	08005ebe 	.word	0x08005ebe
 8005808:	08005ec2 	.word	0x08005ec2
 800580c:	00000000 	.word	0x00000000
 8005810:	080055c3 	.word	0x080055c3

08005814 <_printf_common>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	4691      	mov	r9, r2
 800581a:	461f      	mov	r7, r3
 800581c:	688a      	ldr	r2, [r1, #8]
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005824:	4293      	cmp	r3, r2
 8005826:	bfb8      	it	lt
 8005828:	4613      	movlt	r3, r2
 800582a:	f8c9 3000 	str.w	r3, [r9]
 800582e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005832:	4606      	mov	r6, r0
 8005834:	460c      	mov	r4, r1
 8005836:	b112      	cbz	r2, 800583e <_printf_common+0x2a>
 8005838:	3301      	adds	r3, #1
 800583a:	f8c9 3000 	str.w	r3, [r9]
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	0699      	lsls	r1, r3, #26
 8005842:	bf42      	ittt	mi
 8005844:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005848:	3302      	addmi	r3, #2
 800584a:	f8c9 3000 	strmi.w	r3, [r9]
 800584e:	6825      	ldr	r5, [r4, #0]
 8005850:	f015 0506 	ands.w	r5, r5, #6
 8005854:	d107      	bne.n	8005866 <_printf_common+0x52>
 8005856:	f104 0a19 	add.w	sl, r4, #25
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	f8d9 2000 	ldr.w	r2, [r9]
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	42ab      	cmp	r3, r5
 8005864:	dc28      	bgt.n	80058b8 <_printf_common+0xa4>
 8005866:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	3300      	adds	r3, #0
 800586e:	bf18      	it	ne
 8005870:	2301      	movne	r3, #1
 8005872:	0692      	lsls	r2, r2, #26
 8005874:	d42d      	bmi.n	80058d2 <_printf_common+0xbe>
 8005876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587a:	4639      	mov	r1, r7
 800587c:	4630      	mov	r0, r6
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d020      	beq.n	80058c6 <_printf_common+0xb2>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	68e5      	ldr	r5, [r4, #12]
 8005888:	f8d9 2000 	ldr.w	r2, [r9]
 800588c:	f003 0306 	and.w	r3, r3, #6
 8005890:	2b04      	cmp	r3, #4
 8005892:	bf08      	it	eq
 8005894:	1aad      	subeq	r5, r5, r2
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	6922      	ldr	r2, [r4, #16]
 800589a:	bf0c      	ite	eq
 800589c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a0:	2500      	movne	r5, #0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfc4      	itt	gt
 80058a6:	1a9b      	subgt	r3, r3, r2
 80058a8:	18ed      	addgt	r5, r5, r3
 80058aa:	f04f 0900 	mov.w	r9, #0
 80058ae:	341a      	adds	r4, #26
 80058b0:	454d      	cmp	r5, r9
 80058b2:	d11a      	bne.n	80058ea <_printf_common+0xd6>
 80058b4:	2000      	movs	r0, #0
 80058b6:	e008      	b.n	80058ca <_printf_common+0xb6>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4652      	mov	r2, sl
 80058bc:	4639      	mov	r1, r7
 80058be:	4630      	mov	r0, r6
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d103      	bne.n	80058ce <_printf_common+0xba>
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ce:	3501      	adds	r5, #1
 80058d0:	e7c3      	b.n	800585a <_printf_common+0x46>
 80058d2:	18e1      	adds	r1, r4, r3
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	2030      	movs	r0, #48	; 0x30
 80058d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058dc:	4422      	add	r2, r4
 80058de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058e6:	3302      	adds	r3, #2
 80058e8:	e7c5      	b.n	8005876 <_printf_common+0x62>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4622      	mov	r2, r4
 80058ee:	4639      	mov	r1, r7
 80058f0:	4630      	mov	r0, r6
 80058f2:	47c0      	blx	r8
 80058f4:	3001      	adds	r0, #1
 80058f6:	d0e6      	beq.n	80058c6 <_printf_common+0xb2>
 80058f8:	f109 0901 	add.w	r9, r9, #1
 80058fc:	e7d8      	b.n	80058b0 <_printf_common+0x9c>
	...

08005900 <_printf_i>:
 8005900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005904:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005908:	460c      	mov	r4, r1
 800590a:	7e09      	ldrb	r1, [r1, #24]
 800590c:	b085      	sub	sp, #20
 800590e:	296e      	cmp	r1, #110	; 0x6e
 8005910:	4617      	mov	r7, r2
 8005912:	4606      	mov	r6, r0
 8005914:	4698      	mov	r8, r3
 8005916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005918:	f000 80b3 	beq.w	8005a82 <_printf_i+0x182>
 800591c:	d822      	bhi.n	8005964 <_printf_i+0x64>
 800591e:	2963      	cmp	r1, #99	; 0x63
 8005920:	d036      	beq.n	8005990 <_printf_i+0x90>
 8005922:	d80a      	bhi.n	800593a <_printf_i+0x3a>
 8005924:	2900      	cmp	r1, #0
 8005926:	f000 80b9 	beq.w	8005a9c <_printf_i+0x19c>
 800592a:	2958      	cmp	r1, #88	; 0x58
 800592c:	f000 8083 	beq.w	8005a36 <_printf_i+0x136>
 8005930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005934:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005938:	e032      	b.n	80059a0 <_printf_i+0xa0>
 800593a:	2964      	cmp	r1, #100	; 0x64
 800593c:	d001      	beq.n	8005942 <_printf_i+0x42>
 800593e:	2969      	cmp	r1, #105	; 0x69
 8005940:	d1f6      	bne.n	8005930 <_printf_i+0x30>
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	0605      	lsls	r5, r0, #24
 8005948:	f103 0104 	add.w	r1, r3, #4
 800594c:	d52a      	bpl.n	80059a4 <_printf_i+0xa4>
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6011      	str	r1, [r2, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	da03      	bge.n	800595e <_printf_i+0x5e>
 8005956:	222d      	movs	r2, #45	; 0x2d
 8005958:	425b      	negs	r3, r3
 800595a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800595e:	486f      	ldr	r0, [pc, #444]	; (8005b1c <_printf_i+0x21c>)
 8005960:	220a      	movs	r2, #10
 8005962:	e039      	b.n	80059d8 <_printf_i+0xd8>
 8005964:	2973      	cmp	r1, #115	; 0x73
 8005966:	f000 809d 	beq.w	8005aa4 <_printf_i+0x1a4>
 800596a:	d808      	bhi.n	800597e <_printf_i+0x7e>
 800596c:	296f      	cmp	r1, #111	; 0x6f
 800596e:	d020      	beq.n	80059b2 <_printf_i+0xb2>
 8005970:	2970      	cmp	r1, #112	; 0x70
 8005972:	d1dd      	bne.n	8005930 <_printf_i+0x30>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	f043 0320 	orr.w	r3, r3, #32
 800597a:	6023      	str	r3, [r4, #0]
 800597c:	e003      	b.n	8005986 <_printf_i+0x86>
 800597e:	2975      	cmp	r1, #117	; 0x75
 8005980:	d017      	beq.n	80059b2 <_printf_i+0xb2>
 8005982:	2978      	cmp	r1, #120	; 0x78
 8005984:	d1d4      	bne.n	8005930 <_printf_i+0x30>
 8005986:	2378      	movs	r3, #120	; 0x78
 8005988:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800598c:	4864      	ldr	r0, [pc, #400]	; (8005b20 <_printf_i+0x220>)
 800598e:	e055      	b.n	8005a3c <_printf_i+0x13c>
 8005990:	6813      	ldr	r3, [r2, #0]
 8005992:	1d19      	adds	r1, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6011      	str	r1, [r2, #0]
 8005998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800599c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a0:	2301      	movs	r3, #1
 80059a2:	e08c      	b.n	8005abe <_printf_i+0x1be>
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6011      	str	r1, [r2, #0]
 80059a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059ac:	bf18      	it	ne
 80059ae:	b21b      	sxthne	r3, r3
 80059b0:	e7cf      	b.n	8005952 <_printf_i+0x52>
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	1d18      	adds	r0, r3, #4
 80059b8:	6010      	str	r0, [r2, #0]
 80059ba:	0628      	lsls	r0, r5, #24
 80059bc:	d501      	bpl.n	80059c2 <_printf_i+0xc2>
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	e002      	b.n	80059c8 <_printf_i+0xc8>
 80059c2:	0668      	lsls	r0, r5, #25
 80059c4:	d5fb      	bpl.n	80059be <_printf_i+0xbe>
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	4854      	ldr	r0, [pc, #336]	; (8005b1c <_printf_i+0x21c>)
 80059ca:	296f      	cmp	r1, #111	; 0x6f
 80059cc:	bf14      	ite	ne
 80059ce:	220a      	movne	r2, #10
 80059d0:	2208      	moveq	r2, #8
 80059d2:	2100      	movs	r1, #0
 80059d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d8:	6865      	ldr	r5, [r4, #4]
 80059da:	60a5      	str	r5, [r4, #8]
 80059dc:	2d00      	cmp	r5, #0
 80059de:	f2c0 8095 	blt.w	8005b0c <_printf_i+0x20c>
 80059e2:	6821      	ldr	r1, [r4, #0]
 80059e4:	f021 0104 	bic.w	r1, r1, #4
 80059e8:	6021      	str	r1, [r4, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d13d      	bne.n	8005a6a <_printf_i+0x16a>
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	f040 808e 	bne.w	8005b10 <_printf_i+0x210>
 80059f4:	4665      	mov	r5, ip
 80059f6:	2a08      	cmp	r2, #8
 80059f8:	d10b      	bne.n	8005a12 <_printf_i+0x112>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	07db      	lsls	r3, r3, #31
 80059fe:	d508      	bpl.n	8005a12 <_printf_i+0x112>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	bfde      	ittt	le
 8005a08:	2330      	movle	r3, #48	; 0x30
 8005a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a12:	ebac 0305 	sub.w	r3, ip, r5
 8005a16:	6123      	str	r3, [r4, #16]
 8005a18:	f8cd 8000 	str.w	r8, [sp]
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	aa03      	add	r2, sp, #12
 8005a20:	4621      	mov	r1, r4
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7ff fef6 	bl	8005814 <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d14d      	bne.n	8005ac8 <_printf_i+0x1c8>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b005      	add	sp, #20
 8005a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a36:	4839      	ldr	r0, [pc, #228]	; (8005b1c <_printf_i+0x21c>)
 8005a38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	6821      	ldr	r1, [r4, #0]
 8005a40:	1d1d      	adds	r5, r3, #4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6015      	str	r5, [r2, #0]
 8005a46:	060a      	lsls	r2, r1, #24
 8005a48:	d50b      	bpl.n	8005a62 <_printf_i+0x162>
 8005a4a:	07ca      	lsls	r2, r1, #31
 8005a4c:	bf44      	itt	mi
 8005a4e:	f041 0120 	orrmi.w	r1, r1, #32
 8005a52:	6021      	strmi	r1, [r4, #0]
 8005a54:	b91b      	cbnz	r3, 8005a5e <_printf_i+0x15e>
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	f022 0220 	bic.w	r2, r2, #32
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	e7b7      	b.n	80059d2 <_printf_i+0xd2>
 8005a62:	064d      	lsls	r5, r1, #25
 8005a64:	bf48      	it	mi
 8005a66:	b29b      	uxthmi	r3, r3
 8005a68:	e7ef      	b.n	8005a4a <_printf_i+0x14a>
 8005a6a:	4665      	mov	r5, ip
 8005a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a70:	fb02 3311 	mls	r3, r2, r1, r3
 8005a74:	5cc3      	ldrb	r3, [r0, r3]
 8005a76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	d1f5      	bne.n	8005a6c <_printf_i+0x16c>
 8005a80:	e7b9      	b.n	80059f6 <_printf_i+0xf6>
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	6961      	ldr	r1, [r4, #20]
 8005a88:	1d18      	adds	r0, r3, #4
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	0628      	lsls	r0, r5, #24
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	d501      	bpl.n	8005a96 <_printf_i+0x196>
 8005a92:	6019      	str	r1, [r3, #0]
 8005a94:	e002      	b.n	8005a9c <_printf_i+0x19c>
 8005a96:	066a      	lsls	r2, r5, #25
 8005a98:	d5fb      	bpl.n	8005a92 <_printf_i+0x192>
 8005a9a:	8019      	strh	r1, [r3, #0]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	4665      	mov	r5, ip
 8005aa2:	e7b9      	b.n	8005a18 <_printf_i+0x118>
 8005aa4:	6813      	ldr	r3, [r2, #0]
 8005aa6:	1d19      	adds	r1, r3, #4
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	681d      	ldr	r5, [r3, #0]
 8005aac:	6862      	ldr	r2, [r4, #4]
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f7fa fb95 	bl	80001e0 <memchr>
 8005ab6:	b108      	cbz	r0, 8005abc <_printf_i+0x1bc>
 8005ab8:	1b40      	subs	r0, r0, r5
 8005aba:	6060      	str	r0, [r4, #4]
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	6123      	str	r3, [r4, #16]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac6:	e7a7      	b.n	8005a18 <_printf_i+0x118>
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	462a      	mov	r2, r5
 8005acc:	4639      	mov	r1, r7
 8005ace:	4630      	mov	r0, r6
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d0aa      	beq.n	8005a2c <_printf_i+0x12c>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	079b      	lsls	r3, r3, #30
 8005ada:	d413      	bmi.n	8005b04 <_printf_i+0x204>
 8005adc:	68e0      	ldr	r0, [r4, #12]
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	4298      	cmp	r0, r3
 8005ae2:	bfb8      	it	lt
 8005ae4:	4618      	movlt	r0, r3
 8005ae6:	e7a3      	b.n	8005a30 <_printf_i+0x130>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	464a      	mov	r2, r9
 8005aec:	4639      	mov	r1, r7
 8005aee:	4630      	mov	r0, r6
 8005af0:	47c0      	blx	r8
 8005af2:	3001      	adds	r0, #1
 8005af4:	d09a      	beq.n	8005a2c <_printf_i+0x12c>
 8005af6:	3501      	adds	r5, #1
 8005af8:	68e3      	ldr	r3, [r4, #12]
 8005afa:	9a03      	ldr	r2, [sp, #12]
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	42ab      	cmp	r3, r5
 8005b00:	dcf2      	bgt.n	8005ae8 <_printf_i+0x1e8>
 8005b02:	e7eb      	b.n	8005adc <_printf_i+0x1dc>
 8005b04:	2500      	movs	r5, #0
 8005b06:	f104 0919 	add.w	r9, r4, #25
 8005b0a:	e7f5      	b.n	8005af8 <_printf_i+0x1f8>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ac      	bne.n	8005a6a <_printf_i+0x16a>
 8005b10:	7803      	ldrb	r3, [r0, #0]
 8005b12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b1a:	e76c      	b.n	80059f6 <_printf_i+0xf6>
 8005b1c:	08005ec9 	.word	0x08005ec9
 8005b20:	08005eda 	.word	0x08005eda

08005b24 <_read_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4c07      	ldr	r4, [pc, #28]	; (8005b44 <_read_r+0x20>)
 8005b28:	4605      	mov	r5, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	6022      	str	r2, [r4, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fa ff12 	bl	800095c <_read>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_read_r+0x1e>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_read_r+0x1e>
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20004b30 	.word	0x20004b30

08005b48 <__swbuf_r>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	460e      	mov	r6, r1
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	4605      	mov	r5, r0
 8005b50:	b118      	cbz	r0, 8005b5a <__swbuf_r+0x12>
 8005b52:	6983      	ldr	r3, [r0, #24]
 8005b54:	b90b      	cbnz	r3, 8005b5a <__swbuf_r+0x12>
 8005b56:	f7ff f9f7 	bl	8004f48 <__sinit>
 8005b5a:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <__swbuf_r+0x98>)
 8005b5c:	429c      	cmp	r4, r3
 8005b5e:	d12a      	bne.n	8005bb6 <__swbuf_r+0x6e>
 8005b60:	686c      	ldr	r4, [r5, #4]
 8005b62:	69a3      	ldr	r3, [r4, #24]
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	071a      	lsls	r2, r3, #28
 8005b6a:	d52e      	bpl.n	8005bca <__swbuf_r+0x82>
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	b363      	cbz	r3, 8005bca <__swbuf_r+0x82>
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	1ac0      	subs	r0, r0, r3
 8005b76:	6963      	ldr	r3, [r4, #20]
 8005b78:	b2f6      	uxtb	r6, r6
 8005b7a:	4283      	cmp	r3, r0
 8005b7c:	4637      	mov	r7, r6
 8005b7e:	dc04      	bgt.n	8005b8a <__swbuf_r+0x42>
 8005b80:	4621      	mov	r1, r4
 8005b82:	4628      	mov	r0, r5
 8005b84:	f7ff fc7a 	bl	800547c <_fflush_r>
 8005b88:	bb28      	cbnz	r0, 8005bd6 <__swbuf_r+0x8e>
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	60a3      	str	r3, [r4, #8]
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	701e      	strb	r6, [r3, #0]
 8005b98:	6963      	ldr	r3, [r4, #20]
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	4283      	cmp	r3, r0
 8005b9e:	d004      	beq.n	8005baa <__swbuf_r+0x62>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	07db      	lsls	r3, r3, #31
 8005ba4:	d519      	bpl.n	8005bda <__swbuf_r+0x92>
 8005ba6:	2e0a      	cmp	r6, #10
 8005ba8:	d117      	bne.n	8005bda <__swbuf_r+0x92>
 8005baa:	4621      	mov	r1, r4
 8005bac:	4628      	mov	r0, r5
 8005bae:	f7ff fc65 	bl	800547c <_fflush_r>
 8005bb2:	b190      	cbz	r0, 8005bda <__swbuf_r+0x92>
 8005bb4:	e00f      	b.n	8005bd6 <__swbuf_r+0x8e>
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <__swbuf_r+0x9c>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d101      	bne.n	8005bc0 <__swbuf_r+0x78>
 8005bbc:	68ac      	ldr	r4, [r5, #8]
 8005bbe:	e7d0      	b.n	8005b62 <__swbuf_r+0x1a>
 8005bc0:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <__swbuf_r+0xa0>)
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	bf08      	it	eq
 8005bc6:	68ec      	ldreq	r4, [r5, #12]
 8005bc8:	e7cb      	b.n	8005b62 <__swbuf_r+0x1a>
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f80d 	bl	8005bec <__swsetup_r>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d0cc      	beq.n	8005b70 <__swbuf_r+0x28>
 8005bd6:	f04f 37ff 	mov.w	r7, #4294967295
 8005bda:	4638      	mov	r0, r7
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bde:	bf00      	nop
 8005be0:	08005e74 	.word	0x08005e74
 8005be4:	08005e94 	.word	0x08005e94
 8005be8:	08005e54 	.word	0x08005e54

08005bec <__swsetup_r>:
 8005bec:	4b32      	ldr	r3, [pc, #200]	; (8005cb8 <__swsetup_r+0xcc>)
 8005bee:	b570      	push	{r4, r5, r6, lr}
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	b125      	cbz	r5, 8005c02 <__swsetup_r+0x16>
 8005bf8:	69ab      	ldr	r3, [r5, #24]
 8005bfa:	b913      	cbnz	r3, 8005c02 <__swsetup_r+0x16>
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f7ff f9a3 	bl	8004f48 <__sinit>
 8005c02:	4b2e      	ldr	r3, [pc, #184]	; (8005cbc <__swsetup_r+0xd0>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	d10f      	bne.n	8005c28 <__swsetup_r+0x3c>
 8005c08:	686c      	ldr	r4, [r5, #4]
 8005c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	0715      	lsls	r5, r2, #28
 8005c12:	d42c      	bmi.n	8005c6e <__swsetup_r+0x82>
 8005c14:	06d0      	lsls	r0, r2, #27
 8005c16:	d411      	bmi.n	8005c3c <__swsetup_r+0x50>
 8005c18:	2209      	movs	r2, #9
 8005c1a:	6032      	str	r2, [r6, #0]
 8005c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	e03e      	b.n	8005ca6 <__swsetup_r+0xba>
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <__swsetup_r+0xd4>)
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	d101      	bne.n	8005c32 <__swsetup_r+0x46>
 8005c2e:	68ac      	ldr	r4, [r5, #8]
 8005c30:	e7eb      	b.n	8005c0a <__swsetup_r+0x1e>
 8005c32:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <__swsetup_r+0xd8>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	bf08      	it	eq
 8005c38:	68ec      	ldreq	r4, [r5, #12]
 8005c3a:	e7e6      	b.n	8005c0a <__swsetup_r+0x1e>
 8005c3c:	0751      	lsls	r1, r2, #29
 8005c3e:	d512      	bpl.n	8005c66 <__swsetup_r+0x7a>
 8005c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c42:	b141      	cbz	r1, 8005c56 <__swsetup_r+0x6a>
 8005c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	d002      	beq.n	8005c52 <__swsetup_r+0x66>
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff fc53 	bl	80054f8 <_free_r>
 8005c52:	2300      	movs	r3, #0
 8005c54:	6363      	str	r3, [r4, #52]	; 0x34
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6063      	str	r3, [r4, #4]
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f043 0308 	orr.w	r3, r3, #8
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	b94b      	cbnz	r3, 8005c86 <__swsetup_r+0x9a>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7c:	d003      	beq.n	8005c86 <__swsetup_r+0x9a>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f845 	bl	8005d10 <__smakebuf_r>
 8005c86:	89a2      	ldrh	r2, [r4, #12]
 8005c88:	f012 0301 	ands.w	r3, r2, #1
 8005c8c:	d00c      	beq.n	8005ca8 <__swsetup_r+0xbc>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60a3      	str	r3, [r4, #8]
 8005c92:	6963      	ldr	r3, [r4, #20]
 8005c94:	425b      	negs	r3, r3
 8005c96:	61a3      	str	r3, [r4, #24]
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	b953      	cbnz	r3, 8005cb2 <__swsetup_r+0xc6>
 8005c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ca4:	d1ba      	bne.n	8005c1c <__swsetup_r+0x30>
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	0792      	lsls	r2, r2, #30
 8005caa:	bf58      	it	pl
 8005cac:	6963      	ldrpl	r3, [r4, #20]
 8005cae:	60a3      	str	r3, [r4, #8]
 8005cb0:	e7f2      	b.n	8005c98 <__swsetup_r+0xac>
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	e7f7      	b.n	8005ca6 <__swsetup_r+0xba>
 8005cb6:	bf00      	nop
 8005cb8:	20000010 	.word	0x20000010
 8005cbc:	08005e74 	.word	0x08005e74
 8005cc0:	08005e94 	.word	0x08005e94
 8005cc4:	08005e54 	.word	0x08005e54

08005cc8 <__swhatbuf_r>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	b096      	sub	sp, #88	; 0x58
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	da07      	bge.n	8005cea <__swhatbuf_r+0x22>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	89b3      	ldrh	r3, [r6, #12]
 8005ce0:	061a      	lsls	r2, r3, #24
 8005ce2:	d410      	bmi.n	8005d06 <__swhatbuf_r+0x3e>
 8005ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce8:	e00e      	b.n	8005d08 <__swhatbuf_r+0x40>
 8005cea:	466a      	mov	r2, sp
 8005cec:	f000 f850 	bl	8005d90 <_fstat_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	dbf2      	blt.n	8005cda <__swhatbuf_r+0x12>
 8005cf4:	9a01      	ldr	r2, [sp, #4]
 8005cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cfe:	425a      	negs	r2, r3
 8005d00:	415a      	adcs	r2, r3
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	e7ee      	b.n	8005ce4 <__swhatbuf_r+0x1c>
 8005d06:	2340      	movs	r3, #64	; 0x40
 8005d08:	2000      	movs	r0, #0
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	b016      	add	sp, #88	; 0x58
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}

08005d10 <__smakebuf_r>:
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d14:	079d      	lsls	r5, r3, #30
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	d507      	bpl.n	8005d2c <__smakebuf_r+0x1c>
 8005d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	ab01      	add	r3, sp, #4
 8005d2e:	466a      	mov	r2, sp
 8005d30:	f7ff ffca 	bl	8005cc8 <__swhatbuf_r>
 8005d34:	9900      	ldr	r1, [sp, #0]
 8005d36:	4605      	mov	r5, r0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff f9c7 	bl	80050cc <_malloc_r>
 8005d3e:	b948      	cbnz	r0, 8005d54 <__smakebuf_r+0x44>
 8005d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d44:	059a      	lsls	r2, r3, #22
 8005d46:	d4ef      	bmi.n	8005d28 <__smakebuf_r+0x18>
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	e7e3      	b.n	8005d1c <__smakebuf_r+0xc>
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <__smakebuf_r+0x7c>)
 8005d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	6020      	str	r0, [r4, #0]
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	9b00      	ldr	r3, [sp, #0]
 8005d64:	6163      	str	r3, [r4, #20]
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	6120      	str	r0, [r4, #16]
 8005d6a:	b15b      	cbz	r3, 8005d84 <__smakebuf_r+0x74>
 8005d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d70:	4630      	mov	r0, r6
 8005d72:	f000 f81f 	bl	8005db4 <_isatty_r>
 8005d76:	b128      	cbz	r0, 8005d84 <__smakebuf_r+0x74>
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	431d      	orrs	r5, r3
 8005d88:	81a5      	strh	r5, [r4, #12]
 8005d8a:	e7cd      	b.n	8005d28 <__smakebuf_r+0x18>
 8005d8c:	08004f11 	.word	0x08004f11

08005d90 <_fstat_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4c07      	ldr	r4, [pc, #28]	; (8005db0 <_fstat_r+0x20>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4605      	mov	r5, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	f7fa fe22 	bl	80009e6 <_fstat>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_fstat_r+0x1c>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_fstat_r+0x1c>
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20004b30 	.word	0x20004b30

08005db4 <_isatty_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4c06      	ldr	r4, [pc, #24]	; (8005dd0 <_isatty_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	f7fa fe21 	bl	8000a06 <_isatty>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_isatty_r+0x1a>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_isatty_r+0x1a>
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20004b30 	.word	0x20004b30

08005dd4 <_init>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr

08005de0 <_fini>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr
