
5_ChangingPriorityInRuntime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f7c  08004f7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f84  08004f84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac0  20000074  08005000  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b34  08005000  00024b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bb4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d33  00000000  00000000  00037c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  0003a990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003999  00000000  00000000  0003cd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e547  00000000  00000000  00040701  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095a69  00000000  00000000  0004ec48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e46b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff0  00000000  00000000  000e472c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004eac 	.word	0x08004eac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004eac 	.word	0x08004eac

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler,GreenTaskProfiler;
TaskHandle_t blue_handler,red_handler,green_handler;

int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  HAL_Init();
 80004e6:	f000 fa5d 	bl	80009a4 <HAL_Init>
  SystemClock_Config();
 80004ea:	f000 f86d 	bl	80005c8 <SystemClock_Config>
  MX_GPIO_Init();
 80004ee:	f000 f8f5 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f8c9 	bl	8000688 <MX_USART2_UART_Init>
  xTaskCreate(vBlueLEDControllerTask,"Blue LED Controller", 100, NULL, 2, &blue_handler);
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <main+0x58>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2302      	movs	r3, #2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	490e      	ldr	r1, [pc, #56]	; (800053c <main+0x5c>)
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x60>)
 8000506:	f002 fd5f 	bl	8002fc8 <xTaskCreate>
  xTaskCreate(vRedLEDControllerTask,"Red LED Controller", 100, NULL, 2, &red_handler);
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x64>)
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2302      	movs	r3, #2
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	490c      	ldr	r1, [pc, #48]	; (8000548 <main+0x68>)
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x6c>)
 800051a:	f002 fd55 	bl	8002fc8 <xTaskCreate>
  xTaskCreate(vGreenLEDControllerTask,"Red LED Controller", 100, NULL, 1, &green_handler);
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x70>)
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	4907      	ldr	r1, [pc, #28]	; (8000548 <main+0x68>)
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x74>)
 800052e:	f002 fd4b 	bl	8002fc8 <xTaskCreate>
  vTaskStartScheduler();
 8000532:	f002 ff41 	bl	80033b8 <vTaskStartScheduler>

  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x56>
 8000538:	20004a68 	.word	0x20004a68
 800053c:	08004ec4 	.word	0x08004ec4
 8000540:	08000559 	.word	0x08000559
 8000544:	20004a60 	.word	0x20004a60
 8000548:	08004ed8 	.word	0x08004ed8
 800054c:	08000571 	.word	0x08000571
 8000550:	20004a58 	.word	0x20004a58
 8000554:	080005b1 	.word	0x080005b1

08000558 <vBlueLEDControllerTask>:
  {
  }
}

void vBlueLEDControllerTask(void *pvParameters)
	{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	while(1)
		{
		BlueTaskProfiler++;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <vBlueLEDControllerTask+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a01      	ldr	r2, [pc, #4]	; (800056c <vBlueLEDControllerTask+0x14>)
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	e7f9      	b.n	8000560 <vBlueLEDControllerTask+0x8>
 800056c:	20004a5c 	.word	0x20004a5c

08000570 <vRedLEDControllerTask>:
		}

	}
void vRedLEDControllerTask(void *pvParameters)
	{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
		{
		RedTaskProfiler++;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <vRedLEDControllerTask+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <vRedLEDControllerTask+0x34>)
 8000580:	6013      	str	r3, [r2, #0]
		for(i = 0;i<700000;i++){}
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e002      	b.n	800058e <vRedLEDControllerTask+0x1e>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <vRedLEDControllerTask+0x38>)
 8000592:	4293      	cmp	r3, r2
 8000594:	ddf8      	ble.n	8000588 <vRedLEDControllerTask+0x18>
		vTaskPrioritySet(green_handler,3);
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <vRedLEDControllerTask+0x3c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2103      	movs	r1, #3
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fe6f 	bl	8003280 <vTaskPrioritySet>
		RedTaskProfiler++;
 80005a2:	e7e9      	b.n	8000578 <vRedLEDControllerTask+0x8>
 80005a4:	20004a64 	.word	0x20004a64
 80005a8:	000aae5f 	.word	0x000aae5f
 80005ac:	20004a58 	.word	0x20004a58

080005b0 <vGreenLEDControllerTask>:
		}

	}
void vGreenLEDControllerTask(void *pvParameters)
	{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	while(1)
		{
		GreenTaskProfiler++;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <vGreenLEDControllerTask+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a01      	ldr	r2, [pc, #4]	; (80005c4 <vGreenLEDControllerTask+0x14>)
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	e7f9      	b.n	80005b8 <vGreenLEDControllerTask+0x8>
 80005c4:	20004a6c 	.word	0x20004a6c

080005c8 <SystemClock_Config>:
	HAL_UART_Transmit(&huart2, (uint8_t* )&ch, 1, 0xFFFFFF);
	return ch;
	}

void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 fba7 	bl	8004d2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xb8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xb8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xb8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <SystemClock_Config+0xbc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SystemClock_Config+0xbc>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemClock_Config+0xbc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fc57 	bl	8000ef0 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000648:	f000 f874 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f000 feb2 	bl	80013d0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000672:	f000 f85f 	bl	8000734 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f001 faa2 	bl	8001c08 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f833 	bl	8000734 <Error_Handler>
  }

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20004a70 	.word	0x20004a70
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_GPIO_Init+0x30>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <MX_GPIO_Init+0x30>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_GPIO_Init+0x30>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000722:	f000 f961 	bl	80009e8 <HAL_IncTick>
  }
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010000 	.word	0x40010000

08000734 <Error_Handler>:

void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <HAL_MspInit+0x54>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x54>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_MspInit+0x54>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_MspInit+0x54>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	210f      	movs	r1, #15
 8000786:	f06f 0001 	mvn.w	r0, #1
 800078a:	f000 fa05 	bl	8000b98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a19      	ldr	r2, [pc, #100]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d12b      	bne.n	8000816 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <HAL_UART_MspInit+0x88>)
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_UART_MspInit+0x88>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_UART_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <HAL_UART_MspInit+0x88>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_UART_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007f6:	230c      	movs	r3, #12
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000806:	2307      	movs	r3, #7
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <HAL_UART_MspInit+0x8c>)
 8000812:	f000 f9eb 	bl	8000bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40004400 	.word	0x40004400
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2019      	movs	r0, #25
 8000842:	f000 f9a9 	bl	8000b98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000846:	2019      	movs	r0, #25
 8000848:	f000 f9c2 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <HAL_InitTick+0xa0>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <HAL_InitTick+0xa0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6453      	str	r3, [r2, #68]	; 0x44
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <HAL_InitTick+0xa0>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000868:	f107 0210 	add.w	r2, r7, #16
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 ff78 	bl	8001768 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000878:	f000 ff62 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 800087c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <HAL_InitTick+0xa4>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	0c9b      	lsrs	r3, r3, #18
 8000888:	3b01      	subs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_InitTick+0xa8>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_InitTick+0xac>)
 8000890:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_InitTick+0xa8>)
 8000894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000898:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_InitTick+0xa8>)
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_InitTick+0xa8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_InitTick+0xa8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <HAL_InitTick+0xa8>)
 80008ae:	f000 ff8d 	bl	80017cc <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d104      	bne.n	80008c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <HAL_InitTick+0xa8>)
 80008ba:	f000 ffbc 	bl	8001836 <HAL_TIM_Base_Start_IT>
 80008be:	4603      	mov	r3, r0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3730      	adds	r7, #48	; 0x30
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	431bde83 	.word	0x431bde83
 80008d4:	20004ab0 	.word	0x20004ab0
 80008d8:	40010000 	.word	0x40010000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000916:	f000 ffb2 	bl	800187e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20004ab0 	.word	0x20004ab0

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <SystemInit+0x28>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <SystemInit+0x28>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <SystemInit+0x28>)
 800093a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093e:	609a      	str	r2, [r3, #8]
#endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000954:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000956:	e003      	b.n	8000960 <LoopCopyDataInit>

08000958 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800095a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800095c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800095e:	3104      	adds	r1, #4

08000960 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000964:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000966:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000968:	d3f6      	bcc.n	8000958 <CopyDataInit>
  ldr  r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800096c:	e002      	b.n	8000974 <LoopFillZerobss>

0800096e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800096e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000970:	f842 3b04 	str.w	r3, [r2], #4

08000974 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000976:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000978:	d3f9      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800097a:	f7ff ffd3 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f004 f9a5 	bl	8004ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fdad 	bl	80004e0 <main>
  bx  lr    
 8000986:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000988:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800098c:	08004f8c 	.word	0x08004f8c
  ldr  r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000994:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000998:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800099c:	20004b34 	.word	0x20004b34

080009a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <HAL_Init+0x40>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_Init+0x40>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_Init+0x40>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f8d8 	bl	8000b82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff ff2a 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff feb4 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023c00 	.word	0x40023c00

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20004af0 	.word	0x20004af0

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20004af0 	.word	0x20004af0

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <__NVIC_EnableIRQ+0x38>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff4c 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000baa:	f7ff ff61 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6978      	ldr	r0, [r7, #20]
 8000bb6:	f7ff ffb1 	bl	8000b1c <NVIC_EncodePriority>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff80 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff54 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	e159      	b.n	8000ebc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8148 	bne.w	8000eb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d00b      	beq.n	8000c46 <HAL_GPIO_Init+0x5a>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d007      	beq.n	8000c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3a:	2b11      	cmp	r3, #17
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d130      	bne.n	8000ca8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0xfc>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	d123      	bne.n	8000d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	69b9      	ldr	r1, [r7, #24]
 8000d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0203 	and.w	r2, r3, #3
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80a2 	beq.w	8000eb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <HAL_GPIO_Init+0x2e4>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x2e4>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_GPIO_Init+0x2e4>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8e:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a48      	ldr	r2, [pc, #288]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x202>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a47      	ldr	r2, [pc, #284]	; (8000edc <HAL_GPIO_Init+0x2f0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x1fe>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a46      	ldr	r2, [pc, #280]	; (8000ee0 <HAL_GPIO_Init+0x2f4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x1fa>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a45      	ldr	r2, [pc, #276]	; (8000ee4 <HAL_GPIO_Init+0x2f8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x1f6>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <HAL_GPIO_Init+0x2fc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x1f2>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000dde:	2307      	movs	r3, #7
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4934      	ldr	r1, [pc, #208]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e32:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e5c:	4a23      	ldr	r2, [pc, #140]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e86:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_GPIO_Init+0x300>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f aea2 	bls.w	8000c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3724      	adds	r7, #36	; 0x24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e25b      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d075      	beq.n	8000ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0e:	4ba3      	ldr	r3, [pc, #652]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d00c      	beq.n	8000f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4ba0      	ldr	r3, [pc, #640]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d112      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f26:	4b9d      	ldr	r3, [pc, #628]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f32:	d10b      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4b99      	ldr	r3, [pc, #612]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d05b      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x108>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d157      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e236      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x74>
 8000f56:	4b91      	ldr	r3, [pc, #580]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a90      	ldr	r2, [pc, #576]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e01d      	b.n	8000fa0 <HAL_RCC_OscConfig+0xb0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x98>
 8000f6e:	4b8b      	ldr	r3, [pc, #556]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a8a      	ldr	r2, [pc, #552]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b88      	ldr	r3, [pc, #544]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a87      	ldr	r2, [pc, #540]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0xb0>
 8000f88:	4b84      	ldr	r3, [pc, #528]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a83      	ldr	r2, [pc, #524]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b81      	ldr	r3, [pc, #516]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a80      	ldr	r2, [pc, #512]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fd32 	bl	8000a10 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fd2e 	bl	8000a10 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1fb      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	4b76      	ldr	r3, [pc, #472]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xc0>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fd1e 	bl	8000a10 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fd1a 	bl	8000a10 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1e7      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	4b6c      	ldr	r3, [pc, #432]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xe8>
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d063      	beq.n	80010ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001006:	4b65      	ldr	r3, [pc, #404]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b62      	ldr	r3, [pc, #392]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101a:	2b08      	cmp	r3, #8
 800101c:	d11c      	bne.n	8001058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_RCC_OscConfig+0x152>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e1bb      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b56      	ldr	r3, [pc, #344]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4952      	ldr	r1, [pc, #328]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	e03a      	b.n	80010ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001060:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <HAL_RCC_OscConfig+0x2b0>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001066:	f7ff fcd3 	bl	8000a10 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fccf 	bl	8000a10 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e19c      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4940      	ldr	r1, [pc, #256]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <HAL_RCC_OscConfig+0x2b0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcb2 	bl	8000a10 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff fcae 	bl	8000a10 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e17b      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d030      	beq.n	800113c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d016      	beq.n	8001110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <HAL_RCC_OscConfig+0x2b4>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc92 	bl	8000a10 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc8e 	bl	8000a10 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e15b      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x200>
 800110e:	e015      	b.n	800113c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_RCC_OscConfig+0x2b4>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fc7b 	bl	8000a10 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff fc77 	bl	8000a10 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e144      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a0 	beq.w	800128a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RCC_OscConfig+0x2b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d121      	bne.n	80011ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_RCC_OscConfig+0x2b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_RCC_OscConfig+0x2b8>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc3d 	bl	8000a10 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e011      	b.n	80011be <HAL_RCC_OscConfig+0x2ce>
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	42470000 	.word	0x42470000
 80011a4:	42470e80 	.word	0x42470e80
 80011a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ac:	f7ff fc30 	bl	8000a10 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e0fd      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x4d4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d106      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2f0>
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a7c      	ldr	r2, [pc, #496]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	e01c      	b.n	800121a <HAL_RCC_OscConfig+0x32a>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x312>
 80011e8:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ec:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6713      	str	r3, [r2, #112]	; 0x70
 80011f4:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f8:	4a73      	ldr	r2, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001200:	e00b      	b.n	800121a <HAL_RCC_OscConfig+0x32a>
 8001202:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	4a70      	ldr	r2, [pc, #448]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6713      	str	r3, [r2, #112]	; 0x70
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	4a6d      	ldr	r2, [pc, #436]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d015      	beq.n	800124e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fbf5 	bl	8000a10 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fbf1 	bl	8000a10 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e0bc      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ee      	beq.n	800122a <HAL_RCC_OscConfig+0x33a>
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fbdf 	bl	8000a10 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fbdb 	bl	8000a10 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0a6      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ee      	bne.n	8001256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d105      	bne.n	800128a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a51      	ldr	r2, [pc, #324]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8092 	beq.w	80013b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001294:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d05c      	beq.n	800135a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d141      	bne.n	800132c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <HAL_RCC_OscConfig+0x4dc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fbaf 	bl	8000a10 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fbab 	bl	8000a10 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e078      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	3b01      	subs	r3, #1
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	061b      	lsls	r3, r3, #24
 80012f8:	4933      	ldr	r1, [pc, #204]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x4dc>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb84 	bl	8000a10 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fb80 	bl	8000a10 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e04d      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x41c>
 800132a:	e045      	b.n	80013b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x4dc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb6d 	bl	8000a10 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fb69 	bl	8000a10 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e036      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x44a>
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e029      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	429a      	cmp	r2, r3
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d115      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800138e:	4013      	ands	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001394:	4293      	cmp	r3, r2
 8001396:	d10d      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	42470060 	.word	0x42470060

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0cc      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d90c      	bls.n	800140c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d044      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d119      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d003      	beq.n	800148e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148a:	2b03      	cmp	r3, #3
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e067      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4934      	ldr	r1, [pc, #208]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff faa6 	bl	8000a10 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff faa2 	bl	8000a10 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e04f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d20c      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4601      	mov	r1, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	fa21 f303 	lsr.w	r3, r1, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f958 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00
 800158c:	40023800 	.word	0x40023800
 8001590:	08004f04 	.word	0x08004f04
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d007      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x32>
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d008      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x38>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 808d 	bne.w	80016e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80015ca:	60bb      	str	r3, [r7, #8]
       break;
 80015cc:	e08c      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 80015d0:	60bb      	str	r3, [r7, #8]
      break;
 80015d2:	e089      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d4:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d023      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	099b      	lsrs	r3, r3, #6
 80015f0:	f04f 0400 	mov.w	r4, #0
 80015f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	ea03 0501 	and.w	r5, r3, r1
 8001600:	ea04 0602 	and.w	r6, r4, r2
 8001604:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001606:	fb02 f106 	mul.w	r1, r2, r6
 800160a:	2200      	movs	r2, #0
 800160c:	fb02 f205 	mul.w	r2, r2, r5
 8001610:	440a      	add	r2, r1
 8001612:	493a      	ldr	r1, [pc, #232]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001614:	fba5 0101 	umull	r0, r1, r5, r1
 8001618:	1853      	adds	r3, r2, r1
 800161a:	4619      	mov	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f04f 0400 	mov.w	r4, #0
 8001622:	461a      	mov	r2, r3
 8001624:	4623      	mov	r3, r4
 8001626:	f7fe fddb 	bl	80001e0 <__aeabi_uldivmod>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e049      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	ea03 0501 	and.w	r5, r3, r1
 8001648:	ea04 0602 	and.w	r6, r4, r2
 800164c:	4629      	mov	r1, r5
 800164e:	4632      	mov	r2, r6
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	0154      	lsls	r4, r2, #5
 800165a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800165e:	014b      	lsls	r3, r1, #5
 8001660:	4619      	mov	r1, r3
 8001662:	4622      	mov	r2, r4
 8001664:	1b49      	subs	r1, r1, r5
 8001666:	eb62 0206 	sbc.w	r2, r2, r6
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f04f 0400 	mov.w	r4, #0
 8001672:	0194      	lsls	r4, r2, #6
 8001674:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	1a5b      	subs	r3, r3, r1
 800167c:	eb64 0402 	sbc.w	r4, r4, r2
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	00e2      	lsls	r2, r4, #3
 800168a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800168e:	00d9      	lsls	r1, r3, #3
 8001690:	460b      	mov	r3, r1
 8001692:	4614      	mov	r4, r2
 8001694:	195b      	adds	r3, r3, r5
 8001696:	eb44 0406 	adc.w	r4, r4, r6
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	02a2      	lsls	r2, r4, #10
 80016a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016a8:	0299      	lsls	r1, r3, #10
 80016aa:	460b      	mov	r3, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	4621      	mov	r1, r4
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f04f 0400 	mov.w	r4, #0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7fe fd90 	bl	80001e0 <__aeabi_uldivmod>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	3301      	adds	r3, #1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	60bb      	str	r3, [r7, #8]
      break;
 80016e0:	e002      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016e4:	60bb      	str	r3, [r7, #8]
      break;
 80016e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e8:	68bb      	ldr	r3, [r7, #8]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	017d7840 	.word	0x017d7840

08001700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCC_GetHCLKFreq+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800171c:	f7ff fff0 	bl	8001700 <HAL_RCC_GetHCLKFreq>
 8001720:	4601      	mov	r1, r0
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	0a9b      	lsrs	r3, r3, #10
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	08004f14 	.word	0x08004f14

08001740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001744:	f7ff ffdc 	bl	8001700 <HAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0b5b      	lsrs	r3, r3, #13
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	08004f14 	.word	0x08004f14

08001768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	220f      	movs	r2, #15
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_GetClockConfig+0x5c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_RCC_GetClockConfig+0x60>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 020f 	and.w	r2, r3, #15
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	601a      	str	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40023c00 	.word	0x40023c00

080017cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e01d      	b.n	800181a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f815 	bl	8001822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3304      	adds	r3, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f000 f968 	bl	8001ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b06      	cmp	r3, #6
 800185e:	d007      	beq.n	8001870 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	d122      	bne.n	80018da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d11b      	bne.n	80018da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f06f 0202 	mvn.w	r2, #2
 80018aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8ee 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 80018c6:	e005      	b.n	80018d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f8e0 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8f1 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d122      	bne.n	800192e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d11b      	bne.n	800192e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0204 	mvn.w	r2, #4
 80018fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8c4 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 800191a:	e005      	b.n	8001928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f8b6 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8c7 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b08      	cmp	r3, #8
 800193a:	d122      	bne.n	8001982 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11b      	bne.n	8001982 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0208 	mvn.w	r2, #8
 8001952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f89a 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 800196e:	e005      	b.n	800197c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f88c 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f89d 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b10      	cmp	r3, #16
 800198e:	d122      	bne.n	80019d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b10      	cmp	r3, #16
 800199c:	d11b      	bne.n	80019d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0210 	mvn.w	r2, #16
 80019a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2208      	movs	r2, #8
 80019ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f870 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 80019c2:	e005      	b.n	80019d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f862 	bl	8001a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f873 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10e      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0201 	mvn.w	r2, #1
 80019fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fe87 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	d10e      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b80      	cmp	r3, #128	; 0x80
 8001a1c:	d107      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f8e3 	bl	8001bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d10e      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d107      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f838 	bl	8001aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d10e      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d107      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0220 	mvn.w	r2, #32
 8001a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8ad 	bl	8001be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <TIM_Base_SetConfig+0xe4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00f      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afe:	d00b      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <TIM_Base_SetConfig+0xe8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <TIM_Base_SetConfig+0xec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <TIM_Base_SetConfig+0xe4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01b      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d017      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <TIM_Base_SetConfig+0xe8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <TIM_Base_SetConfig+0xec>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00f      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00b      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <TIM_Base_SetConfig+0xf4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <TIM_Base_SetConfig+0xf8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <TIM_Base_SetConfig+0xfc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d108      	bne.n	8001b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <TIM_Base_SetConfig+0xe4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d103      	bne.n	8001bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	615a      	str	r2, [r3, #20]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40000c00 	.word	0x40000c00
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	40014400 	.word	0x40014400
 8001bdc:	40014800 	.word	0x40014800

08001be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e03f      	b.n	8001c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fdb4 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f829 	bl	8001ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ce6:	f023 030c 	bic.w	r3, r3, #12
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d12:	f040 818b 	bne.w	800202c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4ac1      	ldr	r2, [pc, #772]	; (8002020 <UART_SetConfig+0x37c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d005      	beq.n	8001d2c <UART_SetConfig+0x88>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4abf      	ldr	r2, [pc, #764]	; (8002024 <UART_SetConfig+0x380>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f040 80bd 	bne.w	8001ea6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d2c:	f7ff fd08 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 8001d30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	461d      	mov	r5, r3
 8001d36:	f04f 0600 	mov.w	r6, #0
 8001d3a:	46a8      	mov	r8, r5
 8001d3c:	46b1      	mov	r9, r6
 8001d3e:	eb18 0308 	adds.w	r3, r8, r8
 8001d42:	eb49 0409 	adc.w	r4, r9, r9
 8001d46:	4698      	mov	r8, r3
 8001d48:	46a1      	mov	r9, r4
 8001d4a:	eb18 0805 	adds.w	r8, r8, r5
 8001d4e:	eb49 0906 	adc.w	r9, r9, r6
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001d5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001d62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001d66:	4688      	mov	r8, r1
 8001d68:	4691      	mov	r9, r2
 8001d6a:	eb18 0005 	adds.w	r0, r8, r5
 8001d6e:	eb49 0106 	adc.w	r1, r9, r6
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	461d      	mov	r5, r3
 8001d78:	f04f 0600 	mov.w	r6, #0
 8001d7c:	196b      	adds	r3, r5, r5
 8001d7e:	eb46 0406 	adc.w	r4, r6, r6
 8001d82:	461a      	mov	r2, r3
 8001d84:	4623      	mov	r3, r4
 8001d86:	f7fe fa2b 	bl	80001e0 <__aeabi_uldivmod>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4ba5      	ldr	r3, [pc, #660]	; (8002028 <UART_SetConfig+0x384>)
 8001d92:	fba3 2302 	umull	r2, r3, r3, r2
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	461d      	mov	r5, r3
 8001da0:	f04f 0600 	mov.w	r6, #0
 8001da4:	46a9      	mov	r9, r5
 8001da6:	46b2      	mov	sl, r6
 8001da8:	eb19 0309 	adds.w	r3, r9, r9
 8001dac:	eb4a 040a 	adc.w	r4, sl, sl
 8001db0:	4699      	mov	r9, r3
 8001db2:	46a2      	mov	sl, r4
 8001db4:	eb19 0905 	adds.w	r9, r9, r5
 8001db8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001dcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dd0:	4689      	mov	r9, r1
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	eb19 0005 	adds.w	r0, r9, r5
 8001dd8:	eb4a 0106 	adc.w	r1, sl, r6
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	461d      	mov	r5, r3
 8001de2:	f04f 0600 	mov.w	r6, #0
 8001de6:	196b      	adds	r3, r5, r5
 8001de8:	eb46 0406 	adc.w	r4, r6, r6
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	f7fe f9f6 	bl	80001e0 <__aeabi_uldivmod>
 8001df4:	4603      	mov	r3, r0
 8001df6:	460c      	mov	r4, r1
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <UART_SetConfig+0x384>)
 8001dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	2164      	movs	r1, #100	; 0x64
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	3332      	adds	r3, #50	; 0x32
 8001e0e:	4a86      	ldr	r2, [pc, #536]	; (8002028 <UART_SetConfig+0x384>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e1c:	4498      	add	r8, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	461d      	mov	r5, r3
 8001e22:	f04f 0600 	mov.w	r6, #0
 8001e26:	46a9      	mov	r9, r5
 8001e28:	46b2      	mov	sl, r6
 8001e2a:	eb19 0309 	adds.w	r3, r9, r9
 8001e2e:	eb4a 040a 	adc.w	r4, sl, sl
 8001e32:	4699      	mov	r9, r3
 8001e34:	46a2      	mov	sl, r4
 8001e36:	eb19 0905 	adds.w	r9, r9, r5
 8001e3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e52:	4689      	mov	r9, r1
 8001e54:	4692      	mov	sl, r2
 8001e56:	eb19 0005 	adds.w	r0, r9, r5
 8001e5a:	eb4a 0106 	adc.w	r1, sl, r6
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	461d      	mov	r5, r3
 8001e64:	f04f 0600 	mov.w	r6, #0
 8001e68:	196b      	adds	r3, r5, r5
 8001e6a:	eb46 0406 	adc.w	r4, r6, r6
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4623      	mov	r3, r4
 8001e72:	f7fe f9b5 	bl	80001e0 <__aeabi_uldivmod>
 8001e76:	4603      	mov	r3, r0
 8001e78:	460c      	mov	r4, r1
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <UART_SetConfig+0x384>)
 8001e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2164      	movs	r1, #100	; 0x64
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	3332      	adds	r3, #50	; 0x32
 8001e90:	4a65      	ldr	r2, [pc, #404]	; (8002028 <UART_SetConfig+0x384>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	f003 0207 	and.w	r2, r3, #7
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4442      	add	r2, r8
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e26f      	b.n	8002386 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ea6:	f7ff fc37 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8001eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	461d      	mov	r5, r3
 8001eb0:	f04f 0600 	mov.w	r6, #0
 8001eb4:	46a8      	mov	r8, r5
 8001eb6:	46b1      	mov	r9, r6
 8001eb8:	eb18 0308 	adds.w	r3, r8, r8
 8001ebc:	eb49 0409 	adc.w	r4, r9, r9
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	46a1      	mov	r9, r4
 8001ec4:	eb18 0805 	adds.w	r8, r8, r5
 8001ec8:	eb49 0906 	adc.w	r9, r9, r6
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ee0:	4688      	mov	r8, r1
 8001ee2:	4691      	mov	r9, r2
 8001ee4:	eb18 0005 	adds.w	r0, r8, r5
 8001ee8:	eb49 0106 	adc.w	r1, r9, r6
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	f04f 0600 	mov.w	r6, #0
 8001ef6:	196b      	adds	r3, r5, r5
 8001ef8:	eb46 0406 	adc.w	r4, r6, r6
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	f7fe f96e 	bl	80001e0 <__aeabi_uldivmod>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <UART_SetConfig+0x384>)
 8001f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f10:	095b      	lsrs	r3, r3, #5
 8001f12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	461d      	mov	r5, r3
 8001f1a:	f04f 0600 	mov.w	r6, #0
 8001f1e:	46a9      	mov	r9, r5
 8001f20:	46b2      	mov	sl, r6
 8001f22:	eb19 0309 	adds.w	r3, r9, r9
 8001f26:	eb4a 040a 	adc.w	r4, sl, sl
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	46a2      	mov	sl, r4
 8001f2e:	eb19 0905 	adds.w	r9, r9, r5
 8001f32:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f4a:	4689      	mov	r9, r1
 8001f4c:	4692      	mov	sl, r2
 8001f4e:	eb19 0005 	adds.w	r0, r9, r5
 8001f52:	eb4a 0106 	adc.w	r1, sl, r6
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	f04f 0600 	mov.w	r6, #0
 8001f60:	196b      	adds	r3, r5, r5
 8001f62:	eb46 0406 	adc.w	r4, r6, r6
 8001f66:	461a      	mov	r2, r3
 8001f68:	4623      	mov	r3, r4
 8001f6a:	f7fe f939 	bl	80001e0 <__aeabi_uldivmod>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460c      	mov	r4, r1
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <UART_SetConfig+0x384>)
 8001f76:	fba3 1302 	umull	r1, r3, r3, r2
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2164      	movs	r1, #100	; 0x64
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	3332      	adds	r3, #50	; 0x32
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <UART_SetConfig+0x384>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f96:	4498      	add	r8, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	f04f 0600 	mov.w	r6, #0
 8001fa0:	46a9      	mov	r9, r5
 8001fa2:	46b2      	mov	sl, r6
 8001fa4:	eb19 0309 	adds.w	r3, r9, r9
 8001fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8001fac:	4699      	mov	r9, r3
 8001fae:	46a2      	mov	sl, r4
 8001fb0:	eb19 0905 	adds.w	r9, r9, r5
 8001fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fcc:	4689      	mov	r9, r1
 8001fce:	4692      	mov	sl, r2
 8001fd0:	eb19 0005 	adds.w	r0, r9, r5
 8001fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	461d      	mov	r5, r3
 8001fde:	f04f 0600 	mov.w	r6, #0
 8001fe2:	196b      	adds	r3, r5, r5
 8001fe4:	eb46 0406 	adc.w	r4, r6, r6
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	f7fe f8f8 	bl	80001e0 <__aeabi_uldivmod>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <UART_SetConfig+0x384>)
 8001ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	2164      	movs	r1, #100	; 0x64
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	3332      	adds	r3, #50	; 0x32
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <UART_SetConfig+0x384>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	f003 0207 	and.w	r2, r3, #7
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4442      	add	r2, r8
 800201c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800201e:	e1b2      	b.n	8002386 <UART_SetConfig+0x6e2>
 8002020:	40011000 	.word	0x40011000
 8002024:	40011400 	.word	0x40011400
 8002028:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4ad7      	ldr	r2, [pc, #860]	; (8002390 <UART_SetConfig+0x6ec>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d005      	beq.n	8002042 <UART_SetConfig+0x39e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4ad6      	ldr	r2, [pc, #856]	; (8002394 <UART_SetConfig+0x6f0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f040 80d1 	bne.w	80021e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002042:	f7ff fb7d 	bl	8001740 <HAL_RCC_GetPCLK2Freq>
 8002046:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	469a      	mov	sl, r3
 800204c:	f04f 0b00 	mov.w	fp, #0
 8002050:	46d0      	mov	r8, sl
 8002052:	46d9      	mov	r9, fp
 8002054:	eb18 0308 	adds.w	r3, r8, r8
 8002058:	eb49 0409 	adc.w	r4, r9, r9
 800205c:	4698      	mov	r8, r3
 800205e:	46a1      	mov	r9, r4
 8002060:	eb18 080a 	adds.w	r8, r8, sl
 8002064:	eb49 090b 	adc.w	r9, r9, fp
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002074:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002078:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800207c:	4688      	mov	r8, r1
 800207e:	4691      	mov	r9, r2
 8002080:	eb1a 0508 	adds.w	r5, sl, r8
 8002084:	eb4b 0609 	adc.w	r6, fp, r9
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	f04f 0400 	mov.w	r4, #0
 800209a:	0094      	lsls	r4, r2, #2
 800209c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020a0:	008b      	lsls	r3, r1, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	4628      	mov	r0, r5
 80020a8:	4631      	mov	r1, r6
 80020aa:	f7fe f899 	bl	80001e0 <__aeabi_uldivmod>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	461a      	mov	r2, r3
 80020b4:	4bb8      	ldr	r3, [pc, #736]	; (8002398 <UART_SetConfig+0x6f4>)
 80020b6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	469b      	mov	fp, r3
 80020c4:	f04f 0c00 	mov.w	ip, #0
 80020c8:	46d9      	mov	r9, fp
 80020ca:	46e2      	mov	sl, ip
 80020cc:	eb19 0309 	adds.w	r3, r9, r9
 80020d0:	eb4a 040a 	adc.w	r4, sl, sl
 80020d4:	4699      	mov	r9, r3
 80020d6:	46a2      	mov	sl, r4
 80020d8:	eb19 090b 	adds.w	r9, r9, fp
 80020dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f4:	4689      	mov	r9, r1
 80020f6:	4692      	mov	sl, r2
 80020f8:	eb1b 0509 	adds.w	r5, fp, r9
 80020fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4619      	mov	r1, r3
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	f04f 0400 	mov.w	r4, #0
 8002112:	0094      	lsls	r4, r2, #2
 8002114:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002118:	008b      	lsls	r3, r1, #2
 800211a:	461a      	mov	r2, r3
 800211c:	4623      	mov	r3, r4
 800211e:	4628      	mov	r0, r5
 8002120:	4631      	mov	r1, r6
 8002122:	f7fe f85d 	bl	80001e0 <__aeabi_uldivmod>
 8002126:	4603      	mov	r3, r0
 8002128:	460c      	mov	r4, r1
 800212a:	461a      	mov	r2, r3
 800212c:	4b9a      	ldr	r3, [pc, #616]	; (8002398 <UART_SetConfig+0x6f4>)
 800212e:	fba3 1302 	umull	r1, r3, r3, r2
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2164      	movs	r1, #100	; 0x64
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	3332      	adds	r3, #50	; 0x32
 8002140:	4a95      	ldr	r2, [pc, #596]	; (8002398 <UART_SetConfig+0x6f4>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214c:	4498      	add	r8, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	469b      	mov	fp, r3
 8002152:	f04f 0c00 	mov.w	ip, #0
 8002156:	46d9      	mov	r9, fp
 8002158:	46e2      	mov	sl, ip
 800215a:	eb19 0309 	adds.w	r3, r9, r9
 800215e:	eb4a 040a 	adc.w	r4, sl, sl
 8002162:	4699      	mov	r9, r3
 8002164:	46a2      	mov	sl, r4
 8002166:	eb19 090b 	adds.w	r9, r9, fp
 800216a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800217a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800217e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002182:	4689      	mov	r9, r1
 8002184:	4692      	mov	sl, r2
 8002186:	eb1b 0509 	adds.w	r5, fp, r9
 800218a:	eb4c 060a 	adc.w	r6, ip, sl
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4619      	mov	r1, r3
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	f04f 0400 	mov.w	r4, #0
 80021a0:	0094      	lsls	r4, r2, #2
 80021a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021a6:	008b      	lsls	r3, r1, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4623      	mov	r3, r4
 80021ac:	4628      	mov	r0, r5
 80021ae:	4631      	mov	r1, r6
 80021b0:	f7fe f816 	bl	80001e0 <__aeabi_uldivmod>
 80021b4:	4603      	mov	r3, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b77      	ldr	r3, [pc, #476]	; (8002398 <UART_SetConfig+0x6f4>)
 80021bc:	fba3 1302 	umull	r1, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2164      	movs	r1, #100	; 0x64
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	3332      	adds	r3, #50	; 0x32
 80021ce:	4a72      	ldr	r2, [pc, #456]	; (8002398 <UART_SetConfig+0x6f4>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4442      	add	r2, r8
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	e0d0      	b.n	8002386 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021e4:	f7ff fa98 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 80021e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	469a      	mov	sl, r3
 80021ee:	f04f 0b00 	mov.w	fp, #0
 80021f2:	46d0      	mov	r8, sl
 80021f4:	46d9      	mov	r9, fp
 80021f6:	eb18 0308 	adds.w	r3, r8, r8
 80021fa:	eb49 0409 	adc.w	r4, r9, r9
 80021fe:	4698      	mov	r8, r3
 8002200:	46a1      	mov	r9, r4
 8002202:	eb18 080a 	adds.w	r8, r8, sl
 8002206:	eb49 090b 	adc.w	r9, r9, fp
 800220a:	f04f 0100 	mov.w	r1, #0
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002216:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800221a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800221e:	4688      	mov	r8, r1
 8002220:	4691      	mov	r9, r2
 8002222:	eb1a 0508 	adds.w	r5, sl, r8
 8002226:	eb4b 0609 	adc.w	r6, fp, r9
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f04f 0400 	mov.w	r4, #0
 800223c:	0094      	lsls	r4, r2, #2
 800223e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002242:	008b      	lsls	r3, r1, #2
 8002244:	461a      	mov	r2, r3
 8002246:	4623      	mov	r3, r4
 8002248:	4628      	mov	r0, r5
 800224a:	4631      	mov	r1, r6
 800224c:	f7fd ffc8 	bl	80001e0 <__aeabi_uldivmod>
 8002250:	4603      	mov	r3, r0
 8002252:	460c      	mov	r4, r1
 8002254:	461a      	mov	r2, r3
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <UART_SetConfig+0x6f4>)
 8002258:	fba3 2302 	umull	r2, r3, r3, r2
 800225c:	095b      	lsrs	r3, r3, #5
 800225e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	469b      	mov	fp, r3
 8002266:	f04f 0c00 	mov.w	ip, #0
 800226a:	46d9      	mov	r9, fp
 800226c:	46e2      	mov	sl, ip
 800226e:	eb19 0309 	adds.w	r3, r9, r9
 8002272:	eb4a 040a 	adc.w	r4, sl, sl
 8002276:	4699      	mov	r9, r3
 8002278:	46a2      	mov	sl, r4
 800227a:	eb19 090b 	adds.w	r9, r9, fp
 800227e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002296:	4689      	mov	r9, r1
 8002298:	4692      	mov	sl, r2
 800229a:	eb1b 0509 	adds.w	r5, fp, r9
 800229e:	eb4c 060a 	adc.w	r6, ip, sl
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f04f 0400 	mov.w	r4, #0
 80022b4:	0094      	lsls	r4, r2, #2
 80022b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022ba:	008b      	lsls	r3, r1, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	4628      	mov	r0, r5
 80022c2:	4631      	mov	r1, r6
 80022c4:	f7fd ff8c 	bl	80001e0 <__aeabi_uldivmod>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <UART_SetConfig+0x6f4>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2164      	movs	r1, #100	; 0x64
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <UART_SetConfig+0x6f4>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ee:	4498      	add	r8, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	469b      	mov	fp, r3
 80022f4:	f04f 0c00 	mov.w	ip, #0
 80022f8:	46d9      	mov	r9, fp
 80022fa:	46e2      	mov	sl, ip
 80022fc:	eb19 0309 	adds.w	r3, r9, r9
 8002300:	eb4a 040a 	adc.w	r4, sl, sl
 8002304:	4699      	mov	r9, r3
 8002306:	46a2      	mov	sl, r4
 8002308:	eb19 090b 	adds.w	r9, r9, fp
 800230c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002320:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002324:	4689      	mov	r9, r1
 8002326:	4692      	mov	sl, r2
 8002328:	eb1b 0509 	adds.w	r5, fp, r9
 800232c:	eb4c 060a 	adc.w	r6, ip, sl
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	f04f 0400 	mov.w	r4, #0
 8002342:	0094      	lsls	r4, r2, #2
 8002344:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002348:	008b      	lsls	r3, r1, #2
 800234a:	461a      	mov	r2, r3
 800234c:	4623      	mov	r3, r4
 800234e:	4628      	mov	r0, r5
 8002350:	4631      	mov	r1, r6
 8002352:	f7fd ff45 	bl	80001e0 <__aeabi_uldivmod>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	461a      	mov	r2, r3
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <UART_SetConfig+0x6f4>)
 800235e:	fba3 1302 	umull	r1, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2164      	movs	r1, #100	; 0x64
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <UART_SetConfig+0x6f4>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	f003 020f 	and.w	r2, r3, #15
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4442      	add	r2, r8
 8002382:	609a      	str	r2, [r3, #8]
}
 8002384:	e7ff      	b.n	8002386 <UART_SetConfig+0x6e2>
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002390:	40011000 	.word	0x40011000
 8002394:	40011400 	.word	0x40011400
 8002398:	51eb851f 	.word	0x51eb851f

0800239c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80023ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <vApplicationGetIdleTaskMemory+0x30>)
 80023b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000090 	.word	0x20000090
 80023cc:	2000014c 	.word	0x2000014c

080023d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a07      	ldr	r2, [pc, #28]	; (80023fc <vApplicationGetTimerTaskMemory+0x2c>)
 80023e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <vApplicationGetTimerTaskMemory+0x30>)
 80023e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	2000034c 	.word	0x2000034c
 8002400:	20000408 	.word	0x20000408

08002404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0208 	add.w	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f103 0208 	add.w	r2, r3, #8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 0208 	add.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d103      	bne.n	80024c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e00c      	b.n	80024e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3308      	adds	r3, #8
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e002      	b.n	80024d4 <vListInsert+0x2e>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d2f6      	bcs.n	80024ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6892      	ldr	r2, [r2, #8]
 800252e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d103      	bne.n	800254c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	e7fe      	b.n	8002592 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002594:	f002 f8aa 	bl	80046ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	441a      	add	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	3b01      	subs	r3, #1
 80025c6:	68f9      	ldr	r1, [r7, #12]
 80025c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	441a      	add	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	22ff      	movs	r2, #255	; 0xff
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d114      	bne.n	8002614 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01a      	beq.n	8002628 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3310      	adds	r3, #16
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 f970 	bl	80038dc <xTaskRemoveFromEventList>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <xQueueGenericReset+0xcc>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	e009      	b.n	8002628 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3310      	adds	r3, #16
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fef3 	bl	8002404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3324      	adds	r3, #36	; 0x24
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff feee 	bl	8002404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002628:	f002 f88e 	bl	8004748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800262c:	2301      	movs	r3, #1
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <xQueueGenericCreateStatic+0x28>
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	e7fe      	b.n	8002662 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <xQueueGenericCreateStatic+0x42>
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e7fe      	b.n	800267c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <xQueueGenericCreateStatic+0x4e>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <xQueueGenericCreateStatic+0x52>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <xQueueGenericCreateStatic+0x54>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <xQueueGenericCreateStatic+0x6c>
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	e7fe      	b.n	80026a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <xQueueGenericCreateStatic+0x78>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <xQueueGenericCreateStatic+0x7c>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <xQueueGenericCreateStatic+0x7e>
 80026b8:	2300      	movs	r3, #0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <xQueueGenericCreateStatic+0x96>
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026d2:	2350      	movs	r3, #80	; 0x50
 80026d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b50      	cmp	r3, #80	; 0x50
 80026da:	d009      	beq.n	80026f0 <xQueueGenericCreateStatic+0xb4>
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e7fe      	b.n	80026ee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002704:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f805 	bl	8002722 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800271a:	4618      	mov	r0, r3
 800271c:	3730      	adds	r7, #48	; 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e002      	b.n	8002744 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002750:	2101      	movs	r1, #1
 8002752:	69b8      	ldr	r0, [r7, #24]
 8002754:	f7ff ff0a 	bl	800256c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08e      	sub	sp, #56	; 0x38
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <xQueueGenericSend+0x30>
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
 8002796:	e7fe      	b.n	8002796 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <xQueueGenericSend+0x3e>
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <xQueueGenericSend+0x42>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <xQueueGenericSend+0x44>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <xQueueGenericSend+0x5c>
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e7fe      	b.n	80027c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d103      	bne.n	80027d2 <xQueueGenericSend+0x6a>
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <xQueueGenericSend+0x6e>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueGenericSend+0x70>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <xQueueGenericSend+0x88>
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	623b      	str	r3, [r7, #32]
 80027ee:	e7fe      	b.n	80027ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027f0:	f001 fa30 	bl	8003c54 <xTaskGetSchedulerState>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <xQueueGenericSend+0x98>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <xQueueGenericSend+0x9c>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <xQueueGenericSend+0x9e>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <xQueueGenericSend+0xb6>
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	e7fe      	b.n	800281c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800281e:	f001 ff65 	bl	80046ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <xQueueGenericSend+0xcc>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d129      	bne.n	8002888 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283a:	f000 f9ff 	bl	8002c3c <prvCopyDataToQueue>
 800283e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	3324      	adds	r3, #36	; 0x24
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f845 	bl	80038dc <xTaskRemoveFromEventList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <xQueueGenericSend+0x1f0>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	e00a      	b.n	8002880 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002870:	4b39      	ldr	r3, [pc, #228]	; (8002958 <xQueueGenericSend+0x1f0>)
 8002872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002880:	f001 ff62 	bl	8004748 <vPortExitCritical>
				return pdPASS;
 8002884:	2301      	movs	r3, #1
 8002886:	e063      	b.n	8002950 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800288e:	f001 ff5b 	bl	8004748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002892:	2300      	movs	r3, #0
 8002894:	e05c      	b.n	8002950 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 f87d 	bl	80039a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028aa:	f001 ff4d 	bl	8004748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028ae:	f000 fdf1 	bl	8003494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028b2:	f001 ff1b 	bl	80046ec <vPortEnterCritical>
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d103      	bne.n	80028cc <xQueueGenericSend+0x164>
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d103      	bne.n	80028e2 <xQueueGenericSend+0x17a>
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e2:	f001 ff31 	bl	8004748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f86c 	bl	80039cc <xTaskCheckForTimeOut>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d124      	bne.n	8002944 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fc:	f000 fa96 	bl	8002e2c <prvIsQueueFull>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	3310      	adds	r3, #16
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ff96 	bl	8003840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002916:	f000 fa21 	bl	8002d5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800291a:	f000 fdc9 	bl	80034b0 <xTaskResumeAll>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f47f af7c 	bne.w	800281e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <xQueueGenericSend+0x1f0>)
 8002928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	e772      	b.n	800281e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800293a:	f000 fa0f 	bl	8002d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800293e:	f000 fdb7 	bl	80034b0 <xTaskResumeAll>
 8002942:	e76c      	b.n	800281e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002946:	f000 fa09 	bl	8002d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800294a:	f000 fdb1 	bl	80034b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800294e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002950:	4618      	mov	r0, r3
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	; 0x38
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <xQueueGenericSendFromISR+0x2c>
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e7fe      	b.n	8002986 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <xQueueGenericSendFromISR+0x3a>
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <xQueueGenericSendFromISR+0x3e>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <xQueueGenericSendFromISR+0x40>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <xQueueGenericSendFromISR+0x58>
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	e7fe      	b.n	80029b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d103      	bne.n	80029c2 <xQueueGenericSendFromISR+0x66>
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <xQueueGenericSendFromISR+0x6a>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <xQueueGenericSendFromISR+0x6c>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <xQueueGenericSendFromISR+0x84>
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e7fe      	b.n	80029de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029e0:	f001 ff60 	bl	80048a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029e4:	f3ef 8211 	mrs	r2, BASEPRI
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	61ba      	str	r2, [r7, #24]
 80029fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d302      	bcc.n	8002a12 <xQueueGenericSendFromISR+0xb6>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d12c      	bne.n	8002a6c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a22:	f000 f90b 	bl	8002c3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d112      	bne.n	8002a56 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	3324      	adds	r3, #36	; 0x24
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 ff4d 	bl	80038dc <xTaskRemoveFromEventList>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00e      	beq.n	8002a66 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e007      	b.n	8002a66 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	b25a      	sxtb	r2, r3
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a66:	2301      	movs	r3, #1
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a6a:	e001      	b.n	8002a70 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3738      	adds	r7, #56	; 0x38
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <xQueueReceive+0x2e>
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <xQueueReceive+0x3c>
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <xQueueReceive+0x40>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <xQueueReceive+0x42>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <xQueueReceive+0x5a>
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	e7fe      	b.n	8002adc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ade:	f001 f8b9 	bl	8003c54 <xTaskGetSchedulerState>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <xQueueReceive+0x6a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <xQueueReceive+0x6e>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueReceive+0x70>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <xQueueReceive+0x88>
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e7fe      	b.n	8002b0a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b0c:	f001 fdee 	bl	80046ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01f      	beq.n	8002b5c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b20:	f000 f8f6 	bl	8002d10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00f      	beq.n	8002b54 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	3310      	adds	r3, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fecf 	bl	80038dc <xTaskRemoveFromEventList>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b44:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <xQueueReceive+0x1b4>)
 8002b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b54:	f001 fdf8 	bl	8004748 <vPortExitCritical>
				return pdPASS;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e069      	b.n	8002c30 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b62:	f001 fdf1 	bl	8004748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e062      	b.n	8002c30 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 ff13 	bl	80039a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b7e:	f001 fde3 	bl	8004748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b82:	f000 fc87 	bl	8003494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b86:	f001 fdb1 	bl	80046ec <vPortEnterCritical>
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d103      	bne.n	8002ba0 <xQueueReceive+0x11c>
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d103      	bne.n	8002bb6 <xQueueReceive+0x132>
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb6:	f001 fdc7 	bl	8004748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bba:	1d3a      	adds	r2, r7, #4
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 ff02 	bl	80039cc <xTaskCheckForTimeOut>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d123      	bne.n	8002c16 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd0:	f000 f916 	bl	8002e00 <prvIsQueueEmpty>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	3324      	adds	r3, #36	; 0x24
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fe2c 	bl	8003840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bea:	f000 f8b7 	bl	8002d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bee:	f000 fc5f 	bl	80034b0 <xTaskResumeAll>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d189      	bne.n	8002b0c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <xQueueReceive+0x1b4>)
 8002bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	e780      	b.n	8002b0c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0c:	f000 f8a6 	bl	8002d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c10:	f000 fc4e 	bl	80034b0 <xTaskResumeAll>
 8002c14:	e77a      	b.n	8002b0c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c18:	f000 f8a0 	bl	8002d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c1c:	f000 fc48 	bl	80034b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c22:	f000 f8ed 	bl	8002e00 <prvIsQueueEmpty>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f43f af6f 	beq.w	8002b0c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3730      	adds	r7, #48	; 0x30
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d14d      	bne.n	8002cfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f812 	bl	8003c90 <xTaskPriorityDisinherit>
 8002c6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	e043      	b.n	8002cfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d119      	bne.n	8002cb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6858      	ldr	r0, [r3, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	461a      	mov	r2, r3
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	f002 f844 	bl	8004d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	441a      	add	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d32b      	bcc.n	8002cfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	e026      	b.n	8002cfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68d8      	ldr	r0, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	f002 f82a 	bl	8004d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	425b      	negs	r3, r3
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d105      	bne.n	8002cfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d06:	697b      	ldr	r3, [r7, #20]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	441a      	add	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d303      	bcc.n	8002d44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68d9      	ldr	r1, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	f001 ffe0 	bl	8004d14 <memcpy>
	}
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d64:	f001 fcc2 	bl	80046ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d70:	e011      	b.n	8002d96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d012      	beq.n	8002da0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3324      	adds	r3, #36	; 0x24
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fdac 	bl	80038dc <xTaskRemoveFromEventList>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d8a:	f000 fe7f 	bl	8003a8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	dce9      	bgt.n	8002d72 <prvUnlockQueue+0x16>
 8002d9e:	e000      	b.n	8002da2 <prvUnlockQueue+0x46>
					break;
 8002da0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002daa:	f001 fccd 	bl	8004748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002dae:	f001 fc9d 	bl	80046ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dba:	e011      	b.n	8002de0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d012      	beq.n	8002dea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3310      	adds	r3, #16
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fd87 	bl	80038dc <xTaskRemoveFromEventList>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dd4:	f000 fe5a 	bl	8003a8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	dce9      	bgt.n	8002dbc <prvUnlockQueue+0x60>
 8002de8:	e000      	b.n	8002dec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	22ff      	movs	r2, #255	; 0xff
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002df4:	f001 fca8 	bl	8004748 <vPortExitCritical>
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e08:	f001 fc70 	bl	80046ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e001      	b.n	8002e1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e1e:	f001 fc93 	bl	8004748 <vPortExitCritical>

	return xReturn;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e34:	f001 fc5a 	bl	80046ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d102      	bne.n	8002e4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e001      	b.n	8002e4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e4e:	f001 fc7b 	bl	8004748 <vPortExitCritical>

	return xReturn;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e014      	b.n	8002e96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <vQueueAddToRegistry+0x4c>)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e78:	490b      	ldr	r1, [pc, #44]	; (8002ea8 <vQueueAddToRegistry+0x4c>)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <vQueueAddToRegistry+0x4c>)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e8e:	e005      	b.n	8002e9c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	d9e7      	bls.n	8002e6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	20004af4 	.word	0x20004af4

08002eac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ebc:	f001 fc16 	bl	80046ec <vPortEnterCritical>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d103      	bne.n	8002ed6 <vQueueWaitForMessageRestricted+0x2a>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d103      	bne.n	8002eec <vQueueWaitForMessageRestricted+0x40>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eec:	f001 fc2c 	bl	8004748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3324      	adds	r3, #36	; 0x24
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fcc1 	bl	8003888 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ff28 	bl	8002d5c <prvUnlockQueue>
	}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08e      	sub	sp, #56	; 0x38
 8002f18:	af04      	add	r7, sp, #16
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <xTaskCreateStatic+0x28>
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	e7fe      	b.n	8002f3a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <xTaskCreateStatic+0x42>
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e7fe      	b.n	8002f54 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f56:	23bc      	movs	r3, #188	; 0xbc
 8002f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2bbc      	cmp	r3, #188	; 0xbc
 8002f5e:	d009      	beq.n	8002f74 <xTaskCreateStatic+0x60>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e7fe      	b.n	8002f72 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01e      	beq.n	8002fba <xTaskCreateStatic+0xa6>
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01b      	beq.n	8002fba <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f94:	2300      	movs	r3, #0
 8002f96:	9303      	str	r3, [sp, #12]
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	9302      	str	r3, [sp, #8]
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f851 	bl	8003054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fb4:	f000 f8f4 	bl	80031a0 <prvAddNewTaskToReadyList>
 8002fb8:	e001      	b.n	8002fbe <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fbe:	697b      	ldr	r3, [r7, #20]
	}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fc9f 	bl	8004920 <pvPortMalloc>
 8002fe2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fea:	20bc      	movs	r0, #188	; 0xbc
 8002fec:	f001 fc98 	bl	8004920 <pvPortMalloc>
 8002ff0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ffe:	e005      	b.n	800300c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003000:	6978      	ldr	r0, [r7, #20]
 8003002:	f001 fd4f 	bl	8004aa4 <vPortFree>
 8003006:	e001      	b.n	800300c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	2300      	movs	r3, #0
 800301e:	9303      	str	r3, [sp, #12]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	9302      	str	r3, [sp, #8]
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f80f 	bl	8003054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003036:	69f8      	ldr	r0, [r7, #28]
 8003038:	f000 f8b2 	bl	80031a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800303c:	2301      	movs	r3, #1
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	e002      	b.n	8003048 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003048:	69bb      	ldr	r3, [r7, #24]
	}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	461a      	mov	r2, r3
 800306c:	21a5      	movs	r1, #165	; 0xa5
 800306e:	f001 fe5c 	bl	8004d2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800307c:	3b01      	subs	r3, #1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <prvInitialiseNewTask+0x56>
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e7fe      	b.n	80030a8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01f      	beq.n	80030f0 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	e012      	b.n	80030dc <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	7819      	ldrb	r1, [r3, #0]
 80030be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	3334      	adds	r3, #52	; 0x34
 80030c6:	460a      	mov	r2, r1
 80030c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3301      	adds	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	d9e9      	bls.n	80030b6 <prvInitialiseNewTask+0x62>
 80030e2:	e000      	b.n	80030e6 <prvInitialiseNewTask+0x92>
			{
				break;
 80030e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ee:	e003      	b.n	80030f8 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	2b37      	cmp	r3, #55	; 0x37
 80030fc:	d901      	bls.n	8003102 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030fe:	2337      	movs	r3, #55	; 0x37
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	2200      	movs	r2, #0
 8003112:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	3304      	adds	r3, #4
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f993 	bl	8002444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	3318      	adds	r3, #24
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f98e 	bl	8002444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2200      	movs	r2, #0
 8003142:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	2200      	movs	r2, #0
 800314a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	3354      	adds	r3, #84	; 0x54
 8003152:	2260      	movs	r2, #96	; 0x60
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fde7 	bl	8004d2a <memset>
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <prvInitialiseNewTask+0x140>)
 8003160:	659a      	str	r2, [r3, #88]	; 0x58
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <prvInitialiseNewTask+0x144>)
 8003166:	65da      	str	r2, [r3, #92]	; 0x5c
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <prvInitialiseNewTask+0x148>)
 800316c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	69b8      	ldr	r0, [r7, #24]
 8003174:	f001 f992 	bl	800449c <pxPortInitialiseStack>
 8003178:	4602      	mov	r2, r0
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800318a:	bf00      	nop
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	08004f3c 	.word	0x08004f3c
 8003198:	08004f5c 	.word	0x08004f5c
 800319c:	08004f1c 	.word	0x08004f1c

080031a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031a8:	f001 faa0 	bl	80046ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031be:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d110      	bne.n	80031ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031cc:	f000 fc82 	bl	8003ad4 <prvInitialiseTaskLists>
 80031d0:	e00d      	b.n	80031ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <prvAddNewTaskToReadyList+0xcc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d802      	bhi.n	80031ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 80031f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <prvAddNewTaskToReadyList+0xd4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d903      	bls.n	8003214 <prvAddNewTaskToReadyList+0x74>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <prvAddNewTaskToReadyList+0xd4>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <prvAddNewTaskToReadyList+0xd8>)
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7ff f917 	bl	800245e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003230:	f001 fa8a 	bl	8004748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <prvAddNewTaskToReadyList+0xcc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d207      	bcs.n	800325a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <prvAddNewTaskToReadyList+0xdc>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000cdc 	.word	0x20000cdc
 8003268:	20000808 	.word	0x20000808
 800326c:	20000ce8 	.word	0x20000ce8
 8003270:	20000cf8 	.word	0x20000cf8
 8003274:	20000ce4 	.word	0x20000ce4
 8003278:	2000080c 	.word	0x2000080c
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b37      	cmp	r3, #55	; 0x37
 8003292:	d909      	bls.n	80032a8 <vTaskPrioritySet+0x28>
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e7fe      	b.n	80032a6 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b37      	cmp	r3, #55	; 0x37
 80032ac:	d901      	bls.n	80032b2 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032ae:	2337      	movs	r3, #55	; 0x37
 80032b0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80032b2:	f001 fa1b 	bl	80046ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <vTaskPrioritySet+0x42>
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <vTaskPrioritySet+0x128>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e000      	b.n	80032c4 <vTaskPrioritySet+0x44>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ca:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d063      	beq.n	800339c <vTaskPrioritySet+0x11c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d90d      	bls.n	80032f8 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <vTaskPrioritySet+0x128>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d00f      	beq.n	8003306 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <vTaskPrioritySet+0x128>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d309      	bcc.n	8003306 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	e006      	b.n	8003306 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <vTaskPrioritySet+0x128>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d101      	bne.n	8003306 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003302:	2301      	movs	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	429a      	cmp	r2, r3
 8003316:	d102      	bne.n	800331e <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db04      	blt.n	8003336 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6959      	ldr	r1, [r3, #20]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <vTaskPrioritySet+0x12c>)
 8003346:	4413      	add	r3, r2
 8003348:	4299      	cmp	r1, r3
 800334a:	d11c      	bne.n	8003386 <vTaskPrioritySet+0x106>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	3304      	adds	r3, #4
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f8e1 	bl	8002518 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <vTaskPrioritySet+0x130>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d903      	bls.n	800336a <vTaskPrioritySet+0xea>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <vTaskPrioritySet+0x130>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <vTaskPrioritySet+0x12c>)
 8003378:	441a      	add	r2, r3
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7ff f86c 	bl	800245e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <vTaskPrioritySet+0x11c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <vTaskPrioritySet+0x134>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800339c:	f001 f9d4 	bl	8004748 <vPortExitCritical>
	}
 80033a0:	bf00      	nop
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000808 	.word	0x20000808
 80033ac:	2000080c 	.word	0x2000080c
 80033b0:	20000ce4 	.word	0x20000ce4
 80033b4:	e000ed04 	.word	0xe000ed04

080033b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033c6:	463a      	mov	r2, r7
 80033c8:	1d39      	adds	r1, r7, #4
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe ffe4 	bl	800239c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	9202      	str	r2, [sp, #8]
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2300      	movs	r3, #0
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	460a      	mov	r2, r1
 80033e6:	4923      	ldr	r1, [pc, #140]	; (8003474 <vTaskStartScheduler+0xbc>)
 80033e8:	4823      	ldr	r0, [pc, #140]	; (8003478 <vTaskStartScheduler+0xc0>)
 80033ea:	f7ff fd93 	bl	8002f14 <xTaskCreateStatic>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <vTaskStartScheduler+0xc4>)
 80033f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033f4:	4b21      	ldr	r3, [pc, #132]	; (800347c <vTaskStartScheduler+0xc4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e001      	b.n	8003406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800340c:	f000 fd00 	bl	8003e10 <xTimerCreateTimerTask>
 8003410:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d11a      	bne.n	800344e <vTaskStartScheduler+0x96>
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <vTaskStartScheduler+0xc8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3354      	adds	r3, #84	; 0x54
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <vTaskStartScheduler+0xcc>)
 8003432:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <vTaskStartScheduler+0xd0>)
 8003436:	f04f 32ff 	mov.w	r2, #4294967295
 800343a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <vTaskStartScheduler+0xd4>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <vTaskStartScheduler+0xd8>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003448:	f001 f8b2 	bl	80045b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800344c:	e00d      	b.n	800346a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d109      	bne.n	800346a <vTaskStartScheduler+0xb2>
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e7fe      	b.n	8003468 <vTaskStartScheduler+0xb0>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	08004eec 	.word	0x08004eec
 8003478:	08003aa5 	.word	0x08003aa5
 800347c:	20000d00 	.word	0x20000d00
 8003480:	20000808 	.word	0x20000808
 8003484:	20000010 	.word	0x20000010
 8003488:	20000cfc 	.word	0x20000cfc
 800348c:	20000ce8 	.word	0x20000ce8
 8003490:	20000ce0 	.word	0x20000ce0

08003494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <vTaskSuspendAll+0x18>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a03      	ldr	r2, [pc, #12]	; (80034ac <vTaskSuspendAll+0x18>)
 80034a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	20000d04 	.word	0x20000d04

080034b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <xTaskResumeAll+0x114>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <xTaskResumeAll+0x2a>
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	e7fe      	b.n	80034d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034da:	f001 f907 	bl	80046ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <xTaskResumeAll+0x114>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <xTaskResumeAll+0x114>)
 80034e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <xTaskResumeAll+0x114>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d162      	bne.n	80035b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034f0:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <xTaskResumeAll+0x118>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d05e      	beq.n	80035b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f8:	e02f      	b.n	800355a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <xTaskResumeAll+0x11c>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3318      	adds	r3, #24
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f806 	bl	8002518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3304      	adds	r3, #4
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f801 	bl	8002518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <xTaskResumeAll+0x120>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d903      	bls.n	800352a <xTaskResumeAll+0x7a>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <xTaskResumeAll+0x120>)
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <xTaskResumeAll+0x124>)
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3304      	adds	r3, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7fe ff8c 	bl	800245e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <xTaskResumeAll+0x128>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <xTaskResumeAll+0x12c>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <xTaskResumeAll+0x11c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1cb      	bne.n	80034fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003568:	f000 fb54 	bl	8003c14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800356c:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <xTaskResumeAll+0x130>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003578:	f000 f846 	bl	8003608 <xTaskIncrementTick>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <xTaskResumeAll+0x12c>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f1      	bne.n	8003578 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <xTaskResumeAll+0x130>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <xTaskResumeAll+0x12c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <xTaskResumeAll+0x134>)
 80035a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035b6:	f001 f8c7 	bl	8004748 <vPortExitCritical>

	return xAlreadyYielded;
 80035ba:	68bb      	ldr	r3, [r7, #8]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000d04 	.word	0x20000d04
 80035c8:	20000cdc 	.word	0x20000cdc
 80035cc:	20000c9c 	.word	0x20000c9c
 80035d0:	20000ce4 	.word	0x20000ce4
 80035d4:	2000080c 	.word	0x2000080c
 80035d8:	20000808 	.word	0x20000808
 80035dc:	20000cf0 	.word	0x20000cf0
 80035e0:	20000cec 	.word	0x20000cec
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <xTaskGetTickCount+0x1c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035f4:	687b      	ldr	r3, [r7, #4]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000ce0 	.word	0x20000ce0

08003608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <xTaskIncrementTick+0x144>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8088 	bne.w	800372c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <xTaskIncrementTick+0x148>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003624:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <xTaskIncrementTick+0x148>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11f      	bne.n	8003670 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003630:	4b48      	ldr	r3, [pc, #288]	; (8003754 <xTaskIncrementTick+0x14c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <xTaskIncrementTick+0x46>
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	e7fe      	b.n	800364c <xTaskIncrementTick+0x44>
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <xTaskIncrementTick+0x14c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4b40      	ldr	r3, [pc, #256]	; (8003758 <xTaskIncrementTick+0x150>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3e      	ldr	r2, [pc, #248]	; (8003754 <xTaskIncrementTick+0x14c>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4a3e      	ldr	r2, [pc, #248]	; (8003758 <xTaskIncrementTick+0x150>)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b3e      	ldr	r3, [pc, #248]	; (800375c <xTaskIncrementTick+0x154>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a3c      	ldr	r2, [pc, #240]	; (800375c <xTaskIncrementTick+0x154>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	f000 fad2 	bl	8003c14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <xTaskIncrementTick+0x158>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	429a      	cmp	r2, r3
 8003678:	d349      	bcc.n	800370e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <xTaskIncrementTick+0x14c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <xTaskIncrementTick+0x158>)
 8003686:	f04f 32ff 	mov.w	r2, #4294967295
 800368a:	601a      	str	r2, [r3, #0]
					break;
 800368c:	e03f      	b.n	800370e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <xTaskIncrementTick+0x14c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d203      	bcs.n	80036ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036a6:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <xTaskIncrementTick+0x158>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036ac:	e02f      	b.n	800370e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe ff30 	bl	8002518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3318      	adds	r3, #24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe ff27 	bl	8002518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <xTaskIncrementTick+0x15c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d903      	bls.n	80036de <xTaskIncrementTick+0xd6>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	4a22      	ldr	r2, [pc, #136]	; (8003764 <xTaskIncrementTick+0x15c>)
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <xTaskIncrementTick+0x160>)
 80036ec:	441a      	add	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7fe feb2 	bl	800245e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <xTaskIncrementTick+0x164>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d3b8      	bcc.n	800367a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800370c:	e7b5      	b.n	800367a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <xTaskIncrementTick+0x164>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4914      	ldr	r1, [pc, #80]	; (8003768 <xTaskIncrementTick+0x160>)
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d907      	bls.n	8003736 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e004      	b.n	8003736 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <xTaskIncrementTick+0x168>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a0f      	ldr	r2, [pc, #60]	; (8003770 <xTaskIncrementTick+0x168>)
 8003734:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <xTaskIncrementTick+0x16c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003742:	697b      	ldr	r3, [r7, #20]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000d04 	.word	0x20000d04
 8003750:	20000ce0 	.word	0x20000ce0
 8003754:	20000c94 	.word	0x20000c94
 8003758:	20000c98 	.word	0x20000c98
 800375c:	20000cf4 	.word	0x20000cf4
 8003760:	20000cfc 	.word	0x20000cfc
 8003764:	20000ce4 	.word	0x20000ce4
 8003768:	2000080c 	.word	0x2000080c
 800376c:	20000808 	.word	0x20000808
 8003770:	20000cec 	.word	0x20000cec
 8003774:	20000cf0 	.word	0x20000cf0

08003778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <vTaskSwitchContext+0xb0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <vTaskSwitchContext+0xb4>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800378c:	e045      	b.n	800381a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <vTaskSwitchContext+0xb4>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003794:	4b26      	ldr	r3, [pc, #152]	; (8003830 <vTaskSwitchContext+0xb8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e00f      	b.n	80037bc <vTaskSwitchContext+0x44>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <vTaskSwitchContext+0x3e>
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e7fe      	b.n	80037b4 <vTaskSwitchContext+0x3c>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	491d      	ldr	r1, [pc, #116]	; (8003834 <vTaskSwitchContext+0xbc>)
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0e5      	beq.n	800379c <vTaskSwitchContext+0x24>
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <vTaskSwitchContext+0xbc>)
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3308      	adds	r3, #8
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d104      	bne.n	8003800 <vTaskSwitchContext+0x88>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <vTaskSwitchContext+0xc0>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <vTaskSwitchContext+0xb8>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <vTaskSwitchContext+0xc0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3354      	adds	r3, #84	; 0x54
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <vTaskSwitchContext+0xc4>)
 8003818:	6013      	str	r3, [r2, #0]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000d04 	.word	0x20000d04
 800382c:	20000cf0 	.word	0x20000cf0
 8003830:	20000ce4 	.word	0x20000ce4
 8003834:	2000080c 	.word	0x2000080c
 8003838:	20000808 	.word	0x20000808
 800383c:	20000010 	.word	0x20000010

08003840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <vTaskPlaceOnEventList+0x24>
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e7fe      	b.n	8003862 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <vTaskPlaceOnEventList+0x44>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3318      	adds	r3, #24
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fe fe1a 	bl	80024a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003872:	2101      	movs	r1, #1
 8003874:	6838      	ldr	r0, [r7, #0]
 8003876:	f000 fa77 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000808 	.word	0x20000808

08003888 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <vTaskPlaceOnEventListRestricted+0x26>
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e7fe      	b.n	80038ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3318      	adds	r3, #24
 80038b4:	4619      	mov	r1, r3
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7fe fdd1 	bl	800245e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295
 80038c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	68b8      	ldr	r0, [r7, #8]
 80038cc:	f000 fa4c 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
	}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000808 	.word	0x20000808

080038dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <xTaskRemoveFromEventList+0x2a>
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e7fe      	b.n	8003904 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3318      	adds	r3, #24
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fe04 	bl	8002518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <xTaskRemoveFromEventList+0xac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11d      	bne.n	8003954 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fdfb 	bl	8002518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <xTaskRemoveFromEventList+0xb0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <xTaskRemoveFromEventList+0x5a>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <xTaskRemoveFromEventList+0xb0>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <xTaskRemoveFromEventList+0xb4>)
 8003944:	441a      	add	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f7fe fd86 	bl	800245e <vListInsertEnd>
 8003952:	e005      	b.n	8003960 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	3318      	adds	r3, #24
 8003958:	4619      	mov	r1, r3
 800395a:	480e      	ldr	r0, [pc, #56]	; (8003994 <xTaskRemoveFromEventList+0xb8>)
 800395c:	f7fe fd7f 	bl	800245e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <xTaskRemoveFromEventList+0xbc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	429a      	cmp	r2, r3
 800396c:	d905      	bls.n	800397a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800396e:	2301      	movs	r3, #1
 8003970:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <xTaskRemoveFromEventList+0xc0>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e001      	b.n	800397e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000d04 	.word	0x20000d04
 800398c:	20000ce4 	.word	0x20000ce4
 8003990:	2000080c 	.word	0x2000080c
 8003994:	20000c9c 	.word	0x20000c9c
 8003998:	20000808 	.word	0x20000808
 800399c:	20000cf0 	.word	0x20000cf0

080039a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <vTaskInternalSetTimeOutState+0x24>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <vTaskInternalSetTimeOutState+0x28>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20000cf4 	.word	0x20000cf4
 80039c8:	20000ce0 	.word	0x20000ce0

080039cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <xTaskCheckForTimeOut+0x24>
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e7fe      	b.n	80039ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <xTaskCheckForTimeOut+0x3e>
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e7fe      	b.n	8003a08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a0a:	f000 fe6f 	bl	80046ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <xTaskCheckForTimeOut+0xb8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d102      	bne.n	8003a2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e023      	b.n	8003a76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <xTaskCheckForTimeOut+0xbc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d007      	beq.n	8003a4a <xTaskCheckForTimeOut+0x7e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e015      	b.n	8003a76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d20b      	bcs.n	8003a6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff9d 	bl	80039a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e004      	b.n	8003a76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a76:	f000 fe67 	bl	8004748 <vPortExitCritical>

	return xReturn;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000ce0 	.word	0x20000ce0
 8003a88:	20000cf4 	.word	0x20000cf4

08003a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <vTaskMissedYield+0x14>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	20000cf0 	.word	0x20000cf0

08003aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003aac:	f000 f852 	bl	8003b54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <prvIdleTask+0x28>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d9f9      	bls.n	8003aac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <prvIdleTask+0x2c>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ac8:	e7f0      	b.n	8003aac <prvIdleTask+0x8>
 8003aca:	bf00      	nop
 8003acc:	2000080c 	.word	0x2000080c
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	e00c      	b.n	8003afa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <prvInitialiseTaskLists+0x60>)
 8003aec:	4413      	add	r3, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fc88 	bl	8002404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3301      	adds	r3, #1
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b37      	cmp	r3, #55	; 0x37
 8003afe:	d9ef      	bls.n	8003ae0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <prvInitialiseTaskLists+0x64>)
 8003b02:	f7fe fc7f 	bl	8002404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b06:	480d      	ldr	r0, [pc, #52]	; (8003b3c <prvInitialiseTaskLists+0x68>)
 8003b08:	f7fe fc7c 	bl	8002404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b0c:	480c      	ldr	r0, [pc, #48]	; (8003b40 <prvInitialiseTaskLists+0x6c>)
 8003b0e:	f7fe fc79 	bl	8002404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b12:	480c      	ldr	r0, [pc, #48]	; (8003b44 <prvInitialiseTaskLists+0x70>)
 8003b14:	f7fe fc76 	bl	8002404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b18:	480b      	ldr	r0, [pc, #44]	; (8003b48 <prvInitialiseTaskLists+0x74>)
 8003b1a:	f7fe fc73 	bl	8002404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <prvInitialiseTaskLists+0x78>)
 8003b20:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <prvInitialiseTaskLists+0x64>)
 8003b22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <prvInitialiseTaskLists+0x7c>)
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <prvInitialiseTaskLists+0x68>)
 8003b28:	601a      	str	r2, [r3, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000080c 	.word	0x2000080c
 8003b38:	20000c6c 	.word	0x20000c6c
 8003b3c:	20000c80 	.word	0x20000c80
 8003b40:	20000c9c 	.word	0x20000c9c
 8003b44:	20000cb0 	.word	0x20000cb0
 8003b48:	20000cc8 	.word	0x20000cc8
 8003b4c:	20000c94 	.word	0x20000c94
 8003b50:	20000c98 	.word	0x20000c98

08003b54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b5a:	e019      	b.n	8003b90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b5c:	f000 fdc6 	bl	80046ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <prvCheckTasksWaitingTermination+0x4c>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fcd3 	bl	8002518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <prvCheckTasksWaitingTermination+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <prvCheckTasksWaitingTermination+0x50>)
 8003b7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <prvCheckTasksWaitingTermination+0x54>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <prvCheckTasksWaitingTermination+0x54>)
 8003b84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b86:	f000 fddf 	bl	8004748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f80e 	bl	8003bac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <prvCheckTasksWaitingTermination+0x54>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e1      	bne.n	8003b5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000cb0 	.word	0x20000cb0
 8003ba4:	20000cdc 	.word	0x20000cdc
 8003ba8:	20000cc4 	.word	0x20000cc4

08003bac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3354      	adds	r3, #84	; 0x54
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f8cb 	bl	8004d54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ff69 	bl	8004aa4 <vPortFree>
				vPortFree( pxTCB );
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 ff66 	bl	8004aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bd8:	e017      	b.n	8003c0a <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d103      	bne.n	8003bec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 ff5d 	bl	8004aa4 <vPortFree>
	}
 8003bea:	e00e      	b.n	8003c0a <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d009      	beq.n	8003c0a <prvDeleteTCB+0x5e>
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e7fe      	b.n	8003c08 <prvDeleteTCB+0x5c>
	}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <prvResetNextTaskUnblockTime+0x38>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <prvResetNextTaskUnblockTime+0x3c>)
 8003c26:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c2c:	e008      	b.n	8003c40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <prvResetNextTaskUnblockTime+0x38>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <prvResetNextTaskUnblockTime+0x3c>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	20000c94 	.word	0x20000c94
 8003c50:	20000cfc 	.word	0x20000cfc

08003c54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <xTaskGetSchedulerState+0x34>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c62:	2301      	movs	r3, #1
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	e008      	b.n	8003c7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <xTaskGetSchedulerState+0x38>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c70:	2302      	movs	r3, #2
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	e001      	b.n	8003c7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c7a:	687b      	ldr	r3, [r7, #4]
	}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	20000ce8 	.word	0x20000ce8
 8003c8c:	20000d04 	.word	0x20000d04

08003c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d054      	beq.n	8003d50 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <xTaskPriorityDisinherit+0xcc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d009      	beq.n	8003cc4 <xTaskPriorityDisinherit+0x34>
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <xTaskPriorityDisinherit+0x50>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	e7fe      	b.n	8003cde <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d02c      	beq.n	8003d50 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d128      	bne.n	8003d50 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fc08 	bl	8002518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <xTaskPriorityDisinherit+0xd0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d903      	bls.n	8003d30 <xTaskPriorityDisinherit+0xa0>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <xTaskPriorityDisinherit+0xd0>)
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <xTaskPriorityDisinherit+0xd4>)
 8003d3e:	441a      	add	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f7fe fb89 	bl	800245e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d50:	697b      	ldr	r3, [r7, #20]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000808 	.word	0x20000808
 8003d60:	20000ce4 	.word	0x20000ce4
 8003d64:	2000080c 	.word	0x2000080c

08003d68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d72:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fbca 	bl	8002518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d10a      	bne.n	8003da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4819      	ldr	r0, [pc, #100]	; (8003e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d9c:	f7fe fb5f 	bl	800245e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003da0:	e026      	b.n	8003df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d209      	bcs.n	8003dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe fb6d 	bl	80024a6 <vListInsert>
}
 8003dcc:	e010      	b.n	8003df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f7fe fb63 	bl	80024a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d202      	bcs.n	8003df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000ce0 	.word	0x20000ce0
 8003dfc:	20000808 	.word	0x20000808
 8003e00:	20000cc8 	.word	0x20000cc8
 8003e04:	20000c98 	.word	0x20000c98
 8003e08:	20000c94 	.word	0x20000c94
 8003e0c:	20000cfc 	.word	0x20000cfc

08003e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e1a:	f000 faff 	bl	800441c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <xTimerCreateTimerTask+0x80>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d021      	beq.n	8003e6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e2e:	1d3a      	adds	r2, r7, #4
 8003e30:	f107 0108 	add.w	r1, r7, #8
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fac9 	bl	80023d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	9202      	str	r2, [sp, #8]
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2302      	movs	r3, #2
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	460a      	mov	r2, r1
 8003e50:	4910      	ldr	r1, [pc, #64]	; (8003e94 <xTimerCreateTimerTask+0x84>)
 8003e52:	4811      	ldr	r0, [pc, #68]	; (8003e98 <xTimerCreateTimerTask+0x88>)
 8003e54:	f7ff f85e 	bl	8002f14 <xTaskCreateStatic>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <xTimerCreateTimerTask+0x8c>)
 8003e5c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <xTimerCreateTimerTask+0x8c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <xTimerCreateTimerTask+0x74>
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e7fe      	b.n	8003e82 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003e84:	697b      	ldr	r3, [r7, #20]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000d38 	.word	0x20000d38
 8003e94:	08004ef4 	.word	0x08004ef4
 8003e98:	08003fd1 	.word	0x08003fd1
 8003e9c:	20000d3c 	.word	0x20000d3c

08003ea0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <xTimerGenericCommand+0x2c>
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	e7fe      	b.n	8003eca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <xTimerGenericCommand+0x94>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02a      	beq.n	8003f2a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	dc18      	bgt.n	8003f18 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ee6:	f7ff feb5 	bl	8003c54 <xTaskGetSchedulerState>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d109      	bne.n	8003f04 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <xTimerGenericCommand+0x94>)
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	f107 0110 	add.w	r1, r7, #16
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efc:	f7fe fc34 	bl	8002768 <xQueueGenericSend>
 8003f00:	6278      	str	r0, [r7, #36]	; 0x24
 8003f02:	e012      	b.n	8003f2a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <xTimerGenericCommand+0x94>)
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	f107 0110 	add.w	r1, r7, #16
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f7fe fc2a 	bl	8002768 <xQueueGenericSend>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24
 8003f16:	e008      	b.n	8003f2a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <xTimerGenericCommand+0x94>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	f107 0110 	add.w	r1, r7, #16
 8003f20:	2300      	movs	r3, #0
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	f7fe fd1a 	bl	800295c <xQueueGenericSendFromISR>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3728      	adds	r7, #40	; 0x28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000d38 	.word	0x20000d38

08003f38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <prvProcessExpiredTimer+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fae1 	bl	8002518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d021      	beq.n	8003fa8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	18d1      	adds	r1, r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	6978      	ldr	r0, [r7, #20]
 8003f72:	f000 f8d1 	bl	8004118 <prvInsertTimerInActiveList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01e      	beq.n	8003fba <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	2100      	movs	r1, #0
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff8a 	bl	8003ea0 <xTimerGenericCommand>
 8003f8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d112      	bne.n	8003fba <prvProcessExpiredTimer+0x82>
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e7fe      	b.n	8003fa6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	4798      	blx	r3
}
 8003fc2:	bf00      	nop
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000d30 	.word	0x20000d30

08003fd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f857 	bl	8004090 <prvGetNextExpireTime>
 8003fe2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f803 	bl	8003ff4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fee:	f000 f8d5 	bl	800419c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ff2:	e7f1      	b.n	8003fd8 <prvTimerTask+0x8>

08003ff4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ffe:	f7ff fa49 	bl	8003494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f866 	bl	80040d8 <prvSampleTimeNow>
 800400c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d130      	bne.n	8004076 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <prvProcessTimerOrBlockTask+0x3c>
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	429a      	cmp	r2, r3
 8004020:	d806      	bhi.n	8004030 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004022:	f7ff fa45 	bl	80034b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff85 	bl	8003f38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800402e:	e024      	b.n	800407a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <prvProcessTimerOrBlockTask+0x90>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <prvProcessTimerOrBlockTask+0x50>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <prvProcessTimerOrBlockTask+0x52>
 8004044:	2300      	movs	r3, #0
 8004046:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <prvProcessTimerOrBlockTask+0x94>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	f7fe ff29 	bl	8002eac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800405a:	f7ff fa29 	bl	80034b0 <xTaskResumeAll>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <prvProcessTimerOrBlockTask+0x98>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
}
 8004074:	e001      	b.n	800407a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004076:	f7ff fa1b 	bl	80034b0 <xTaskResumeAll>
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000d34 	.word	0x20000d34
 8004088:	20000d38 	.word	0x20000d38
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <prvGetNextExpireTime+0x44>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <prvGetNextExpireTime+0x16>
 80040a2:	2201      	movs	r2, #1
 80040a4:	e000      	b.n	80040a8 <prvGetNextExpireTime+0x18>
 80040a6:	2200      	movs	r2, #0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <prvGetNextExpireTime+0x44>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e001      	b.n	80040c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040c4:	68fb      	ldr	r3, [r7, #12]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000d30 	.word	0x20000d30

080040d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040e0:	f7ff fa82 	bl	80035e8 <xTaskGetTickCount>
 80040e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <prvSampleTimeNow+0x3c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d205      	bcs.n	80040fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040f0:	f000 f930 	bl	8004354 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e002      	b.n	8004102 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvSampleTimeNow+0x3c>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000d40 	.word	0x20000d40

08004118 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	429a      	cmp	r2, r3
 800413c:	d812      	bhi.n	8004164 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800414c:	2301      	movs	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e01b      	b.n	800418a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <prvInsertTimerInActiveList+0x7c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7fe f9a2 	bl	80024a6 <vListInsert>
 8004162:	e012      	b.n	800418a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d206      	bcs.n	800417a <prvInsertTimerInActiveList+0x62>
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e007      	b.n	800418a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <prvInsertTimerInActiveList+0x80>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe f98e 	bl	80024a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800418a:	697b      	ldr	r3, [r7, #20]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000d34 	.word	0x20000d34
 8004198:	20000d30 	.word	0x20000d30

0800419c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08e      	sub	sp, #56	; 0x38
 80041a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041a2:	e0c6      	b.n	8004332 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da17      	bge.n	80041da <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	3304      	adds	r3, #4
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <prvProcessReceivedCommands+0x2e>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e7fe      	b.n	80041c8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	6850      	ldr	r0, [r2, #4]
 80041d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d4:	6892      	ldr	r2, [r2, #8]
 80041d6:	4611      	mov	r1, r2
 80041d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f2c0 80a7 	blt.w	8004330 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	3304      	adds	r3, #4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe f990 	bl	8002518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041f8:	463b      	mov	r3, r7
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff6c 	bl	80040d8 <prvSampleTimeNow>
 8004200:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b09      	cmp	r3, #9
 8004206:	f200 8094 	bhi.w	8004332 <prvProcessReceivedCommands+0x196>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <prvProcessReceivedCommands+0x74>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004239 	.word	0x08004239
 8004214:	08004239 	.word	0x08004239
 8004218:	08004239 	.word	0x08004239
 800421c:	080042ab 	.word	0x080042ab
 8004220:	080042bf 	.word	0x080042bf
 8004224:	08004307 	.word	0x08004307
 8004228:	08004239 	.word	0x08004239
 800422c:	08004239 	.word	0x08004239
 8004230:	080042ab 	.word	0x080042ab
 8004234:	080042bf 	.word	0x080042bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	18d1      	adds	r1, r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004258:	f7ff ff5e 	bl	8004118 <prvInsertTimerInActiveList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d067      	beq.n	8004332 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d05c      	beq.n	8004332 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	441a      	add	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	2100      	movs	r1, #0
 8004288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428a:	f7ff fe09 	bl	8003ea0 <xTimerGenericCommand>
 800428e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d14d      	bne.n	8004332 <prvProcessReceivedCommands+0x196>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e7fe      	b.n	80042a8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80042bc:	e039      	b.n	8004332 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <prvProcessReceivedCommands+0x156>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e7fe      	b.n	80042f0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	18d1      	adds	r1, r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004300:	f7ff ff0a 	bl	8004118 <prvInsertTimerInActiveList>
					break;
 8004304:	e015      	b.n	8004332 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004316:	f000 fbc5 	bl	8004aa4 <vPortFree>
 800431a:	e00a      	b.n	8004332 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800432e:	e000      	b.n	8004332 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <prvProcessReceivedCommands+0x1b4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1d39      	adds	r1, r7, #4
 8004338:	2200      	movs	r2, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fba2 	bl	8002a84 <xQueueReceive>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f47f af2e 	bne.w	80041a4 <prvProcessReceivedCommands+0x8>
	}
}
 8004348:	bf00      	nop
 800434a:	3730      	adds	r7, #48	; 0x30
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000d38 	.word	0x20000d38

08004354 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800435a:	e047      	b.n	80043ec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <prvSwitchTimerLists+0xc0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <prvSwitchTimerLists+0xc0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe f8cf 	bl	8002518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d02d      	beq.n	80043ec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d90e      	bls.n	80043c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <prvSwitchTimerLists+0xc0>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fe f874 	bl	80024a6 <vListInsert>
 80043be:	e015      	b.n	80043ec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043c0:	2300      	movs	r3, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	2100      	movs	r1, #0
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fd68 	bl	8003ea0 <xTimerGenericCommand>
 80043d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <prvSwitchTimerLists+0x98>
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	e7fe      	b.n	80043ea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <prvSwitchTimerLists+0xc0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1b2      	bne.n	800435c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <prvSwitchTimerLists+0xc0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <prvSwitchTimerLists+0xc4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a04      	ldr	r2, [pc, #16]	; (8004414 <prvSwitchTimerLists+0xc0>)
 8004402:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <prvSwitchTimerLists+0xc4>)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6013      	str	r3, [r2, #0]
}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000d30 	.word	0x20000d30
 8004418:	20000d34 	.word	0x20000d34

0800441c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004422:	f000 f963 	bl	80046ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d120      	bne.n	8004470 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800442e:	4814      	ldr	r0, [pc, #80]	; (8004480 <prvCheckForValidListAndQueue+0x64>)
 8004430:	f7fd ffe8 	bl	8002404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004434:	4813      	ldr	r0, [pc, #76]	; (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004436:	f7fd ffe5 	bl	8002404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <prvCheckForValidListAndQueue+0x6c>)
 800443c:	4a10      	ldr	r2, [pc, #64]	; (8004480 <prvCheckForValidListAndQueue+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <prvCheckForValidListAndQueue+0x70>)
 8004442:	4a10      	ldr	r2, [pc, #64]	; (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <prvCheckForValidListAndQueue+0x74>)
 800444c:	4a11      	ldr	r2, [pc, #68]	; (8004494 <prvCheckForValidListAndQueue+0x78>)
 800444e:	2110      	movs	r1, #16
 8004450:	200a      	movs	r0, #10
 8004452:	f7fe f8f3 	bl	800263c <xQueueGenericCreateStatic>
 8004456:	4602      	mov	r2, r0
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 800445a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	490b      	ldr	r1, [pc, #44]	; (8004498 <prvCheckForValidListAndQueue+0x7c>)
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fcf6 	bl	8002e5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004470:	f000 f96a 	bl	8004748 <vPortExitCritical>
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000d38 	.word	0x20000d38
 8004480:	20000d08 	.word	0x20000d08
 8004484:	20000d1c 	.word	0x20000d1c
 8004488:	20000d30 	.word	0x20000d30
 800448c:	20000d34 	.word	0x20000d34
 8004490:	20000de4 	.word	0x20000de4
 8004494:	20000d44 	.word	0x20000d44
 8004498:	08004efc 	.word	0x08004efc

0800449c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <pxPortInitialiseStack+0x64>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b14      	subs	r3, #20
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f06f 0202 	mvn.w	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b20      	subs	r3, #32
 80044f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	08004505 	.word	0x08004505

08004504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <prvTaskExitError+0x50>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d009      	beq.n	800452c <prvTaskExitError+0x28>
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e7fe      	b.n	800452a <prvTaskExitError+0x26>
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800453e:	bf00      	nop
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0fc      	beq.n	8004540 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2000000c 	.word	0x2000000c
	...

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	20000808 	.word	0x20000808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045aa:	bf00      	nop
 80045ac:	e000ed08 	.word	0xe000ed08

080045b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045b6:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <xPortStartScheduler+0x118>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a44      	ldr	r2, [pc, #272]	; (80046cc <xPortStartScheduler+0x11c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d109      	bne.n	80045d4 <xPortStartScheduler+0x24>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e7fe      	b.n	80045d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045d4:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <xPortStartScheduler+0x118>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3d      	ldr	r2, [pc, #244]	; (80046d0 <xPortStartScheduler+0x120>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d109      	bne.n	80045f2 <xPortStartScheduler+0x42>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e7fe      	b.n	80045f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045f2:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <xPortStartScheduler+0x124>)
 80045f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4b30      	ldr	r3, [pc, #192]	; (80046d8 <xPortStartScheduler+0x128>)
 8004618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800461a:	4b30      	ldr	r3, [pc, #192]	; (80046dc <xPortStartScheduler+0x12c>)
 800461c:	2207      	movs	r2, #7
 800461e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004620:	e009      	b.n	8004636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004622:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <xPortStartScheduler+0x12c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3b01      	subs	r3, #1
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <xPortStartScheduler+0x12c>)
 800462a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d0ef      	beq.n	8004622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <xPortStartScheduler+0x12c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	2b04      	cmp	r3, #4
 800464c:	d009      	beq.n	8004662 <xPortStartScheduler+0xb2>
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	e7fe      	b.n	8004660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <xPortStartScheduler+0x12c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <xPortStartScheduler+0x12c>)
 800466a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <xPortStartScheduler+0x12c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <xPortStartScheduler+0x12c>)
 8004676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <xPortStartScheduler+0x130>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <xPortStartScheduler+0x130>)
 8004686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800468a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <xPortStartScheduler+0x130>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <xPortStartScheduler+0x130>)
 8004692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004698:	f000 f8d6 	bl	8004848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <xPortStartScheduler+0x134>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046a2:	f000 f8f5 	bl	8004890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <xPortStartScheduler+0x138>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <xPortStartScheduler+0x138>)
 80046ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046b2:	f7ff ff69 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046b6:	f7ff f85f 	bl	8003778 <vTaskSwitchContext>
	prvTaskExitError();
 80046ba:	f7ff ff23 	bl	8004504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed00 	.word	0xe000ed00
 80046cc:	410fc271 	.word	0x410fc271
 80046d0:	410fc270 	.word	0x410fc270
 80046d4:	e000e400 	.word	0xe000e400
 80046d8:	20000e34 	.word	0x20000e34
 80046dc:	20000e38 	.word	0x20000e38
 80046e0:	e000ed20 	.word	0xe000ed20
 80046e4:	2000000c 	.word	0x2000000c
 80046e8:	e000ef34 	.word	0xe000ef34

080046ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <vPortEnterCritical+0x54>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <vPortEnterCritical+0x54>)
 800470c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <vPortEnterCritical+0x54>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <vPortEnterCritical+0x58>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <vPortEnterCritical+0x48>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	e7fe      	b.n	8004732 <vPortEnterCritical+0x46>
	}
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	2000000c 	.word	0x2000000c
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <vPortExitCritical+0x4c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <vPortExitCritical+0x22>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	e7fe      	b.n	8004768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <vPortExitCritical+0x4c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <vPortExitCritical+0x4c>)
 8004772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <vPortExitCritical+0x4c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <vPortExitCritical+0x3e>
 800477c:	2300      	movs	r3, #0
 800477e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	2000000c 	.word	0x2000000c
	...

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	f380 8811 	msr	BASEPRI, r0
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f7fe ffd2 	bl	8003778 <vTaskSwitchContext>
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f380 8811 	msr	BASEPRI, r0
 80047dc:	bc09      	pop	{r0, r3}
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e6:	f01e 0f10 	tst.w	lr, #16
 80047ea:	bf08      	it	eq
 80047ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f0:	f380 8809 	msr	PSP, r0
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst>:
 8004800:	20000808 	.word	0x20000808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004820:	f7fe fef2 	bl	8003608 <xTaskIncrementTick>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <SysTick_Handler+0x3c>)
 800482c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <vPortSetupTimerInterrupt+0x34>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <vPortSetupTimerInterrupt+0x38>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <vPortSetupTimerInterrupt+0x3c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <vPortSetupTimerInterrupt+0x40>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	4a09      	ldr	r2, [pc, #36]	; (800488c <vPortSetupTimerInterrupt+0x44>)
 8004866:	3b01      	subs	r3, #1
 8004868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <vPortSetupTimerInterrupt+0x34>)
 800486c:	2207      	movs	r2, #7
 800486e:	601a      	str	r2, [r3, #0]
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e010 	.word	0xe000e010
 8004880:	e000e018 	.word	0xe000e018
 8004884:	20000000 	.word	0x20000000
 8004888:	10624dd3 	.word	0x10624dd3
 800488c:	e000e014 	.word	0xe000e014

08004890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048a0 <vPortEnableVFP+0x10>
 8004894:	6801      	ldr	r1, [r0, #0]
 8004896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800489a:	6001      	str	r1, [r0, #0]
 800489c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800489e:	bf00      	nop
 80048a0:	e000ed88 	.word	0xe000ed88

080048a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048aa:	f3ef 8305 	mrs	r3, IPSR
 80048ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d913      	bls.n	80048de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <vPortValidateInterruptPriority+0x6c>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <vPortValidateInterruptPriority+0x70>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	7afa      	ldrb	r2, [r7, #11]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d209      	bcs.n	80048de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	e7fe      	b.n	80048dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <vPortValidateInterruptPriority+0x74>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <vPortValidateInterruptPriority+0x78>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d909      	bls.n	8004902 <vPortValidateInterruptPriority+0x5e>
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	e7fe      	b.n	8004900 <vPortValidateInterruptPriority+0x5c>
	}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	e000e3f0 	.word	0xe000e3f0
 8004914:	20000e34 	.word	0x20000e34
 8004918:	e000ed0c 	.word	0xe000ed0c
 800491c:	20000e38 	.word	0x20000e38

08004920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800492c:	f7fe fdb2 	bl	8003494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004930:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <pvPortMalloc+0x170>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004938:	f000 f90c 	bl	8004b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800493c:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <pvPortMalloc+0x174>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 808c 	bne.w	8004a62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01c      	beq.n	800498a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004950:	2208      	movs	r2, #8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b00      	cmp	r3, #0
 8004960:	d013      	beq.n	800498a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f023 0307 	bic.w	r3, r3, #7
 8004968:	3308      	adds	r3, #8
 800496a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <pvPortMalloc+0x6a>
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e7fe      	b.n	8004988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d068      	beq.n	8004a62 <pvPortMalloc+0x142>
 8004990:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <pvPortMalloc+0x178>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d863      	bhi.n	8004a62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800499a:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <pvPortMalloc+0x17c>)
 800499c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800499e:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <pvPortMalloc+0x17c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049a4:	e004      	b.n	80049b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d903      	bls.n	80049c2 <pvPortMalloc+0xa2>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f1      	bne.n	80049a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049c2:	4b33      	ldr	r3, [pc, #204]	; (8004a90 <pvPortMalloc+0x170>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d04a      	beq.n	8004a62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	4413      	add	r3, r2
 80049d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	2308      	movs	r3, #8
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d91e      	bls.n	8004a2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <pvPortMalloc+0xf4>
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e7fe      	b.n	8004a12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a26:	69b8      	ldr	r0, [r7, #24]
 8004a28:	f000 f8f6 	bl	8004c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <pvPortMalloc+0x178>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <pvPortMalloc+0x178>)
 8004a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a3a:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <pvPortMalloc+0x178>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <pvPortMalloc+0x180>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d203      	bcs.n	8004a4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <pvPortMalloc+0x178>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <pvPortMalloc+0x180>)
 8004a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <pvPortMalloc+0x174>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a62:	f7fe fd25 	bl	80034b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <pvPortMalloc+0x164>
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0x162>
	return pvReturn;
 8004a84:	69fb      	ldr	r3, [r7, #28]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20004a44 	.word	0x20004a44
 8004a94:	20004a50 	.word	0x20004a50
 8004a98:	20004a48 	.word	0x20004a48
 8004a9c:	20004a3c 	.word	0x20004a3c
 8004aa0:	20004a4c 	.word	0x20004a4c

08004aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d046      	beq.n	8004b44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	425b      	negs	r3, r3
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4413      	add	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <vPortFree+0xa8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <vPortFree+0x42>
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e7fe      	b.n	8004ae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <vPortFree+0x5e>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	e7fe      	b.n	8004b00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <vPortFree+0xa8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d019      	beq.n	8004b44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <vPortFree+0xa8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b28:	f7fe fcb4 	bl	8003494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <vPortFree+0xac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <vPortFree+0xac>)
 8004b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b3a:	6938      	ldr	r0, [r7, #16]
 8004b3c:	f000 f86c 	bl	8004c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b40:	f7fe fcb6 	bl	80034b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b44:	bf00      	nop
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20004a50 	.word	0x20004a50
 8004b50:	20004a48 	.word	0x20004a48

08004b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b60:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <prvHeapInit+0xac>)
 8004b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3307      	adds	r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <prvHeapInit+0xac>)
 8004b84:	4413      	add	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <prvHeapInit+0xb0>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <prvHeapInit+0xb0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <prvHeapInit+0xb4>)
 8004bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <prvHeapInit+0xb4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <prvHeapInit+0xb4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	1ad2      	subs	r2, r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <prvHeapInit+0xb4>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <prvHeapInit+0xb8>)
 8004be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <prvHeapInit+0xbc>)
 8004bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <prvHeapInit+0xc0>)
 8004bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	20000e3c 	.word	0x20000e3c
 8004c04:	20004a3c 	.word	0x20004a3c
 8004c08:	20004a44 	.word	0x20004a44
 8004c0c:	20004a4c 	.word	0x20004a4c
 8004c10:	20004a48 	.word	0x20004a48
 8004c14:	20004a50 	.word	0x20004a50

08004c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <prvInsertBlockIntoFreeList+0xac>)
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e002      	b.n	8004c2c <prvInsertBlockIntoFreeList+0x14>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d8f7      	bhi.n	8004c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4413      	add	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d108      	bne.n	8004c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	441a      	add	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d118      	bne.n	8004ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d00d      	beq.n	8004c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	441a      	add	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e008      	b.n	8004ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e003      	b.n	8004ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d002      	beq.n	8004cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20004a3c 	.word	0x20004a3c
 8004cc8:	20004a44 	.word	0x20004a44

08004ccc <__libc_init_array>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4e0d      	ldr	r6, [pc, #52]	; (8004d04 <__libc_init_array+0x38>)
 8004cd0:	4c0d      	ldr	r4, [pc, #52]	; (8004d08 <__libc_init_array+0x3c>)
 8004cd2:	1ba4      	subs	r4, r4, r6
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	42a5      	cmp	r5, r4
 8004cda:	d109      	bne.n	8004cf0 <__libc_init_array+0x24>
 8004cdc:	4e0b      	ldr	r6, [pc, #44]	; (8004d0c <__libc_init_array+0x40>)
 8004cde:	4c0c      	ldr	r4, [pc, #48]	; (8004d10 <__libc_init_array+0x44>)
 8004ce0:	f000 f8e4 	bl	8004eac <_init>
 8004ce4:	1ba4      	subs	r4, r4, r6
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	2500      	movs	r5, #0
 8004cea:	42a5      	cmp	r5, r4
 8004cec:	d105      	bne.n	8004cfa <__libc_init_array+0x2e>
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cf4:	4798      	blx	r3
 8004cf6:	3501      	adds	r5, #1
 8004cf8:	e7ee      	b.n	8004cd8 <__libc_init_array+0xc>
 8004cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cfe:	4798      	blx	r3
 8004d00:	3501      	adds	r5, #1
 8004d02:	e7f2      	b.n	8004cea <__libc_init_array+0x1e>
 8004d04:	08004f84 	.word	0x08004f84
 8004d08:	08004f84 	.word	0x08004f84
 8004d0c:	08004f84 	.word	0x08004f84
 8004d10:	08004f88 	.word	0x08004f88

08004d14 <memcpy>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	1e43      	subs	r3, r0, #1
 8004d18:	440a      	add	r2, r1
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	d100      	bne.n	8004d20 <memcpy+0xc>
 8004d1e:	bd10      	pop	{r4, pc}
 8004d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d28:	e7f7      	b.n	8004d1a <memcpy+0x6>

08004d2a <memset>:
 8004d2a:	4402      	add	r2, r0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d100      	bne.n	8004d34 <memset+0xa>
 8004d32:	4770      	bx	lr
 8004d34:	f803 1b01 	strb.w	r1, [r3], #1
 8004d38:	e7f9      	b.n	8004d2e <memset+0x4>

08004d3a <cleanup_glue>:
 8004d3a:	b538      	push	{r3, r4, r5, lr}
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	6809      	ldr	r1, [r1, #0]
 8004d40:	4605      	mov	r5, r0
 8004d42:	b109      	cbz	r1, 8004d48 <cleanup_glue+0xe>
 8004d44:	f7ff fff9 	bl	8004d3a <cleanup_glue>
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d50:	f000 b85e 	b.w	8004e10 <_free_r>

08004d54 <_reclaim_reent>:
 8004d54:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <_reclaim_reent+0xb4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4283      	cmp	r3, r0
 8004d5a:	b570      	push	{r4, r5, r6, lr}
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	d051      	beq.n	8004e04 <_reclaim_reent+0xb0>
 8004d60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d62:	b143      	cbz	r3, 8004d76 <_reclaim_reent+0x22>
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d14a      	bne.n	8004e00 <_reclaim_reent+0xac>
 8004d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	b111      	cbz	r1, 8004d76 <_reclaim_reent+0x22>
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 f84d 	bl	8004e10 <_free_r>
 8004d76:	6961      	ldr	r1, [r4, #20]
 8004d78:	b111      	cbz	r1, 8004d80 <_reclaim_reent+0x2c>
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f848 	bl	8004e10 <_free_r>
 8004d80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d82:	b111      	cbz	r1, 8004d8a <_reclaim_reent+0x36>
 8004d84:	4620      	mov	r0, r4
 8004d86:	f000 f843 	bl	8004e10 <_free_r>
 8004d8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d8c:	b111      	cbz	r1, 8004d94 <_reclaim_reent+0x40>
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 f83e 	bl	8004e10 <_free_r>
 8004d94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d96:	b111      	cbz	r1, 8004d9e <_reclaim_reent+0x4a>
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 f839 	bl	8004e10 <_free_r>
 8004d9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004da0:	b111      	cbz	r1, 8004da8 <_reclaim_reent+0x54>
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f834 	bl	8004e10 <_free_r>
 8004da8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004daa:	b111      	cbz	r1, 8004db2 <_reclaim_reent+0x5e>
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 f82f 	bl	8004e10 <_free_r>
 8004db2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004db4:	b111      	cbz	r1, 8004dbc <_reclaim_reent+0x68>
 8004db6:	4620      	mov	r0, r4
 8004db8:	f000 f82a 	bl	8004e10 <_free_r>
 8004dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dbe:	b111      	cbz	r1, 8004dc6 <_reclaim_reent+0x72>
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 f825 	bl	8004e10 <_free_r>
 8004dc6:	69a3      	ldr	r3, [r4, #24]
 8004dc8:	b1e3      	cbz	r3, 8004e04 <_reclaim_reent+0xb0>
 8004dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4798      	blx	r3
 8004dd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004dd2:	b1b9      	cbz	r1, 8004e04 <_reclaim_reent+0xb0>
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dda:	f7ff bfae 	b.w	8004d3a <cleanup_glue>
 8004dde:	5949      	ldr	r1, [r1, r5]
 8004de0:	b941      	cbnz	r1, 8004df4 <_reclaim_reent+0xa0>
 8004de2:	3504      	adds	r5, #4
 8004de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de6:	2d80      	cmp	r5, #128	; 0x80
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	d1f8      	bne.n	8004dde <_reclaim_reent+0x8a>
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 f80f 	bl	8004e10 <_free_r>
 8004df2:	e7ba      	b.n	8004d6a <_reclaim_reent+0x16>
 8004df4:	680e      	ldr	r6, [r1, #0]
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 f80a 	bl	8004e10 <_free_r>
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	e7ef      	b.n	8004de0 <_reclaim_reent+0x8c>
 8004e00:	2500      	movs	r5, #0
 8004e02:	e7ef      	b.n	8004de4 <_reclaim_reent+0x90>
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
 8004e06:	bf00      	nop
 8004e08:	20000010 	.word	0x20000010

08004e0c <__malloc_lock>:
 8004e0c:	4770      	bx	lr

08004e0e <__malloc_unlock>:
 8004e0e:	4770      	bx	lr

08004e10 <_free_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4605      	mov	r5, r0
 8004e14:	2900      	cmp	r1, #0
 8004e16:	d045      	beq.n	8004ea4 <_free_r+0x94>
 8004e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e1c:	1f0c      	subs	r4, r1, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfb8      	it	lt
 8004e22:	18e4      	addlt	r4, r4, r3
 8004e24:	f7ff fff2 	bl	8004e0c <__malloc_lock>
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <_free_r+0x98>)
 8004e2a:	6813      	ldr	r3, [r2, #0]
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	b933      	cbnz	r3, 8004e3e <_free_r+0x2e>
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	6014      	str	r4, [r2, #0]
 8004e34:	4628      	mov	r0, r5
 8004e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e3a:	f7ff bfe8 	b.w	8004e0e <__malloc_unlock>
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	d90c      	bls.n	8004e5c <_free_r+0x4c>
 8004e42:	6821      	ldr	r1, [r4, #0]
 8004e44:	1862      	adds	r2, r4, r1
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bf04      	itt	eq
 8004e4a:	681a      	ldreq	r2, [r3, #0]
 8004e4c:	685b      	ldreq	r3, [r3, #4]
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	bf04      	itt	eq
 8004e52:	1852      	addeq	r2, r2, r1
 8004e54:	6022      	streq	r2, [r4, #0]
 8004e56:	6004      	str	r4, [r0, #0]
 8004e58:	e7ec      	b.n	8004e34 <_free_r+0x24>
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	b10a      	cbz	r2, 8004e64 <_free_r+0x54>
 8004e60:	42a2      	cmp	r2, r4
 8004e62:	d9fa      	bls.n	8004e5a <_free_r+0x4a>
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	1858      	adds	r0, r3, r1
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d10b      	bne.n	8004e84 <_free_r+0x74>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	4401      	add	r1, r0
 8004e70:	1858      	adds	r0, r3, r1
 8004e72:	4282      	cmp	r2, r0
 8004e74:	6019      	str	r1, [r3, #0]
 8004e76:	d1dd      	bne.n	8004e34 <_free_r+0x24>
 8004e78:	6810      	ldr	r0, [r2, #0]
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	4401      	add	r1, r0
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	e7d7      	b.n	8004e34 <_free_r+0x24>
 8004e84:	d902      	bls.n	8004e8c <_free_r+0x7c>
 8004e86:	230c      	movs	r3, #12
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	e7d3      	b.n	8004e34 <_free_r+0x24>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	1821      	adds	r1, r4, r0
 8004e90:	428a      	cmp	r2, r1
 8004e92:	bf04      	itt	eq
 8004e94:	6811      	ldreq	r1, [r2, #0]
 8004e96:	6852      	ldreq	r2, [r2, #4]
 8004e98:	6062      	str	r2, [r4, #4]
 8004e9a:	bf04      	itt	eq
 8004e9c:	1809      	addeq	r1, r1, r0
 8004e9e:	6021      	streq	r1, [r4, #0]
 8004ea0:	605c      	str	r4, [r3, #4]
 8004ea2:	e7c7      	b.n	8004e34 <_free_r+0x24>
 8004ea4:	bd38      	pop	{r3, r4, r5, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20004a54 	.word	0x20004a54

08004eac <_init>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr

08004eb8 <_fini>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	bf00      	nop
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr
