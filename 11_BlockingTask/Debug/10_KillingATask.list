
10_KillingATask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f64  08004f64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000074  08004fe0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b44  08004fe0  00024b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c0b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d33  00000000  00000000  00037caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  0003a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003bc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039c4  00000000  00000000  0003cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e565  00000000  00000000  00040784  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095ad4  00000000  00000000  0004ece9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e47bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff0  00000000  00000000  000e4838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e8c 	.word	0x08004e8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004e8c 	.word	0x08004e8c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:

uint32_t execution_monitor;
uint32_t resume_monitor;
bool Is_killed = false;
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  HAL_Init();
 80004e6:	f000 fa77 	bl	80009d8 <HAL_Init>
  SystemClock_Config();
 80004ea:	f000 f887 	bl	80005fc <SystemClock_Config>
  MX_GPIO_Init();
 80004ee:	f000 f90f 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f8e3 	bl	80006bc <MX_USART2_UART_Init>
  xTaskCreate(vBlueLEDControllerTask,"Blue LED Controller", 100, NULL, 1, &blue_handler);
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <main+0x58>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	490e      	ldr	r1, [pc, #56]	; (800053c <main+0x5c>)
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x60>)
 8000506:	f002 fd79 	bl	8002ffc <xTaskCreate>
  xTaskCreate(vRedLEDControllerTask,"Red LED Controller", 100, NULL, 1, &red_handler);
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x64>)
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	490c      	ldr	r1, [pc, #48]	; (8000548 <main+0x68>)
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x6c>)
 800051a:	f002 fd6f 	bl	8002ffc <xTaskCreate>
  xTaskCreate(vGreenLEDControllerTask,"Red LED Controller", 100, NULL, 1, &green_handler);
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x70>)
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	4907      	ldr	r1, [pc, #28]	; (8000548 <main+0x68>)
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x74>)
 800052e:	f002 fd65 	bl	8002ffc <xTaskCreate>
  vTaskStartScheduler();
 8000532:	f002 ff31 	bl	8003398 <vTaskStartScheduler>

  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x56>
 8000538:	20004a6c 	.word	0x20004a6c
 800053c:	08004ea4 	.word	0x08004ea4
 8000540:	08000559 	.word	0x08000559
 8000544:	20004a64 	.word	0x20004a64
 8000548:	08004eb8 	.word	0x08004eb8
 800054c:	08000571 	.word	0x08000571
 8000550:	20004a5c 	.word	0x20004a5c
 8000554:	080005cd 	.word	0x080005cd

08000558 <vBlueLEDControllerTask>:
  {
  }
}

void vBlueLEDControllerTask(void *pvParameters)
	{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	while(1)
		{
		BlueTaskProfiler++;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <vBlueLEDControllerTask+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a01      	ldr	r2, [pc, #4]	; (800056c <vBlueLEDControllerTask+0x14>)
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	e7f9      	b.n	8000560 <vBlueLEDControllerTask+0x8>
 800056c:	20004a60 	.word	0x20004a60

08000570 <vRedLEDControllerTask>:

	}


void vRedLEDControllerTask(void *pvParameters)
	{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
		{
		RedTaskProfiler++;
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <vRedLEDControllerTask+0x4c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <vRedLEDControllerTask+0x4c>)
 8000580:	6013      	str	r3, [r2, #0]
		for(i=0;i<100000;i++){}
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e002      	b.n	800058e <vRedLEDControllerTask+0x1e>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <vRedLEDControllerTask+0x50>)
 8000592:	4293      	cmp	r3, r2
 8000594:	ddf8      	ble.n	8000588 <vRedLEDControllerTask+0x18>

		execution_monitor++;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <vRedLEDControllerTask+0x54>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <vRedLEDControllerTask+0x54>)
 800059e:	6013      	str	r3, [r2, #0]

		if(execution_monitor >=50)
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <vRedLEDControllerTask+0x54>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b31      	cmp	r3, #49	; 0x31
 80005a6:	d9e7      	bls.n	8000578 <vRedLEDControllerTask+0x8>
		{
			Is_killed = true;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <vRedLEDControllerTask+0x58>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
			execution_monitor =0;
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <vRedLEDControllerTask+0x54>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			vTaskDelete(NULL);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f002 fe7d 	bl	80032b4 <vTaskDelete>
		RedTaskProfiler++;
 80005ba:	e7dd      	b.n	8000578 <vRedLEDControllerTask+0x8>
 80005bc:	20004a68 	.word	0x20004a68
 80005c0:	0001869f 	.word	0x0001869f
 80005c4:	20004a7c 	.word	0x20004a7c
 80005c8:	20000090 	.word	0x20000090

080005cc <vGreenLEDControllerTask>:
		}
		}

	}
void vGreenLEDControllerTask(void *pvParameters)
	{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
		{
		GreenTaskProfiler++;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <vGreenLEDControllerTask+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vGreenLEDControllerTask+0x28>)
 80005dc:	6013      	str	r3, [r2, #0]
		for(i=0;i<100000;i++){}
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e002      	b.n	80005ea <vGreenLEDControllerTask+0x1e>
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4a02      	ldr	r2, [pc, #8]	; (80005f8 <vGreenLEDControllerTask+0x2c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	ddf8      	ble.n	80005e4 <vGreenLEDControllerTask+0x18>
		GreenTaskProfiler++;
 80005f2:	e7ef      	b.n	80005d4 <vGreenLEDControllerTask+0x8>
 80005f4:	20004a74 	.word	0x20004a74
 80005f8:	0001869f 	.word	0x0001869f

080005fc <SystemClock_Config>:
	HAL_UART_Transmit(&huart2, (uint8_t* )&ch, 1, 0xFFFFFF);
	return ch;
	}

void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fb7d 	bl	8004d0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xb8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xb8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemClock_Config+0xb8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <SystemClock_Config+0xbc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <SystemClock_Config+0xbc>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <SystemClock_Config+0xbc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fc57 	bl	8000f24 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800067c:	f000 f874 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f000 feb2 	bl	8001404 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a6:	f000 f85f 	bl	8000768 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 faa2 	bl	8001c3c <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f833 	bl	8000768 <Error_Handler>
  }

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20004a80 	.word	0x20004a80
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_GPIO_Init+0x30>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <MX_GPIO_Init+0x30>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_GPIO_Init+0x30>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000756:	f000 f961 	bl	8000a1c <HAL_IncTick>
  }
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010000 	.word	0x40010000

08000768 <Error_Handler>:

void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_MspInit+0x54>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <HAL_MspInit+0x54>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6453      	str	r3, [r2, #68]	; 0x44
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_MspInit+0x54>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_MspInit+0x54>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	210f      	movs	r1, #15
 80007ba:	f06f 0001 	mvn.w	r0, #1
 80007be:	f000 fa05 	bl	8000bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <HAL_UART_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12b      	bne.n	800084a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_UART_MspInit+0x88>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083a:	2307      	movs	r3, #7
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_UART_MspInit+0x8c>)
 8000846:	f000 f9eb 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40004400 	.word	0x40004400
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2019      	movs	r0, #25
 8000876:	f000 f9a9 	bl	8000bcc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800087a:	2019      	movs	r0, #25
 800087c:	f000 f9c2 	bl	8000c04 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <HAL_InitTick+0xa0>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_InitTick+0xa0>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6453      	str	r3, [r2, #68]	; 0x44
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_InitTick+0xa0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089c:	f107 0210 	add.w	r2, r7, #16
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 ff78 	bl	800179c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008ac:	f000 ff62 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 80008b0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b4:	4a13      	ldr	r2, [pc, #76]	; (8000904 <HAL_InitTick+0xa4>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	3b01      	subs	r3, #1
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_InitTick+0xa8>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <HAL_InitTick+0xac>)
 80008c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_InitTick+0xa8>)
 80008c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_InitTick+0xa8>)
 80008d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_InitTick+0xa8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_InitTick+0xa8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_InitTick+0xa8>)
 80008e2:	f000 ff8d 	bl	8001800 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_InitTick+0xa8>)
 80008ee:	f000 ffbc 	bl	800186a <HAL_TIM_Base_Start_IT>
 80008f2:	4603      	mov	r3, r0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3730      	adds	r7, #48	; 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	431bde83 	.word	0x431bde83
 8000908:	20004ac0 	.word	0x20004ac0
 800090c:	40010000 	.word	0x40010000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094a:	f000 ffb2 	bl	80018b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20004ac0 	.word	0x20004ac0

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <SystemInit+0x28>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <SystemInit+0x28>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SystemInit+0x28>)
 800096e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000972:	609a      	str	r2, [r3, #8]
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800098a:	e003      	b.n	8000994 <LoopCopyDataInit>

0800098c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800098e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000992:	3104      	adds	r1, #4

08000994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800099a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800099c:	d3f6      	bcc.n	800098c <CopyDataInit>
  ldr  r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009a0:	e002      	b.n	80009a8 <LoopFillZerobss>

080009a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009a4:	f842 3b04 	str.w	r3, [r2], #4

080009a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009ac:	d3f9      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd3 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f004 f97b 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fd93 	bl	80004e0 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80009c0:	08004f6c 	.word	0x08004f6c
  ldr  r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009c8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80009cc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80009d0:	20004b44 	.word	0x20004b44

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f8d8 	bl	8000bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ff2a 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff feb4 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20004b00 	.word	0x20004b00

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20004b00 	.word	0x20004b00

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff4c 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bde:	f7ff ff61 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	6978      	ldr	r0, [r7, #20]
 8000bea:	f7ff ffb1 	bl	8000b50 <NVIC_EncodePriority>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff80 	bl	8000afc <__NVIC_SetPriority>
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff54 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e159      	b.n	8000ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 8148 	bne.w	8000eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d00b      	beq.n	8000c7a <HAL_GPIO_Init+0x5a>
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d007      	beq.n	8000c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6e:	2b11      	cmp	r3, #17
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0xfc>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	d123      	bne.n	8000d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0203 	and.w	r2, r3, #3
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80a2 	beq.w	8000eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b56      	ldr	r3, [pc, #344]	; (8000f04 <HAL_GPIO_Init+0x2e4>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a55      	ldr	r2, [pc, #340]	; (8000f04 <HAL_GPIO_Init+0x2e4>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <HAL_GPIO_Init+0x2e4>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc2:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_GPIO_Init+0x2ec>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d019      	beq.n	8000e22 <HAL_GPIO_Init+0x202>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x1fe>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <HAL_GPIO_Init+0x2f4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x1fa>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x1f6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_GPIO_Init+0x2fc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x1f2>
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e12:	2307      	movs	r3, #7
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e22:	2300      	movs	r3, #0
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e34:	4934      	ldr	r1, [pc, #208]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e66:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e90:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	f67f aea2 	bls.w	8000c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3724      	adds	r7, #36	; 0x24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40013c00 	.word	0x40013c00

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e25b      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d075      	beq.n	800102e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f42:	4ba3      	ldr	r3, [pc, #652]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d00c      	beq.n	8000f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f4e:	4ba0      	ldr	r3, [pc, #640]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d112      	bne.n	8000f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5a:	4b9d      	ldr	r3, [pc, #628]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f66:	d10b      	bne.n	8000f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	4b99      	ldr	r3, [pc, #612]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d05b      	beq.n	800102c <HAL_RCC_OscConfig+0x108>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d157      	bne.n	800102c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e236      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d106      	bne.n	8000f98 <HAL_RCC_OscConfig+0x74>
 8000f8a:	4b91      	ldr	r3, [pc, #580]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a90      	ldr	r2, [pc, #576]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e01d      	b.n	8000fd4 <HAL_RCC_OscConfig+0xb0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x98>
 8000fa2:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a8a      	ldr	r2, [pc, #552]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a87      	ldr	r2, [pc, #540]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e00b      	b.n	8000fd4 <HAL_RCC_OscConfig+0xb0>
 8000fbc:	4b84      	ldr	r3, [pc, #528]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a83      	ldr	r2, [pc, #524]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b81      	ldr	r3, [pc, #516]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a80      	ldr	r2, [pc, #512]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fd32 	bl	8000a44 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fd2e 	bl	8000a44 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e1fb      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xc0>
 8001002:	e014      	b.n	800102e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fd1e 	bl	8000a44 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fd1a 	bl	8000a44 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1e7      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0xe8>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d063      	beq.n	8001102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800103a:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00b      	beq.n	800105e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001046:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800104e:	2b08      	cmp	r3, #8
 8001050:	d11c      	bne.n	800108c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d116      	bne.n	800108c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <HAL_RCC_OscConfig+0x152>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d001      	beq.n	8001076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e1bb      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001076:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4952      	ldr	r1, [pc, #328]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	e03a      	b.n	8001102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d020      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001094:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_RCC_OscConfig+0x2b0>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109a:	f7ff fcd3 	bl	8000a44 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fccf 	bl	8000a44 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e19c      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4940      	ldr	r1, [pc, #256]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
 80010d4:	e015      	b.n	8001102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_RCC_OscConfig+0x2b0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fcb2 	bl	8000a44 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fcae 	bl	8000a44 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e17b      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d030      	beq.n	8001170 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d016      	beq.n	8001144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_RCC_OscConfig+0x2b4>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff fc92 	bl	8000a44 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fc8e 	bl	8000a44 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e15b      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0x200>
 8001142:	e015      	b.n	8001170 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_RCC_OscConfig+0x2b4>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fc7b 	bl	8000a44 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001152:	f7ff fc77 	bl	8000a44 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e144      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f0      	bne.n	8001152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a0 	beq.w	80012be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10f      	bne.n	80011ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011aa:	2301      	movs	r3, #1
 80011ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCC_OscConfig+0x2b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d121      	bne.n	80011fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_RCC_OscConfig+0x2b8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_RCC_OscConfig+0x2b8>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fc3d 	bl	8000a44 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011cc:	e011      	b.n	80011f2 <HAL_RCC_OscConfig+0x2ce>
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	42470000 	.word	0x42470000
 80011d8:	42470e80 	.word	0x42470e80
 80011dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e0:	f7ff fc30 	bl	8000a44 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e0fd      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <HAL_RCC_OscConfig+0x4d4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x2f0>
 8001206:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	4a7c      	ldr	r2, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
 8001212:	e01c      	b.n	800124e <HAL_RCC_OscConfig+0x32a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b05      	cmp	r3, #5
 800121a:	d10c      	bne.n	8001236 <HAL_RCC_OscConfig+0x312>
 800121c:	4b77      	ldr	r3, [pc, #476]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a76      	ldr	r2, [pc, #472]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	4b74      	ldr	r3, [pc, #464]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122c:	4a73      	ldr	r2, [pc, #460]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6713      	str	r3, [r2, #112]	; 0x70
 8001234:	e00b      	b.n	800124e <HAL_RCC_OscConfig+0x32a>
 8001236:	4b71      	ldr	r3, [pc, #452]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a70      	ldr	r2, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
 8001242:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001246:	4a6d      	ldr	r2, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d015      	beq.n	8001282 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001256:	f7ff fbf5 	bl	8000a44 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fbf1 	bl	8000a44 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0bc      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	4b61      	ldr	r3, [pc, #388]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0ee      	beq.n	800125e <HAL_RCC_OscConfig+0x33a>
 8001280:	e014      	b.n	80012ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fbdf 	bl	8000a44 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7ff fbdb 	bl	8000a44 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f241 3288 	movw	r2, #5000	; 0x1388
 8001298:	4293      	cmp	r3, r2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e0a6      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	4b56      	ldr	r3, [pc, #344]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ee      	bne.n	800128a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b2:	4b52      	ldr	r3, [pc, #328]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a51      	ldr	r2, [pc, #324]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 80012b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8092 	beq.w	80013ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012c8:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d05c      	beq.n	800138e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d141      	bne.n	8001360 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012dc:	4b48      	ldr	r3, [pc, #288]	; (8001400 <HAL_RCC_OscConfig+0x4dc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fbaf 	bl	8000a44 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fbab 	bl	8000a44 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e078      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69da      	ldr	r2, [r3, #28]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	019b      	lsls	r3, r3, #6
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	3b01      	subs	r3, #1
 8001322:	041b      	lsls	r3, r3, #16
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	4933      	ldr	r1, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x4dc>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fb84 	bl	8000a44 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff fb80 	bl	8000a44 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e04d      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x41c>
 800135e:	e045      	b.n	80013ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <HAL_RCC_OscConfig+0x4dc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb6d 	bl	8000a44 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb69 	bl	8000a44 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e036      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x44a>
 800138c:	e02e      	b.n	80013ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e029      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_RCC_OscConfig+0x4d8>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d115      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013c2:	4013      	ands	r3, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10d      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d106      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000
 80013fc:	40023800 	.word	0x40023800
 8001400:	42470060 	.word	0x42470060

08001404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0cc      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d90c      	bls.n	8001440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001426:	4b65      	ldr	r3, [pc, #404]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b8      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	494d      	ldr	r1, [pc, #308]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d044      	beq.n	8001524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d119      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e07f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d003      	beq.n	80014c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e06f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e067      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 0203 	bic.w	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4934      	ldr	r1, [pc, #208]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f4:	f7ff faa6 	bl	8000a44 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fc:	f7ff faa2 	bl	8000a44 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e04f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 020c 	and.w	r2, r3, #12
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	429a      	cmp	r2, r3
 8001522:	d1eb      	bne.n	80014fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d20c      	bcs.n	800154c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e032      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4916      	ldr	r1, [pc, #88]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158a:	f000 f821 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 800158e:	4601      	mov	r1, r0
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	fa21 f303 	lsr.w	r3, r1, r3
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1c8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f958 	bl	8000860 <HAL_InitTick>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08004ee4 	.word	0x08004ee4
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e6:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_GetSysClockFreq+0x158>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d007      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x32>
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d008      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x38>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 808d 	bne.w	8001716 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b4b      	ldr	r3, [pc, #300]	; (800172c <HAL_RCC_GetSysClockFreq+0x15c>)
 80015fe:	60bb      	str	r3, [r7, #8]
       break;
 8001600:	e08c      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001602:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_RCC_GetSysClockFreq+0x160>)
 8001604:	60bb      	str	r3, [r7, #8]
      break;
 8001606:	e089      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_GetSysClockFreq+0x158>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001610:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001612:	4b45      	ldr	r3, [pc, #276]	; (8001728 <HAL_RCC_GetSysClockFreq+0x158>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_RCC_GetSysClockFreq+0x158>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	f240 11ff 	movw	r1, #511	; 0x1ff
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	ea03 0501 	and.w	r5, r3, r1
 8001634:	ea04 0602 	and.w	r6, r4, r2
 8001638:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <HAL_RCC_GetSysClockFreq+0x160>)
 800163a:	fb02 f106 	mul.w	r1, r2, r6
 800163e:	2200      	movs	r2, #0
 8001640:	fb02 f205 	mul.w	r2, r2, r5
 8001644:	440a      	add	r2, r1
 8001646:	493a      	ldr	r1, [pc, #232]	; (8001730 <HAL_RCC_GetSysClockFreq+0x160>)
 8001648:	fba5 0101 	umull	r0, r1, r5, r1
 800164c:	1853      	adds	r3, r2, r1
 800164e:	4619      	mov	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	f7fe fdc1 	bl	80001e0 <__aeabi_uldivmod>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e049      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_RCC_GetSysClockFreq+0x158>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	099b      	lsrs	r3, r3, #6
 800166c:	f04f 0400 	mov.w	r4, #0
 8001670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	ea03 0501 	and.w	r5, r3, r1
 800167c:	ea04 0602 	and.w	r6, r4, r2
 8001680:	4629      	mov	r1, r5
 8001682:	4632      	mov	r2, r6
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	f04f 0400 	mov.w	r4, #0
 800168c:	0154      	lsls	r4, r2, #5
 800168e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001692:	014b      	lsls	r3, r1, #5
 8001694:	4619      	mov	r1, r3
 8001696:	4622      	mov	r2, r4
 8001698:	1b49      	subs	r1, r1, r5
 800169a:	eb62 0206 	sbc.w	r2, r2, r6
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	f04f 0400 	mov.w	r4, #0
 80016a6:	0194      	lsls	r4, r2, #6
 80016a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016ac:	018b      	lsls	r3, r1, #6
 80016ae:	1a5b      	subs	r3, r3, r1
 80016b0:	eb64 0402 	sbc.w	r4, r4, r2
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	00e2      	lsls	r2, r4, #3
 80016be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016c2:	00d9      	lsls	r1, r3, #3
 80016c4:	460b      	mov	r3, r1
 80016c6:	4614      	mov	r4, r2
 80016c8:	195b      	adds	r3, r3, r5
 80016ca:	eb44 0406 	adc.w	r4, r4, r6
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	02a2      	lsls	r2, r4, #10
 80016d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016dc:	0299      	lsls	r1, r3, #10
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	4621      	mov	r1, r4
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f04f 0400 	mov.w	r4, #0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4623      	mov	r3, r4
 80016f0:	f7fe fd76 	bl	80001e0 <__aeabi_uldivmod>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_GetSysClockFreq+0x158>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	3301      	adds	r3, #1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	60bb      	str	r3, [r7, #8]
      break;
 8001714:	e002      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001718:	60bb      	str	r3, [r7, #8]
      break;
 800171a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171c:	68bb      	ldr	r3, [r7, #8]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	00f42400 	.word	0x00f42400
 8001730:	017d7840 	.word	0x017d7840

08001734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_GetHCLKFreq+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001750:	f7ff fff0 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001754:	4601      	mov	r1, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a9b      	lsrs	r3, r3, #10
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08004ef4 	.word	0x08004ef4

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff ffdc 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 800177c:	4601      	mov	r1, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0b5b      	lsrs	r3, r3, #13
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08004ef4 	.word	0x08004ef4

0800179c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	220f      	movs	r2, #15
 80017aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_RCC_GetClockConfig+0x60>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 020f 	and.w	r2, r3, #15
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e01d      	b.n	800184e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f815 	bl	8001856 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f000 f968 	bl	8001b14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b06      	cmp	r3, #6
 8001892:	d007      	beq.n	80018a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d122      	bne.n	800190e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d11b      	bne.n	800190e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f06f 0202 	mvn.w	r2, #2
 80018de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f8ee 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 80018fa:	e005      	b.n	8001908 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f8e0 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8f1 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d122      	bne.n	8001962 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b04      	cmp	r3, #4
 8001928:	d11b      	bne.n	8001962 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f06f 0204 	mvn.w	r2, #4
 8001932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f8c4 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 800194e:	e005      	b.n	800195c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f8b6 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8c7 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b08      	cmp	r3, #8
 800196e:	d122      	bne.n	80019b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11b      	bne.n	80019b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f06f 0208 	mvn.w	r2, #8
 8001986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2204      	movs	r2, #4
 800198c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f89a 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 80019a2:	e005      	b.n	80019b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f88c 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f89d 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d122      	bne.n	8001a0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d11b      	bne.n	8001a0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f06f 0210 	mvn.w	r2, #16
 80019da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2208      	movs	r2, #8
 80019e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f870 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 80019f6:	e005      	b.n	8001a04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f862 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f873 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10e      	bne.n	8001a36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f06f 0201 	mvn.w	r2, #1
 8001a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7fe fe87 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a40:	2b80      	cmp	r3, #128	; 0x80
 8001a42:	d10e      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d107      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8e3 	bl	8001c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b40      	cmp	r3, #64	; 0x40
 8001a6e:	d10e      	bne.n	8001a8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d107      	bne.n	8001a8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f838 	bl	8001afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d10e      	bne.n	8001aba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d107      	bne.n	8001aba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0220 	mvn.w	r2, #32
 8001ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8ad 	bl	8001c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <TIM_Base_SetConfig+0xe4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00f      	beq.n	8001b4c <TIM_Base_SetConfig+0x38>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b32:	d00b      	beq.n	8001b4c <TIM_Base_SetConfig+0x38>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a31      	ldr	r2, [pc, #196]	; (8001bfc <TIM_Base_SetConfig+0xe8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <TIM_Base_SetConfig+0x38>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a30      	ldr	r2, [pc, #192]	; (8001c00 <TIM_Base_SetConfig+0xec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <TIM_Base_SetConfig+0x38>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <TIM_Base_SetConfig+0xf0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <TIM_Base_SetConfig+0xe4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01b      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d017      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <TIM_Base_SetConfig+0xe8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <TIM_Base_SetConfig+0xec>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00f      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <TIM_Base_SetConfig+0xf0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00b      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <TIM_Base_SetConfig+0xf4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <TIM_Base_SetConfig+0xf8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d003      	beq.n	8001b9e <TIM_Base_SetConfig+0x8a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <TIM_Base_SetConfig+0xfc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d108      	bne.n	8001bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <TIM_Base_SetConfig+0xe4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d103      	bne.n	8001be4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	615a      	str	r2, [r3, #20]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40014000 	.word	0x40014000
 8001c0c:	40014400 	.word	0x40014400
 8001c10:	40014800 	.word	0x40014800

08001c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e03f      	b.n	8001cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fdb4 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f829 	bl	8001cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d1a:	f023 030c 	bic.w	r3, r3, #12
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d46:	f040 818b 	bne.w	8002060 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4ac1      	ldr	r2, [pc, #772]	; (8002054 <UART_SetConfig+0x37c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d005      	beq.n	8001d60 <UART_SetConfig+0x88>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4abf      	ldr	r2, [pc, #764]	; (8002058 <UART_SetConfig+0x380>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 80bd 	bne.w	8001eda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d60:	f7ff fd08 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 8001d64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	461d      	mov	r5, r3
 8001d6a:	f04f 0600 	mov.w	r6, #0
 8001d6e:	46a8      	mov	r8, r5
 8001d70:	46b1      	mov	r9, r6
 8001d72:	eb18 0308 	adds.w	r3, r8, r8
 8001d76:	eb49 0409 	adc.w	r4, r9, r9
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	46a1      	mov	r9, r4
 8001d7e:	eb18 0805 	adds.w	r8, r8, r5
 8001d82:	eb49 0906 	adc.w	r9, r9, r6
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001d92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001d96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001d9a:	4688      	mov	r8, r1
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	eb18 0005 	adds.w	r0, r8, r5
 8001da2:	eb49 0106 	adc.w	r1, r9, r6
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	461d      	mov	r5, r3
 8001dac:	f04f 0600 	mov.w	r6, #0
 8001db0:	196b      	adds	r3, r5, r5
 8001db2:	eb46 0406 	adc.w	r4, r6, r6
 8001db6:	461a      	mov	r2, r3
 8001db8:	4623      	mov	r3, r4
 8001dba:	f7fe fa11 	bl	80001e0 <__aeabi_uldivmod>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4ba5      	ldr	r3, [pc, #660]	; (800205c <UART_SetConfig+0x384>)
 8001dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	f04f 0600 	mov.w	r6, #0
 8001dd8:	46a9      	mov	r9, r5
 8001dda:	46b2      	mov	sl, r6
 8001ddc:	eb19 0309 	adds.w	r3, r9, r9
 8001de0:	eb4a 040a 	adc.w	r4, sl, sl
 8001de4:	4699      	mov	r9, r3
 8001de6:	46a2      	mov	sl, r4
 8001de8:	eb19 0905 	adds.w	r9, r9, r5
 8001dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e04:	4689      	mov	r9, r1
 8001e06:	4692      	mov	sl, r2
 8001e08:	eb19 0005 	adds.w	r0, r9, r5
 8001e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	461d      	mov	r5, r3
 8001e16:	f04f 0600 	mov.w	r6, #0
 8001e1a:	196b      	adds	r3, r5, r5
 8001e1c:	eb46 0406 	adc.w	r4, r6, r6
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	f7fe f9dc 	bl	80001e0 <__aeabi_uldivmod>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	; (800205c <UART_SetConfig+0x384>)
 8001e30:	fba3 1302 	umull	r1, r3, r3, r2
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	2164      	movs	r1, #100	; 0x64
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	3332      	adds	r3, #50	; 0x32
 8001e42:	4a86      	ldr	r2, [pc, #536]	; (800205c <UART_SetConfig+0x384>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e50:	4498      	add	r8, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	461d      	mov	r5, r3
 8001e56:	f04f 0600 	mov.w	r6, #0
 8001e5a:	46a9      	mov	r9, r5
 8001e5c:	46b2      	mov	sl, r6
 8001e5e:	eb19 0309 	adds.w	r3, r9, r9
 8001e62:	eb4a 040a 	adc.w	r4, sl, sl
 8001e66:	4699      	mov	r9, r3
 8001e68:	46a2      	mov	sl, r4
 8001e6a:	eb19 0905 	adds.w	r9, r9, r5
 8001e6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e86:	4689      	mov	r9, r1
 8001e88:	4692      	mov	sl, r2
 8001e8a:	eb19 0005 	adds.w	r0, r9, r5
 8001e8e:	eb4a 0106 	adc.w	r1, sl, r6
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	461d      	mov	r5, r3
 8001e98:	f04f 0600 	mov.w	r6, #0
 8001e9c:	196b      	adds	r3, r5, r5
 8001e9e:	eb46 0406 	adc.w	r4, r6, r6
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	f7fe f99b 	bl	80001e0 <__aeabi_uldivmod>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460c      	mov	r4, r1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <UART_SetConfig+0x384>)
 8001eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2164      	movs	r1, #100	; 0x64
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	3332      	adds	r3, #50	; 0x32
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <UART_SetConfig+0x384>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	f003 0207 	and.w	r2, r3, #7
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4442      	add	r2, r8
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	e26f      	b.n	80023ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eda:	f7ff fc37 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001ede:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	f04f 0600 	mov.w	r6, #0
 8001ee8:	46a8      	mov	r8, r5
 8001eea:	46b1      	mov	r9, r6
 8001eec:	eb18 0308 	adds.w	r3, r8, r8
 8001ef0:	eb49 0409 	adc.w	r4, r9, r9
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	46a1      	mov	r9, r4
 8001ef8:	eb18 0805 	adds.w	r8, r8, r5
 8001efc:	eb49 0906 	adc.w	r9, r9, r6
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f14:	4688      	mov	r8, r1
 8001f16:	4691      	mov	r9, r2
 8001f18:	eb18 0005 	adds.w	r0, r8, r5
 8001f1c:	eb49 0106 	adc.w	r1, r9, r6
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	461d      	mov	r5, r3
 8001f26:	f04f 0600 	mov.w	r6, #0
 8001f2a:	196b      	adds	r3, r5, r5
 8001f2c:	eb46 0406 	adc.w	r4, r6, r6
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	f7fe f954 	bl	80001e0 <__aeabi_uldivmod>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <UART_SetConfig+0x384>)
 8001f40:	fba3 2302 	umull	r2, r3, r3, r2
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	f04f 0600 	mov.w	r6, #0
 8001f52:	46a9      	mov	r9, r5
 8001f54:	46b2      	mov	sl, r6
 8001f56:	eb19 0309 	adds.w	r3, r9, r9
 8001f5a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	eb19 0905 	adds.w	r9, r9, r5
 8001f66:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f7e:	4689      	mov	r9, r1
 8001f80:	4692      	mov	sl, r2
 8001f82:	eb19 0005 	adds.w	r0, r9, r5
 8001f86:	eb4a 0106 	adc.w	r1, sl, r6
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	461d      	mov	r5, r3
 8001f90:	f04f 0600 	mov.w	r6, #0
 8001f94:	196b      	adds	r3, r5, r5
 8001f96:	eb46 0406 	adc.w	r4, r6, r6
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	f7fe f91f 	bl	80001e0 <__aeabi_uldivmod>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460c      	mov	r4, r1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <UART_SetConfig+0x384>)
 8001faa:	fba3 1302 	umull	r1, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2164      	movs	r1, #100	; 0x64
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	3332      	adds	r3, #50	; 0x32
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <UART_SetConfig+0x384>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fca:	4498      	add	r8, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	461d      	mov	r5, r3
 8001fd0:	f04f 0600 	mov.w	r6, #0
 8001fd4:	46a9      	mov	r9, r5
 8001fd6:	46b2      	mov	sl, r6
 8001fd8:	eb19 0309 	adds.w	r3, r9, r9
 8001fdc:	eb4a 040a 	adc.w	r4, sl, sl
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	46a2      	mov	sl, r4
 8001fe4:	eb19 0905 	adds.w	r9, r9, r5
 8001fe8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ff8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ffc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002000:	4689      	mov	r9, r1
 8002002:	4692      	mov	sl, r2
 8002004:	eb19 0005 	adds.w	r0, r9, r5
 8002008:	eb4a 0106 	adc.w	r1, sl, r6
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	461d      	mov	r5, r3
 8002012:	f04f 0600 	mov.w	r6, #0
 8002016:	196b      	adds	r3, r5, r5
 8002018:	eb46 0406 	adc.w	r4, r6, r6
 800201c:	461a      	mov	r2, r3
 800201e:	4623      	mov	r3, r4
 8002020:	f7fe f8de 	bl	80001e0 <__aeabi_uldivmod>
 8002024:	4603      	mov	r3, r0
 8002026:	460c      	mov	r4, r1
 8002028:	461a      	mov	r2, r3
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <UART_SetConfig+0x384>)
 800202c:	fba3 1302 	umull	r1, r3, r3, r2
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	2164      	movs	r1, #100	; 0x64
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	3332      	adds	r3, #50	; 0x32
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <UART_SetConfig+0x384>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	f003 0207 	and.w	r2, r3, #7
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4442      	add	r2, r8
 8002050:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002052:	e1b2      	b.n	80023ba <UART_SetConfig+0x6e2>
 8002054:	40011000 	.word	0x40011000
 8002058:	40011400 	.word	0x40011400
 800205c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4ad7      	ldr	r2, [pc, #860]	; (80023c4 <UART_SetConfig+0x6ec>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d005      	beq.n	8002076 <UART_SetConfig+0x39e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4ad6      	ldr	r2, [pc, #856]	; (80023c8 <UART_SetConfig+0x6f0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	f040 80d1 	bne.w	8002218 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002076:	f7ff fb7d 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 800207a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	469a      	mov	sl, r3
 8002080:	f04f 0b00 	mov.w	fp, #0
 8002084:	46d0      	mov	r8, sl
 8002086:	46d9      	mov	r9, fp
 8002088:	eb18 0308 	adds.w	r3, r8, r8
 800208c:	eb49 0409 	adc.w	r4, r9, r9
 8002090:	4698      	mov	r8, r3
 8002092:	46a1      	mov	r9, r4
 8002094:	eb18 080a 	adds.w	r8, r8, sl
 8002098:	eb49 090b 	adc.w	r9, r9, fp
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020b0:	4688      	mov	r8, r1
 80020b2:	4691      	mov	r9, r2
 80020b4:	eb1a 0508 	adds.w	r5, sl, r8
 80020b8:	eb4b 0609 	adc.w	r6, fp, r9
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	f04f 0400 	mov.w	r4, #0
 80020ce:	0094      	lsls	r4, r2, #2
 80020d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020d4:	008b      	lsls	r3, r1, #2
 80020d6:	461a      	mov	r2, r3
 80020d8:	4623      	mov	r3, r4
 80020da:	4628      	mov	r0, r5
 80020dc:	4631      	mov	r1, r6
 80020de:	f7fe f87f 	bl	80001e0 <__aeabi_uldivmod>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	461a      	mov	r2, r3
 80020e8:	4bb8      	ldr	r3, [pc, #736]	; (80023cc <UART_SetConfig+0x6f4>)
 80020ea:	fba3 2302 	umull	r2, r3, r3, r2
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	469b      	mov	fp, r3
 80020f8:	f04f 0c00 	mov.w	ip, #0
 80020fc:	46d9      	mov	r9, fp
 80020fe:	46e2      	mov	sl, ip
 8002100:	eb19 0309 	adds.w	r3, r9, r9
 8002104:	eb4a 040a 	adc.w	r4, sl, sl
 8002108:	4699      	mov	r9, r3
 800210a:	46a2      	mov	sl, r4
 800210c:	eb19 090b 	adds.w	r9, r9, fp
 8002110:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002120:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002124:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002128:	4689      	mov	r9, r1
 800212a:	4692      	mov	sl, r2
 800212c:	eb1b 0509 	adds.w	r5, fp, r9
 8002130:	eb4c 060a 	adc.w	r6, ip, sl
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4619      	mov	r1, r3
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f04f 0400 	mov.w	r4, #0
 8002146:	0094      	lsls	r4, r2, #2
 8002148:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800214c:	008b      	lsls	r3, r1, #2
 800214e:	461a      	mov	r2, r3
 8002150:	4623      	mov	r3, r4
 8002152:	4628      	mov	r0, r5
 8002154:	4631      	mov	r1, r6
 8002156:	f7fe f843 	bl	80001e0 <__aeabi_uldivmod>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	461a      	mov	r2, r3
 8002160:	4b9a      	ldr	r3, [pc, #616]	; (80023cc <UART_SetConfig+0x6f4>)
 8002162:	fba3 1302 	umull	r1, r3, r3, r2
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2164      	movs	r1, #100	; 0x64
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	3332      	adds	r3, #50	; 0x32
 8002174:	4a95      	ldr	r2, [pc, #596]	; (80023cc <UART_SetConfig+0x6f4>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002180:	4498      	add	r8, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	469b      	mov	fp, r3
 8002186:	f04f 0c00 	mov.w	ip, #0
 800218a:	46d9      	mov	r9, fp
 800218c:	46e2      	mov	sl, ip
 800218e:	eb19 0309 	adds.w	r3, r9, r9
 8002192:	eb4a 040a 	adc.w	r4, sl, sl
 8002196:	4699      	mov	r9, r3
 8002198:	46a2      	mov	sl, r4
 800219a:	eb19 090b 	adds.w	r9, r9, fp
 800219e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021b6:	4689      	mov	r9, r1
 80021b8:	4692      	mov	sl, r2
 80021ba:	eb1b 0509 	adds.w	r5, fp, r9
 80021be:	eb4c 060a 	adc.w	r6, ip, sl
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	0094      	lsls	r4, r2, #2
 80021d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021da:	008b      	lsls	r3, r1, #2
 80021dc:	461a      	mov	r2, r3
 80021de:	4623      	mov	r3, r4
 80021e0:	4628      	mov	r0, r5
 80021e2:	4631      	mov	r1, r6
 80021e4:	f7fd fffc 	bl	80001e0 <__aeabi_uldivmod>
 80021e8:	4603      	mov	r3, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b77      	ldr	r3, [pc, #476]	; (80023cc <UART_SetConfig+0x6f4>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	2164      	movs	r1, #100	; 0x64
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	3332      	adds	r3, #50	; 0x32
 8002202:	4a72      	ldr	r2, [pc, #456]	; (80023cc <UART_SetConfig+0x6f4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	f003 020f 	and.w	r2, r3, #15
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4442      	add	r2, r8
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	e0d0      	b.n	80023ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002218:	f7ff fa98 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 800221c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	469a      	mov	sl, r3
 8002222:	f04f 0b00 	mov.w	fp, #0
 8002226:	46d0      	mov	r8, sl
 8002228:	46d9      	mov	r9, fp
 800222a:	eb18 0308 	adds.w	r3, r8, r8
 800222e:	eb49 0409 	adc.w	r4, r9, r9
 8002232:	4698      	mov	r8, r3
 8002234:	46a1      	mov	r9, r4
 8002236:	eb18 080a 	adds.w	r8, r8, sl
 800223a:	eb49 090b 	adc.w	r9, r9, fp
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800224a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800224e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002252:	4688      	mov	r8, r1
 8002254:	4691      	mov	r9, r2
 8002256:	eb1a 0508 	adds.w	r5, sl, r8
 800225a:	eb4b 0609 	adc.w	r6, fp, r9
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4619      	mov	r1, r3
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f04f 0400 	mov.w	r4, #0
 8002270:	0094      	lsls	r4, r2, #2
 8002272:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002276:	008b      	lsls	r3, r1, #2
 8002278:	461a      	mov	r2, r3
 800227a:	4623      	mov	r3, r4
 800227c:	4628      	mov	r0, r5
 800227e:	4631      	mov	r1, r6
 8002280:	f7fd ffae 	bl	80001e0 <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	461a      	mov	r2, r3
 800228a:	4b50      	ldr	r3, [pc, #320]	; (80023cc <UART_SetConfig+0x6f4>)
 800228c:	fba3 2302 	umull	r2, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	469b      	mov	fp, r3
 800229a:	f04f 0c00 	mov.w	ip, #0
 800229e:	46d9      	mov	r9, fp
 80022a0:	46e2      	mov	sl, ip
 80022a2:	eb19 0309 	adds.w	r3, r9, r9
 80022a6:	eb4a 040a 	adc.w	r4, sl, sl
 80022aa:	4699      	mov	r9, r3
 80022ac:	46a2      	mov	sl, r4
 80022ae:	eb19 090b 	adds.w	r9, r9, fp
 80022b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022ca:	4689      	mov	r9, r1
 80022cc:	4692      	mov	sl, r2
 80022ce:	eb1b 0509 	adds.w	r5, fp, r9
 80022d2:	eb4c 060a 	adc.w	r6, ip, sl
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	0094      	lsls	r4, r2, #2
 80022ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022ee:	008b      	lsls	r3, r1, #2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	4631      	mov	r1, r6
 80022f8:	f7fd ff72 	bl	80001e0 <__aeabi_uldivmod>
 80022fc:	4603      	mov	r3, r0
 80022fe:	460c      	mov	r4, r1
 8002300:	461a      	mov	r2, r3
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <UART_SetConfig+0x6f4>)
 8002304:	fba3 1302 	umull	r1, r3, r3, r2
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	2164      	movs	r1, #100	; 0x64
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	3332      	adds	r3, #50	; 0x32
 8002316:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <UART_SetConfig+0x6f4>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002322:	4498      	add	r8, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	469b      	mov	fp, r3
 8002328:	f04f 0c00 	mov.w	ip, #0
 800232c:	46d9      	mov	r9, fp
 800232e:	46e2      	mov	sl, ip
 8002330:	eb19 0309 	adds.w	r3, r9, r9
 8002334:	eb4a 040a 	adc.w	r4, sl, sl
 8002338:	4699      	mov	r9, r3
 800233a:	46a2      	mov	sl, r4
 800233c:	eb19 090b 	adds.w	r9, r9, fp
 8002340:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002344:	f04f 0100 	mov.w	r1, #0
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002358:	4689      	mov	r9, r1
 800235a:	4692      	mov	sl, r2
 800235c:	eb1b 0509 	adds.w	r5, fp, r9
 8002360:	eb4c 060a 	adc.w	r6, ip, sl
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	0094      	lsls	r4, r2, #2
 8002378:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800237c:	008b      	lsls	r3, r1, #2
 800237e:	461a      	mov	r2, r3
 8002380:	4623      	mov	r3, r4
 8002382:	4628      	mov	r0, r5
 8002384:	4631      	mov	r1, r6
 8002386:	f7fd ff2b 	bl	80001e0 <__aeabi_uldivmod>
 800238a:	4603      	mov	r3, r0
 800238c:	460c      	mov	r4, r1
 800238e:	461a      	mov	r2, r3
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <UART_SetConfig+0x6f4>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2164      	movs	r1, #100	; 0x64
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	3332      	adds	r3, #50	; 0x32
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <UART_SetConfig+0x6f4>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	f003 020f 	and.w	r2, r3, #15
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4442      	add	r2, r8
 80023b6:	609a      	str	r2, [r3, #8]
}
 80023b8:	e7ff      	b.n	80023ba <UART_SetConfig+0x6e2>
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40011400 	.word	0x40011400
 80023cc:	51eb851f 	.word	0x51eb851f

080023d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a07      	ldr	r2, [pc, #28]	; (80023fc <vApplicationGetIdleTaskMemory+0x2c>)
 80023e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <vApplicationGetIdleTaskMemory+0x30>)
 80023e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000094 	.word	0x20000094
 8002400:	20000150 	.word	0x20000150

08002404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <vApplicationGetTimerTaskMemory+0x2c>)
 8002414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <vApplicationGetTimerTaskMemory+0x30>)
 800241a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	20000350 	.word	0x20000350
 8002434:	2000040c 	.word	0x2000040c

08002438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 0208 	add.w	r2, r3, #8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 0208 	add.w	r2, r3, #8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0208 	add.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d103      	bne.n	80024fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e00c      	b.n	8002514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3308      	adds	r3, #8
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e002      	b.n	8002508 <vListInsert+0x2e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	429a      	cmp	r2, r3
 8002512:	d2f6      	bcs.n	8002502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	601a      	str	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6892      	ldr	r2, [r2, #8]
 8002562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6852      	ldr	r2, [r2, #4]
 800256c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	d103      	bne.n	8002580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1e5a      	subs	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	e7fe      	b.n	80025c6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80025c8:	f002 f880 	bl	80046cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	441a      	add	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	3b01      	subs	r3, #1
 80025fa:	68f9      	ldr	r1, [r7, #12]
 80025fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	441a      	add	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	22ff      	movs	r2, #255	; 0xff
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d114      	bne.n	8002648 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01a      	beq.n	800265c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3310      	adds	r3, #16
 800262a:	4618      	mov	r0, r3
 800262c:	f001 f946 	bl	80038bc <xTaskRemoveFromEventList>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <xQueueGenericReset+0xcc>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e009      	b.n	800265c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3310      	adds	r3, #16
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fef3 	bl	8002438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3324      	adds	r3, #36	; 0x24
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff feee 	bl	8002438 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800265c:	f002 f864 	bl	8004728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000ed04 	.word	0xe000ed04

08002670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08e      	sub	sp, #56	; 0x38
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <xQueueGenericCreateStatic+0x28>
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
 8002696:	e7fe      	b.n	8002696 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <xQueueGenericCreateStatic+0x42>
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <xQueueGenericCreateStatic+0x4e>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <xQueueGenericCreateStatic+0x52>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <xQueueGenericCreateStatic+0x54>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <xQueueGenericCreateStatic+0x6c>
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	e7fe      	b.n	80026da <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <xQueueGenericCreateStatic+0x78>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueGenericCreateStatic+0x7c>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueGenericCreateStatic+0x7e>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <xQueueGenericCreateStatic+0x96>
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e7fe      	b.n	8002704 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002706:	2350      	movs	r3, #80	; 0x50
 8002708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b50      	cmp	r3, #80	; 0x50
 800270e:	d009      	beq.n	8002724 <xQueueGenericCreateStatic+0xb4>
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e7fe      	b.n	8002722 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002724:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002738:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f805 	bl	8002756 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800274e:	4618      	mov	r0, r3
 8002750:	3730      	adds	r7, #48	; 0x30
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e002      	b.n	8002778 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002784:	2101      	movs	r1, #1
 8002786:	69b8      	ldr	r0, [r7, #24]
 8002788:	f7ff ff0a 	bl	80025a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	; 0x38
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <xQueueGenericSend+0x30>
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ca:	e7fe      	b.n	80027ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <xQueueGenericSend+0x3e>
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <xQueueGenericSend+0x42>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <xQueueGenericSend+0x44>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <xQueueGenericSend+0x5c>
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	e7fe      	b.n	80027f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d103      	bne.n	8002806 <xQueueGenericSend+0x6a>
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <xQueueGenericSend+0x6e>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <xQueueGenericSend+0x70>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <xQueueGenericSend+0x88>
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	e7fe      	b.n	8002822 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002824:	f001 fa06 	bl	8003c34 <xTaskGetSchedulerState>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <xQueueGenericSend+0x98>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <xQueueGenericSend+0x9c>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <xQueueGenericSend+0x9e>
 8002838:	2300      	movs	r3, #0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <xQueueGenericSend+0xb6>
 800283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	e7fe      	b.n	8002850 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002852:	f001 ff3b 	bl	80046cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <xQueueGenericSend+0xcc>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d129      	bne.n	80028bc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286e:	f000 f9ff 	bl	8002c70 <prvCopyDataToQueue>
 8002872:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d010      	beq.n	800289e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f81b 	bl	80038bc <xTaskRemoveFromEventList>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <xQueueGenericSend+0x1f0>)
 800288e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	e00a      	b.n	80028b4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <xQueueGenericSend+0x1f0>)
 80028a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028b4:	f001 ff38 	bl	8004728 <vPortExitCritical>
				return pdPASS;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e063      	b.n	8002984 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028c2:	f001 ff31 	bl	8004728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e05c      	b.n	8002984 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f853 	bl	8003980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028da:	2301      	movs	r3, #1
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028de:	f001 ff23 	bl	8004728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028e2:	f000 fdc7 	bl	8003474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e6:	f001 fef1 	bl	80046cc <vPortEnterCritical>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d103      	bne.n	8002900 <xQueueGenericSend+0x164>
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002906:	b25b      	sxtb	r3, r3
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d103      	bne.n	8002916 <xQueueGenericSend+0x17a>
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002916:	f001 ff07 	bl	8004728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800291a:	1d3a      	adds	r2, r7, #4
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f842 	bl	80039ac <xTaskCheckForTimeOut>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d124      	bne.n	8002978 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800292e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002930:	f000 fa96 	bl	8002e60 <prvIsQueueFull>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	3310      	adds	r3, #16
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 ff6c 	bl	8003820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294a:	f000 fa21 	bl	8002d90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800294e:	f000 fd9f 	bl	8003490 <xTaskResumeAll>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af7c 	bne.w	8002852 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <xQueueGenericSend+0x1f0>)
 800295c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	e772      	b.n	8002852 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800296c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296e:	f000 fa0f 	bl	8002d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002972:	f000 fd8d 	bl	8003490 <xTaskResumeAll>
 8002976:	e76c      	b.n	8002852 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800297a:	f000 fa09 	bl	8002d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800297e:	f000 fd87 	bl	8003490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002982:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002984:	4618      	mov	r0, r3
 8002986:	3738      	adds	r7, #56	; 0x38
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	; 0x38
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <xQueueGenericSendFromISR+0x2c>
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	e7fe      	b.n	80029ba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <xQueueGenericSendFromISR+0x3a>
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <xQueueGenericSendFromISR+0x3e>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <xQueueGenericSendFromISR+0x40>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <xQueueGenericSendFromISR+0x58>
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	e7fe      	b.n	80029e6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d103      	bne.n	80029f6 <xQueueGenericSendFromISR+0x66>
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <xQueueGenericSendFromISR+0x6a>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueGenericSendFromISR+0x6c>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <xQueueGenericSendFromISR+0x84>
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e7fe      	b.n	8002a12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a14:	f001 ff36 	bl	8004884 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a18:	f3ef 8211 	mrs	r2, BASEPRI
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	61ba      	str	r2, [r7, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <xQueueGenericSendFromISR+0xb6>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d12c      	bne.n	8002aa0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a56:	f000 f90b 	bl	8002c70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d112      	bne.n	8002a8a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	3324      	adds	r3, #36	; 0x24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 ff23 	bl	80038bc <xTaskRemoveFromEventList>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00e      	beq.n	8002a9a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e007      	b.n	8002a9a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	b25a      	sxtb	r2, r3
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a9e:	e001      	b.n	8002aa4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3738      	adds	r7, #56	; 0x38
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <xQueueReceive+0x2e>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	623b      	str	r3, [r7, #32]
 8002ae4:	e7fe      	b.n	8002ae4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <xQueueReceive+0x3c>
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <xQueueReceive+0x40>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <xQueueReceive+0x42>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <xQueueReceive+0x5a>
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	e7fe      	b.n	8002b10 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b12:	f001 f88f 	bl	8003c34 <xTaskGetSchedulerState>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <xQueueReceive+0x6a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <xQueueReceive+0x6e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueReceive+0x70>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <xQueueReceive+0x88>
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e7fe      	b.n	8002b3e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b40:	f001 fdc4 	bl	80046cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01f      	beq.n	8002b90 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b54:	f000 f8f6 	bl	8002d44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1e5a      	subs	r2, r3, #1
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00f      	beq.n	8002b88 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fea5 	bl	80038bc <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b78:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <xQueueReceive+0x1b4>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b88:	f001 fdce 	bl	8004728 <vPortExitCritical>
				return pdPASS;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e069      	b.n	8002c64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b96:	f001 fdc7 	bl	8004728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e062      	b.n	8002c64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fee9 	bl	8003980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bb2:	f001 fdb9 	bl	8004728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bb6:	f000 fc5d 	bl	8003474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bba:	f001 fd87 	bl	80046cc <vPortEnterCritical>
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d103      	bne.n	8002bd4 <xQueueReceive+0x11c>
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d103      	bne.n	8002bea <xQueueReceive+0x132>
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bea:	f001 fd9d 	bl	8004728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bee:	1d3a      	adds	r2, r7, #4
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fed8 	bl	80039ac <xTaskCheckForTimeOut>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d123      	bne.n	8002c4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c04:	f000 f916 	bl	8002e34 <prvIsQueueEmpty>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d017      	beq.n	8002c3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	3324      	adds	r3, #36	; 0x24
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fe02 	bl	8003820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1e:	f000 f8b7 	bl	8002d90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c22:	f000 fc35 	bl	8003490 <xTaskResumeAll>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d189      	bne.n	8002b40 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <xQueueReceive+0x1b4>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	e780      	b.n	8002b40 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c40:	f000 f8a6 	bl	8002d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c44:	f000 fc24 	bl	8003490 <xTaskResumeAll>
 8002c48:	e77a      	b.n	8002b40 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4c:	f000 f8a0 	bl	8002d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c50:	f000 fc1e 	bl	8003490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c56:	f000 f8ed 	bl	8002e34 <prvIsQueueEmpty>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f43f af6f 	beq.w	8002b40 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3730      	adds	r7, #48	; 0x30
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	e000ed04 	.word	0xe000ed04

08002c70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d14d      	bne.n	8002d32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 ffe8 	bl	8003c70 <xTaskPriorityDisinherit>
 8002ca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	e043      	b.n	8002d32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d119      	bne.n	8002ce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6858      	ldr	r0, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	f002 f81a 	bl	8004cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d32b      	bcc.n	8002d32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e026      	b.n	8002d32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68d8      	ldr	r0, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	461a      	mov	r2, r3
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	f002 f800 	bl	8004cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	441a      	add	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	425b      	negs	r3, r3
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d105      	bne.n	8002d32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d3a:	697b      	ldr	r3, [r7, #20]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d303      	bcc.n	8002d78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68d9      	ldr	r1, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	461a      	mov	r2, r3
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f001 ffb6 	bl	8004cf4 <memcpy>
	}
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d98:	f001 fc98 	bl	80046cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002da4:	e011      	b.n	8002dca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3324      	adds	r3, #36	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fd82 	bl	80038bc <xTaskRemoveFromEventList>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002dbe:	f000 fe55 	bl	8003a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dce9      	bgt.n	8002da6 <prvUnlockQueue+0x16>
 8002dd2:	e000      	b.n	8002dd6 <prvUnlockQueue+0x46>
					break;
 8002dd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	22ff      	movs	r2, #255	; 0xff
 8002dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002dde:	f001 fca3 	bl	8004728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002de2:	f001 fc73 	bl	80046cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dee:	e011      	b.n	8002e14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3310      	adds	r3, #16
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fd5d 	bl	80038bc <xTaskRemoveFromEventList>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e08:	f000 fe30 	bl	8003a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e0c:	7bbb      	ldrb	r3, [r7, #14]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	dce9      	bgt.n	8002df0 <prvUnlockQueue+0x60>
 8002e1c:	e000      	b.n	8002e20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e28:	f001 fc7e 	bl	8004728 <vPortExitCritical>
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e3c:	f001 fc46 	bl	80046cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e001      	b.n	8002e52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e52:	f001 fc69 	bl	8004728 <vPortExitCritical>

	return xReturn;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e68:	f001 fc30 	bl	80046cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d102      	bne.n	8002e7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e001      	b.n	8002e82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e82:	f001 fc51 	bl	8004728 <vPortExitCritical>

	return xReturn;
 8002e86:	68fb      	ldr	r3, [r7, #12]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e014      	b.n	8002eca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ea0:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <vQueueAddToRegistry+0x4c>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002eac:	490b      	ldr	r1, [pc, #44]	; (8002edc <vQueueAddToRegistry+0x4c>)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002eb6:	4a09      	ldr	r2, [pc, #36]	; (8002edc <vQueueAddToRegistry+0x4c>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ec2:	e005      	b.n	8002ed0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d9e7      	bls.n	8002ea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20004b04 	.word	0x20004b04

08002ee0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ef0:	f001 fbec 	bl	80046cc <vPortEnterCritical>
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d103      	bne.n	8002f0a <vQueueWaitForMessageRestricted+0x2a>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d103      	bne.n	8002f20 <vQueueWaitForMessageRestricted+0x40>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f20:	f001 fc02 	bl	8004728 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fc97 	bl	8003868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f7ff ff28 	bl	8002d90 <prvUnlockQueue>
	}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08e      	sub	sp, #56	; 0x38
 8002f4c:	af04      	add	r7, sp, #16
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <xTaskCreateStatic+0x28>
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	e7fe      	b.n	8002f6e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <xTaskCreateStatic+0x42>
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	e7fe      	b.n	8002f88 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f8a:	23bc      	movs	r3, #188	; 0xbc
 8002f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2bbc      	cmp	r3, #188	; 0xbc
 8002f92:	d009      	beq.n	8002fa8 <xTaskCreateStatic+0x60>
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	e7fe      	b.n	8002fa6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01e      	beq.n	8002fee <xTaskCreateStatic+0xa6>
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01b      	beq.n	8002fee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9303      	str	r3, [sp, #12]
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f851 	bl	8003088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fe8:	f000 f8f4 	bl	80031d4 <prvAddNewTaskToReadyList>
 8002fec:	e001      	b.n	8002ff2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ff2:	697b      	ldr	r3, [r7, #20]
	}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3728      	adds	r7, #40	; 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af04      	add	r7, sp, #16
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fc75 	bl	8004900 <pvPortMalloc>
 8003016:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800301e:	20bc      	movs	r0, #188	; 0xbc
 8003020:	f001 fc6e 	bl	8004900 <pvPortMalloc>
 8003024:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
 8003032:	e005      	b.n	8003040 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003034:	6978      	ldr	r0, [r7, #20]
 8003036:	f001 fd25 	bl	8004a84 <vPortFree>
 800303a:	e001      	b.n	8003040 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d017      	beq.n	8003076 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	2300      	movs	r3, #0
 8003052:	9303      	str	r3, [sp, #12]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f80f 	bl	8003088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800306a:	69f8      	ldr	r0, [r7, #28]
 800306c:	f000 f8b2 	bl	80031d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e002      	b.n	800307c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800307c:	69bb      	ldr	r3, [r7, #24]
	}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	461a      	mov	r2, r3
 80030a0:	21a5      	movs	r1, #165	; 0xa5
 80030a2:	f001 fe32 	bl	8004d0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030b0:	3b01      	subs	r3, #1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f023 0307 	bic.w	r3, r3, #7
 80030be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <prvInitialiseNewTask+0x56>
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e7fe      	b.n	80030dc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01f      	beq.n	8003124 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e012      	b.n	8003110 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	7819      	ldrb	r1, [r3, #0]
 80030f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	3334      	adds	r3, #52	; 0x34
 80030fa:	460a      	mov	r2, r1
 80030fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3301      	adds	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b0f      	cmp	r3, #15
 8003114:	d9e9      	bls.n	80030ea <prvInitialiseNewTask+0x62>
 8003116:	e000      	b.n	800311a <prvInitialiseNewTask+0x92>
			{
				break;
 8003118:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003122:	e003      	b.n	800312c <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b37      	cmp	r3, #55	; 0x37
 8003130:	d901      	bls.n	8003136 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003132:	2337      	movs	r3, #55	; 0x37
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003140:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2200      	movs	r2, #0
 8003146:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f993 	bl	8002478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	3318      	adds	r3, #24
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f98e 	bl	8002478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003160:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	3354      	adds	r3, #84	; 0x54
 8003186:	2260      	movs	r2, #96	; 0x60
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fdbd 	bl	8004d0a <memset>
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <prvInitialiseNewTask+0x140>)
 8003194:	659a      	str	r2, [r3, #88]	; 0x58
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <prvInitialiseNewTask+0x144>)
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <prvInitialiseNewTask+0x148>)
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	69b8      	ldr	r0, [r7, #24]
 80031a8:	f001 f968 	bl	800447c <pxPortInitialiseStack>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031be:	bf00      	nop
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	08004f1c 	.word	0x08004f1c
 80031cc:	08004f3c 	.word	0x08004f3c
 80031d0:	08004efc 	.word	0x08004efc

080031d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031dc:	f001 fa76 	bl	80046cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <prvAddNewTaskToReadyList+0xc4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <prvAddNewTaskToReadyList+0xc4>)
 80031e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <prvAddNewTaskToReadyList+0xc8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031f2:	4a2a      	ldr	r2, [pc, #168]	; (800329c <prvAddNewTaskToReadyList+0xc8>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <prvAddNewTaskToReadyList+0xc4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d110      	bne.n	8003222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003200:	f000 fc58 	bl	8003ab4 <prvInitialiseTaskLists>
 8003204:	e00d      	b.n	8003222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <prvAddNewTaskToReadyList+0xcc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <prvAddNewTaskToReadyList+0xc8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	429a      	cmp	r2, r3
 800321a:	d802      	bhi.n	8003222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800321c:	4a1f      	ldr	r2, [pc, #124]	; (800329c <prvAddNewTaskToReadyList+0xc8>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <prvAddNewTaskToReadyList+0xd0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <prvAddNewTaskToReadyList+0xd0>)
 800322a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <prvAddNewTaskToReadyList+0xd0>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <prvAddNewTaskToReadyList+0xd4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d903      	bls.n	8003248 <prvAddNewTaskToReadyList+0x74>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <prvAddNewTaskToReadyList+0xd4>)
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <prvAddNewTaskToReadyList+0xd8>)
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7ff f917 	bl	8002492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003264:	f001 fa60 	bl	8004728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <prvAddNewTaskToReadyList+0xcc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <prvAddNewTaskToReadyList+0xc8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	429a      	cmp	r2, r3
 800327c:	d207      	bcs.n	800328e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <prvAddNewTaskToReadyList+0xdc>)
 8003280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000ce0 	.word	0x20000ce0
 800329c:	2000080c 	.word	0x2000080c
 80032a0:	20000cec 	.word	0x20000cec
 80032a4:	20000cfc 	.word	0x20000cfc
 80032a8:	20000ce8 	.word	0x20000ce8
 80032ac:	20000810 	.word	0x20000810
 80032b0:	e000ed04 	.word	0xe000ed04

080032b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80032bc:	f001 fa06 	bl	80046cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <vTaskDelete+0x18>
 80032c6:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <vTaskDelete+0xc4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e000      	b.n	80032ce <vTaskDelete+0x1a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f939 	bl	800254c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3318      	adds	r3, #24
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f930 	bl	800254c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <vTaskDelete+0xc8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <vTaskDelete+0xc8>)
 80032f4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <vTaskDelete+0xc4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d10b      	bne.n	8003318 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3304      	adds	r3, #4
 8003304:	4619      	mov	r1, r3
 8003306:	481e      	ldr	r0, [pc, #120]	; (8003380 <vTaskDelete+0xcc>)
 8003308:	f7ff f8c3 	bl	8002492 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <vTaskDelete+0xd0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <vTaskDelete+0xd0>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e009      	b.n	800332c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <vTaskDelete+0xd4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <vTaskDelete+0xd4>)
 8003320:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fc32 	bl	8003b8c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003328:	f000 fc64 	bl	8003bf4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800332c:	f001 f9fc 	bl	8004728 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <vTaskDelete+0xd8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <vTaskDelete+0xc4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	429a      	cmp	r2, r3
 8003340:	d115      	bne.n	800336e <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <vTaskDelete+0xdc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <vTaskDelete+0xaa>
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	e7fe      	b.n	800335c <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <vTaskDelete+0xe0>)
 8003360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	2000080c 	.word	0x2000080c
 800337c:	20000cfc 	.word	0x20000cfc
 8003380:	20000cb4 	.word	0x20000cb4
 8003384:	20000cc8 	.word	0x20000cc8
 8003388:	20000ce0 	.word	0x20000ce0
 800338c:	20000cec 	.word	0x20000cec
 8003390:	20000d08 	.word	0x20000d08
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033a6:	463a      	mov	r2, r7
 80033a8:	1d39      	adds	r1, r7, #4
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f80e 	bl	80023d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	9202      	str	r2, [sp, #8]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2300      	movs	r3, #0
 80033c4:	460a      	mov	r2, r1
 80033c6:	4923      	ldr	r1, [pc, #140]	; (8003454 <vTaskStartScheduler+0xbc>)
 80033c8:	4823      	ldr	r0, [pc, #140]	; (8003458 <vTaskStartScheduler+0xc0>)
 80033ca:	f7ff fdbd 	bl	8002f48 <xTaskCreateStatic>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b22      	ldr	r3, [pc, #136]	; (800345c <vTaskStartScheduler+0xc4>)
 80033d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <vTaskStartScheduler+0xc4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033dc:	2301      	movs	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e001      	b.n	80033e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d102      	bne.n	80033f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033ec:	f000 fd00 	bl	8003df0 <xTimerCreateTimerTask>
 80033f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d11a      	bne.n	800342e <vTaskStartScheduler+0x96>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <vTaskStartScheduler+0xc8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3354      	adds	r3, #84	; 0x54
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <vTaskStartScheduler+0xcc>)
 8003412:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <vTaskStartScheduler+0xd0>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <vTaskStartScheduler+0xd4>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <vTaskStartScheduler+0xd8>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003428:	f001 f8b2 	bl	8004590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800342c:	e00d      	b.n	800344a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d109      	bne.n	800344a <vTaskStartScheduler+0xb2>
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e7fe      	b.n	8003448 <vTaskStartScheduler+0xb0>
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	08004ecc 	.word	0x08004ecc
 8003458:	08003a85 	.word	0x08003a85
 800345c:	20000d04 	.word	0x20000d04
 8003460:	2000080c 	.word	0x2000080c
 8003464:	20000010 	.word	0x20000010
 8003468:	20000d00 	.word	0x20000d00
 800346c:	20000cec 	.word	0x20000cec
 8003470:	20000ce4 	.word	0x20000ce4

08003474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <vTaskSuspendAll+0x18>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	4a03      	ldr	r2, [pc, #12]	; (800348c <vTaskSuspendAll+0x18>)
 8003480:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	20000d08 	.word	0x20000d08

08003490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <xTaskResumeAll+0x114>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <xTaskResumeAll+0x2a>
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	e7fe      	b.n	80034b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034ba:	f001 f907 	bl	80046cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <xTaskResumeAll+0x114>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <xTaskResumeAll+0x114>)
 80034c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <xTaskResumeAll+0x114>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d162      	bne.n	8003596 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <xTaskResumeAll+0x118>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05e      	beq.n	8003596 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d8:	e02f      	b.n	800353a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <xTaskResumeAll+0x11c>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3318      	adds	r3, #24
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff f830 	bl	800254c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f82b 	bl	800254c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <xTaskResumeAll+0x120>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d903      	bls.n	800350a <xTaskResumeAll+0x7a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <xTaskResumeAll+0x120>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <xTaskResumeAll+0x124>)
 8003518:	441a      	add	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7fe ffb6 	bl	8002492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <xTaskResumeAll+0x128>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <xTaskResumeAll+0x12c>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <xTaskResumeAll+0x11c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1cb      	bne.n	80034da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003548:	f000 fb54 	bl	8003bf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <xTaskResumeAll+0x130>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003558:	f000 f846 	bl	80035e8 <xTaskIncrementTick>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003562:	4b16      	ldr	r3, [pc, #88]	; (80035bc <xTaskResumeAll+0x12c>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f1      	bne.n	8003558 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <xTaskResumeAll+0x130>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <xTaskResumeAll+0x12c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <xTaskResumeAll+0x134>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003596:	f001 f8c7 	bl	8004728 <vPortExitCritical>

	return xAlreadyYielded;
 800359a:	68bb      	ldr	r3, [r7, #8]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000d08 	.word	0x20000d08
 80035a8:	20000ce0 	.word	0x20000ce0
 80035ac:	20000ca0 	.word	0x20000ca0
 80035b0:	20000ce8 	.word	0x20000ce8
 80035b4:	20000810 	.word	0x20000810
 80035b8:	2000080c 	.word	0x2000080c
 80035bc:	20000cf4 	.word	0x20000cf4
 80035c0:	20000cf0 	.word	0x20000cf0
 80035c4:	e000ed04 	.word	0xe000ed04

080035c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <xTaskGetTickCount+0x1c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000ce4 	.word	0x20000ce4

080035e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f2:	4b4e      	ldr	r3, [pc, #312]	; (800372c <xTaskIncrementTick+0x144>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8088 	bne.w	800370c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <xTaskIncrementTick+0x148>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003604:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <xTaskIncrementTick+0x148>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11f      	bne.n	8003650 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <xTaskIncrementTick+0x14c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <xTaskIncrementTick+0x46>
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	e7fe      	b.n	800362c <xTaskIncrementTick+0x44>
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <xTaskIncrementTick+0x14c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	4b40      	ldr	r3, [pc, #256]	; (8003738 <xTaskIncrementTick+0x150>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <xTaskIncrementTick+0x14c>)
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <xTaskIncrementTick+0x150>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b3e      	ldr	r3, [pc, #248]	; (800373c <xTaskIncrementTick+0x154>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	4a3c      	ldr	r2, [pc, #240]	; (800373c <xTaskIncrementTick+0x154>)
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	f000 fad2 	bl	8003bf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003650:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <xTaskIncrementTick+0x158>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	d349      	bcc.n	80036ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <xTaskIncrementTick+0x14c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <xTaskIncrementTick+0x158>)
 8003666:	f04f 32ff 	mov.w	r2, #4294967295
 800366a:	601a      	str	r2, [r3, #0]
					break;
 800366c:	e03f      	b.n	80036ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <xTaskIncrementTick+0x14c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d203      	bcs.n	800368e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003686:	4a2e      	ldr	r2, [pc, #184]	; (8003740 <xTaskIncrementTick+0x158>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800368c:	e02f      	b.n	80036ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3304      	adds	r3, #4
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe ff5a 	bl	800254c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d004      	beq.n	80036aa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	3318      	adds	r3, #24
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe ff51 	bl	800254c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <xTaskIncrementTick+0x15c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d903      	bls.n	80036be <xTaskIncrementTick+0xd6>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <xTaskIncrementTick+0x15c>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <xTaskIncrementTick+0x160>)
 80036cc:	441a      	add	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7fe fedc 	bl	8002492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <xTaskIncrementTick+0x164>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3b8      	bcc.n	800365a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80036e8:	2301      	movs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ec:	e7b5      	b.n	800365a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <xTaskIncrementTick+0x164>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4914      	ldr	r1, [pc, #80]	; (8003748 <xTaskIncrementTick+0x160>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d907      	bls.n	8003716 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003706:	2301      	movs	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e004      	b.n	8003716 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <xTaskIncrementTick+0x168>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <xTaskIncrementTick+0x168>)
 8003714:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <xTaskIncrementTick+0x16c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800371e:	2301      	movs	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000d08 	.word	0x20000d08
 8003730:	20000ce4 	.word	0x20000ce4
 8003734:	20000c98 	.word	0x20000c98
 8003738:	20000c9c 	.word	0x20000c9c
 800373c:	20000cf8 	.word	0x20000cf8
 8003740:	20000d00 	.word	0x20000d00
 8003744:	20000ce8 	.word	0x20000ce8
 8003748:	20000810 	.word	0x20000810
 800374c:	2000080c 	.word	0x2000080c
 8003750:	20000cf0 	.word	0x20000cf0
 8003754:	20000cf4 	.word	0x20000cf4

08003758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800375e:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <vTaskSwitchContext+0xb0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <vTaskSwitchContext+0xb4>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800376c:	e045      	b.n	80037fa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800376e:	4b27      	ldr	r3, [pc, #156]	; (800380c <vTaskSwitchContext+0xb4>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <vTaskSwitchContext+0xb8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e00f      	b.n	800379c <vTaskSwitchContext+0x44>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <vTaskSwitchContext+0x3e>
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	e7fe      	b.n	8003794 <vTaskSwitchContext+0x3c>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3b01      	subs	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	491d      	ldr	r1, [pc, #116]	; (8003814 <vTaskSwitchContext+0xbc>)
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0e5      	beq.n	800377c <vTaskSwitchContext+0x24>
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <vTaskSwitchContext+0xbc>)
 80037bc:	4413      	add	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3308      	adds	r3, #8
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d104      	bne.n	80037e0 <vTaskSwitchContext+0x88>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <vTaskSwitchContext+0xc0>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <vTaskSwitchContext+0xb8>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <vTaskSwitchContext+0xc0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3354      	adds	r3, #84	; 0x54
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <vTaskSwitchContext+0xc4>)
 80037f8:	6013      	str	r3, [r2, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000d08 	.word	0x20000d08
 800380c:	20000cf4 	.word	0x20000cf4
 8003810:	20000ce8 	.word	0x20000ce8
 8003814:	20000810 	.word	0x20000810
 8003818:	2000080c 	.word	0x2000080c
 800381c:	20000010 	.word	0x20000010

08003820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <vTaskPlaceOnEventList+0x24>
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e7fe      	b.n	8003842 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <vTaskPlaceOnEventList+0x44>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3318      	adds	r3, #24
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fe fe44 	bl	80024da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003852:	2101      	movs	r1, #1
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f000 fa77 	bl	8003d48 <prvAddCurrentTaskToDelayedList>
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000080c 	.word	0x2000080c

08003868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <vTaskPlaceOnEventListRestricted+0x26>
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e7fe      	b.n	800388c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <vTaskPlaceOnEventListRestricted+0x50>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3318      	adds	r3, #24
 8003894:	4619      	mov	r1, r3
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7fe fdfb 	bl	8002492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	68b8      	ldr	r0, [r7, #8]
 80038ac:	f000 fa4c 	bl	8003d48 <prvAddCurrentTaskToDelayedList>
	}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	2000080c 	.word	0x2000080c

080038bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <xTaskRemoveFromEventList+0x2a>
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e7fe      	b.n	80038e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	3318      	adds	r3, #24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fe2e 	bl	800254c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <xTaskRemoveFromEventList+0xac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11d      	bne.n	8003934 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fe25 	bl	800254c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <xTaskRemoveFromEventList+0xb0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d903      	bls.n	8003916 <xTaskRemoveFromEventList+0x5a>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <xTaskRemoveFromEventList+0xb0>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <xTaskRemoveFromEventList+0xb4>)
 8003924:	441a      	add	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fe fdb0 	bl	8002492 <vListInsertEnd>
 8003932:	e005      	b.n	8003940 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	3318      	adds	r3, #24
 8003938:	4619      	mov	r1, r3
 800393a:	480e      	ldr	r0, [pc, #56]	; (8003974 <xTaskRemoveFromEventList+0xb8>)
 800393c:	f7fe fda9 	bl	8002492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <xTaskRemoveFromEventList+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	429a      	cmp	r2, r3
 800394c:	d905      	bls.n	800395a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800394e:	2301      	movs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <xTaskRemoveFromEventList+0xc0>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e001      	b.n	800395e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800395e:	697b      	ldr	r3, [r7, #20]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000d08 	.word	0x20000d08
 800396c:	20000ce8 	.word	0x20000ce8
 8003970:	20000810 	.word	0x20000810
 8003974:	20000ca0 	.word	0x20000ca0
 8003978:	2000080c 	.word	0x2000080c
 800397c:	20000cf4 	.word	0x20000cf4

08003980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <vTaskInternalSetTimeOutState+0x24>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <vTaskInternalSetTimeOutState+0x28>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	20000cf8 	.word	0x20000cf8
 80039a8:	20000ce4 	.word	0x20000ce4

080039ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <xTaskCheckForTimeOut+0x24>
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e7fe      	b.n	80039ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <xTaskCheckForTimeOut+0x3e>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e7fe      	b.n	80039e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80039ea:	f000 fe6f 	bl	80046cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <xTaskCheckForTimeOut+0xb8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d102      	bne.n	8003a0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e023      	b.n	8003a56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <xTaskCheckForTimeOut+0xbc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d007      	beq.n	8003a2a <xTaskCheckForTimeOut+0x7e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e015      	b.n	8003a56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d20b      	bcs.n	8003a4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff9d 	bl	8003980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e004      	b.n	8003a56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a56:	f000 fe67 	bl	8004728 <vPortExitCritical>

	return xReturn;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000ce4 	.word	0x20000ce4
 8003a68:	20000cf8 	.word	0x20000cf8

08003a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <vTaskMissedYield+0x14>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	20000cf4 	.word	0x20000cf4

08003a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a8c:	f000 f852 	bl	8003b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <prvIdleTask+0x28>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d9f9      	bls.n	8003a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <prvIdleTask+0x2c>)
 8003a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003aa8:	e7f0      	b.n	8003a8c <prvIdleTask+0x8>
 8003aaa:	bf00      	nop
 8003aac:	20000810 	.word	0x20000810
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	e00c      	b.n	8003ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <prvInitialiseTaskLists+0x60>)
 8003acc:	4413      	add	r3, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fcb2 	bl	8002438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b37      	cmp	r3, #55	; 0x37
 8003ade:	d9ef      	bls.n	8003ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ae0:	480d      	ldr	r0, [pc, #52]	; (8003b18 <prvInitialiseTaskLists+0x64>)
 8003ae2:	f7fe fca9 	bl	8002438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ae6:	480d      	ldr	r0, [pc, #52]	; (8003b1c <prvInitialiseTaskLists+0x68>)
 8003ae8:	f7fe fca6 	bl	8002438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003aec:	480c      	ldr	r0, [pc, #48]	; (8003b20 <prvInitialiseTaskLists+0x6c>)
 8003aee:	f7fe fca3 	bl	8002438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003af2:	480c      	ldr	r0, [pc, #48]	; (8003b24 <prvInitialiseTaskLists+0x70>)
 8003af4:	f7fe fca0 	bl	8002438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003af8:	480b      	ldr	r0, [pc, #44]	; (8003b28 <prvInitialiseTaskLists+0x74>)
 8003afa:	f7fe fc9d 	bl	8002438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <prvInitialiseTaskLists+0x78>)
 8003b00:	4a05      	ldr	r2, [pc, #20]	; (8003b18 <prvInitialiseTaskLists+0x64>)
 8003b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <prvInitialiseTaskLists+0x7c>)
 8003b06:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <prvInitialiseTaskLists+0x68>)
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000810 	.word	0x20000810
 8003b18:	20000c70 	.word	0x20000c70
 8003b1c:	20000c84 	.word	0x20000c84
 8003b20:	20000ca0 	.word	0x20000ca0
 8003b24:	20000cb4 	.word	0x20000cb4
 8003b28:	20000ccc 	.word	0x20000ccc
 8003b2c:	20000c98 	.word	0x20000c98
 8003b30:	20000c9c 	.word	0x20000c9c

08003b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b3a:	e019      	b.n	8003b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b3c:	f000 fdc6 	bl	80046cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <prvCheckTasksWaitingTermination+0x4c>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fcfd 	bl	800254c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <prvCheckTasksWaitingTermination+0x50>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <prvCheckTasksWaitingTermination+0x50>)
 8003b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <prvCheckTasksWaitingTermination+0x54>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <prvCheckTasksWaitingTermination+0x54>)
 8003b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b66:	f000 fddf 	bl	8004728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f80e 	bl	8003b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <prvCheckTasksWaitingTermination+0x54>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e1      	bne.n	8003b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000cb4 	.word	0x20000cb4
 8003b84:	20000ce0 	.word	0x20000ce0
 8003b88:	20000cc8 	.word	0x20000cc8

08003b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3354      	adds	r3, #84	; 0x54
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f8cb 	bl	8004d34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 ff69 	bl	8004a84 <vPortFree>
				vPortFree( pxTCB );
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 ff66 	bl	8004a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bb8:	e017      	b.n	8003bea <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d103      	bne.n	8003bcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 ff5d 	bl	8004a84 <vPortFree>
	}
 8003bca:	e00e      	b.n	8003bea <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d009      	beq.n	8003bea <prvDeleteTCB+0x5e>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e7fe      	b.n	8003be8 <prvDeleteTCB+0x5c>
	}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <prvResetNextTaskUnblockTime+0x38>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <prvResetNextTaskUnblockTime+0x3c>)
 8003c06:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c0c:	e008      	b.n	8003c20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c0e:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <prvResetNextTaskUnblockTime+0x38>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <prvResetNextTaskUnblockTime+0x3c>)
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	20000c98 	.word	0x20000c98
 8003c30:	20000d00 	.word	0x20000d00

08003c34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <xTaskGetSchedulerState+0x34>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c42:	2301      	movs	r3, #1
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	e008      	b.n	8003c5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <xTaskGetSchedulerState+0x38>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c50:	2302      	movs	r3, #2
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	e001      	b.n	8003c5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c5a:	687b      	ldr	r3, [r7, #4]
	}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	20000cec 	.word	0x20000cec
 8003c6c:	20000d08 	.word	0x20000d08

08003c70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d054      	beq.n	8003d30 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c86:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <xTaskPriorityDisinherit+0xcc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d009      	beq.n	8003ca4 <xTaskPriorityDisinherit+0x34>
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e7fe      	b.n	8003ca2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <xTaskPriorityDisinherit+0x50>
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	e7fe      	b.n	8003cbe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	1e5a      	subs	r2, r3, #1
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d02c      	beq.n	8003d30 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d128      	bne.n	8003d30 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fc32 	bl	800254c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <xTaskPriorityDisinherit+0xd0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d903      	bls.n	8003d10 <xTaskPriorityDisinherit+0xa0>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <xTaskPriorityDisinherit+0xd0>)
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <xTaskPriorityDisinherit+0xd4>)
 8003d1e:	441a      	add	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7fe fbb3 	bl	8002492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d30:	697b      	ldr	r3, [r7, #20]
	}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	2000080c 	.word	0x2000080c
 8003d40:	20000ce8 	.word	0x20000ce8
 8003d44:	20000810 	.word	0x20000810

08003d48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d58:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fbf4 	bl	800254c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d10a      	bne.n	8003d82 <prvAddCurrentTaskToDelayedList+0x3a>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4819      	ldr	r0, [pc, #100]	; (8003de0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d7c:	f7fe fb89 	bl	8002492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d80:	e026      	b.n	8003dd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d209      	bcs.n	8003dae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7fe fb97 	bl	80024da <vListInsert>
}
 8003dac:	e010      	b.n	8003dd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f7fe fb8d 	bl	80024da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d202      	bcs.n	8003dd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6013      	str	r3, [r2, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000ce4 	.word	0x20000ce4
 8003ddc:	2000080c 	.word	0x2000080c
 8003de0:	20000ccc 	.word	0x20000ccc
 8003de4:	20000c9c 	.word	0x20000c9c
 8003de8:	20000c98 	.word	0x20000c98
 8003dec:	20000d00 	.word	0x20000d00

08003df0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003dfa:	f000 faff 	bl	80043fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <xTimerCreateTimerTask+0x80>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d021      	beq.n	8003e4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e0e:	1d3a      	adds	r2, r7, #4
 8003e10:	f107 0108 	add.w	r1, r7, #8
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe faf3 	bl	8002404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	9202      	str	r2, [sp, #8]
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	2302      	movs	r3, #2
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	460a      	mov	r2, r1
 8003e30:	4910      	ldr	r1, [pc, #64]	; (8003e74 <xTimerCreateTimerTask+0x84>)
 8003e32:	4811      	ldr	r0, [pc, #68]	; (8003e78 <xTimerCreateTimerTask+0x88>)
 8003e34:	f7ff f888 	bl	8002f48 <xTaskCreateStatic>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <xTimerCreateTimerTask+0x8c>)
 8003e3c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <xTimerCreateTimerTask+0x8c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e46:	2301      	movs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <xTimerCreateTimerTask+0x74>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	e7fe      	b.n	8003e62 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003e64:	697b      	ldr	r3, [r7, #20]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000d3c 	.word	0x20000d3c
 8003e74:	08004ed4 	.word	0x08004ed4
 8003e78:	08003fb1 	.word	0x08003fb1
 8003e7c:	20000d40 	.word	0x20000d40

08003e80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <xTimerGenericCommand+0x2c>
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	e7fe      	b.n	8003eaa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <xTimerGenericCommand+0x94>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02a      	beq.n	8003f0a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	dc18      	bgt.n	8003ef8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ec6:	f7ff feb5 	bl	8003c34 <xTaskGetSchedulerState>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d109      	bne.n	8003ee4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <xTimerGenericCommand+0x94>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	f107 0110 	add.w	r1, r7, #16
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003edc:	f7fe fc5e 	bl	800279c <xQueueGenericSend>
 8003ee0:	6278      	str	r0, [r7, #36]	; 0x24
 8003ee2:	e012      	b.n	8003f0a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <xTimerGenericCommand+0x94>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	f107 0110 	add.w	r1, r7, #16
 8003eec:	2300      	movs	r3, #0
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f7fe fc54 	bl	800279c <xQueueGenericSend>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24
 8003ef6:	e008      	b.n	8003f0a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <xTimerGenericCommand+0x94>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	f107 0110 	add.w	r1, r7, #16
 8003f00:	2300      	movs	r3, #0
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	f7fe fd44 	bl	8002990 <xQueueGenericSendFromISR>
 8003f08:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000d3c 	.word	0x20000d3c

08003f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <prvProcessExpiredTimer+0x94>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fb0b 	bl	800254c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d021      	beq.n	8003f88 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	18d1      	adds	r1, r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f000 f8d1 	bl	80040f8 <prvInsertTimerInActiveList>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01e      	beq.n	8003f9a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2100      	movs	r1, #0
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff8a 	bl	8003e80 <xTimerGenericCommand>
 8003f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d112      	bne.n	8003f9a <prvProcessExpiredTimer+0x82>
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	e7fe      	b.n	8003f86 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	6978      	ldr	r0, [r7, #20]
 8003fa0:	4798      	blx	r3
}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000d34 	.word	0x20000d34

08003fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fb8:	f107 0308 	add.w	r3, r7, #8
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f857 	bl	8004070 <prvGetNextExpireTime>
 8003fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f803 	bl	8003fd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fce:	f000 f8d5 	bl	800417c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fd2:	e7f1      	b.n	8003fb8 <prvTimerTask+0x8>

08003fd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fde:	f7ff fa49 	bl	8003474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f866 	bl	80040b8 <prvSampleTimeNow>
 8003fec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d130      	bne.n	8004056 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <prvProcessTimerOrBlockTask+0x3c>
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d806      	bhi.n	8004010 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004002:	f7ff fa45 	bl	8003490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ff85 	bl	8003f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800400e:	e024      	b.n	800405a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <prvProcessTimerOrBlockTask+0x90>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <prvProcessTimerOrBlockTask+0x50>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <prvProcessTimerOrBlockTask+0x52>
 8004024:	2300      	movs	r3, #0
 8004026:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <prvProcessTimerOrBlockTask+0x94>)
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	f7fe ff53 	bl	8002ee0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800403a:	f7ff fa29 	bl	8003490 <xTaskResumeAll>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004044:	4b09      	ldr	r3, [pc, #36]	; (800406c <prvProcessTimerOrBlockTask+0x98>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
}
 8004054:	e001      	b.n	800405a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004056:	f7ff fa1b 	bl	8003490 <xTaskResumeAll>
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000d38 	.word	0x20000d38
 8004068:	20000d3c 	.word	0x20000d3c
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <prvGetNextExpireTime+0x44>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <prvGetNextExpireTime+0x16>
 8004082:	2201      	movs	r2, #1
 8004084:	e000      	b.n	8004088 <prvGetNextExpireTime+0x18>
 8004086:	2200      	movs	r2, #0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <prvGetNextExpireTime+0x44>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e001      	b.n	80040a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000d34 	.word	0x20000d34

080040b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040c0:	f7ff fa82 	bl	80035c8 <xTaskGetTickCount>
 80040c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <prvSampleTimeNow+0x3c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d205      	bcs.n	80040dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040d0:	f000 f930 	bl	8004334 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e002      	b.n	80040e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040e2:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <prvSampleTimeNow+0x3c>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040e8:	68fb      	ldr	r3, [r7, #12]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000d44 	.word	0x20000d44

080040f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d812      	bhi.n	8004144 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e01b      	b.n	800416a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <prvInsertTimerInActiveList+0x7c>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7fe f9cc 	bl	80024da <vListInsert>
 8004142:	e012      	b.n	800416a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d206      	bcs.n	800415a <prvInsertTimerInActiveList+0x62>
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d302      	bcc.n	800415a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e007      	b.n	800416a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <prvInsertTimerInActiveList+0x80>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7fe f9b8 	bl	80024da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800416a:	697b      	ldr	r3, [r7, #20]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000d38 	.word	0x20000d38
 8004178:	20000d34 	.word	0x20000d34

0800417c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08e      	sub	sp, #56	; 0x38
 8004180:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004182:	e0c6      	b.n	8004312 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	da17      	bge.n	80041ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	3304      	adds	r3, #4
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <prvProcessReceivedCommands+0x2e>
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e7fe      	b.n	80041a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b0:	6850      	ldr	r0, [r2, #4]
 80041b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f2c0 80a7 	blt.w	8004310 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	3304      	adds	r3, #4
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe f9ba 	bl	800254c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041d8:	463b      	mov	r3, r7
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff6c 	bl	80040b8 <prvSampleTimeNow>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	f200 8094 	bhi.w	8004312 <prvProcessReceivedCommands+0x196>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <prvProcessReceivedCommands+0x74>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004219 	.word	0x08004219
 80041fc:	0800428b 	.word	0x0800428b
 8004200:	0800429f 	.word	0x0800429f
 8004204:	080042e7 	.word	0x080042e7
 8004208:	08004219 	.word	0x08004219
 800420c:	08004219 	.word	0x08004219
 8004210:	0800428b 	.word	0x0800428b
 8004214:	0800429f 	.word	0x0800429f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	18d1      	adds	r1, r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004238:	f7ff ff5e 	bl	80040f8 <prvInsertTimerInActiveList>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d067      	beq.n	8004312 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05c      	beq.n	8004312 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	441a      	add	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	2100      	movs	r1, #0
 8004268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426a:	f7ff fe09 	bl	8003e80 <xTimerGenericCommand>
 800426e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d14d      	bne.n	8004312 <prvProcessReceivedCommands+0x196>
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e7fe      	b.n	8004288 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800429c:	e039      	b.n	8004312 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <prvProcessReceivedCommands+0x156>
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e7fe      	b.n	80042d0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	18d1      	adds	r1, r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e0:	f7ff ff0a 	bl	80040f8 <prvInsertTimerInActiveList>
					break;
 80042e4:	e015      	b.n	8004312 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80042f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f6:	f000 fbc5 	bl	8004a84 <vPortFree>
 80042fa:	e00a      	b.n	8004312 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800430e:	e000      	b.n	8004312 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004310:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <prvProcessReceivedCommands+0x1b4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	1d39      	adds	r1, r7, #4
 8004318:	2200      	movs	r2, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fbcc 	bl	8002ab8 <xQueueReceive>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	f47f af2e 	bne.w	8004184 <prvProcessReceivedCommands+0x8>
	}
}
 8004328:	bf00      	nop
 800432a:	3730      	adds	r7, #48	; 0x30
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000d3c 	.word	0x20000d3c

08004334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800433a:	e047      	b.n	80043cc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <prvSwitchTimerLists+0xc0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <prvSwitchTimerLists+0xc0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe f8f9 	bl	800254c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02d      	beq.n	80043cc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d90e      	bls.n	80043a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <prvSwitchTimerLists+0xc0>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7fe f89e 	bl	80024da <vListInsert>
 800439e:	e015      	b.n	80043cc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043a0:	2300      	movs	r3, #0
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	2100      	movs	r1, #0
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fd68 	bl	8003e80 <xTimerGenericCommand>
 80043b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <prvSwitchTimerLists+0x98>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	e7fe      	b.n	80043ca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <prvSwitchTimerLists+0xc0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1b2      	bne.n	800433c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <prvSwitchTimerLists+0xc0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <prvSwitchTimerLists+0xc4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <prvSwitchTimerLists+0xc0>)
 80043e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <prvSwitchTimerLists+0xc4>)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6013      	str	r3, [r2, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000d34 	.word	0x20000d34
 80043f8:	20000d38 	.word	0x20000d38

080043fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004402:	f000 f963 	bl	80046cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <prvCheckForValidListAndQueue+0x60>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d120      	bne.n	8004450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800440e:	4814      	ldr	r0, [pc, #80]	; (8004460 <prvCheckForValidListAndQueue+0x64>)
 8004410:	f7fe f812 	bl	8002438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004414:	4813      	ldr	r0, [pc, #76]	; (8004464 <prvCheckForValidListAndQueue+0x68>)
 8004416:	f7fe f80f 	bl	8002438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <prvCheckForValidListAndQueue+0x6c>)
 800441c:	4a10      	ldr	r2, [pc, #64]	; (8004460 <prvCheckForValidListAndQueue+0x64>)
 800441e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <prvCheckForValidListAndQueue+0x70>)
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <prvCheckForValidListAndQueue+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004426:	2300      	movs	r3, #0
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <prvCheckForValidListAndQueue+0x74>)
 800442c:	4a11      	ldr	r2, [pc, #68]	; (8004474 <prvCheckForValidListAndQueue+0x78>)
 800442e:	2110      	movs	r1, #16
 8004430:	200a      	movs	r0, #10
 8004432:	f7fe f91d 	bl	8002670 <xQueueGenericCreateStatic>
 8004436:	4602      	mov	r2, r0
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <prvCheckForValidListAndQueue+0x60>)
 800443a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <prvCheckForValidListAndQueue+0x60>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <prvCheckForValidListAndQueue+0x60>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	490b      	ldr	r1, [pc, #44]	; (8004478 <prvCheckForValidListAndQueue+0x7c>)
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fd20 	bl	8002e90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004450:	f000 f96a 	bl	8004728 <vPortExitCritical>
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000d3c 	.word	0x20000d3c
 8004460:	20000d0c 	.word	0x20000d0c
 8004464:	20000d20 	.word	0x20000d20
 8004468:	20000d34 	.word	0x20000d34
 800446c:	20000d38 	.word	0x20000d38
 8004470:	20000de8 	.word	0x20000de8
 8004474:	20000d48 	.word	0x20000d48
 8004478:	08004edc 	.word	0x08004edc

0800447c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b04      	subs	r3, #4
 800448c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b04      	subs	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b04      	subs	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <pxPortInitialiseStack+0x64>)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b14      	subs	r3, #20
 80044b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f06f 0202 	mvn.w	r2, #2
 80044ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3b20      	subs	r3, #32
 80044d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	080044e5 	.word	0x080044e5

080044e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <prvTaskExitError+0x50>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d009      	beq.n	800450c <prvTaskExitError+0x28>
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e7fe      	b.n	800450a <prvTaskExitError+0x26>
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800451e:	bf00      	nop
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0fc      	beq.n	8004520 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
	...

08004540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pxCurrentTCBConst2>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	6808      	ldr	r0, [r1, #0]
 8004546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454a:	f380 8809 	msr	PSP, r0
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	4770      	bx	lr
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst2>:
 8004560:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004568:	4808      	ldr	r0, [pc, #32]	; (800458c <prvPortStartFirstTask+0x24>)
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	6800      	ldr	r0, [r0, #0]
 800456e:	f380 8808 	msr	MSP, r0
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8814 	msr	CONTROL, r0
 800457a:	b662      	cpsie	i
 800457c:	b661      	cpsie	f
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	df00      	svc	0
 8004588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800458a:	bf00      	nop
 800458c:	e000ed08 	.word	0xe000ed08

08004590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004596:	4b44      	ldr	r3, [pc, #272]	; (80046a8 <xPortStartScheduler+0x118>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a44      	ldr	r2, [pc, #272]	; (80046ac <xPortStartScheduler+0x11c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d109      	bne.n	80045b4 <xPortStartScheduler+0x24>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e7fe      	b.n	80045b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045b4:	4b3c      	ldr	r3, [pc, #240]	; (80046a8 <xPortStartScheduler+0x118>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a3d      	ldr	r2, [pc, #244]	; (80046b0 <xPortStartScheduler+0x120>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d109      	bne.n	80045d2 <xPortStartScheduler+0x42>
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e7fe      	b.n	80045d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045d2:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <xPortStartScheduler+0x124>)
 80045d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	22ff      	movs	r2, #255	; 0xff
 80045e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <xPortStartScheduler+0x128>)
 80045f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <xPortStartScheduler+0x12c>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004600:	e009      	b.n	8004616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004602:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <xPortStartScheduler+0x12c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <xPortStartScheduler+0x12c>)
 800460a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d0ef      	beq.n	8004602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004622:	4b26      	ldr	r3, [pc, #152]	; (80046bc <xPortStartScheduler+0x12c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1c3 0307 	rsb	r3, r3, #7
 800462a:	2b04      	cmp	r3, #4
 800462c:	d009      	beq.n	8004642 <xPortStartScheduler+0xb2>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	e7fe      	b.n	8004640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004642:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <xPortStartScheduler+0x12c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <xPortStartScheduler+0x12c>)
 800464a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <xPortStartScheduler+0x12c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004654:	4a19      	ldr	r2, [pc, #100]	; (80046bc <xPortStartScheduler+0x12c>)
 8004656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <xPortStartScheduler+0x130>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <xPortStartScheduler+0x130>)
 8004666:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800466a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <xPortStartScheduler+0x130>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <xPortStartScheduler+0x130>)
 8004672:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004678:	f000 f8d6 	bl	8004828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <xPortStartScheduler+0x134>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004682:	f000 f8f5 	bl	8004870 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <xPortStartScheduler+0x138>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <xPortStartScheduler+0x138>)
 800468c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004692:	f7ff ff69 	bl	8004568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004696:	f7ff f85f 	bl	8003758 <vTaskSwitchContext>
	prvTaskExitError();
 800469a:	f7ff ff23 	bl	80044e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	e000ed00 	.word	0xe000ed00
 80046ac:	410fc271 	.word	0x410fc271
 80046b0:	410fc270 	.word	0x410fc270
 80046b4:	e000e400 	.word	0xe000e400
 80046b8:	20000e38 	.word	0x20000e38
 80046bc:	20000e3c 	.word	0x20000e3c
 80046c0:	e000ed20 	.word	0xe000ed20
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	e000ef34 	.word	0xe000ef34

080046cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <vPortEnterCritical+0x54>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <vPortEnterCritical+0x54>)
 80046ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <vPortEnterCritical+0x54>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10e      	bne.n	8004714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <vPortEnterCritical+0x58>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <vPortEnterCritical+0x48>
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	e7fe      	b.n	8004712 <vPortEnterCritical+0x46>
	}
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	2000000c 	.word	0x2000000c
 8004724:	e000ed04 	.word	0xe000ed04

08004728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <vPortExitCritical+0x4c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <vPortExitCritical+0x22>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	e7fe      	b.n	8004748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vPortExitCritical+0x4c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <vPortExitCritical+0x4c>)
 8004752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <vPortExitCritical+0x4c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <vPortExitCritical+0x3e>
 800475c:	2300      	movs	r3, #0
 800475e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	2000000c 	.word	0x2000000c
	...

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	f380 8811 	msr	BASEPRI, r0
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f7fe ffd2 	bl	8003758 <vTaskSwitchContext>
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f380 8811 	msr	BASEPRI, r0
 80047bc:	bc09      	pop	{r0, r3}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f01e 0f10 	tst.w	lr, #16
 80047ca:	bf08      	it	eq
 80047cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d0:	f380 8809 	msr	PSP, r0
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst>:
 80047e0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004800:	f7fe fef2 	bl	80035e8 <xTaskIncrementTick>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <SysTick_Handler+0x3c>)
 800480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <vPortSetupTimerInterrupt+0x34>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortSetupTimerInterrupt+0x38>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <vPortSetupTimerInterrupt+0x3c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <vPortSetupTimerInterrupt+0x40>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	4a09      	ldr	r2, [pc, #36]	; (800486c <vPortSetupTimerInterrupt+0x44>)
 8004846:	3b01      	subs	r3, #1
 8004848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <vPortSetupTimerInterrupt+0x34>)
 800484c:	2207      	movs	r2, #7
 800484e:	601a      	str	r2, [r3, #0]
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	e000e010 	.word	0xe000e010
 8004860:	e000e018 	.word	0xe000e018
 8004864:	20000000 	.word	0x20000000
 8004868:	10624dd3 	.word	0x10624dd3
 800486c:	e000e014 	.word	0xe000e014

08004870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004880 <vPortEnableVFP+0x10>
 8004874:	6801      	ldr	r1, [r0, #0]
 8004876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800487a:	6001      	str	r1, [r0, #0]
 800487c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800487e:	bf00      	nop
 8004880:	e000ed88 	.word	0xe000ed88

08004884 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800488a:	f3ef 8305 	mrs	r3, IPSR
 800488e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b0f      	cmp	r3, #15
 8004894:	d913      	bls.n	80048be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <vPortValidateInterruptPriority+0x6c>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <vPortValidateInterruptPriority+0x70>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	7afa      	ldrb	r2, [r7, #11]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d209      	bcs.n	80048be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	e7fe      	b.n	80048bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048be:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <vPortValidateInterruptPriority+0x74>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <vPortValidateInterruptPriority+0x78>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d909      	bls.n	80048e2 <vPortValidateInterruptPriority+0x5e>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	e7fe      	b.n	80048e0 <vPortValidateInterruptPriority+0x5c>
	}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e3f0 	.word	0xe000e3f0
 80048f4:	20000e38 	.word	0x20000e38
 80048f8:	e000ed0c 	.word	0xe000ed0c
 80048fc:	20000e3c 	.word	0x20000e3c

08004900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800490c:	f7fe fdb2 	bl	8003474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004910:	4b57      	ldr	r3, [pc, #348]	; (8004a70 <pvPortMalloc+0x170>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004918:	f000 f90c 	bl	8004b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800491c:	4b55      	ldr	r3, [pc, #340]	; (8004a74 <pvPortMalloc+0x174>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 808c 	bne.w	8004a42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004930:	2208      	movs	r2, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	2b00      	cmp	r3, #0
 8004940:	d013      	beq.n	800496a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f023 0307 	bic.w	r3, r3, #7
 8004948:	3308      	adds	r3, #8
 800494a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <pvPortMalloc+0x6a>
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e7fe      	b.n	8004968 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d068      	beq.n	8004a42 <pvPortMalloc+0x142>
 8004970:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <pvPortMalloc+0x178>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d863      	bhi.n	8004a42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800497a:	4b40      	ldr	r3, [pc, #256]	; (8004a7c <pvPortMalloc+0x17c>)
 800497c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <pvPortMalloc+0x17c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004984:	e004      	b.n	8004990 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d903      	bls.n	80049a2 <pvPortMalloc+0xa2>
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f1      	bne.n	8004986 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049a2:	4b33      	ldr	r3, [pc, #204]	; (8004a70 <pvPortMalloc+0x170>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d04a      	beq.n	8004a42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2208      	movs	r2, #8
 80049b2:	4413      	add	r3, r2
 80049b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	1ad2      	subs	r2, r2, r3
 80049c6:	2308      	movs	r3, #8
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d91e      	bls.n	8004a0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4413      	add	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <pvPortMalloc+0xf4>
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	e7fe      	b.n	80049f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a06:	69b8      	ldr	r0, [r7, #24]
 8004a08:	f000 f8f6 	bl	8004bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <pvPortMalloc+0x178>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <pvPortMalloc+0x178>)
 8004a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a1a:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <pvPortMalloc+0x178>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <pvPortMalloc+0x180>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d203      	bcs.n	8004a2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <pvPortMalloc+0x178>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <pvPortMalloc+0x180>)
 8004a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <pvPortMalloc+0x174>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a42:	f7fe fd25 	bl	8003490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <pvPortMalloc+0x164>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e7fe      	b.n	8004a62 <pvPortMalloc+0x162>
	return pvReturn;
 8004a64:	69fb      	ldr	r3, [r7, #28]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3728      	adds	r7, #40	; 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20004a48 	.word	0x20004a48
 8004a74:	20004a54 	.word	0x20004a54
 8004a78:	20004a4c 	.word	0x20004a4c
 8004a7c:	20004a40 	.word	0x20004a40
 8004a80:	20004a50 	.word	0x20004a50

08004a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d046      	beq.n	8004b24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a96:	2308      	movs	r3, #8
 8004a98:	425b      	negs	r3, r3
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <vPortFree+0xa8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <vPortFree+0x42>
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e7fe      	b.n	8004ac4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <vPortFree+0x5e>
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	e7fe      	b.n	8004ae0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <vPortFree+0xa8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d019      	beq.n	8004b24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d115      	bne.n	8004b24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <vPortFree+0xa8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b08:	f7fe fcb4 	bl	8003474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <vPortFree+0xac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <vPortFree+0xac>)
 8004b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b1a:	6938      	ldr	r0, [r7, #16]
 8004b1c:	f000 f86c 	bl	8004bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b20:	f7fe fcb6 	bl	8003490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b24:	bf00      	nop
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20004a54 	.word	0x20004a54
 8004b30:	20004a4c 	.word	0x20004a4c

08004b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b40:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <prvHeapInit+0xac>)
 8004b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3307      	adds	r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <prvHeapInit+0xac>)
 8004b64:	4413      	add	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <prvHeapInit+0xb0>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b72:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <prvHeapInit+0xb0>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b80:	2208      	movs	r2, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <prvHeapInit+0xb4>)
 8004b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <prvHeapInit+0xb4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <prvHeapInit+0xb4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <prvHeapInit+0xb4>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <prvHeapInit+0xb8>)
 8004bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <prvHeapInit+0xbc>)
 8004bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <prvHeapInit+0xc0>)
 8004bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000e40 	.word	0x20000e40
 8004be4:	20004a40 	.word	0x20004a40
 8004be8:	20004a48 	.word	0x20004a48
 8004bec:	20004a50 	.word	0x20004a50
 8004bf0:	20004a4c 	.word	0x20004a4c
 8004bf4:	20004a54 	.word	0x20004a54

08004bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <prvInsertBlockIntoFreeList+0xac>)
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e002      	b.n	8004c0c <prvInsertBlockIntoFreeList+0x14>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d8f7      	bhi.n	8004c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	4413      	add	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d108      	bne.n	8004c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d118      	bne.n	8004c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d00d      	beq.n	8004c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e008      	b.n	8004c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e003      	b.n	8004c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d002      	beq.n	8004c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20004a40 	.word	0x20004a40
 8004ca8:	20004a48 	.word	0x20004a48

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4e0d      	ldr	r6, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1ba4      	subs	r4, r4, r6
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4e0b      	ldr	r6, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f000 f8e4 	bl	8004e8c <_init>
 8004cc4:	1ba4      	subs	r4, r4, r6
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2500      	movs	r5, #0
 8004cca:	42a5      	cmp	r5, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd4:	4798      	blx	r3
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cde:	4798      	blx	r3
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08004f64 	.word	0x08004f64
 8004ce8:	08004f64 	.word	0x08004f64
 8004cec:	08004f64 	.word	0x08004f64
 8004cf0:	08004f68 	.word	0x08004f68

08004cf4 <memcpy>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	1e43      	subs	r3, r0, #1
 8004cf8:	440a      	add	r2, r1
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	d100      	bne.n	8004d00 <memcpy+0xc>
 8004cfe:	bd10      	pop	{r4, pc}
 8004d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d08:	e7f7      	b.n	8004cfa <memcpy+0x6>

08004d0a <memset>:
 8004d0a:	4402      	add	r2, r0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d100      	bne.n	8004d14 <memset+0xa>
 8004d12:	4770      	bx	lr
 8004d14:	f803 1b01 	strb.w	r1, [r3], #1
 8004d18:	e7f9      	b.n	8004d0e <memset+0x4>

08004d1a <cleanup_glue>:
 8004d1a:	b538      	push	{r3, r4, r5, lr}
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	6809      	ldr	r1, [r1, #0]
 8004d20:	4605      	mov	r5, r0
 8004d22:	b109      	cbz	r1, 8004d28 <cleanup_glue+0xe>
 8004d24:	f7ff fff9 	bl	8004d1a <cleanup_glue>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d30:	f000 b85e 	b.w	8004df0 <_free_r>

08004d34 <_reclaim_reent>:
 8004d34:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <_reclaim_reent+0xb4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4283      	cmp	r3, r0
 8004d3a:	b570      	push	{r4, r5, r6, lr}
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	d051      	beq.n	8004de4 <_reclaim_reent+0xb0>
 8004d40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d42:	b143      	cbz	r3, 8004d56 <_reclaim_reent+0x22>
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d14a      	bne.n	8004de0 <_reclaim_reent+0xac>
 8004d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	b111      	cbz	r1, 8004d56 <_reclaim_reent+0x22>
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 f84d 	bl	8004df0 <_free_r>
 8004d56:	6961      	ldr	r1, [r4, #20]
 8004d58:	b111      	cbz	r1, 8004d60 <_reclaim_reent+0x2c>
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 f848 	bl	8004df0 <_free_r>
 8004d60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d62:	b111      	cbz	r1, 8004d6a <_reclaim_reent+0x36>
 8004d64:	4620      	mov	r0, r4
 8004d66:	f000 f843 	bl	8004df0 <_free_r>
 8004d6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d6c:	b111      	cbz	r1, 8004d74 <_reclaim_reent+0x40>
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f000 f83e 	bl	8004df0 <_free_r>
 8004d74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d76:	b111      	cbz	r1, 8004d7e <_reclaim_reent+0x4a>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 f839 	bl	8004df0 <_free_r>
 8004d7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d80:	b111      	cbz	r1, 8004d88 <_reclaim_reent+0x54>
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f834 	bl	8004df0 <_free_r>
 8004d88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d8a:	b111      	cbz	r1, 8004d92 <_reclaim_reent+0x5e>
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f000 f82f 	bl	8004df0 <_free_r>
 8004d92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d94:	b111      	cbz	r1, 8004d9c <_reclaim_reent+0x68>
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f82a 	bl	8004df0 <_free_r>
 8004d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d9e:	b111      	cbz	r1, 8004da6 <_reclaim_reent+0x72>
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 f825 	bl	8004df0 <_free_r>
 8004da6:	69a3      	ldr	r3, [r4, #24]
 8004da8:	b1e3      	cbz	r3, 8004de4 <_reclaim_reent+0xb0>
 8004daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dac:	4620      	mov	r0, r4
 8004dae:	4798      	blx	r3
 8004db0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004db2:	b1b9      	cbz	r1, 8004de4 <_reclaim_reent+0xb0>
 8004db4:	4620      	mov	r0, r4
 8004db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dba:	f7ff bfae 	b.w	8004d1a <cleanup_glue>
 8004dbe:	5949      	ldr	r1, [r1, r5]
 8004dc0:	b941      	cbnz	r1, 8004dd4 <_reclaim_reent+0xa0>
 8004dc2:	3504      	adds	r5, #4
 8004dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc6:	2d80      	cmp	r5, #128	; 0x80
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	d1f8      	bne.n	8004dbe <_reclaim_reent+0x8a>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f000 f80f 	bl	8004df0 <_free_r>
 8004dd2:	e7ba      	b.n	8004d4a <_reclaim_reent+0x16>
 8004dd4:	680e      	ldr	r6, [r1, #0]
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 f80a 	bl	8004df0 <_free_r>
 8004ddc:	4631      	mov	r1, r6
 8004dde:	e7ef      	b.n	8004dc0 <_reclaim_reent+0x8c>
 8004de0:	2500      	movs	r5, #0
 8004de2:	e7ef      	b.n	8004dc4 <_reclaim_reent+0x90>
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	bf00      	nop
 8004de8:	20000010 	.word	0x20000010

08004dec <__malloc_lock>:
 8004dec:	4770      	bx	lr

08004dee <__malloc_unlock>:
 8004dee:	4770      	bx	lr

08004df0 <_free_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d045      	beq.n	8004e84 <_free_r+0x94>
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f0c      	subs	r4, r1, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	18e4      	addlt	r4, r4, r3
 8004e04:	f7ff fff2 	bl	8004dec <__malloc_lock>
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <_free_r+0x98>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	b933      	cbnz	r3, 8004e1e <_free_r+0x2e>
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	6014      	str	r4, [r2, #0]
 8004e14:	4628      	mov	r0, r5
 8004e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e1a:	f7ff bfe8 	b.w	8004dee <__malloc_unlock>
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	d90c      	bls.n	8004e3c <_free_r+0x4c>
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	1862      	adds	r2, r4, r1
 8004e26:	4293      	cmp	r3, r2
 8004e28:	bf04      	itt	eq
 8004e2a:	681a      	ldreq	r2, [r3, #0]
 8004e2c:	685b      	ldreq	r3, [r3, #4]
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	bf04      	itt	eq
 8004e32:	1852      	addeq	r2, r2, r1
 8004e34:	6022      	streq	r2, [r4, #0]
 8004e36:	6004      	str	r4, [r0, #0]
 8004e38:	e7ec      	b.n	8004e14 <_free_r+0x24>
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	b10a      	cbz	r2, 8004e44 <_free_r+0x54>
 8004e40:	42a2      	cmp	r2, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x4a>
 8004e44:	6819      	ldr	r1, [r3, #0]
 8004e46:	1858      	adds	r0, r3, r1
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x74>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	4401      	add	r1, r0
 8004e50:	1858      	adds	r0, r3, r1
 8004e52:	4282      	cmp	r2, r0
 8004e54:	6019      	str	r1, [r3, #0]
 8004e56:	d1dd      	bne.n	8004e14 <_free_r+0x24>
 8004e58:	6810      	ldr	r0, [r2, #0]
 8004e5a:	6852      	ldr	r2, [r2, #4]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	4401      	add	r1, r0
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	e7d7      	b.n	8004e14 <_free_r+0x24>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x7c>
 8004e66:	230c      	movs	r3, #12
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	e7d3      	b.n	8004e14 <_free_r+0x24>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428a      	cmp	r2, r1
 8004e72:	bf04      	itt	eq
 8004e74:	6811      	ldreq	r1, [r2, #0]
 8004e76:	6852      	ldreq	r2, [r2, #4]
 8004e78:	6062      	str	r2, [r4, #4]
 8004e7a:	bf04      	itt	eq
 8004e7c:	1809      	addeq	r1, r1, r0
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	605c      	str	r4, [r3, #4]
 8004e82:	e7c7      	b.n	8004e14 <_free_r+0x24>
 8004e84:	bd38      	pop	{r3, r4, r5, pc}
 8004e86:	bf00      	nop
 8004e88:	20004a58 	.word	0x20004a58

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
