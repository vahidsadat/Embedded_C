
17_WorkingWithQueueSets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006108  08006108  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006110  08006110  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac4  20000074  0800618c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b38  0800618c  00024b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001966b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003151  00000000  00000000  0003970f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003c860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004660  00000000  00000000  0003ee18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2fc  00000000  00000000  00043478  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096a6a  00000000  00000000  00052774  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e91de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b8  00000000  00000000  000e925c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fd4 	.word	0x08005fd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005fd4 	.word	0x08005fd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:

void vSenderTask1(void *pvParameters);
void vSenderTask2(void *pvParameters);
void vReceiverTask(void *pvParameters);
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  HAL_Init();
 8000586:	f000 fb55 	bl	8000c34 <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f8cb 	bl	8000724 <SystemClock_Config>
  MX_GPIO_Init();
 800058e:	f000 f953 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f927 	bl	80007e4 <MX_USART2_UART_Init>

  xQueue1 = xQueueCreate( 1, sizeof(char *));
 8000596:	2200      	movs	r2, #0
 8000598:	2104      	movs	r1, #4
 800059a:	2001      	movs	r0, #1
 800059c:	f002 fa09 	bl	80029b2 <xQueueGenericCreate>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <main+0xa4>)
 80005a4:	601a      	str	r2, [r3, #0]
  xQueue2 = xQueueCreate( 1, sizeof(char *));
 80005a6:	2200      	movs	r2, #0
 80005a8:	2104      	movs	r1, #4
 80005aa:	2001      	movs	r0, #1
 80005ac:	f002 fa01 	bl	80029b2 <xQueueGenericCreate>
 80005b0:	4602      	mov	r2, r0
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0xa8>)
 80005b4:	601a      	str	r2, [r3, #0]
  //Create queue set
  xQueueSet=xQueueCreateSet(1*2);
 80005b6:	2002      	movs	r0, #2
 80005b8:	f002 fe74 	bl	80032a4 <xQueueCreateSet>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <main+0xac>)
 80005c0:	601a      	str	r2, [r3, #0]
  //Add two queues to queue set
  xQueueAddToSet (xQueue1,xQueueSet);
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0xa4>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0xac>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4610      	mov	r0, r2
 80005ce:	f002 fe78 	bl	80032c2 <xQueueAddToSet>
  xQueueAddToSet (xQueue2,xQueueSet);
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <main+0xa8>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <main+0xac>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	4610      	mov	r0, r2
 80005de:	f002 fe70 	bl	80032c2 <xQueueAddToSet>
  /*Create the sender tasks*/
  xTaskCreate(vSenderTask1, "sender1",100,NULL,1,NULL);
 80005e2:	2300      	movs	r3, #0
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2264      	movs	r2, #100	; 0x64
 80005ee:	4910      	ldr	r1, [pc, #64]	; (8000630 <main+0xb0>)
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <main+0xb4>)
 80005f2:	f002 ff4c 	bl	800348e <xTaskCreate>
  xTaskCreate(vSenderTask2, "sender2",100,NULL,1,NULL);
 80005f6:	2300      	movs	r3, #0
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	2264      	movs	r2, #100	; 0x64
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <main+0xb8>)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <main+0xbc>)
 8000606:	f002 ff42 	bl	800348e <xTaskCreate>

  /*Create the receiver task*/
  xTaskCreate(vReceiverTask, "Receiver",100,NULL,2,NULL);
 800060a:	2300      	movs	r3, #0
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	490a      	ldr	r1, [pc, #40]	; (8000640 <main+0xc0>)
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <main+0xc4>)
 800061a:	f002 ff38 	bl	800348e <xTaskCreate>

  vTaskStartScheduler();
 800061e:	f003 f8c5 	bl	80037ac <vTaskStartScheduler>


  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xa2>
 8000624:	20000090 	.word	0x20000090
 8000628:	20000094 	.word	0x20000094
 800062c:	20000098 	.word	0x20000098
 8000630:	08005fec 	.word	0x08005fec
 8000634:	08000691 	.word	0x08000691
 8000638:	08005ff4 	.word	0x08005ff4
 800063c:	080006c1 	.word	0x080006c1
 8000640:	08005ffc 	.word	0x08005ffc
 8000644:	080006f1 	.word	0x080006f1

08000648 <uart2_write>:
  }
}


int uart2_write(int ch)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (!(USART2->SR &0x0080)){}
 8000650:	bf00      	nop
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <uart2_write+0x2c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <uart2_write+0x2c>)
 8000662:	b2db      	uxtb	r3, r3
 8000664:	6053      	str	r3, [r2, #4]

	return ch;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	40004400 	.word	0x40004400

08000678 <__io_putchar>:

int __io_putchar(int ch)
	{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffe1 	bl	8000648 <uart2_write>
	return ch;
 8000686:	687b      	ldr	r3, [r7, #4]
	}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <vSenderTask1>:

void vSenderTask1(void *pvParameters)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	const TickType_t xBlcokTime = pdMS_TO_TICKS(100);
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	60fb      	str	r3, [r7, #12]
	const char *const msg ="Message from vSenderTask1\r\n";
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <vSenderTask1+0x28>)
 800069e:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		vTaskDelay(xBlcokTime);
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f003 f84f 	bl	8003744 <vTaskDelay>
		xQueueSend(xQueue1,&msg,0);
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <vSenderTask1+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	f107 0108 	add.w	r1, r7, #8
 80006ae:	2300      	movs	r3, #0
 80006b0:	2200      	movs	r2, #0
 80006b2:	f002 f9e3 	bl	8002a7c <xQueueGenericSend>
		vTaskDelay(xBlcokTime);
 80006b6:	e7f3      	b.n	80006a0 <vSenderTask1+0x10>
 80006b8:	08006008 	.word	0x08006008
 80006bc:	20000090 	.word	0x20000090

080006c0 <vSenderTask2>:
	}

}
void vSenderTask2(void *pvParameters)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	const TickType_t xBlcokTime = pdMS_TO_TICKS(200);
 80006c8:	23c8      	movs	r3, #200	; 0xc8
 80006ca:	60fb      	str	r3, [r7, #12]
	const char *const msg ="Message from vSenderTask2\r\n";
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <vSenderTask2+0x28>)
 80006ce:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		vTaskDelay(xBlcokTime);
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f003 f837 	bl	8003744 <vTaskDelay>
		xQueueSend(xQueue2,&msg,0);
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <vSenderTask2+0x2c>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	f107 0108 	add.w	r1, r7, #8
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	f002 f9cb 	bl	8002a7c <xQueueGenericSend>
		vTaskDelay(xBlcokTime);
 80006e6:	e7f3      	b.n	80006d0 <vSenderTask2+0x10>
 80006e8:	08006024 	.word	0x08006024
 80006ec:	20000094 	.word	0x20000094

080006f0 <vReceiverTask>:

	}

}
void vReceiverTask(void *pvParameters)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	QueueHandle_t xQueueThatContainsData;
	char *pcReceivedString;
	while(1)
	{
		xQueueThatContainsData=(QueueHandle_t )xQueueSelectFromSet(xQueueSet,portMAX_DELAY);
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <vReceiverTask+0x30>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fdff 	bl	8003304 <xQueueSelectFromSet>
 8000706:	60f8      	str	r0, [r7, #12]
		xQueueReceive(xQueueThatContainsData,&pcReceivedString,0);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	68f8      	ldr	r0, [r7, #12]
 8000712:	f002 fb71 	bl	8002df8 <xQueueReceive>
		printf(pcReceivedString);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fe31 	bl	8005380 <iprintf>
		xQueueThatContainsData=(QueueHandle_t )xQueueSelectFromSet(xQueueSet,portMAX_DELAY);
 800071e:	e7eb      	b.n	80006f8 <vReceiverTask+0x8>
 8000720:	20000098 	.word	0x20000098

08000724 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fdc1 	bl	80052ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <SystemClock_Config+0xb8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a22      	ldr	r2, [pc, #136]	; (80007dc <SystemClock_Config+0xb8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <SystemClock_Config+0xb8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <SystemClock_Config+0xbc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <SystemClock_Config+0xbc>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <SystemClock_Config+0xbc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fcf1 	bl	8001180 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007a4:	f000 f874 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 ff4c 	bl	8001660 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ce:	f000 f85f 	bl	8000890 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f001 fb3c 	bl	8001e98 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f833 	bl	8000890 <Error_Handler>
  }

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20004a70 	.word	0x20004a70
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_GPIO_Init+0x30>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <MX_GPIO_Init+0x30>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_GPIO_Init+0x30>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 f9fb 	bl	8000c78 <HAL_IncTick>
  }
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010000 	.word	0x40010000

08000890 <Error_Handler>:

void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <HAL_MspInit+0x54>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_MspInit+0x54>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 fa9f 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_UART_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12b      	bne.n	8000972 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0x88>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_MspInit+0x8c>)
 800096e:	f000 fa85 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004400 	.word	0x40004400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	2019      	movs	r0, #25
 800099e:	f000 fa43 	bl	8000e28 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80009a2:	2019      	movs	r0, #25
 80009a4:	f000 fa5c 	bl	8000e60 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_InitTick+0xa0>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_InitTick+0xa0>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6453      	str	r3, [r2, #68]	; 0x44
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_InitTick+0xa0>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f812 	bl	80019f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009d4:	f000 fffc 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 80009d8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_InitTick+0xa4>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_InitTick+0xa8>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <HAL_InitTick+0xac>)
 80009ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_InitTick+0xa8>)
 80009f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_InitTick+0xa8>)
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_InitTick+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_InitTick+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_InitTick+0xa8>)
 8000a0a:	f001 f827 	bl	8001a5c <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_InitTick+0xa8>)
 8000a16:	f001 f856 	bl	8001ac6 <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	20004ab0 	.word	0x20004ab0
 8000a34:	40010000 	.word	0x40010000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a72:	f001 f84c 	bl	8001b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20004ab0 	.word	0x20004ab0

08000a80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00a      	b.n	8000aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a92:	f3af 8000 	nop.w
 8000a96:	4601      	mov	r1, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2ca      	uxtb	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf0      	blt.n	8000a92 <_read+0x12>
	}

return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e009      	b.n	8000ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fdcf 	bl	8000678 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf1      	blt.n	8000acc <_write+0x12>
	}
	return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x50>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x16>
		heap_end = &end;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <_sbrk+0x50>)
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <_sbrk+0x54>)
 8000b70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <_sbrk+0x50>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <_sbrk+0x50>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4413      	add	r3, r2
 8000b80:	466a      	mov	r2, sp
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d907      	bls.n	8000b96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b86:	f004 fa99 	bl	80050bc <__errno>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	e006      	b.n	8000ba4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_sbrk+0x50>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a03      	ldr	r2, [pc, #12]	; (8000bac <_sbrk+0x50>)
 8000ba0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000009c 	.word	0x2000009c
 8000bb0:	20004b38 	.word	0x20004b38

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <SystemInit+0x28>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <SystemInit+0x28>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SystemInit+0x28>)
 8000bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bce:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000be4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000be6:	e003      	b.n	8000bf0 <LoopCopyDataInit>

08000be8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bee:	3104      	adds	r1, #4

08000bf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf8:	d3f6      	bcc.n	8000be8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bfc:	e002      	b.n	8000c04 <LoopFillZerobss>

08000bfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c00:	f842 3b04 	str.w	r3, [r2], #4

08000c04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c08:	d3f9      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd3 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f004 fb25 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fcb5 	bl	8000580 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000c1c:	08006118 	.word	0x08006118
  ldr  r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c24:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000c28:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000c2c:	20004b38 	.word	0x20004b38

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f8d8 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fe90 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe1a 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20004af0 	.word	0x20004af0

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20004af0 	.word	0x20004af0

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e159      	b.n	800114c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8148 	bne.w	8001146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d00b      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eca:	2b11      	cmp	r3, #17
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0xfc>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a2 	beq.w	8001146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b56      	ldr	r3, [pc, #344]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a55      	ldr	r2, [pc, #340]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a51      	ldr	r2, [pc, #324]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x202>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a47      	ldr	r2, [pc, #284]	; (800116c <HAL_GPIO_Init+0x2f0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1fe>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a46      	ldr	r2, [pc, #280]	; (8001170 <HAL_GPIO_Init+0x2f4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1fa>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_GPIO_Init+0x2f8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1f6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1f2>
 800106a:	2304      	movs	r3, #4
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800106e:	2307      	movs	r3, #7
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4934      	ldr	r1, [pc, #208]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_GPIO_Init+0x300>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <HAL_GPIO_Init+0x300>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <HAL_GPIO_Init+0x300>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ec:	4a23      	ldr	r2, [pc, #140]	; (800117c <HAL_GPIO_Init+0x300>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_GPIO_Init+0x300>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_GPIO_Init+0x300>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_GPIO_Init+0x300>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_GPIO_Init+0x300>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f aea2 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	3724      	adds	r7, #36	; 0x24
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40023800 	.word	0x40023800
 8001164:	40013800 	.word	0x40013800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e25b      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d075      	beq.n	800128a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119e:	4ba3      	ldr	r3, [pc, #652]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d00c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4ba0      	ldr	r3, [pc, #640]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d112      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b9d      	ldr	r3, [pc, #628]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c2:	d10b      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b99      	ldr	r3, [pc, #612]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <HAL_RCC_OscConfig+0x108>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d157      	bne.n	8001288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e236      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d106      	bne.n	80011f4 <HAL_RCC_OscConfig+0x74>
 80011e6:	4b91      	ldr	r3, [pc, #580]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a90      	ldr	r2, [pc, #576]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b8b      	ldr	r3, [pc, #556]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8a      	ldr	r2, [pc, #552]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b88      	ldr	r3, [pc, #544]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a87      	ldr	r2, [pc, #540]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 8001218:	4b84      	ldr	r3, [pc, #528]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a83      	ldr	r2, [pc, #524]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b81      	ldr	r3, [pc, #516]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a80      	ldr	r2, [pc, #512]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fd32 	bl	8000ca0 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fd2e 	bl	8000ca0 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1fb      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xc0>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fd1e 	bl	8000ca0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fd1a 	bl	8000ca0 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1e7      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0xe8>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1bb      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b56      	ldr	r3, [pc, #344]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4952      	ldr	r1, [pc, #328]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <HAL_RCC_OscConfig+0x2b0>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fcd3 	bl	8000ca0 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fccf 	bl	8000ca0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e19c      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4940      	ldr	r1, [pc, #256]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_RCC_OscConfig+0x2b0>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fcb2 	bl	8000ca0 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fcae 	bl	8000ca0 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e17b      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d030      	beq.n	80013cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d016      	beq.n	80013a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_RCC_OscConfig+0x2b4>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff fc92 	bl	8000ca0 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc8e 	bl	8000ca0 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e15b      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x200>
 800139e:	e015      	b.n	80013cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x2b4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fc7b 	bl	8000ca0 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc77 	bl	8000ca0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e144      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a0 	beq.w	800151a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RCC_OscConfig+0x2b8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d121      	bne.n	800145a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_RCC_OscConfig+0x2b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_RCC_OscConfig+0x2b8>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc3d 	bl	8000ca0 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e011      	b.n	800144e <HAL_RCC_OscConfig+0x2ce>
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	42470000 	.word	0x42470000
 8001434:	42470e80 	.word	0x42470e80
 8001438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143c:	f7ff fc30 	bl	8000ca0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0fd      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x4d4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x2f0>
 8001462:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	e01c      	b.n	80014aa <HAL_RCC_OscConfig+0x32a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d10c      	bne.n	8001492 <HAL_RCC_OscConfig+0x312>
 8001478:	4b77      	ldr	r3, [pc, #476]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	4a76      	ldr	r2, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6713      	str	r3, [r2, #112]	; 0x70
 8001484:	4b74      	ldr	r3, [pc, #464]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a73      	ldr	r2, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	e00b      	b.n	80014aa <HAL_RCC_OscConfig+0x32a>
 8001492:	4b71      	ldr	r3, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a70      	ldr	r2, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d015      	beq.n	80014de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbf5 	bl	8000ca0 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fbf1 	bl	8000ca0 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0bc      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ee      	beq.n	80014ba <HAL_RCC_OscConfig+0x33a>
 80014dc:	e014      	b.n	8001508 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbdf 	bl	8000ca0 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fbdb 	bl	8000ca0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e0a6      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d105      	bne.n	800151a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a51      	ldr	r2, [pc, #324]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8092 	beq.w	8001648 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d05c      	beq.n	80015ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d141      	bne.n	80015bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <HAL_RCC_OscConfig+0x4dc>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fbaf 	bl	8000ca0 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fbab 	bl	8000ca0 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e078      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	019b      	lsls	r3, r3, #6
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	3b01      	subs	r3, #1
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	061b      	lsls	r3, r3, #24
 8001588:	4933      	ldr	r1, [pc, #204]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x4dc>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb84 	bl	8000ca0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb80 	bl	8000ca0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e04d      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x41c>
 80015ba:	e045      	b.n	8001648 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x4dc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb6d 	bl	8000ca0 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb69 	bl	8000ca0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e036      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x44a>
 80015e8:	e02e      	b.n	8001648 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e029      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	429a      	cmp	r2, r3
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d115      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001624:	4293      	cmp	r3, r2
 8001626:	d10d      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	40023800 	.word	0x40023800
 800165c:	42470060 	.word	0x42470060

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff faa6 	bl	8000ca0 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff faa2 	bl	8000ca0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4601      	mov	r1, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	fa21 f303 	lsr.w	r3, r1, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f8be 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	08006058 	.word	0x08006058
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001842:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b04      	cmp	r3, #4
 800184c:	d007      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x32>
 800184e:	2b08      	cmp	r3, #8
 8001850:	d008      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x38>
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 808d 	bne.w	8001972 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <HAL_RCC_GetSysClockFreq+0x15c>)
 800185a:	60bb      	str	r3, [r7, #8]
       break;
 800185c:	e08c      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001860:	60bb      	str	r3, [r7, #8]
      break;
 8001862:	e089      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d023      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b42      	ldr	r3, [pc, #264]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	ea03 0501 	and.w	r5, r3, r1
 8001890:	ea04 0602 	and.w	r6, r4, r2
 8001894:	4a3d      	ldr	r2, [pc, #244]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001896:	fb02 f106 	mul.w	r1, r2, r6
 800189a:	2200      	movs	r2, #0
 800189c:	fb02 f205 	mul.w	r2, r2, r5
 80018a0:	440a      	add	r2, r1
 80018a2:	493a      	ldr	r1, [pc, #232]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 80018a4:	fba5 0101 	umull	r0, r1, r5, r1
 80018a8:	1853      	adds	r3, r2, r1
 80018aa:	4619      	mov	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4623      	mov	r3, r4
 80018b6:	f7fe fce3 	bl	8000280 <__aeabi_uldivmod>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e049      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	f04f 0400 	mov.w	r4, #0
 80018cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	ea03 0501 	and.w	r5, r3, r1
 80018d8:	ea04 0602 	and.w	r6, r4, r2
 80018dc:	4629      	mov	r1, r5
 80018de:	4632      	mov	r2, r6
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	0154      	lsls	r4, r2, #5
 80018ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ee:	014b      	lsls	r3, r1, #5
 80018f0:	4619      	mov	r1, r3
 80018f2:	4622      	mov	r2, r4
 80018f4:	1b49      	subs	r1, r1, r5
 80018f6:	eb62 0206 	sbc.w	r2, r2, r6
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	0194      	lsls	r4, r2, #6
 8001904:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001908:	018b      	lsls	r3, r1, #6
 800190a:	1a5b      	subs	r3, r3, r1
 800190c:	eb64 0402 	sbc.w	r4, r4, r2
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	00e2      	lsls	r2, r4, #3
 800191a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800191e:	00d9      	lsls	r1, r3, #3
 8001920:	460b      	mov	r3, r1
 8001922:	4614      	mov	r4, r2
 8001924:	195b      	adds	r3, r3, r5
 8001926:	eb44 0406 	adc.w	r4, r4, r6
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	02a2      	lsls	r2, r4, #10
 8001934:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001938:	0299      	lsls	r1, r3, #10
 800193a:	460b      	mov	r3, r1
 800193c:	4614      	mov	r4, r2
 800193e:	4618      	mov	r0, r3
 8001940:	4621      	mov	r1, r4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f04f 0400 	mov.w	r4, #0
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	f7fe fc98 	bl	8000280 <__aeabi_uldivmod>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	3301      	adds	r3, #1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	60bb      	str	r3, [r7, #8]
      break;
 8001970:	e002      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001974:	60bb      	str	r3, [r7, #8]
      break;
 8001976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001978:	68bb      	ldr	r3, [r7, #8]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	017d7840 	.word	0x017d7840

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019ac:	f7ff fff0 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019b0:	4601      	mov	r1, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08006068 	.word	0x08006068

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff ffdc 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019d8:	4601      	mov	r1, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08006068 	.word	0x08006068

080019f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	220f      	movs	r2, #15
 8001a06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_RCC_GetClockConfig+0x60>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 020f 	and.w	r2, r3, #15
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e01d      	b.n	8001aaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f815 	bl	8001ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 f968 	bl	8001d70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	d007      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d122      	bne.n	8001b6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d11b      	bne.n	8001b6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0202 	mvn.w	r2, #2
 8001b3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8ee 	bl	8001d32 <HAL_TIM_IC_CaptureCallback>
 8001b56:	e005      	b.n	8001b64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8e0 	bl	8001d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8f1 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d122      	bne.n	8001bbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d11b      	bne.n	8001bbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f06f 0204 	mvn.w	r2, #4
 8001b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8c4 	bl	8001d32 <HAL_TIM_IC_CaptureCallback>
 8001baa:	e005      	b.n	8001bb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f8b6 	bl	8001d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8c7 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d122      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11b      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0208 	mvn.w	r2, #8
 8001be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2204      	movs	r2, #4
 8001be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f89a 	bl	8001d32 <HAL_TIM_IC_CaptureCallback>
 8001bfe:	e005      	b.n	8001c0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f88c 	bl	8001d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f89d 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d122      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d11b      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0210 	mvn.w	r2, #16
 8001c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f870 	bl	8001d32 <HAL_TIM_IC_CaptureCallback>
 8001c52:	e005      	b.n	8001c60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f862 	bl	8001d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f873 	bl	8001d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10e      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f06f 0201 	mvn.w	r2, #1
 8001c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7fe fded 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d10e      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d107      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8e3 	bl	8001e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc8:	2b40      	cmp	r3, #64	; 0x40
 8001cca:	d10e      	bne.n	8001cea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d107      	bne.n	8001cea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f838 	bl	8001d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d10e      	bne.n	8001d16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d107      	bne.n	8001d16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0220 	mvn.w	r2, #32
 8001d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8ad 	bl	8001e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <TIM_Base_SetConfig+0xe4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00f      	beq.n	8001da8 <TIM_Base_SetConfig+0x38>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d00b      	beq.n	8001da8 <TIM_Base_SetConfig+0x38>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <TIM_Base_SetConfig+0xe8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <TIM_Base_SetConfig+0x38>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <TIM_Base_SetConfig+0xec>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d003      	beq.n	8001da8 <TIM_Base_SetConfig+0x38>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <TIM_Base_SetConfig+0xf0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d108      	bne.n	8001dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <TIM_Base_SetConfig+0xe4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01b      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d017      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <TIM_Base_SetConfig+0xe8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <TIM_Base_SetConfig+0xec>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00f      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <TIM_Base_SetConfig+0xf0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00b      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <TIM_Base_SetConfig+0xf4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <TIM_Base_SetConfig+0xf8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d003      	beq.n	8001dfa <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <TIM_Base_SetConfig+0xfc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d108      	bne.n	8001e0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <TIM_Base_SetConfig+0xe4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d103      	bne.n	8001e40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	615a      	str	r2, [r3, #20]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800
 8001e60:	40000c00 	.word	0x40000c00
 8001e64:	40014000 	.word	0x40014000
 8001e68:	40014400 	.word	0x40014400
 8001e6c:	40014800 	.word	0x40014800

08001e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03f      	b.n	8001f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fd1a 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f829 	bl	8001f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f76:	f023 030c 	bic.w	r3, r3, #12
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa2:	f040 818b 	bne.w	80022bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4ac1      	ldr	r2, [pc, #772]	; (80022b0 <UART_SetConfig+0x37c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d005      	beq.n	8001fbc <UART_SetConfig+0x88>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4abf      	ldr	r2, [pc, #764]	; (80022b4 <UART_SetConfig+0x380>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 80bd 	bne.w	8002136 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fbc:	f7ff fd08 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	f04f 0600 	mov.w	r6, #0
 8001fca:	46a8      	mov	r8, r5
 8001fcc:	46b1      	mov	r9, r6
 8001fce:	eb18 0308 	adds.w	r3, r8, r8
 8001fd2:	eb49 0409 	adc.w	r4, r9, r9
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	46a1      	mov	r9, r4
 8001fda:	eb18 0805 	adds.w	r8, r8, r5
 8001fde:	eb49 0906 	adc.w	r9, r9, r6
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ff2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ff6:	4688      	mov	r8, r1
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	eb18 0005 	adds.w	r0, r8, r5
 8001ffe:	eb49 0106 	adc.w	r1, r9, r6
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	461d      	mov	r5, r3
 8002008:	f04f 0600 	mov.w	r6, #0
 800200c:	196b      	adds	r3, r5, r5
 800200e:	eb46 0406 	adc.w	r4, r6, r6
 8002012:	461a      	mov	r2, r3
 8002014:	4623      	mov	r3, r4
 8002016:	f7fe f933 	bl	8000280 <__aeabi_uldivmod>
 800201a:	4603      	mov	r3, r0
 800201c:	460c      	mov	r4, r1
 800201e:	461a      	mov	r2, r3
 8002020:	4ba5      	ldr	r3, [pc, #660]	; (80022b8 <UART_SetConfig+0x384>)
 8002022:	fba3 2302 	umull	r2, r3, r3, r2
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	461d      	mov	r5, r3
 8002030:	f04f 0600 	mov.w	r6, #0
 8002034:	46a9      	mov	r9, r5
 8002036:	46b2      	mov	sl, r6
 8002038:	eb19 0309 	adds.w	r3, r9, r9
 800203c:	eb4a 040a 	adc.w	r4, sl, sl
 8002040:	4699      	mov	r9, r3
 8002042:	46a2      	mov	sl, r4
 8002044:	eb19 0905 	adds.w	r9, r9, r5
 8002048:	eb4a 0a06 	adc.w	sl, sl, r6
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800205c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002060:	4689      	mov	r9, r1
 8002062:	4692      	mov	sl, r2
 8002064:	eb19 0005 	adds.w	r0, r9, r5
 8002068:	eb4a 0106 	adc.w	r1, sl, r6
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	461d      	mov	r5, r3
 8002072:	f04f 0600 	mov.w	r6, #0
 8002076:	196b      	adds	r3, r5, r5
 8002078:	eb46 0406 	adc.w	r4, r6, r6
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	f7fe f8fe 	bl	8000280 <__aeabi_uldivmod>
 8002084:	4603      	mov	r3, r0
 8002086:	460c      	mov	r4, r1
 8002088:	461a      	mov	r2, r3
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <UART_SetConfig+0x384>)
 800208c:	fba3 1302 	umull	r1, r3, r3, r2
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	2164      	movs	r1, #100	; 0x64
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	3332      	adds	r3, #50	; 0x32
 800209e:	4a86      	ldr	r2, [pc, #536]	; (80022b8 <UART_SetConfig+0x384>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ac:	4498      	add	r8, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	461d      	mov	r5, r3
 80020b2:	f04f 0600 	mov.w	r6, #0
 80020b6:	46a9      	mov	r9, r5
 80020b8:	46b2      	mov	sl, r6
 80020ba:	eb19 0309 	adds.w	r3, r9, r9
 80020be:	eb4a 040a 	adc.w	r4, sl, sl
 80020c2:	4699      	mov	r9, r3
 80020c4:	46a2      	mov	sl, r4
 80020c6:	eb19 0905 	adds.w	r9, r9, r5
 80020ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020e2:	4689      	mov	r9, r1
 80020e4:	4692      	mov	sl, r2
 80020e6:	eb19 0005 	adds.w	r0, r9, r5
 80020ea:	eb4a 0106 	adc.w	r1, sl, r6
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	461d      	mov	r5, r3
 80020f4:	f04f 0600 	mov.w	r6, #0
 80020f8:	196b      	adds	r3, r5, r5
 80020fa:	eb46 0406 	adc.w	r4, r6, r6
 80020fe:	461a      	mov	r2, r3
 8002100:	4623      	mov	r3, r4
 8002102:	f7fe f8bd 	bl	8000280 <__aeabi_uldivmod>
 8002106:	4603      	mov	r3, r0
 8002108:	460c      	mov	r4, r1
 800210a:	461a      	mov	r2, r3
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <UART_SetConfig+0x384>)
 800210e:	fba3 1302 	umull	r1, r3, r3, r2
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2164      	movs	r1, #100	; 0x64
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	3332      	adds	r3, #50	; 0x32
 8002120:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <UART_SetConfig+0x384>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	f003 0207 	and.w	r2, r3, #7
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4442      	add	r2, r8
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e26f      	b.n	8002616 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002136:	f7ff fc37 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 800213a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	461d      	mov	r5, r3
 8002140:	f04f 0600 	mov.w	r6, #0
 8002144:	46a8      	mov	r8, r5
 8002146:	46b1      	mov	r9, r6
 8002148:	eb18 0308 	adds.w	r3, r8, r8
 800214c:	eb49 0409 	adc.w	r4, r9, r9
 8002150:	4698      	mov	r8, r3
 8002152:	46a1      	mov	r9, r4
 8002154:	eb18 0805 	adds.w	r8, r8, r5
 8002158:	eb49 0906 	adc.w	r9, r9, r6
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002168:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800216c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002170:	4688      	mov	r8, r1
 8002172:	4691      	mov	r9, r2
 8002174:	eb18 0005 	adds.w	r0, r8, r5
 8002178:	eb49 0106 	adc.w	r1, r9, r6
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	461d      	mov	r5, r3
 8002182:	f04f 0600 	mov.w	r6, #0
 8002186:	196b      	adds	r3, r5, r5
 8002188:	eb46 0406 	adc.w	r4, r6, r6
 800218c:	461a      	mov	r2, r3
 800218e:	4623      	mov	r3, r4
 8002190:	f7fe f876 	bl	8000280 <__aeabi_uldivmod>
 8002194:	4603      	mov	r3, r0
 8002196:	460c      	mov	r4, r1
 8002198:	461a      	mov	r2, r3
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <UART_SetConfig+0x384>)
 800219c:	fba3 2302 	umull	r2, r3, r3, r2
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	461d      	mov	r5, r3
 80021aa:	f04f 0600 	mov.w	r6, #0
 80021ae:	46a9      	mov	r9, r5
 80021b0:	46b2      	mov	sl, r6
 80021b2:	eb19 0309 	adds.w	r3, r9, r9
 80021b6:	eb4a 040a 	adc.w	r4, sl, sl
 80021ba:	4699      	mov	r9, r3
 80021bc:	46a2      	mov	sl, r4
 80021be:	eb19 0905 	adds.w	r9, r9, r5
 80021c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021da:	4689      	mov	r9, r1
 80021dc:	4692      	mov	sl, r2
 80021de:	eb19 0005 	adds.w	r0, r9, r5
 80021e2:	eb4a 0106 	adc.w	r1, sl, r6
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	461d      	mov	r5, r3
 80021ec:	f04f 0600 	mov.w	r6, #0
 80021f0:	196b      	adds	r3, r5, r5
 80021f2:	eb46 0406 	adc.w	r4, r6, r6
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	f7fe f841 	bl	8000280 <__aeabi_uldivmod>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	461a      	mov	r2, r3
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <UART_SetConfig+0x384>)
 8002206:	fba3 1302 	umull	r1, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2164      	movs	r1, #100	; 0x64
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <UART_SetConfig+0x384>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002226:	4498      	add	r8, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	461d      	mov	r5, r3
 800222c:	f04f 0600 	mov.w	r6, #0
 8002230:	46a9      	mov	r9, r5
 8002232:	46b2      	mov	sl, r6
 8002234:	eb19 0309 	adds.w	r3, r9, r9
 8002238:	eb4a 040a 	adc.w	r4, sl, sl
 800223c:	4699      	mov	r9, r3
 800223e:	46a2      	mov	sl, r4
 8002240:	eb19 0905 	adds.w	r9, r9, r5
 8002244:	eb4a 0a06 	adc.w	sl, sl, r6
 8002248:	f04f 0100 	mov.w	r1, #0
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800225c:	4689      	mov	r9, r1
 800225e:	4692      	mov	sl, r2
 8002260:	eb19 0005 	adds.w	r0, r9, r5
 8002264:	eb4a 0106 	adc.w	r1, sl, r6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	461d      	mov	r5, r3
 800226e:	f04f 0600 	mov.w	r6, #0
 8002272:	196b      	adds	r3, r5, r5
 8002274:	eb46 0406 	adc.w	r4, r6, r6
 8002278:	461a      	mov	r2, r3
 800227a:	4623      	mov	r3, r4
 800227c:	f7fe f800 	bl	8000280 <__aeabi_uldivmod>
 8002280:	4603      	mov	r3, r0
 8002282:	460c      	mov	r4, r1
 8002284:	461a      	mov	r2, r3
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <UART_SetConfig+0x384>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	2164      	movs	r1, #100	; 0x64
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3332      	adds	r3, #50	; 0x32
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <UART_SetConfig+0x384>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4442      	add	r2, r8
 80022ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80022ae:	e1b2      	b.n	8002616 <UART_SetConfig+0x6e2>
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40011400 	.word	0x40011400
 80022b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4ad7      	ldr	r2, [pc, #860]	; (8002620 <UART_SetConfig+0x6ec>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d005      	beq.n	80022d2 <UART_SetConfig+0x39e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4ad6      	ldr	r2, [pc, #856]	; (8002624 <UART_SetConfig+0x6f0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 80d1 	bne.w	8002474 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d2:	f7ff fb7d 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 80022d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	469a      	mov	sl, r3
 80022dc:	f04f 0b00 	mov.w	fp, #0
 80022e0:	46d0      	mov	r8, sl
 80022e2:	46d9      	mov	r9, fp
 80022e4:	eb18 0308 	adds.w	r3, r8, r8
 80022e8:	eb49 0409 	adc.w	r4, r9, r9
 80022ec:	4698      	mov	r8, r3
 80022ee:	46a1      	mov	r9, r4
 80022f0:	eb18 080a 	adds.w	r8, r8, sl
 80022f4:	eb49 090b 	adc.w	r9, r9, fp
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002304:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002308:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800230c:	4688      	mov	r8, r1
 800230e:	4691      	mov	r9, r2
 8002310:	eb1a 0508 	adds.w	r5, sl, r8
 8002314:	eb4b 0609 	adc.w	r6, fp, r9
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	f04f 0400 	mov.w	r4, #0
 800232a:	0094      	lsls	r4, r2, #2
 800232c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002330:	008b      	lsls	r3, r1, #2
 8002332:	461a      	mov	r2, r3
 8002334:	4623      	mov	r3, r4
 8002336:	4628      	mov	r0, r5
 8002338:	4631      	mov	r1, r6
 800233a:	f7fd ffa1 	bl	8000280 <__aeabi_uldivmod>
 800233e:	4603      	mov	r3, r0
 8002340:	460c      	mov	r4, r1
 8002342:	461a      	mov	r2, r3
 8002344:	4bb8      	ldr	r3, [pc, #736]	; (8002628 <UART_SetConfig+0x6f4>)
 8002346:	fba3 2302 	umull	r2, r3, r3, r2
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	469b      	mov	fp, r3
 8002354:	f04f 0c00 	mov.w	ip, #0
 8002358:	46d9      	mov	r9, fp
 800235a:	46e2      	mov	sl, ip
 800235c:	eb19 0309 	adds.w	r3, r9, r9
 8002360:	eb4a 040a 	adc.w	r4, sl, sl
 8002364:	4699      	mov	r9, r3
 8002366:	46a2      	mov	sl, r4
 8002368:	eb19 090b 	adds.w	r9, r9, fp
 800236c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800237c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002384:	4689      	mov	r9, r1
 8002386:	4692      	mov	sl, r2
 8002388:	eb1b 0509 	adds.w	r5, fp, r9
 800238c:	eb4c 060a 	adc.w	r6, ip, sl
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	f04f 0400 	mov.w	r4, #0
 80023a2:	0094      	lsls	r4, r2, #2
 80023a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023a8:	008b      	lsls	r3, r1, #2
 80023aa:	461a      	mov	r2, r3
 80023ac:	4623      	mov	r3, r4
 80023ae:	4628      	mov	r0, r5
 80023b0:	4631      	mov	r1, r6
 80023b2:	f7fd ff65 	bl	8000280 <__aeabi_uldivmod>
 80023b6:	4603      	mov	r3, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b9a      	ldr	r3, [pc, #616]	; (8002628 <UART_SetConfig+0x6f4>)
 80023be:	fba3 1302 	umull	r1, r3, r3, r2
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2164      	movs	r1, #100	; 0x64
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	3332      	adds	r3, #50	; 0x32
 80023d0:	4a95      	ldr	r2, [pc, #596]	; (8002628 <UART_SetConfig+0x6f4>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023dc:	4498      	add	r8, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	469b      	mov	fp, r3
 80023e2:	f04f 0c00 	mov.w	ip, #0
 80023e6:	46d9      	mov	r9, fp
 80023e8:	46e2      	mov	sl, ip
 80023ea:	eb19 0309 	adds.w	r3, r9, r9
 80023ee:	eb4a 040a 	adc.w	r4, sl, sl
 80023f2:	4699      	mov	r9, r3
 80023f4:	46a2      	mov	sl, r4
 80023f6:	eb19 090b 	adds.w	r9, r9, fp
 80023fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800240a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800240e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002412:	4689      	mov	r9, r1
 8002414:	4692      	mov	sl, r2
 8002416:	eb1b 0509 	adds.w	r5, fp, r9
 800241a:	eb4c 060a 	adc.w	r6, ip, sl
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f04f 0400 	mov.w	r4, #0
 8002430:	0094      	lsls	r4, r2, #2
 8002432:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002436:	008b      	lsls	r3, r1, #2
 8002438:	461a      	mov	r2, r3
 800243a:	4623      	mov	r3, r4
 800243c:	4628      	mov	r0, r5
 800243e:	4631      	mov	r1, r6
 8002440:	f7fd ff1e 	bl	8000280 <__aeabi_uldivmod>
 8002444:	4603      	mov	r3, r0
 8002446:	460c      	mov	r4, r1
 8002448:	461a      	mov	r2, r3
 800244a:	4b77      	ldr	r3, [pc, #476]	; (8002628 <UART_SetConfig+0x6f4>)
 800244c:	fba3 1302 	umull	r1, r3, r3, r2
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	2164      	movs	r1, #100	; 0x64
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	3332      	adds	r3, #50	; 0x32
 800245e:	4a72      	ldr	r2, [pc, #456]	; (8002628 <UART_SetConfig+0x6f4>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4442      	add	r2, r8
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	e0d0      	b.n	8002616 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002474:	f7ff fa98 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 8002478:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	469a      	mov	sl, r3
 800247e:	f04f 0b00 	mov.w	fp, #0
 8002482:	46d0      	mov	r8, sl
 8002484:	46d9      	mov	r9, fp
 8002486:	eb18 0308 	adds.w	r3, r8, r8
 800248a:	eb49 0409 	adc.w	r4, r9, r9
 800248e:	4698      	mov	r8, r3
 8002490:	46a1      	mov	r9, r4
 8002492:	eb18 080a 	adds.w	r8, r8, sl
 8002496:	eb49 090b 	adc.w	r9, r9, fp
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024ae:	4688      	mov	r8, r1
 80024b0:	4691      	mov	r9, r2
 80024b2:	eb1a 0508 	adds.w	r5, sl, r8
 80024b6:	eb4b 0609 	adc.w	r6, fp, r9
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4619      	mov	r1, r3
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	f04f 0400 	mov.w	r4, #0
 80024cc:	0094      	lsls	r4, r2, #2
 80024ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024d2:	008b      	lsls	r3, r1, #2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4623      	mov	r3, r4
 80024d8:	4628      	mov	r0, r5
 80024da:	4631      	mov	r1, r6
 80024dc:	f7fd fed0 	bl	8000280 <__aeabi_uldivmod>
 80024e0:	4603      	mov	r3, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b50      	ldr	r3, [pc, #320]	; (8002628 <UART_SetConfig+0x6f4>)
 80024e8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	469b      	mov	fp, r3
 80024f6:	f04f 0c00 	mov.w	ip, #0
 80024fa:	46d9      	mov	r9, fp
 80024fc:	46e2      	mov	sl, ip
 80024fe:	eb19 0309 	adds.w	r3, r9, r9
 8002502:	eb4a 040a 	adc.w	r4, sl, sl
 8002506:	4699      	mov	r9, r3
 8002508:	46a2      	mov	sl, r4
 800250a:	eb19 090b 	adds.w	r9, r9, fp
 800250e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002512:	f04f 0100 	mov.w	r1, #0
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002526:	4689      	mov	r9, r1
 8002528:	4692      	mov	sl, r2
 800252a:	eb1b 0509 	adds.w	r5, fp, r9
 800252e:	eb4c 060a 	adc.w	r6, ip, sl
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4619      	mov	r1, r3
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	0094      	lsls	r4, r2, #2
 8002546:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800254a:	008b      	lsls	r3, r1, #2
 800254c:	461a      	mov	r2, r3
 800254e:	4623      	mov	r3, r4
 8002550:	4628      	mov	r0, r5
 8002552:	4631      	mov	r1, r6
 8002554:	f7fd fe94 	bl	8000280 <__aeabi_uldivmod>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	461a      	mov	r2, r3
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <UART_SetConfig+0x6f4>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	3332      	adds	r3, #50	; 0x32
 8002572:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <UART_SetConfig+0x6f4>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257e:	4498      	add	r8, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	469b      	mov	fp, r3
 8002584:	f04f 0c00 	mov.w	ip, #0
 8002588:	46d9      	mov	r9, fp
 800258a:	46e2      	mov	sl, ip
 800258c:	eb19 0309 	adds.w	r3, r9, r9
 8002590:	eb4a 040a 	adc.w	r4, sl, sl
 8002594:	4699      	mov	r9, r3
 8002596:	46a2      	mov	sl, r4
 8002598:	eb19 090b 	adds.w	r9, r9, fp
 800259c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025b4:	4689      	mov	r9, r1
 80025b6:	4692      	mov	sl, r2
 80025b8:	eb1b 0509 	adds.w	r5, fp, r9
 80025bc:	eb4c 060a 	adc.w	r6, ip, sl
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f04f 0400 	mov.w	r4, #0
 80025d2:	0094      	lsls	r4, r2, #2
 80025d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025d8:	008b      	lsls	r3, r1, #2
 80025da:	461a      	mov	r2, r3
 80025dc:	4623      	mov	r3, r4
 80025de:	4628      	mov	r0, r5
 80025e0:	4631      	mov	r1, r6
 80025e2:	f7fd fe4d 	bl	8000280 <__aeabi_uldivmod>
 80025e6:	4603      	mov	r3, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	461a      	mov	r2, r3
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <UART_SetConfig+0x6f4>)
 80025ee:	fba3 1302 	umull	r1, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2164      	movs	r1, #100	; 0x64
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	3332      	adds	r3, #50	; 0x32
 8002600:	4a09      	ldr	r2, [pc, #36]	; (8002628 <UART_SetConfig+0x6f4>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4442      	add	r2, r8
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	e7ff      	b.n	8002616 <UART_SetConfig+0x6e2>
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	51eb851f 	.word	0x51eb851f

0800262c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <vApplicationGetIdleTaskMemory+0x2c>)
 800263c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <vApplicationGetIdleTaskMemory+0x30>)
 8002642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	601a      	str	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	200000a0 	.word	0x200000a0
 800265c:	2000015c 	.word	0x2000015c

08002660 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <vApplicationGetTimerTaskMemory+0x2c>)
 8002670:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <vApplicationGetTimerTaskMemory+0x30>)
 8002676:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267e:	601a      	str	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	2000035c 	.word	0x2000035c
 8002690:	20000418 	.word	0x20000418

08002694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 0208 	add.w	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 0208 	add.w	r2, r3, #8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f103 0208 	add.w	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d103      	bne.n	8002756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	e00c      	b.n	8002770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3308      	adds	r3, #8
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e002      	b.n	8002764 <vListInsert+0x2e>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d2f6      	bcs.n	800275e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6892      	ldr	r2, [r2, #8]
 80027be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6852      	ldr	r2, [r2, #4]
 80027c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d103      	bne.n	80027dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1e5a      	subs	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	e7fe      	b.n	8002822 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002824:	f002 f95a 	bl	8004adc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	441a      	add	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	3b01      	subs	r3, #1
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	22ff      	movs	r2, #255	; 0xff
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d114      	bne.n	80028a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01a      	beq.n	80028b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3310      	adds	r3, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fa22 	bl	8003cd0 <xTaskRemoveFromEventList>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <xQueueGenericReset+0xcc>)
 8002894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	e009      	b.n	80028b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3310      	adds	r3, #16
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fef3 	bl	8002694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3324      	adds	r3, #36	; 0x24
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff feee 	bl	8002694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028b8:	f002 f93e 	bl	8004b38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08e      	sub	sp, #56	; 0x38
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <xQueueGenericCreateStatic+0x28>
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f2:	e7fe      	b.n	80028f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <xQueueGenericCreateStatic+0x42>
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	e7fe      	b.n	800290c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <xQueueGenericCreateStatic+0x4e>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <xQueueGenericCreateStatic+0x52>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericCreateStatic+0x54>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <xQueueGenericCreateStatic+0x6c>
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	e7fe      	b.n	8002936 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <xQueueGenericCreateStatic+0x78>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <xQueueGenericCreateStatic+0x7c>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <xQueueGenericCreateStatic+0x7e>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <xQueueGenericCreateStatic+0x96>
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e7fe      	b.n	8002960 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002962:	2354      	movs	r3, #84	; 0x54
 8002964:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b54      	cmp	r3, #84	; 0x54
 800296a:	d009      	beq.n	8002980 <xQueueGenericCreateStatic+0xb4>
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e7fe      	b.n	800297e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002980:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002994:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f844 	bl	8002a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3730      	adds	r7, #48	; 0x30
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <xQueueGenericCreate+0x28>
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e004      	b.n	80029f0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3354      	adds	r3, #84	; 0x54
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 f98b 	bl	8004d10 <pvPortMalloc>
 80029fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3354      	adds	r3, #84	; 0x54
 8002a0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a14:	79fa      	ldrb	r2, [r7, #7]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f805 	bl	8002a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a26:	69bb      	ldr	r3, [r7, #24]
	}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e002      	b.n	8002a52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a5e:	2101      	movs	r1, #1
 8002a60:	69b8      	ldr	r0, [r7, #24]
 8002a62:	f7ff fecb 	bl	80027fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2200      	movs	r2, #0
 8002a72:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <xQueueGenericSend+0x30>
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	e7fe      	b.n	8002aaa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSend+0x3e>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <xQueueGenericSend+0x42>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericSend+0x44>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <xQueueGenericSend+0x5c>
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	e7fe      	b.n	8002ad6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d103      	bne.n	8002ae6 <xQueueGenericSend+0x6a>
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <xQueueGenericSend+0x6e>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueGenericSend+0x70>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <xQueueGenericSend+0x88>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e7fe      	b.n	8002b02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b04:	f001 faa0 	bl	8004048 <xTaskGetSchedulerState>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <xQueueGenericSend+0x98>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <xQueueGenericSend+0x9c>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <xQueueGenericSend+0x9e>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <xQueueGenericSend+0xb6>
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b32:	f001 ffd3 	bl	8004adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <xQueueGenericSend+0xcc>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d146      	bne.n	8002bd6 <xQueueGenericSend+0x15a>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b54:	f000 fa2c 	bl	8002fb0 <prvCopyDataToQueue>
 8002b58:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d015      	beq.n	8002b8e <xQueueGenericSend+0x112>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d102      	bne.n	8002b6e <xQueueGenericSend+0xf2>
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d12f      	bne.n	8002bce <xQueueGenericSend+0x152>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b72:	f000 fbda 	bl	800332a <prvNotifyQueueSetContainer>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d028      	beq.n	8002bce <xQueueGenericSend+0x152>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <xQueueGenericSend+0x22c>)
 8002b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	e01f      	b.n	8002bce <xQueueGenericSend+0x152>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <xQueueGenericSend+0x13c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	3324      	adds	r3, #36	; 0x24
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 f898 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <xQueueGenericSend+0x152>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002ba6:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <xQueueGenericSend+0x22c>)
 8002ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	e00a      	b.n	8002bce <xQueueGenericSend+0x152>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <xQueueGenericSend+0x152>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <xQueueGenericSend+0x22c>)
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bce:	f001 ffb3 	bl	8004b38 <vPortExitCritical>
				return pdPASS;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e063      	b.n	8002c9e <xQueueGenericSend+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <xQueueGenericSend+0x168>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bdc:	f001 ffac 	bl	8004b38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e05c      	b.n	8002c9e <xQueueGenericSend+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <xQueueGenericSend+0x17c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8d0 	bl	8003d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bf8:	f001 ff9e 	bl	8004b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bfc:	f000 fe44 	bl	8003888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c00:	f001 ff6c 	bl	8004adc <vPortEnterCritical>
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d103      	bne.n	8002c1a <xQueueGenericSend+0x19e>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d103      	bne.n	8002c30 <xQueueGenericSend+0x1b4>
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c30:	f001 ff82 	bl	8004b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c34:	1d3a      	adds	r2, r7, #4
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 f8bf 	bl	8003dc0 <xTaskCheckForTimeOut>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d124      	bne.n	8002c92 <xQueueGenericSend+0x216>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4a:	f000 fab7 	bl	80031bc <prvIsQueueFull>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d018      	beq.n	8002c86 <xQueueGenericSend+0x20a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	3310      	adds	r3, #16
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 ffe9 	bl	8003c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c64:	f000 fa34 	bl	80030d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c68:	f000 fe1c 	bl	80038a4 <xTaskResumeAll>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f af5f 	bne.w	8002b32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <xQueueGenericSend+0x22c>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	e755      	b.n	8002b32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c88:	f000 fa22 	bl	80030d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8c:	f000 fe0a 	bl	80038a4 <xTaskResumeAll>
 8002c90:	e74f      	b.n	8002b32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c94:	f000 fa1c 	bl	80030d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c98:	f000 fe04 	bl	80038a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c9c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3738      	adds	r7, #56	; 0x38
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <xQueueGenericSendFromISR+0x2c>
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	e7fe      	b.n	8002cd6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x3a>
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <xQueueGenericSendFromISR+0x3e>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericSendFromISR+0x40>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <xQueueGenericSendFromISR+0x58>
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	e7fe      	b.n	8002d02 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d103      	bne.n	8002d12 <xQueueGenericSendFromISR+0x66>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <xQueueGenericSendFromISR+0x6a>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueGenericSendFromISR+0x6c>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <xQueueGenericSendFromISR+0x84>
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e7fe      	b.n	8002d2e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d30:	f001 ffb0 	bl	8004c94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d34:	f3ef 8211 	mrs	r2, BASEPRI
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	61ba      	str	r2, [r7, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d302      	bcc.n	8002d62 <xQueueGenericSendFromISR+0xb6>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d13e      	bne.n	8002de0 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d72:	f000 f91d 	bl	8002fb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d124      	bne.n	8002dca <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d8c:	f000 facd 	bl	800332a <prvNotifyQueueSetContainer>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d021      	beq.n	8002dda <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01e      	beq.n	8002dda <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e01a      	b.n	8002dda <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 ff8d 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00e      	beq.n	8002dda <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e007      	b.n	8002dda <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	b25a      	sxtb	r2, r3
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002dde:	e001      	b.n	8002de4 <xQueueGenericSendFromISR+0x138>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3738      	adds	r7, #56	; 0x38
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <xQueueReceive+0x2e>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	e7fe      	b.n	8002e24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <xQueueReceive+0x3c>
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <xQueueReceive+0x40>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <xQueueReceive+0x42>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <xQueueReceive+0x5a>
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	e7fe      	b.n	8002e50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e52:	f001 f8f9 	bl	8004048 <xTaskGetSchedulerState>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <xQueueReceive+0x6a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <xQueueReceive+0x6e>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <xQueueReceive+0x70>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <xQueueReceive+0x88>
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e7fe      	b.n	8002e7e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e80:	f001 fe2c 	bl	8004adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01f      	beq.n	8002ed0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e94:	f000 f8f6 	bl	8003084 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1e5a      	subs	r2, r3, #1
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00f      	beq.n	8002ec8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	3310      	adds	r3, #16
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ff0f 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <xQueueReceive+0x1b4>)
 8002eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ec8:	f001 fe36 	bl	8004b38 <vPortExitCritical>
				return pdPASS;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e069      	b.n	8002fa4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ed6:	f001 fe2f 	bl	8004b38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e062      	b.n	8002fa4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 ff53 	bl	8003d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ef2:	f001 fe21 	bl	8004b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ef6:	f000 fcc7 	bl	8003888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002efa:	f001 fdef 	bl	8004adc <vPortEnterCritical>
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d103      	bne.n	8002f14 <xQueueReceive+0x11c>
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d103      	bne.n	8002f2a <xQueueReceive+0x132>
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f2a:	f001 fe05 	bl	8004b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f2e:	1d3a      	adds	r2, r7, #4
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff42 	bl	8003dc0 <xTaskCheckForTimeOut>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d123      	bne.n	8002f8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f44:	f000 f924 	bl	8003190 <prvIsQueueEmpty>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d017      	beq.n	8002f7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	3324      	adds	r3, #36	; 0x24
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fe6c 	bl	8003c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5e:	f000 f8b7 	bl	80030d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f62:	f000 fc9f 	bl	80038a4 <xTaskResumeAll>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d189      	bne.n	8002e80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <xQueueReceive+0x1b4>)
 8002f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	e780      	b.n	8002e80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f80:	f000 f8a6 	bl	80030d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f84:	f000 fc8e 	bl	80038a4 <xTaskResumeAll>
 8002f88:	e77a      	b.n	8002e80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8c:	f000 f8a0 	bl	80030d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f90:	f000 fc88 	bl	80038a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f96:	f000 f8fb 	bl	8003190 <prvIsQueueEmpty>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f43f af6f 	beq.w	8002e80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fa2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	; 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d14d      	bne.n	8003072 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 f852 	bl	8004084 <xTaskPriorityDisinherit>
 8002fe0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	e043      	b.n	8003072 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d119      	bne.n	8003024 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6858      	ldr	r0, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	f002 f952 	bl	80052a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	441a      	add	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	d32b      	bcc.n	8003072 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	e026      	b.n	8003072 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68d8      	ldr	r0, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	461a      	mov	r2, r3
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	f002 f938 	bl	80052a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	425b      	negs	r3, r3
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	425b      	negs	r3, r3
 800305a:	441a      	add	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d105      	bne.n	8003072 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3b01      	subs	r3, #1
 8003070:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800307a:	697b      	ldr	r3, [r7, #20]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	441a      	add	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d303      	bcc.n	80030b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68d9      	ldr	r1, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	461a      	mov	r2, r3
 80030c2:	6838      	ldr	r0, [r7, #0]
 80030c4:	f002 f8ee 	bl	80052a4 <memcpy>
	}
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030d8:	f001 fd00 	bl	8004adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030e4:	e01f      	b.n	8003126 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 80030ee:	2100      	movs	r1, #0
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f91a 	bl	800332a <prvNotifyQueueSetContainer>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80030fc:	f000 fec0 	bl	8003e80 <vTaskMissedYield>
 8003100:	e00d      	b.n	800311e <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3324      	adds	r3, #36	; 0x24
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fdde 	bl	8003cd0 <xTaskRemoveFromEventList>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800311a:	f000 feb1 	bl	8003e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	3b01      	subs	r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	dcdb      	bgt.n	80030e6 <prvUnlockQueue+0x16>
 800312e:	e000      	b.n	8003132 <prvUnlockQueue+0x62>
						break;
 8003130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800313a:	f001 fcfd 	bl	8004b38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800313e:	f001 fccd 	bl	8004adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800314a:	e011      	b.n	8003170 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fdb9 	bl	8003cd0 <xTaskRemoveFromEventList>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8003164:	f000 fe8c 	bl	8003e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	3b01      	subs	r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003174:	2b00      	cmp	r3, #0
 8003176:	dce9      	bgt.n	800314c <prvUnlockQueue+0x7c>
 8003178:	e000      	b.n	800317c <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 800317a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003184:	f001 fcd8 	bl	8004b38 <vPortExitCritical>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003198:	f001 fca0 	bl	8004adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e001      	b.n	80031ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ae:	f001 fcc3 	bl	8004b38 <vPortExitCritical>

	return xReturn;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031c4:	f001 fc8a 	bl	8004adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d102      	bne.n	80031da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031de:	f001 fcab 	bl	8004b38 <vPortExitCritical>

	return xReturn;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e014      	b.n	8003226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031fc:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <vQueueAddToRegistry+0x4c>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003208:	490b      	ldr	r1, [pc, #44]	; (8003238 <vQueueAddToRegistry+0x4c>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <vQueueAddToRegistry+0x4c>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800321e:	e005      	b.n	800322c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b07      	cmp	r3, #7
 800322a:	d9e7      	bls.n	80031fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20004af4 	.word	0x20004af4

0800323c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800324c:	f001 fc46 	bl	8004adc <vPortEnterCritical>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003256:	b25b      	sxtb	r3, r3
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d103      	bne.n	8003266 <vQueueWaitForMessageRestricted+0x2a>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800326c:	b25b      	sxtb	r3, r3
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d103      	bne.n	800327c <vQueueWaitForMessageRestricted+0x40>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800327c:	f001 fc5c 	bl	8004b38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fcf3 	bl	8003c7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff1a 	bl	80030d0 <prvUnlockQueue>
	}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 80032ac:	2200      	movs	r2, #0
 80032ae:	2104      	movs	r1, #4
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fb7e 	bl	80029b2 <xQueueGenericCreate>
 80032b6:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 80032b8:	68fb      	ldr	r3, [r7, #12]
	}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80032cc:	f001 fc06 	bl	8004adc <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e00b      	b.n	80032f6 <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e004      	b.n	80032f6 <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 80032f2:	2301      	movs	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80032f6:	f001 fc1f 	bl	8004b38 <vPortExitCritical>

		return xReturn;
 80032fa:	68fb      	ldr	r3, [r7, #12]
	}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fd6c 	bl	8002df8 <xQueueReceive>
		return xReturn;
 8003320:	68fb      	ldr	r3, [r7, #12]
	}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 800332a:	b580      	push	{r7, lr}
 800332c:	b088      	sub	sp, #32
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <prvNotifyQueueSetContainer+0x2e>
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e7fe      	b.n	8003356 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	429a      	cmp	r2, r3
 8003362:	d309      	bcc.n	8003378 <prvNotifyQueueSetContainer+0x4e>
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e7fe      	b.n	8003376 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	429a      	cmp	r2, r3
 8003382:	d225      	bcs.n	80033d0 <prvNotifyQueueSetContainer+0xa6>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	69b8      	ldr	r0, [r7, #24]
 8003394:	f7ff fe0c 	bl	8002fb0 <prvCopyDataToQueue>
 8003398:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 800339a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d10e      	bne.n	80033c2 <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <prvNotifyQueueSetContainer+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fc8d 	bl	8003cd0 <xTaskRemoveFromEventList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <prvNotifyQueueSetContainer+0xa6>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80033bc:	2301      	movs	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	e006      	b.n	80033d0 <prvNotifyQueueSetContainer+0xa6>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	b25a      	sxtb	r2, r3
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033d0:	69fb      	ldr	r3, [r7, #28]
	}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08e      	sub	sp, #56	; 0x38
 80033de:	af04      	add	r7, sp, #16
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <xTaskCreateStatic+0x28>
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	e7fe      	b.n	8003400 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <xTaskCreateStatic+0x42>
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e7fe      	b.n	800341a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800341c:	23bc      	movs	r3, #188	; 0xbc
 800341e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2bbc      	cmp	r3, #188	; 0xbc
 8003424:	d009      	beq.n	800343a <xTaskCreateStatic+0x60>
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e7fe      	b.n	8003438 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800343a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01e      	beq.n	8003480 <xTaskCreateStatic+0xa6>
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003450:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	2202      	movs	r2, #2
 8003456:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800345a:	2300      	movs	r3, #0
 800345c:	9303      	str	r3, [sp, #12]
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	9302      	str	r3, [sp, #8]
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f850 	bl	8003518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800347a:	f000 f8f3 	bl	8003664 <prvAddNewTaskToReadyList>
 800347e:	e001      	b.n	8003484 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003484:	697b      	ldr	r3, [r7, #20]
	}
 8003486:	4618      	mov	r0, r3
 8003488:	3728      	adds	r7, #40	; 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08c      	sub	sp, #48	; 0x30
 8003492:	af04      	add	r7, sp, #16
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fc34 	bl	8004d10 <pvPortMalloc>
 80034a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034b0:	20bc      	movs	r0, #188	; 0xbc
 80034b2:	f001 fc2d 	bl	8004d10 <pvPortMalloc>
 80034b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
 80034c4:	e005      	b.n	80034d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f001 fce4 	bl	8004e94 <vPortFree>
 80034cc:	e001      	b.n	80034d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9303      	str	r3, [sp, #12]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	9302      	str	r3, [sp, #8]
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f80e 	bl	8003518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034fc:	69f8      	ldr	r0, [r7, #28]
 80034fe:	f000 f8b1 	bl	8003664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e002      	b.n	800350e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800350e:	69bb      	ldr	r3, [r7, #24]
	}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	461a      	mov	r2, r3
 8003530:	21a5      	movs	r1, #165	; 0xa5
 8003532:	f001 fec2 	bl	80052ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003540:	3b01      	subs	r3, #1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f023 0307 	bic.w	r3, r3, #7
 800354e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <prvInitialiseNewTask+0x56>
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e7fe      	b.n	800356c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01f      	beq.n	80035b4 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	e012      	b.n	80035a0 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	7819      	ldrb	r1, [r3, #0]
 8003582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	3334      	adds	r3, #52	; 0x34
 800358a:	460a      	mov	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	d9e9      	bls.n	800357a <prvInitialiseNewTask+0x62>
 80035a6:	e000      	b.n	80035aa <prvInitialiseNewTask+0x92>
			{
				break;
 80035a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b2:	e003      	b.n	80035bc <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2b37      	cmp	r3, #55	; 0x37
 80035c0:	d901      	bls.n	80035c6 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035c2:	2337      	movs	r3, #55	; 0x37
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3304      	adds	r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f879 	bl	80026d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	3318      	adds	r3, #24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f874 	bl	80026d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2200      	movs	r2, #0
 8003606:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2200      	movs	r2, #0
 800360e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	3354      	adds	r3, #84	; 0x54
 8003616:	2260      	movs	r2, #96	; 0x60
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fe4d 	bl	80052ba <memset>
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <prvInitialiseNewTask+0x140>)
 8003624:	659a      	str	r2, [r3, #88]	; 0x58
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	4a0c      	ldr	r2, [pc, #48]	; (800365c <prvInitialiseNewTask+0x144>)
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <prvInitialiseNewTask+0x148>)
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	69b8      	ldr	r0, [r7, #24]
 8003638:	f001 f92a 	bl	8004890 <pxPortInitialiseStack>
 800363c:	4602      	mov	r2, r0
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800364e:	bf00      	nop
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	08006090 	.word	0x08006090
 800365c:	080060b0 	.word	0x080060b0
 8003660:	08006070 	.word	0x08006070

08003664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800366c:	f001 fa36 	bl	8004adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003670:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <prvAddNewTaskToReadyList+0xc4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <prvAddNewTaskToReadyList+0xc4>)
 8003678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003682:	4a2a      	ldr	r2, [pc, #168]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <prvAddNewTaskToReadyList+0xc4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d110      	bne.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003690:	f000 fc1a 	bl	8003ec8 <prvInitialiseTaskLists>
 8003694:	e00d      	b.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <prvAddNewTaskToReadyList+0xcc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800369e:	4b23      	ldr	r3, [pc, #140]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d802      	bhi.n	80036b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036ac:	4a1f      	ldr	r2, [pc, #124]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <prvAddNewTaskToReadyList+0xd0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <prvAddNewTaskToReadyList+0xd0>)
 80036ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <prvAddNewTaskToReadyList+0xd0>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <prvAddNewTaskToReadyList+0xd4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d903      	bls.n	80036d8 <prvAddNewTaskToReadyList+0x74>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <prvAddNewTaskToReadyList+0xd4>)
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <prvAddNewTaskToReadyList+0xd8>)
 80036e6:	441a      	add	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f7fe fffd 	bl	80026ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036f4:	f001 fa20 	bl	8004b38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <prvAddNewTaskToReadyList+0xcc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <prvAddNewTaskToReadyList+0xc8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	429a      	cmp	r2, r3
 800370c:	d207      	bcs.n	800371e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <prvAddNewTaskToReadyList+0xdc>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000cec 	.word	0x20000cec
 800372c:	20000818 	.word	0x20000818
 8003730:	20000cf8 	.word	0x20000cf8
 8003734:	20000d08 	.word	0x20000d08
 8003738:	20000cf4 	.word	0x20000cf4
 800373c:	2000081c 	.word	0x2000081c
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <vTaskDelay+0x60>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <vTaskDelay+0x2e>
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	e7fe      	b.n	8003770 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003772:	f000 f889 	bl	8003888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003776:	2100      	movs	r1, #0
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fcef 	bl	800415c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800377e:	f000 f891 	bl	80038a4 <xTaskResumeAll>
 8003782:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <vTaskDelay+0x64>)
 800378c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000d14 	.word	0x20000d14
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ba:	463a      	mov	r2, r7
 80037bc:	1d39      	adds	r1, r7, #4
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff32 	bl	800262c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037c8:	6839      	ldr	r1, [r7, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	9202      	str	r2, [sp, #8]
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	460a      	mov	r2, r1
 80037da:	4923      	ldr	r1, [pc, #140]	; (8003868 <vTaskStartScheduler+0xbc>)
 80037dc:	4823      	ldr	r0, [pc, #140]	; (800386c <vTaskStartScheduler+0xc0>)
 80037de:	f7ff fdfc 	bl	80033da <xTaskCreateStatic>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <vTaskStartScheduler+0xc4>)
 80037e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <vTaskStartScheduler+0xc4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037f0:	2301      	movs	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e001      	b.n	80037fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003800:	f000 fd00 	bl	8004204 <xTimerCreateTimerTask>
 8003804:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d11a      	bne.n	8003842 <vTaskStartScheduler+0x96>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <vTaskStartScheduler+0xc8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3354      	adds	r3, #84	; 0x54
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <vTaskStartScheduler+0xcc>)
 8003826:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <vTaskStartScheduler+0xd0>)
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <vTaskStartScheduler+0xd4>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <vTaskStartScheduler+0xd8>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800383c:	f001 f8b0 	bl	80049a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003840:	e00d      	b.n	800385e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d109      	bne.n	800385e <vTaskStartScheduler+0xb2>
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e7fe      	b.n	800385c <vTaskStartScheduler+0xb0>
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	08006040 	.word	0x08006040
 800386c:	08003e99 	.word	0x08003e99
 8003870:	20000d10 	.word	0x20000d10
 8003874:	20000818 	.word	0x20000818
 8003878:	20000010 	.word	0x20000010
 800387c:	20000d0c 	.word	0x20000d0c
 8003880:	20000cf8 	.word	0x20000cf8
 8003884:	20000cf0 	.word	0x20000cf0

08003888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <vTaskSuspendAll+0x18>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <vTaskSuspendAll+0x18>)
 8003894:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20000d14 	.word	0x20000d14

080038a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <xTaskResumeAll+0x114>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <xTaskResumeAll+0x2a>
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	e7fe      	b.n	80038cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038ce:	f001 f905 	bl	8004adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038d2:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <xTaskResumeAll+0x114>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <xTaskResumeAll+0x114>)
 80038da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <xTaskResumeAll+0x114>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d162      	bne.n	80039aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <xTaskResumeAll+0x118>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05e      	beq.n	80039aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ec:	e02f      	b.n	800394e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <xTaskResumeAll+0x11c>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe ff54 	bl	80027a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3304      	adds	r3, #4
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe ff4f 	bl	80027a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <xTaskResumeAll+0x120>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d903      	bls.n	800391e <xTaskResumeAll+0x7a>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <xTaskResumeAll+0x120>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <xTaskResumeAll+0x124>)
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fe feda 	bl	80026ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <xTaskResumeAll+0x128>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <xTaskResumeAll+0x12c>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <xTaskResumeAll+0x11c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1cb      	bne.n	80038ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800395c:	f000 fb54 	bl	8004008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <xTaskResumeAll+0x130>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800396c:	f000 f846 	bl	80039fc <xTaskIncrementTick>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <xTaskResumeAll+0x12c>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f1      	bne.n	800396c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <xTaskResumeAll+0x130>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <xTaskResumeAll+0x12c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <xTaskResumeAll+0x134>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039aa:	f001 f8c5 	bl	8004b38 <vPortExitCritical>

	return xAlreadyYielded;
 80039ae:	68bb      	ldr	r3, [r7, #8]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000d14 	.word	0x20000d14
 80039bc:	20000cec 	.word	0x20000cec
 80039c0:	20000cac 	.word	0x20000cac
 80039c4:	20000cf4 	.word	0x20000cf4
 80039c8:	2000081c 	.word	0x2000081c
 80039cc:	20000818 	.word	0x20000818
 80039d0:	20000d00 	.word	0x20000d00
 80039d4:	20000cfc 	.word	0x20000cfc
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <xTaskGetTickCount+0x1c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000cf0 	.word	0x20000cf0

080039fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a06:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <xTaskIncrementTick+0x144>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 8088 	bne.w	8003b20 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <xTaskIncrementTick+0x148>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <xTaskIncrementTick+0x148>)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11f      	bne.n	8003a64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <xTaskIncrementTick+0x14c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <xTaskIncrementTick+0x46>
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	e7fe      	b.n	8003a40 <xTaskIncrementTick+0x44>
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <xTaskIncrementTick+0x14c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <xTaskIncrementTick+0x150>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <xTaskIncrementTick+0x14c>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4a3e      	ldr	r2, [pc, #248]	; (8003b4c <xTaskIncrementTick+0x150>)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <xTaskIncrementTick+0x154>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a3c      	ldr	r2, [pc, #240]	; (8003b50 <xTaskIncrementTick+0x154>)
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	f000 fad2 	bl	8004008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a64:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <xTaskIncrementTick+0x158>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d349      	bcc.n	8003b02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a6e:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <xTaskIncrementTick+0x14c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <xTaskIncrementTick+0x158>)
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7e:	601a      	str	r2, [r3, #0]
					break;
 8003a80:	e03f      	b.n	8003b02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <xTaskIncrementTick+0x14c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d203      	bcs.n	8003aa2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a9a:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <xTaskIncrementTick+0x158>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aa0:	e02f      	b.n	8003b02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fe7e 	bl	80027a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fe75 	bl	80027a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <xTaskIncrementTick+0x15c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d903      	bls.n	8003ad2 <xTaskIncrementTick+0xd6>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <xTaskIncrementTick+0x15c>)
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <xTaskIncrementTick+0x160>)
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fe fe00 	bl	80026ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <xTaskIncrementTick+0x164>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d3b8      	bcc.n	8003a6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b00:	e7b5      	b.n	8003a6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <xTaskIncrementTick+0x164>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4914      	ldr	r1, [pc, #80]	; (8003b5c <xTaskIncrementTick+0x160>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d907      	bls.n	8003b2a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e004      	b.n	8003b2a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <xTaskIncrementTick+0x168>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <xTaskIncrementTick+0x168>)
 8003b28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <xTaskIncrementTick+0x16c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b36:	697b      	ldr	r3, [r7, #20]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000d14 	.word	0x20000d14
 8003b44:	20000cf0 	.word	0x20000cf0
 8003b48:	20000ca4 	.word	0x20000ca4
 8003b4c:	20000ca8 	.word	0x20000ca8
 8003b50:	20000d04 	.word	0x20000d04
 8003b54:	20000d0c 	.word	0x20000d0c
 8003b58:	20000cf4 	.word	0x20000cf4
 8003b5c:	2000081c 	.word	0x2000081c
 8003b60:	20000818 	.word	0x20000818
 8003b64:	20000cfc 	.word	0x20000cfc
 8003b68:	20000d00 	.word	0x20000d00

08003b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <vTaskSwitchContext+0xb0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <vTaskSwitchContext+0xb4>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b80:	e045      	b.n	8003c0e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003b82:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <vTaskSwitchContext+0xb4>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <vTaskSwitchContext+0xb8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e00f      	b.n	8003bb0 <vTaskSwitchContext+0x44>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <vTaskSwitchContext+0x3e>
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e7fe      	b.n	8003ba8 <vTaskSwitchContext+0x3c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	491d      	ldr	r1, [pc, #116]	; (8003c28 <vTaskSwitchContext+0xbc>)
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0e5      	beq.n	8003b90 <vTaskSwitchContext+0x24>
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <vTaskSwitchContext+0xbc>)
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	3308      	adds	r3, #8
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d104      	bne.n	8003bf4 <vTaskSwitchContext+0x88>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <vTaskSwitchContext+0xc0>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <vTaskSwitchContext+0xb8>)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <vTaskSwitchContext+0xc0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3354      	adds	r3, #84	; 0x54
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <vTaskSwitchContext+0xc4>)
 8003c0c:	6013      	str	r3, [r2, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000d14 	.word	0x20000d14
 8003c20:	20000d00 	.word	0x20000d00
 8003c24:	20000cf4 	.word	0x20000cf4
 8003c28:	2000081c 	.word	0x2000081c
 8003c2c:	20000818 	.word	0x20000818
 8003c30:	20000010 	.word	0x20000010

08003c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <vTaskPlaceOnEventList+0x24>
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e7fe      	b.n	8003c56 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <vTaskPlaceOnEventList+0x44>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fe fd68 	bl	8002736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c66:	2101      	movs	r1, #1
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f000 fa77 	bl	800415c <prvAddCurrentTaskToDelayedList>
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000818 	.word	0x20000818

08003c7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <vTaskPlaceOnEventListRestricted+0x26>
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e7fe      	b.n	8003ca0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <vTaskPlaceOnEventListRestricted+0x50>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7fe fd1f 	bl	80026ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f000 fa4c 	bl	800415c <prvAddCurrentTaskToDelayedList>
	}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000818 	.word	0x20000818

08003cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <xTaskRemoveFromEventList+0x2a>
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e7fe      	b.n	8003cf8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fd52 	bl	80027a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <xTaskRemoveFromEventList+0xac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11d      	bne.n	8003d48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fd49 	bl	80027a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <xTaskRemoveFromEventList+0xb0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d903      	bls.n	8003d2a <xTaskRemoveFromEventList+0x5a>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <xTaskRemoveFromEventList+0xb0>)
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <xTaskRemoveFromEventList+0xb4>)
 8003d38:	441a      	add	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fcd4 	bl	80026ee <vListInsertEnd>
 8003d46:	e005      	b.n	8003d54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	480e      	ldr	r0, [pc, #56]	; (8003d88 <xTaskRemoveFromEventList+0xb8>)
 8003d50:	f7fe fccd 	bl	80026ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <xTaskRemoveFromEventList+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d905      	bls.n	8003d6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <xTaskRemoveFromEventList+0xc0>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e001      	b.n	8003d72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d72:	697b      	ldr	r3, [r7, #20]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000d14 	.word	0x20000d14
 8003d80:	20000cf4 	.word	0x20000cf4
 8003d84:	2000081c 	.word	0x2000081c
 8003d88:	20000cac 	.word	0x20000cac
 8003d8c:	20000818 	.word	0x20000818
 8003d90:	20000d00 	.word	0x20000d00

08003d94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <vTaskInternalSetTimeOutState+0x24>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <vTaskInternalSetTimeOutState+0x28>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	20000d04 	.word	0x20000d04
 8003dbc:	20000cf0 	.word	0x20000cf0

08003dc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <xTaskCheckForTimeOut+0x24>
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	e7fe      	b.n	8003de2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <xTaskCheckForTimeOut+0x3e>
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003dfe:	f000 fe6d 	bl	8004adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <xTaskCheckForTimeOut+0xb8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d102      	bne.n	8003e22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e023      	b.n	8003e6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <xTaskCheckForTimeOut+0xbc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d007      	beq.n	8003e3e <xTaskCheckForTimeOut+0x7e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e015      	b.n	8003e6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d20b      	bcs.n	8003e60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff9d 	bl	8003d94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e004      	b.n	8003e6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e6a:	f000 fe65 	bl	8004b38 <vPortExitCritical>

	return xReturn;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000cf0 	.word	0x20000cf0
 8003e7c:	20000d04 	.word	0x20000d04

08003e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <vTaskMissedYield+0x14>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	20000d00 	.word	0x20000d00

08003e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ea0:	f000 f852 	bl	8003f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <prvIdleTask+0x28>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d9f9      	bls.n	8003ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <prvIdleTask+0x2c>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ebc:	e7f0      	b.n	8003ea0 <prvIdleTask+0x8>
 8003ebe:	bf00      	nop
 8003ec0:	2000081c 	.word	0x2000081c
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	e00c      	b.n	8003eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <prvInitialiseTaskLists+0x60>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fbd6 	bl	8002694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b37      	cmp	r3, #55	; 0x37
 8003ef2:	d9ef      	bls.n	8003ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <prvInitialiseTaskLists+0x64>)
 8003ef6:	f7fe fbcd 	bl	8002694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003efa:	480d      	ldr	r0, [pc, #52]	; (8003f30 <prvInitialiseTaskLists+0x68>)
 8003efc:	f7fe fbca 	bl	8002694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f00:	480c      	ldr	r0, [pc, #48]	; (8003f34 <prvInitialiseTaskLists+0x6c>)
 8003f02:	f7fe fbc7 	bl	8002694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f06:	480c      	ldr	r0, [pc, #48]	; (8003f38 <prvInitialiseTaskLists+0x70>)
 8003f08:	f7fe fbc4 	bl	8002694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <prvInitialiseTaskLists+0x74>)
 8003f0e:	f7fe fbc1 	bl	8002694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <prvInitialiseTaskLists+0x78>)
 8003f14:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <prvInitialiseTaskLists+0x64>)
 8003f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <prvInitialiseTaskLists+0x7c>)
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <prvInitialiseTaskLists+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2000081c 	.word	0x2000081c
 8003f2c:	20000c7c 	.word	0x20000c7c
 8003f30:	20000c90 	.word	0x20000c90
 8003f34:	20000cac 	.word	0x20000cac
 8003f38:	20000cc0 	.word	0x20000cc0
 8003f3c:	20000cd8 	.word	0x20000cd8
 8003f40:	20000ca4 	.word	0x20000ca4
 8003f44:	20000ca8 	.word	0x20000ca8

08003f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4e:	e019      	b.n	8003f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f50:	f000 fdc4 	bl	8004adc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <prvCheckTasksWaitingTermination+0x4c>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fc21 	bl	80027a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <prvCheckTasksWaitingTermination+0x50>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <prvCheckTasksWaitingTermination+0x50>)
 8003f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f7a:	f000 fddd 	bl	8004b38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f80e 	bl	8003fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e1      	bne.n	8003f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000cc0 	.word	0x20000cc0
 8003f98:	20000cec 	.word	0x20000cec
 8003f9c:	20000cd4 	.word	0x20000cd4

08003fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3354      	adds	r3, #84	; 0x54
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fa0d 	bl	80053cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 ff67 	bl	8004e94 <vPortFree>
				vPortFree( pxTCB );
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 ff64 	bl	8004e94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fcc:	e017      	b.n	8003ffe <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d103      	bne.n	8003fe0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 ff5b 	bl	8004e94 <vPortFree>
	}
 8003fde:	e00e      	b.n	8003ffe <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d009      	beq.n	8003ffe <prvDeleteTCB+0x5e>
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e7fe      	b.n	8003ffc <prvDeleteTCB+0x5c>
	}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <prvResetNextTaskUnblockTime+0x38>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <prvResetNextTaskUnblockTime+0x3c>)
 800401a:	f04f 32ff 	mov.w	r2, #4294967295
 800401e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004020:	e008      	b.n	8004034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <prvResetNextTaskUnblockTime+0x38>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <prvResetNextTaskUnblockTime+0x3c>)
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000ca4 	.word	0x20000ca4
 8004044:	20000d0c 	.word	0x20000d0c

08004048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <xTaskGetSchedulerState+0x34>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004056:	2301      	movs	r3, #1
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	e008      	b.n	800406e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <xTaskGetSchedulerState+0x38>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004064:	2302      	movs	r3, #2
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	e001      	b.n	800406e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800406e:	687b      	ldr	r3, [r7, #4]
	}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	20000cf8 	.word	0x20000cf8
 8004080:	20000d14 	.word	0x20000d14

08004084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d054      	beq.n	8004144 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <xTaskPriorityDisinherit+0xcc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d009      	beq.n	80040b8 <xTaskPriorityDisinherit+0x34>
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e7fe      	b.n	80040b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <xTaskPriorityDisinherit+0x50>
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	e7fe      	b.n	80040d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d02c      	beq.n	8004144 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d128      	bne.n	8004144 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fb56 	bl	80027a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <xTaskPriorityDisinherit+0xd0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d903      	bls.n	8004124 <xTaskPriorityDisinherit+0xa0>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <xTaskPriorityDisinherit+0xd0>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4a09      	ldr	r2, [pc, #36]	; (8004158 <xTaskPriorityDisinherit+0xd4>)
 8004132:	441a      	add	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe fad7 	bl	80026ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004144:	697b      	ldr	r3, [r7, #20]
	}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000818 	.word	0x20000818
 8004154:	20000cf4 	.word	0x20000cf4
 8004158:	2000081c 	.word	0x2000081c

0800415c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <prvAddCurrentTaskToDelayedList+0x90>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800416c:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fb18 	bl	80027a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d10a      	bne.n	8004196 <prvAddCurrentTaskToDelayedList+0x3a>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4819      	ldr	r0, [pc, #100]	; (80041f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004190:	f7fe faad 	bl	80026ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004194:	e026      	b.n	80041e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d209      	bcs.n	80041c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7fe fabb 	bl	8002736 <vListInsert>
}
 80041c0:	e010      	b.n	80041e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f7fe fab1 	bl	8002736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d202      	bcs.n	80041e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041de:	4a08      	ldr	r2, [pc, #32]	; (8004200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000cf0 	.word	0x20000cf0
 80041f0:	20000818 	.word	0x20000818
 80041f4:	20000cd8 	.word	0x20000cd8
 80041f8:	20000ca8 	.word	0x20000ca8
 80041fc:	20000ca4 	.word	0x20000ca4
 8004200:	20000d0c 	.word	0x20000d0c

08004204 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800420e:	f000 faff 	bl	8004810 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <xTimerCreateTimerTask+0x80>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d021      	beq.n	800425e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004222:	1d3a      	adds	r2, r7, #4
 8004224:	f107 0108 	add.w	r1, r7, #8
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fa17 	bl	8002660 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	9202      	str	r2, [sp, #8]
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	2302      	movs	r3, #2
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2300      	movs	r3, #0
 8004242:	460a      	mov	r2, r1
 8004244:	4910      	ldr	r1, [pc, #64]	; (8004288 <xTimerCreateTimerTask+0x84>)
 8004246:	4811      	ldr	r0, [pc, #68]	; (800428c <xTimerCreateTimerTask+0x88>)
 8004248:	f7ff f8c7 	bl	80033da <xTaskCreateStatic>
 800424c:	4602      	mov	r2, r0
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <xTimerCreateTimerTask+0x8c>)
 8004250:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <xTimerCreateTimerTask+0x8c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800425a:	2301      	movs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <xTimerCreateTimerTask+0x74>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e7fe      	b.n	8004276 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004278:	697b      	ldr	r3, [r7, #20]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000d48 	.word	0x20000d48
 8004288:	08006048 	.word	0x08006048
 800428c:	080043c5 	.word	0x080043c5
 8004290:	20000d4c 	.word	0x20000d4c

08004294 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <xTimerGenericCommand+0x2c>
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	e7fe      	b.n	80042be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <xTimerGenericCommand+0x94>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02a      	beq.n	800431e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	dc18      	bgt.n	800430c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042da:	f7ff feb5 	bl	8004048 <xTaskGetSchedulerState>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d109      	bne.n	80042f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <xTimerGenericCommand+0x94>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	f107 0110 	add.w	r1, r7, #16
 80042ec:	2300      	movs	r3, #0
 80042ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f0:	f7fe fbc4 	bl	8002a7c <xQueueGenericSend>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24
 80042f6:	e012      	b.n	800431e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <xTimerGenericCommand+0x94>)
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	f107 0110 	add.w	r1, r7, #16
 8004300:	2300      	movs	r3, #0
 8004302:	2200      	movs	r2, #0
 8004304:	f7fe fbba 	bl	8002a7c <xQueueGenericSend>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24
 800430a:	e008      	b.n	800431e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <xTimerGenericCommand+0x94>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	f107 0110 	add.w	r1, r7, #16
 8004314:	2300      	movs	r3, #0
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	f7fe fcc8 	bl	8002cac <xQueueGenericSendFromISR>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004320:	4618      	mov	r0, r3
 8004322:	3728      	adds	r7, #40	; 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000d48 	.word	0x20000d48

0800432c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af02      	add	r7, sp, #8
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <prvProcessExpiredTimer+0x94>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3304      	adds	r3, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fa2f 	bl	80027a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d021      	beq.n	800439c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	18d1      	adds	r1, r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	6978      	ldr	r0, [r7, #20]
 8004366:	f000 f8d1 	bl	800450c <prvInsertTimerInActiveList>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01e      	beq.n	80043ae <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004370:	2300      	movs	r3, #0
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff ff8a 	bl	8004294 <xTimerGenericCommand>
 8004380:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d112      	bne.n	80043ae <prvProcessExpiredTimer+0x82>
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e7fe      	b.n	800439a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	4798      	blx	r3
}
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000d40 	.word	0x20000d40

080043c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f857 	bl	8004484 <prvGetNextExpireTime>
 80043d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4619      	mov	r1, r3
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f803 	bl	80043e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043e2:	f000 f8d5 	bl	8004590 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043e6:	e7f1      	b.n	80043cc <prvTimerTask+0x8>

080043e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043f2:	f7ff fa49 	bl	8003888 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f866 	bl	80044cc <prvSampleTimeNow>
 8004400:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d130      	bne.n	800446a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <prvProcessTimerOrBlockTask+0x3c>
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	429a      	cmp	r2, r3
 8004414:	d806      	bhi.n	8004424 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004416:	f7ff fa45 	bl	80038a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff85 	bl	800432c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004422:	e024      	b.n	800446e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <prvProcessTimerOrBlockTask+0x90>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <prvProcessTimerOrBlockTask+0x50>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <prvProcessTimerOrBlockTask+0x52>
 8004438:	2300      	movs	r3, #0
 800443a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <prvProcessTimerOrBlockTask+0x94>)
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	f7fe fef7 	bl	800323c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800444e:	f7ff fa29 	bl	80038a4 <xTaskResumeAll>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <prvProcessTimerOrBlockTask+0x98>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
}
 8004468:	e001      	b.n	800446e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800446a:	f7ff fa1b 	bl	80038a4 <xTaskResumeAll>
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000d44 	.word	0x20000d44
 800447c:	20000d48 	.word	0x20000d48
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <prvGetNextExpireTime+0x44>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <prvGetNextExpireTime+0x16>
 8004496:	2201      	movs	r2, #1
 8004498:	e000      	b.n	800449c <prvGetNextExpireTime+0x18>
 800449a:	2200      	movs	r2, #0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <prvGetNextExpireTime+0x44>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e001      	b.n	80044b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80044b8:	68fb      	ldr	r3, [r7, #12]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000d40 	.word	0x20000d40

080044cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044d4:	f7ff fa82 	bl	80039dc <xTaskGetTickCount>
 80044d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <prvSampleTimeNow+0x3c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d205      	bcs.n	80044f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044e4:	f000 f930 	bl	8004748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044f6:	4a04      	ldr	r2, [pc, #16]	; (8004508 <prvSampleTimeNow+0x3c>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044fc:	68fb      	ldr	r3, [r7, #12]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000d50 	.word	0x20000d50

0800450c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d812      	bhi.n	8004558 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e01b      	b.n	800457e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <prvInsertTimerInActiveList+0x7c>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe f8f0 	bl	8002736 <vListInsert>
 8004556:	e012      	b.n	800457e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d206      	bcs.n	800456e <prvInsertTimerInActiveList+0x62>
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e007      	b.n	800457e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <prvInsertTimerInActiveList+0x80>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f7fe f8dc 	bl	8002736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800457e:	697b      	ldr	r3, [r7, #20]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000d44 	.word	0x20000d44
 800458c:	20000d40 	.word	0x20000d40

08004590 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08e      	sub	sp, #56	; 0x38
 8004594:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004596:	e0c6      	b.n	8004726 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	da17      	bge.n	80045ce <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	3304      	adds	r3, #4
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <prvProcessReceivedCommands+0x2e>
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e7fe      	b.n	80045bc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c4:	6850      	ldr	r0, [r2, #4]
 80045c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c8:	6892      	ldr	r2, [r2, #8]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f2c0 80a7 	blt.w	8004724 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe f8de 	bl	80027a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ec:	463b      	mov	r3, r7
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff6c 	bl	80044cc <prvSampleTimeNow>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b09      	cmp	r3, #9
 80045fa:	f200 8094 	bhi.w	8004726 <prvProcessReceivedCommands+0x196>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <prvProcessReceivedCommands+0x74>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	0800462d 	.word	0x0800462d
 8004608:	0800462d 	.word	0x0800462d
 800460c:	0800462d 	.word	0x0800462d
 8004610:	0800469f 	.word	0x0800469f
 8004614:	080046b3 	.word	0x080046b3
 8004618:	080046fb 	.word	0x080046fb
 800461c:	0800462d 	.word	0x0800462d
 8004620:	0800462d 	.word	0x0800462d
 8004624:	0800469f 	.word	0x0800469f
 8004628:	080046b3 	.word	0x080046b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	18d1      	adds	r1, r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464c:	f7ff ff5e 	bl	800450c <prvInsertTimerInActiveList>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d067      	beq.n	8004726 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800465c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05c      	beq.n	8004726 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	441a      	add	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	2100      	movs	r1, #0
 800467c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467e:	f7ff fe09 	bl	8004294 <xTimerGenericCommand>
 8004682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d14d      	bne.n	8004726 <prvProcessReceivedCommands+0x196>
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e7fe      	b.n	800469c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80046b0:	e039      	b.n	8004726 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <prvProcessReceivedCommands+0x156>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e7fe      	b.n	80046e4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	18d1      	adds	r1, r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f4:	f7ff ff0a 	bl	800450c <prvInsertTimerInActiveList>
					break;
 80046f8:	e015      	b.n	8004726 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d103      	bne.n	8004710 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470a:	f000 fbc3 	bl	8004e94 <vPortFree>
 800470e:	e00a      	b.n	8004726 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004722:	e000      	b.n	8004726 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004724:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <prvProcessReceivedCommands+0x1b4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	1d39      	adds	r1, r7, #4
 800472c:	2200      	movs	r2, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fb62 	bl	8002df8 <xQueueReceive>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	f47f af2e 	bne.w	8004598 <prvProcessReceivedCommands+0x8>
	}
}
 800473c:	bf00      	nop
 800473e:	3730      	adds	r7, #48	; 0x30
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000d48 	.word	0x20000d48

08004748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800474e:	e047      	b.n	80047e0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <prvSwitchTimerLists+0xc0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475a:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <prvSwitchTimerLists+0xc0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe f81d 	bl	80027a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02d      	beq.n	80047e0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d90e      	bls.n	80047b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047a2:	4b19      	ldr	r3, [pc, #100]	; (8004808 <prvSwitchTimerLists+0xc0>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fd ffc2 	bl	8002736 <vListInsert>
 80047b2:	e015      	b.n	80047e0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047b4:	2300      	movs	r3, #0
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	2100      	movs	r1, #0
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff fd68 	bl	8004294 <xTimerGenericCommand>
 80047c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <prvSwitchTimerLists+0x98>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	e7fe      	b.n	80047de <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <prvSwitchTimerLists+0xc0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1b2      	bne.n	8004750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <prvSwitchTimerLists+0xc0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <prvSwitchTimerLists+0xc4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <prvSwitchTimerLists+0xc0>)
 80047f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047f8:	4a04      	ldr	r2, [pc, #16]	; (800480c <prvSwitchTimerLists+0xc4>)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6013      	str	r3, [r2, #0]
}
 80047fe:	bf00      	nop
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000d40 	.word	0x20000d40
 800480c:	20000d44 	.word	0x20000d44

08004810 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004816:	f000 f961 	bl	8004adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <prvCheckForValidListAndQueue+0x60>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d120      	bne.n	8004864 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004822:	4814      	ldr	r0, [pc, #80]	; (8004874 <prvCheckForValidListAndQueue+0x64>)
 8004824:	f7fd ff36 	bl	8002694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004828:	4813      	ldr	r0, [pc, #76]	; (8004878 <prvCheckForValidListAndQueue+0x68>)
 800482a:	f7fd ff33 	bl	8002694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <prvCheckForValidListAndQueue+0x6c>)
 8004830:	4a10      	ldr	r2, [pc, #64]	; (8004874 <prvCheckForValidListAndQueue+0x64>)
 8004832:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <prvCheckForValidListAndQueue+0x70>)
 8004836:	4a10      	ldr	r2, [pc, #64]	; (8004878 <prvCheckForValidListAndQueue+0x68>)
 8004838:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800483a:	2300      	movs	r3, #0
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <prvCheckForValidListAndQueue+0x74>)
 8004840:	4a11      	ldr	r2, [pc, #68]	; (8004888 <prvCheckForValidListAndQueue+0x78>)
 8004842:	2110      	movs	r1, #16
 8004844:	200a      	movs	r0, #10
 8004846:	f7fe f841 	bl	80028cc <xQueueGenericCreateStatic>
 800484a:	4602      	mov	r2, r0
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <prvCheckForValidListAndQueue+0x60>)
 800484e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <prvCheckForValidListAndQueue+0x60>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <prvCheckForValidListAndQueue+0x60>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	490b      	ldr	r1, [pc, #44]	; (800488c <prvCheckForValidListAndQueue+0x7c>)
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe fcc4 	bl	80031ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004864:	f000 f968 	bl	8004b38 <vPortExitCritical>
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000d48 	.word	0x20000d48
 8004874:	20000d18 	.word	0x20000d18
 8004878:	20000d2c 	.word	0x20000d2c
 800487c:	20000d40 	.word	0x20000d40
 8004880:	20000d44 	.word	0x20000d44
 8004884:	20000df4 	.word	0x20000df4
 8004888:	20000d54 	.word	0x20000d54
 800488c:	08006050 	.word	0x08006050

08004890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3b04      	subs	r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b04      	subs	r3, #4
 80048be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048c0:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <pxPortInitialiseStack+0x64>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b14      	subs	r3, #20
 80048ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b04      	subs	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f06f 0202 	mvn.w	r2, #2
 80048de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b20      	subs	r3, #32
 80048e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	080048f9 	.word	0x080048f9

080048f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <prvTaskExitError+0x50>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d009      	beq.n	8004920 <prvTaskExitError+0x28>
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e7fe      	b.n	800491e <prvTaskExitError+0x26>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004932:	bf00      	nop
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0fc      	beq.n	8004934 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000000c 	.word	0x2000000c
 800494c:	00000000 	.word	0x00000000

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	4770      	bx	lr
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst2>:
 8004970:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004978:	4808      	ldr	r0, [pc, #32]	; (800499c <prvPortStartFirstTask+0x24>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8814 	msr	CONTROL, r0
 800498a:	b662      	cpsie	i
 800498c:	b661      	cpsie	f
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	df00      	svc	0
 8004998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800499a:	bf00      	nop
 800499c:	e000ed08 	.word	0xe000ed08

080049a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049a6:	4b44      	ldr	r3, [pc, #272]	; (8004ab8 <xPortStartScheduler+0x118>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a44      	ldr	r2, [pc, #272]	; (8004abc <xPortStartScheduler+0x11c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d109      	bne.n	80049c4 <xPortStartScheduler+0x24>
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e7fe      	b.n	80049c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049c4:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <xPortStartScheduler+0x118>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a3d      	ldr	r2, [pc, #244]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d109      	bne.n	80049e2 <xPortStartScheduler+0x42>
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e7fe      	b.n	80049e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <xPortStartScheduler+0x124>)
 80049e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <xPortStartScheduler+0x128>)
 8004a08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a10:	e009      	b.n	8004a26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004a12:	4b2e      	ldr	r3, [pc, #184]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d0ef      	beq.n	8004a12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1c3 0307 	rsb	r3, r3, #7
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d009      	beq.n	8004a52 <xPortStartScheduler+0xb2>
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	e7fe      	b.n	8004a50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a52:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a64:	4a19      	ldr	r2, [pc, #100]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a88:	f000 f8d6 	bl	8004c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a92:	f000 f8f5 	bl	8004c80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aa2:	f7ff ff69 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aa6:	f7ff f861 	bl	8003b6c <vTaskSwitchContext>
	prvTaskExitError();
 8004aaa:	f7ff ff25 	bl	80048f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	e000ed00 	.word	0xe000ed00
 8004abc:	410fc271 	.word	0x410fc271
 8004ac0:	410fc270 	.word	0x410fc270
 8004ac4:	e000e400 	.word	0xe000e400
 8004ac8:	20000e48 	.word	0x20000e48
 8004acc:	20000e4c 	.word	0x20000e4c
 8004ad0:	e000ed20 	.word	0xe000ed20
 8004ad4:	2000000c 	.word	0x2000000c
 8004ad8:	e000ef34 	.word	0xe000ef34

08004adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <vPortEnterCritical+0x54>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <vPortEnterCritical+0x54>)
 8004afc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <vPortEnterCritical+0x54>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10e      	bne.n	8004b24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <vPortEnterCritical+0x58>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <vPortEnterCritical+0x48>
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	e7fe      	b.n	8004b22 <vPortEnterCritical+0x46>
	}
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	2000000c 	.word	0x2000000c
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <vPortExitCritical+0x22>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	e7fe      	b.n	8004b58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <vPortExitCritical+0x3e>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000000c 	.word	0x2000000c
	...

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f01e 0f10 	tst.w	lr, #16
 8004ba0:	bf08      	it	eq
 8004ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bb4:	f380 8811 	msr	BASEPRI, r0
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f7fe ffd4 	bl	8003b6c <vTaskSwitchContext>
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f380 8811 	msr	BASEPRI, r0
 8004bcc:	bc09      	pop	{r0, r3}
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	6808      	ldr	r0, [r1, #0]
 8004bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd6:	f01e 0f10 	tst.w	lr, #16
 8004bda:	bf08      	it	eq
 8004bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004be0:	f380 8809 	msr	PSP, r0
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c10:	f7fe fef4 	bl	80039fc <xTaskIncrementTick>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <SysTick_Handler+0x3c>)
 8004c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <vPortSetupTimerInterrupt+0x34>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortSetupTimerInterrupt+0x38>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <vPortSetupTimerInterrupt+0x3c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <vPortSetupTimerInterrupt+0x40>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <vPortSetupTimerInterrupt+0x44>)
 8004c56:	3b01      	subs	r3, #1
 8004c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <vPortSetupTimerInterrupt+0x34>)
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e010 	.word	0xe000e010
 8004c70:	e000e018 	.word	0xe000e018
 8004c74:	20000000 	.word	0x20000000
 8004c78:	10624dd3 	.word	0x10624dd3
 8004c7c:	e000e014 	.word	0xe000e014

08004c80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c90 <vPortEnableVFP+0x10>
 8004c84:	6801      	ldr	r1, [r0, #0]
 8004c86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c8a:	6001      	str	r1, [r0, #0]
 8004c8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c8e:	bf00      	nop
 8004c90:	e000ed88 	.word	0xe000ed88

08004c94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c9a:	f3ef 8305 	mrs	r3, IPSR
 8004c9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d913      	bls.n	8004cce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ca6:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <vPortValidateInterruptPriority+0x6c>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <vPortValidateInterruptPriority+0x70>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	7afa      	ldrb	r2, [r7, #11]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d209      	bcs.n	8004cce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e7fe      	b.n	8004ccc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <vPortValidateInterruptPriority+0x74>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <vPortValidateInterruptPriority+0x78>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d909      	bls.n	8004cf2 <vPortValidateInterruptPriority+0x5e>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	e7fe      	b.n	8004cf0 <vPortValidateInterruptPriority+0x5c>
	}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e3f0 	.word	0xe000e3f0
 8004d04:	20000e48 	.word	0x20000e48
 8004d08:	e000ed0c 	.word	0xe000ed0c
 8004d0c:	20000e4c 	.word	0x20000e4c

08004d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d1c:	f7fe fdb4 	bl	8003888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d20:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <pvPortMalloc+0x170>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d28:	f000 f90c 	bl	8004f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d2c:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <pvPortMalloc+0x174>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f040 808c 	bne.w	8004e52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01c      	beq.n	8004d7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004d40:	2208      	movs	r2, #8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d013      	beq.n	8004d7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f023 0307 	bic.w	r3, r3, #7
 8004d58:	3308      	adds	r3, #8
 8004d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <pvPortMalloc+0x6a>
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e7fe      	b.n	8004d78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d068      	beq.n	8004e52 <pvPortMalloc+0x142>
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <pvPortMalloc+0x178>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d863      	bhi.n	8004e52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d8a:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <pvPortMalloc+0x17c>)
 8004d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <pvPortMalloc+0x17c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d94:	e004      	b.n	8004da0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d903      	bls.n	8004db2 <pvPortMalloc+0xa2>
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f1      	bne.n	8004d96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <pvPortMalloc+0x170>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d04a      	beq.n	8004e52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	4413      	add	r3, r2
 8004dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d91e      	bls.n	8004e1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4413      	add	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <pvPortMalloc+0xf4>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	e7fe      	b.n	8004e02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	1ad2      	subs	r2, r2, r3
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e16:	69b8      	ldr	r0, [r7, #24]
 8004e18:	f000 f8f6 	bl	8005008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <pvPortMalloc+0x178>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <pvPortMalloc+0x178>)
 8004e28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e2a:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <pvPortMalloc+0x178>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <pvPortMalloc+0x180>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d203      	bcs.n	8004e3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <pvPortMalloc+0x178>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <pvPortMalloc+0x180>)
 8004e3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <pvPortMalloc+0x174>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e52:	f7fe fd27 	bl	80038a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <pvPortMalloc+0x164>
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e7fe      	b.n	8004e72 <pvPortMalloc+0x162>
	return pvReturn;
 8004e74:	69fb      	ldr	r3, [r7, #28]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3728      	adds	r7, #40	; 0x28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20004a58 	.word	0x20004a58
 8004e84:	20004a64 	.word	0x20004a64
 8004e88:	20004a5c 	.word	0x20004a5c
 8004e8c:	20004a50 	.word	0x20004a50
 8004e90:	20004a60 	.word	0x20004a60

08004e94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d046      	beq.n	8004f34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4413      	add	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <vPortFree+0xa8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <vPortFree+0x42>
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e7fe      	b.n	8004ed4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <vPortFree+0x5e>
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	e7fe      	b.n	8004ef0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <vPortFree+0xa8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d019      	beq.n	8004f34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d115      	bne.n	8004f34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <vPortFree+0xa8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	43db      	mvns	r3, r3
 8004f12:	401a      	ands	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f18:	f7fe fcb6 	bl	8003888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <vPortFree+0xac>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <vPortFree+0xac>)
 8004f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f2a:	6938      	ldr	r0, [r7, #16]
 8004f2c:	f000 f86c 	bl	8005008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f30:	f7fe fcb8 	bl	80038a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20004a64 	.word	0x20004a64
 8004f40:	20004a5c 	.word	0x20004a5c

08004f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f50:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <prvHeapInit+0xac>)
 8004f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3307      	adds	r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <prvHeapInit+0xac>)
 8004f74:	4413      	add	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <prvHeapInit+0xb0>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <prvHeapInit+0xb0>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f90:	2208      	movs	r2, #8
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <prvHeapInit+0xb4>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <prvHeapInit+0xb8>)
 8004fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <prvHeapInit+0xbc>)
 8004fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <prvHeapInit+0xc0>)
 8004fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000e50 	.word	0x20000e50
 8004ff4:	20004a50 	.word	0x20004a50
 8004ff8:	20004a58 	.word	0x20004a58
 8004ffc:	20004a60 	.word	0x20004a60
 8005000:	20004a5c 	.word	0x20004a5c
 8005004:	20004a64 	.word	0x20004a64

08005008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005010:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <prvInsertBlockIntoFreeList+0xac>)
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e002      	b.n	800501c <prvInsertBlockIntoFreeList+0x14>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d8f7      	bhi.n	8005016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4413      	add	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d108      	bne.n	800504a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	441a      	add	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	441a      	add	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d118      	bne.n	8005090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d00d      	beq.n	8005086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e008      	b.n	8005098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e003      	b.n	8005098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d002      	beq.n	80050a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20004a50 	.word	0x20004a50
 80050b8:	20004a58 	.word	0x20004a58

080050bc <__errno>:
 80050bc:	4b01      	ldr	r3, [pc, #4]	; (80050c4 <__errno+0x8>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000010 	.word	0x20000010

080050c8 <std>:
 80050c8:	2300      	movs	r3, #0
 80050ca:	b510      	push	{r4, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	e9c0 3300 	strd	r3, r3, [r0]
 80050d2:	6083      	str	r3, [r0, #8]
 80050d4:	8181      	strh	r1, [r0, #12]
 80050d6:	6643      	str	r3, [r0, #100]	; 0x64
 80050d8:	81c2      	strh	r2, [r0, #14]
 80050da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050de:	6183      	str	r3, [r0, #24]
 80050e0:	4619      	mov	r1, r3
 80050e2:	2208      	movs	r2, #8
 80050e4:	305c      	adds	r0, #92	; 0x5c
 80050e6:	f000 f8e8 	bl	80052ba <memset>
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <std+0x38>)
 80050ec:	6263      	str	r3, [r4, #36]	; 0x24
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <std+0x3c>)
 80050f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <std+0x40>)
 80050f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <std+0x44>)
 80050f8:	6224      	str	r4, [r4, #32]
 80050fa:	6323      	str	r3, [r4, #48]	; 0x30
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	bf00      	nop
 8005100:	080054a5 	.word	0x080054a5
 8005104:	080054c7 	.word	0x080054c7
 8005108:	080054ff 	.word	0x080054ff
 800510c:	08005523 	.word	0x08005523

08005110 <_cleanup_r>:
 8005110:	4901      	ldr	r1, [pc, #4]	; (8005118 <_cleanup_r+0x8>)
 8005112:	f000 b885 	b.w	8005220 <_fwalk_reent>
 8005116:	bf00      	nop
 8005118:	0800567d 	.word	0x0800567d

0800511c <__sfmoreglue>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	1e4a      	subs	r2, r1, #1
 8005120:	2568      	movs	r5, #104	; 0x68
 8005122:	4355      	muls	r5, r2
 8005124:	460e      	mov	r6, r1
 8005126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800512a:	f000 f8cf 	bl	80052cc <_malloc_r>
 800512e:	4604      	mov	r4, r0
 8005130:	b140      	cbz	r0, 8005144 <__sfmoreglue+0x28>
 8005132:	2100      	movs	r1, #0
 8005134:	e9c0 1600 	strd	r1, r6, [r0]
 8005138:	300c      	adds	r0, #12
 800513a:	60a0      	str	r0, [r4, #8]
 800513c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005140:	f000 f8bb 	bl	80052ba <memset>
 8005144:	4620      	mov	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}

08005148 <__sinit>:
 8005148:	6983      	ldr	r3, [r0, #24]
 800514a:	b510      	push	{r4, lr}
 800514c:	4604      	mov	r4, r0
 800514e:	bb33      	cbnz	r3, 800519e <__sinit+0x56>
 8005150:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005154:	6503      	str	r3, [r0, #80]	; 0x50
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <__sinit+0x58>)
 8005158:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <__sinit+0x5c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6282      	str	r2, [r0, #40]	; 0x28
 800515e:	4298      	cmp	r0, r3
 8005160:	bf04      	itt	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	6183      	streq	r3, [r0, #24]
 8005166:	f000 f81f 	bl	80051a8 <__sfp>
 800516a:	6060      	str	r0, [r4, #4]
 800516c:	4620      	mov	r0, r4
 800516e:	f000 f81b 	bl	80051a8 <__sfp>
 8005172:	60a0      	str	r0, [r4, #8]
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f817 	bl	80051a8 <__sfp>
 800517a:	2200      	movs	r2, #0
 800517c:	60e0      	str	r0, [r4, #12]
 800517e:	2104      	movs	r1, #4
 8005180:	6860      	ldr	r0, [r4, #4]
 8005182:	f7ff ffa1 	bl	80050c8 <std>
 8005186:	2201      	movs	r2, #1
 8005188:	2109      	movs	r1, #9
 800518a:	68a0      	ldr	r0, [r4, #8]
 800518c:	f7ff ff9c 	bl	80050c8 <std>
 8005190:	2202      	movs	r2, #2
 8005192:	2112      	movs	r1, #18
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	f7ff ff97 	bl	80050c8 <std>
 800519a:	2301      	movs	r3, #1
 800519c:	61a3      	str	r3, [r4, #24]
 800519e:	bd10      	pop	{r4, pc}
 80051a0:	080060d0 	.word	0x080060d0
 80051a4:	08005111 	.word	0x08005111

080051a8 <__sfp>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <__sfp+0x70>)
 80051ac:	681e      	ldr	r6, [r3, #0]
 80051ae:	69b3      	ldr	r3, [r6, #24]
 80051b0:	4607      	mov	r7, r0
 80051b2:	b913      	cbnz	r3, 80051ba <__sfp+0x12>
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff ffc7 	bl	8005148 <__sinit>
 80051ba:	3648      	adds	r6, #72	; 0x48
 80051bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	d503      	bpl.n	80051cc <__sfp+0x24>
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	b133      	cbz	r3, 80051d6 <__sfp+0x2e>
 80051c8:	6836      	ldr	r6, [r6, #0]
 80051ca:	e7f7      	b.n	80051bc <__sfp+0x14>
 80051cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051d0:	b16d      	cbz	r5, 80051ee <__sfp+0x46>
 80051d2:	3468      	adds	r4, #104	; 0x68
 80051d4:	e7f4      	b.n	80051c0 <__sfp+0x18>
 80051d6:	2104      	movs	r1, #4
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff ff9f 	bl	800511c <__sfmoreglue>
 80051de:	6030      	str	r0, [r6, #0]
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d1f1      	bne.n	80051c8 <__sfp+0x20>
 80051e4:	230c      	movs	r3, #12
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4604      	mov	r4, r0
 80051ea:	4620      	mov	r0, r4
 80051ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <__sfp+0x74>)
 80051f0:	6665      	str	r5, [r4, #100]	; 0x64
 80051f2:	e9c4 5500 	strd	r5, r5, [r4]
 80051f6:	60a5      	str	r5, [r4, #8]
 80051f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80051fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005200:	2208      	movs	r2, #8
 8005202:	4629      	mov	r1, r5
 8005204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005208:	f000 f857 	bl	80052ba <memset>
 800520c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005214:	e7e9      	b.n	80051ea <__sfp+0x42>
 8005216:	bf00      	nop
 8005218:	080060d0 	.word	0x080060d0
 800521c:	ffff0001 	.word	0xffff0001

08005220 <_fwalk_reent>:
 8005220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005224:	4680      	mov	r8, r0
 8005226:	4689      	mov	r9, r1
 8005228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800522c:	2600      	movs	r6, #0
 800522e:	b914      	cbnz	r4, 8005236 <_fwalk_reent+0x16>
 8005230:	4630      	mov	r0, r6
 8005232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005236:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800523a:	3f01      	subs	r7, #1
 800523c:	d501      	bpl.n	8005242 <_fwalk_reent+0x22>
 800523e:	6824      	ldr	r4, [r4, #0]
 8005240:	e7f5      	b.n	800522e <_fwalk_reent+0xe>
 8005242:	89ab      	ldrh	r3, [r5, #12]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d907      	bls.n	8005258 <_fwalk_reent+0x38>
 8005248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800524c:	3301      	adds	r3, #1
 800524e:	d003      	beq.n	8005258 <_fwalk_reent+0x38>
 8005250:	4629      	mov	r1, r5
 8005252:	4640      	mov	r0, r8
 8005254:	47c8      	blx	r9
 8005256:	4306      	orrs	r6, r0
 8005258:	3568      	adds	r5, #104	; 0x68
 800525a:	e7ee      	b.n	800523a <_fwalk_reent+0x1a>

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4e0d      	ldr	r6, [pc, #52]	; (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	; (8005298 <__libc_init_array+0x3c>)
 8005262:	1ba4      	subs	r4, r4, r6
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2500      	movs	r5, #0
 8005268:	42a5      	cmp	r5, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4e0b      	ldr	r6, [pc, #44]	; (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	; (80052a0 <__libc_init_array+0x44>)
 8005270:	f000 feb0 	bl	8005fd4 <_init>
 8005274:	1ba4      	subs	r4, r4, r6
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2500      	movs	r5, #0
 800527a:	42a5      	cmp	r5, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005284:	4798      	blx	r3
 8005286:	3501      	adds	r5, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800528e:	4798      	blx	r3
 8005290:	3501      	adds	r5, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	08006110 	.word	0x08006110
 8005298:	08006110 	.word	0x08006110
 800529c:	08006110 	.word	0x08006110
 80052a0:	08006114 	.word	0x08006114

080052a4 <memcpy>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	1e43      	subs	r3, r0, #1
 80052a8:	440a      	add	r2, r1
 80052aa:	4291      	cmp	r1, r2
 80052ac:	d100      	bne.n	80052b0 <memcpy+0xc>
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b8:	e7f7      	b.n	80052aa <memcpy+0x6>

080052ba <memset>:
 80052ba:	4402      	add	r2, r0
 80052bc:	4603      	mov	r3, r0
 80052be:	4293      	cmp	r3, r2
 80052c0:	d100      	bne.n	80052c4 <memset+0xa>
 80052c2:	4770      	bx	lr
 80052c4:	f803 1b01 	strb.w	r1, [r3], #1
 80052c8:	e7f9      	b.n	80052be <memset+0x4>
	...

080052cc <_malloc_r>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	1ccd      	adds	r5, r1, #3
 80052d0:	f025 0503 	bic.w	r5, r5, #3
 80052d4:	3508      	adds	r5, #8
 80052d6:	2d0c      	cmp	r5, #12
 80052d8:	bf38      	it	cc
 80052da:	250c      	movcc	r5, #12
 80052dc:	2d00      	cmp	r5, #0
 80052de:	4606      	mov	r6, r0
 80052e0:	db01      	blt.n	80052e6 <_malloc_r+0x1a>
 80052e2:	42a9      	cmp	r1, r5
 80052e4:	d903      	bls.n	80052ee <_malloc_r+0x22>
 80052e6:	230c      	movs	r3, #12
 80052e8:	6033      	str	r3, [r6, #0]
 80052ea:	2000      	movs	r0, #0
 80052ec:	bd70      	pop	{r4, r5, r6, pc}
 80052ee:	f000 fa01 	bl	80056f4 <__malloc_lock>
 80052f2:	4a21      	ldr	r2, [pc, #132]	; (8005378 <_malloc_r+0xac>)
 80052f4:	6814      	ldr	r4, [r2, #0]
 80052f6:	4621      	mov	r1, r4
 80052f8:	b991      	cbnz	r1, 8005320 <_malloc_r+0x54>
 80052fa:	4c20      	ldr	r4, [pc, #128]	; (800537c <_malloc_r+0xb0>)
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	b91b      	cbnz	r3, 8005308 <_malloc_r+0x3c>
 8005300:	4630      	mov	r0, r6
 8005302:	f000 f8bf 	bl	8005484 <_sbrk_r>
 8005306:	6020      	str	r0, [r4, #0]
 8005308:	4629      	mov	r1, r5
 800530a:	4630      	mov	r0, r6
 800530c:	f000 f8ba 	bl	8005484 <_sbrk_r>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d124      	bne.n	800535e <_malloc_r+0x92>
 8005314:	230c      	movs	r3, #12
 8005316:	6033      	str	r3, [r6, #0]
 8005318:	4630      	mov	r0, r6
 800531a:	f000 f9ec 	bl	80056f6 <__malloc_unlock>
 800531e:	e7e4      	b.n	80052ea <_malloc_r+0x1e>
 8005320:	680b      	ldr	r3, [r1, #0]
 8005322:	1b5b      	subs	r3, r3, r5
 8005324:	d418      	bmi.n	8005358 <_malloc_r+0x8c>
 8005326:	2b0b      	cmp	r3, #11
 8005328:	d90f      	bls.n	800534a <_malloc_r+0x7e>
 800532a:	600b      	str	r3, [r1, #0]
 800532c:	50cd      	str	r5, [r1, r3]
 800532e:	18cc      	adds	r4, r1, r3
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f9e0 	bl	80056f6 <__malloc_unlock>
 8005336:	f104 000b 	add.w	r0, r4, #11
 800533a:	1d23      	adds	r3, r4, #4
 800533c:	f020 0007 	bic.w	r0, r0, #7
 8005340:	1ac3      	subs	r3, r0, r3
 8005342:	d0d3      	beq.n	80052ec <_malloc_r+0x20>
 8005344:	425a      	negs	r2, r3
 8005346:	50e2      	str	r2, [r4, r3]
 8005348:	e7d0      	b.n	80052ec <_malloc_r+0x20>
 800534a:	428c      	cmp	r4, r1
 800534c:	684b      	ldr	r3, [r1, #4]
 800534e:	bf16      	itet	ne
 8005350:	6063      	strne	r3, [r4, #4]
 8005352:	6013      	streq	r3, [r2, #0]
 8005354:	460c      	movne	r4, r1
 8005356:	e7eb      	b.n	8005330 <_malloc_r+0x64>
 8005358:	460c      	mov	r4, r1
 800535a:	6849      	ldr	r1, [r1, #4]
 800535c:	e7cc      	b.n	80052f8 <_malloc_r+0x2c>
 800535e:	1cc4      	adds	r4, r0, #3
 8005360:	f024 0403 	bic.w	r4, r4, #3
 8005364:	42a0      	cmp	r0, r4
 8005366:	d005      	beq.n	8005374 <_malloc_r+0xa8>
 8005368:	1a21      	subs	r1, r4, r0
 800536a:	4630      	mov	r0, r6
 800536c:	f000 f88a 	bl	8005484 <_sbrk_r>
 8005370:	3001      	adds	r0, #1
 8005372:	d0cf      	beq.n	8005314 <_malloc_r+0x48>
 8005374:	6025      	str	r5, [r4, #0]
 8005376:	e7db      	b.n	8005330 <_malloc_r+0x64>
 8005378:	20004a68 	.word	0x20004a68
 800537c:	20004a6c 	.word	0x20004a6c

08005380 <iprintf>:
 8005380:	b40f      	push	{r0, r1, r2, r3}
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <iprintf+0x2c>)
 8005384:	b513      	push	{r0, r1, r4, lr}
 8005386:	681c      	ldr	r4, [r3, #0]
 8005388:	b124      	cbz	r4, 8005394 <iprintf+0x14>
 800538a:	69a3      	ldr	r3, [r4, #24]
 800538c:	b913      	cbnz	r3, 8005394 <iprintf+0x14>
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff feda 	bl	8005148 <__sinit>
 8005394:	ab05      	add	r3, sp, #20
 8005396:	9a04      	ldr	r2, [sp, #16]
 8005398:	68a1      	ldr	r1, [r4, #8]
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fa23 	bl	80057e8 <_vfiprintf_r>
 80053a2:	b002      	add	sp, #8
 80053a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a8:	b004      	add	sp, #16
 80053aa:	4770      	bx	lr
 80053ac:	20000010 	.word	0x20000010

080053b0 <cleanup_glue>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	460c      	mov	r4, r1
 80053b4:	6809      	ldr	r1, [r1, #0]
 80053b6:	4605      	mov	r5, r0
 80053b8:	b109      	cbz	r1, 80053be <cleanup_glue+0xe>
 80053ba:	f7ff fff9 	bl	80053b0 <cleanup_glue>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c6:	f000 b997 	b.w	80056f8 <_free_r>
	...

080053cc <_reclaim_reent>:
 80053cc:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <_reclaim_reent+0xb4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4283      	cmp	r3, r0
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	4604      	mov	r4, r0
 80053d6:	d051      	beq.n	800547c <_reclaim_reent+0xb0>
 80053d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053da:	b143      	cbz	r3, 80053ee <_reclaim_reent+0x22>
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d14a      	bne.n	8005478 <_reclaim_reent+0xac>
 80053e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	b111      	cbz	r1, 80053ee <_reclaim_reent+0x22>
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 f985 	bl	80056f8 <_free_r>
 80053ee:	6961      	ldr	r1, [r4, #20]
 80053f0:	b111      	cbz	r1, 80053f8 <_reclaim_reent+0x2c>
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f980 	bl	80056f8 <_free_r>
 80053f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053fa:	b111      	cbz	r1, 8005402 <_reclaim_reent+0x36>
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 f97b 	bl	80056f8 <_free_r>
 8005402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005404:	b111      	cbz	r1, 800540c <_reclaim_reent+0x40>
 8005406:	4620      	mov	r0, r4
 8005408:	f000 f976 	bl	80056f8 <_free_r>
 800540c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800540e:	b111      	cbz	r1, 8005416 <_reclaim_reent+0x4a>
 8005410:	4620      	mov	r0, r4
 8005412:	f000 f971 	bl	80056f8 <_free_r>
 8005416:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005418:	b111      	cbz	r1, 8005420 <_reclaim_reent+0x54>
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f96c 	bl	80056f8 <_free_r>
 8005420:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005422:	b111      	cbz	r1, 800542a <_reclaim_reent+0x5e>
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f967 	bl	80056f8 <_free_r>
 800542a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800542c:	b111      	cbz	r1, 8005434 <_reclaim_reent+0x68>
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f962 	bl	80056f8 <_free_r>
 8005434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005436:	b111      	cbz	r1, 800543e <_reclaim_reent+0x72>
 8005438:	4620      	mov	r0, r4
 800543a:	f000 f95d 	bl	80056f8 <_free_r>
 800543e:	69a3      	ldr	r3, [r4, #24]
 8005440:	b1e3      	cbz	r3, 800547c <_reclaim_reent+0xb0>
 8005442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005444:	4620      	mov	r0, r4
 8005446:	4798      	blx	r3
 8005448:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800544a:	b1b9      	cbz	r1, 800547c <_reclaim_reent+0xb0>
 800544c:	4620      	mov	r0, r4
 800544e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005452:	f7ff bfad 	b.w	80053b0 <cleanup_glue>
 8005456:	5949      	ldr	r1, [r1, r5]
 8005458:	b941      	cbnz	r1, 800546c <_reclaim_reent+0xa0>
 800545a:	3504      	adds	r5, #4
 800545c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800545e:	2d80      	cmp	r5, #128	; 0x80
 8005460:	68d9      	ldr	r1, [r3, #12]
 8005462:	d1f8      	bne.n	8005456 <_reclaim_reent+0x8a>
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f947 	bl	80056f8 <_free_r>
 800546a:	e7ba      	b.n	80053e2 <_reclaim_reent+0x16>
 800546c:	680e      	ldr	r6, [r1, #0]
 800546e:	4620      	mov	r0, r4
 8005470:	f000 f942 	bl	80056f8 <_free_r>
 8005474:	4631      	mov	r1, r6
 8005476:	e7ef      	b.n	8005458 <_reclaim_reent+0x8c>
 8005478:	2500      	movs	r5, #0
 800547a:	e7ef      	b.n	800545c <_reclaim_reent+0x90>
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	bf00      	nop
 8005480:	20000010 	.word	0x20000010

08005484 <_sbrk_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4c06      	ldr	r4, [pc, #24]	; (80054a0 <_sbrk_r+0x1c>)
 8005488:	2300      	movs	r3, #0
 800548a:	4605      	mov	r5, r0
 800548c:	4608      	mov	r0, r1
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	f7fb fb64 	bl	8000b5c <_sbrk>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_sbrk_r+0x1a>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	b103      	cbz	r3, 800549e <_sbrk_r+0x1a>
 800549c:	602b      	str	r3, [r5, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	20004b34 	.word	0x20004b34

080054a4 <__sread>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	460c      	mov	r4, r1
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	f000 fc3a 	bl	8005d24 <_read_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	bfab      	itete	ge
 80054b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054b6:	89a3      	ldrhlt	r3, [r4, #12]
 80054b8:	181b      	addge	r3, r3, r0
 80054ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054be:	bfac      	ite	ge
 80054c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054c2:	81a3      	strhlt	r3, [r4, #12]
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <__swrite>:
 80054c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	461f      	mov	r7, r3
 80054cc:	898b      	ldrh	r3, [r1, #12]
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	4605      	mov	r5, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	4616      	mov	r6, r2
 80054d6:	d505      	bpl.n	80054e4 <__swrite+0x1e>
 80054d8:	2302      	movs	r3, #2
 80054da:	2200      	movs	r2, #0
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	f000 f8f6 	bl	80056d0 <_lseek_r>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	4632      	mov	r2, r6
 80054f2:	463b      	mov	r3, r7
 80054f4:	4628      	mov	r0, r5
 80054f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	f000 b817 	b.w	800552c <_write_r>

080054fe <__sseek>:
 80054fe:	b510      	push	{r4, lr}
 8005500:	460c      	mov	r4, r1
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 f8e3 	bl	80056d0 <_lseek_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	bf15      	itete	ne
 8005510:	6560      	strne	r0, [r4, #84]	; 0x54
 8005512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800551a:	81a3      	strheq	r3, [r4, #12]
 800551c:	bf18      	it	ne
 800551e:	81a3      	strhne	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__sclose>:
 8005522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005526:	f000 b813 	b.w	8005550 <_close_r>
	...

0800552c <_write_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4c07      	ldr	r4, [pc, #28]	; (800554c <_write_r+0x20>)
 8005530:	4605      	mov	r5, r0
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	2200      	movs	r2, #0
 8005538:	6022      	str	r2, [r4, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	f7fb fabd 	bl	8000aba <_write>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_write_r+0x1e>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	b103      	cbz	r3, 800554a <_write_r+0x1e>
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20004b34 	.word	0x20004b34

08005550 <_close_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4c06      	ldr	r4, [pc, #24]	; (800556c <_close_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4605      	mov	r5, r0
 8005558:	4608      	mov	r0, r1
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	f7fb fac9 	bl	8000af2 <_close>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_close_r+0x1a>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	b103      	cbz	r3, 800556a <_close_r+0x1a>
 8005568:	602b      	str	r3, [r5, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20004b34 	.word	0x20004b34

08005570 <__sflush_r>:
 8005570:	898a      	ldrh	r2, [r1, #12]
 8005572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	4605      	mov	r5, r0
 8005578:	0710      	lsls	r0, r2, #28
 800557a:	460c      	mov	r4, r1
 800557c:	d458      	bmi.n	8005630 <__sflush_r+0xc0>
 800557e:	684b      	ldr	r3, [r1, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dc05      	bgt.n	8005590 <__sflush_r+0x20>
 8005584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	dc02      	bgt.n	8005590 <__sflush_r+0x20>
 800558a:	2000      	movs	r0, #0
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005592:	2e00      	cmp	r6, #0
 8005594:	d0f9      	beq.n	800558a <__sflush_r+0x1a>
 8005596:	2300      	movs	r3, #0
 8005598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800559c:	682f      	ldr	r7, [r5, #0]
 800559e:	6a21      	ldr	r1, [r4, #32]
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	d032      	beq.n	800560a <__sflush_r+0x9a>
 80055a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	075a      	lsls	r2, r3, #29
 80055aa:	d505      	bpl.n	80055b8 <__sflush_r+0x48>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	1ac0      	subs	r0, r0, r3
 80055b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055b2:	b10b      	cbz	r3, 80055b8 <__sflush_r+0x48>
 80055b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b6:	1ac0      	subs	r0, r0, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	4602      	mov	r2, r0
 80055bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055be:	6a21      	ldr	r1, [r4, #32]
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b0      	blx	r6
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	d106      	bne.n	80055d8 <__sflush_r+0x68>
 80055ca:	6829      	ldr	r1, [r5, #0]
 80055cc:	291d      	cmp	r1, #29
 80055ce:	d848      	bhi.n	8005662 <__sflush_r+0xf2>
 80055d0:	4a29      	ldr	r2, [pc, #164]	; (8005678 <__sflush_r+0x108>)
 80055d2:	40ca      	lsrs	r2, r1
 80055d4:	07d6      	lsls	r6, r2, #31
 80055d6:	d544      	bpl.n	8005662 <__sflush_r+0xf2>
 80055d8:	2200      	movs	r2, #0
 80055da:	6062      	str	r2, [r4, #4]
 80055dc:	04d9      	lsls	r1, r3, #19
 80055de:	6922      	ldr	r2, [r4, #16]
 80055e0:	6022      	str	r2, [r4, #0]
 80055e2:	d504      	bpl.n	80055ee <__sflush_r+0x7e>
 80055e4:	1c42      	adds	r2, r0, #1
 80055e6:	d101      	bne.n	80055ec <__sflush_r+0x7c>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b903      	cbnz	r3, 80055ee <__sflush_r+0x7e>
 80055ec:	6560      	str	r0, [r4, #84]	; 0x54
 80055ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f0:	602f      	str	r7, [r5, #0]
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d0c9      	beq.n	800558a <__sflush_r+0x1a>
 80055f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055fa:	4299      	cmp	r1, r3
 80055fc:	d002      	beq.n	8005604 <__sflush_r+0x94>
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 f87a 	bl	80056f8 <_free_r>
 8005604:	2000      	movs	r0, #0
 8005606:	6360      	str	r0, [r4, #52]	; 0x34
 8005608:	e7c0      	b.n	800558c <__sflush_r+0x1c>
 800560a:	2301      	movs	r3, #1
 800560c:	4628      	mov	r0, r5
 800560e:	47b0      	blx	r6
 8005610:	1c41      	adds	r1, r0, #1
 8005612:	d1c8      	bne.n	80055a6 <__sflush_r+0x36>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c5      	beq.n	80055a6 <__sflush_r+0x36>
 800561a:	2b1d      	cmp	r3, #29
 800561c:	d001      	beq.n	8005622 <__sflush_r+0xb2>
 800561e:	2b16      	cmp	r3, #22
 8005620:	d101      	bne.n	8005626 <__sflush_r+0xb6>
 8005622:	602f      	str	r7, [r5, #0]
 8005624:	e7b1      	b.n	800558a <__sflush_r+0x1a>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	e7ad      	b.n	800558c <__sflush_r+0x1c>
 8005630:	690f      	ldr	r7, [r1, #16]
 8005632:	2f00      	cmp	r7, #0
 8005634:	d0a9      	beq.n	800558a <__sflush_r+0x1a>
 8005636:	0793      	lsls	r3, r2, #30
 8005638:	680e      	ldr	r6, [r1, #0]
 800563a:	bf08      	it	eq
 800563c:	694b      	ldreq	r3, [r1, #20]
 800563e:	600f      	str	r7, [r1, #0]
 8005640:	bf18      	it	ne
 8005642:	2300      	movne	r3, #0
 8005644:	eba6 0807 	sub.w	r8, r6, r7
 8005648:	608b      	str	r3, [r1, #8]
 800564a:	f1b8 0f00 	cmp.w	r8, #0
 800564e:	dd9c      	ble.n	800558a <__sflush_r+0x1a>
 8005650:	4643      	mov	r3, r8
 8005652:	463a      	mov	r2, r7
 8005654:	6a21      	ldr	r1, [r4, #32]
 8005656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005658:	4628      	mov	r0, r5
 800565a:	47b0      	blx	r6
 800565c:	2800      	cmp	r0, #0
 800565e:	dc06      	bgt.n	800566e <__sflush_r+0xfe>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e78e      	b.n	800558c <__sflush_r+0x1c>
 800566e:	4407      	add	r7, r0
 8005670:	eba8 0800 	sub.w	r8, r8, r0
 8005674:	e7e9      	b.n	800564a <__sflush_r+0xda>
 8005676:	bf00      	nop
 8005678:	20400001 	.word	0x20400001

0800567c <_fflush_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	690b      	ldr	r3, [r1, #16]
 8005680:	4605      	mov	r5, r0
 8005682:	460c      	mov	r4, r1
 8005684:	b1db      	cbz	r3, 80056be <_fflush_r+0x42>
 8005686:	b118      	cbz	r0, 8005690 <_fflush_r+0x14>
 8005688:	6983      	ldr	r3, [r0, #24]
 800568a:	b90b      	cbnz	r3, 8005690 <_fflush_r+0x14>
 800568c:	f7ff fd5c 	bl	8005148 <__sinit>
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <_fflush_r+0x48>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d109      	bne.n	80056aa <_fflush_r+0x2e>
 8005696:	686c      	ldr	r4, [r5, #4]
 8005698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800569c:	b17b      	cbz	r3, 80056be <_fflush_r+0x42>
 800569e:	4621      	mov	r1, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a6:	f7ff bf63 	b.w	8005570 <__sflush_r>
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <_fflush_r+0x4c>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	d101      	bne.n	80056b4 <_fflush_r+0x38>
 80056b0:	68ac      	ldr	r4, [r5, #8]
 80056b2:	e7f1      	b.n	8005698 <_fflush_r+0x1c>
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <_fflush_r+0x50>)
 80056b6:	429c      	cmp	r4, r3
 80056b8:	bf08      	it	eq
 80056ba:	68ec      	ldreq	r4, [r5, #12]
 80056bc:	e7ec      	b.n	8005698 <_fflush_r+0x1c>
 80056be:	2000      	movs	r0, #0
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	bf00      	nop
 80056c4:	08006090 	.word	0x08006090
 80056c8:	080060b0 	.word	0x080060b0
 80056cc:	08006070 	.word	0x08006070

080056d0 <_lseek_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4c07      	ldr	r4, [pc, #28]	; (80056f0 <_lseek_r+0x20>)
 80056d4:	4605      	mov	r5, r0
 80056d6:	4608      	mov	r0, r1
 80056d8:	4611      	mov	r1, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	6022      	str	r2, [r4, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f7fb fa2e 	bl	8000b40 <_lseek>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_lseek_r+0x1e>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_lseek_r+0x1e>
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	20004b34 	.word	0x20004b34

080056f4 <__malloc_lock>:
 80056f4:	4770      	bx	lr

080056f6 <__malloc_unlock>:
 80056f6:	4770      	bx	lr

080056f8 <_free_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4605      	mov	r5, r0
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d045      	beq.n	800578c <_free_r+0x94>
 8005700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005704:	1f0c      	subs	r4, r1, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfb8      	it	lt
 800570a:	18e4      	addlt	r4, r4, r3
 800570c:	f7ff fff2 	bl	80056f4 <__malloc_lock>
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <_free_r+0x98>)
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	4610      	mov	r0, r2
 8005716:	b933      	cbnz	r3, 8005726 <_free_r+0x2e>
 8005718:	6063      	str	r3, [r4, #4]
 800571a:	6014      	str	r4, [r2, #0]
 800571c:	4628      	mov	r0, r5
 800571e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005722:	f7ff bfe8 	b.w	80056f6 <__malloc_unlock>
 8005726:	42a3      	cmp	r3, r4
 8005728:	d90c      	bls.n	8005744 <_free_r+0x4c>
 800572a:	6821      	ldr	r1, [r4, #0]
 800572c:	1862      	adds	r2, r4, r1
 800572e:	4293      	cmp	r3, r2
 8005730:	bf04      	itt	eq
 8005732:	681a      	ldreq	r2, [r3, #0]
 8005734:	685b      	ldreq	r3, [r3, #4]
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	bf04      	itt	eq
 800573a:	1852      	addeq	r2, r2, r1
 800573c:	6022      	streq	r2, [r4, #0]
 800573e:	6004      	str	r4, [r0, #0]
 8005740:	e7ec      	b.n	800571c <_free_r+0x24>
 8005742:	4613      	mov	r3, r2
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	b10a      	cbz	r2, 800574c <_free_r+0x54>
 8005748:	42a2      	cmp	r2, r4
 800574a:	d9fa      	bls.n	8005742 <_free_r+0x4a>
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	1858      	adds	r0, r3, r1
 8005750:	42a0      	cmp	r0, r4
 8005752:	d10b      	bne.n	800576c <_free_r+0x74>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	4401      	add	r1, r0
 8005758:	1858      	adds	r0, r3, r1
 800575a:	4282      	cmp	r2, r0
 800575c:	6019      	str	r1, [r3, #0]
 800575e:	d1dd      	bne.n	800571c <_free_r+0x24>
 8005760:	6810      	ldr	r0, [r2, #0]
 8005762:	6852      	ldr	r2, [r2, #4]
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	4401      	add	r1, r0
 8005768:	6019      	str	r1, [r3, #0]
 800576a:	e7d7      	b.n	800571c <_free_r+0x24>
 800576c:	d902      	bls.n	8005774 <_free_r+0x7c>
 800576e:	230c      	movs	r3, #12
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	e7d3      	b.n	800571c <_free_r+0x24>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	1821      	adds	r1, r4, r0
 8005778:	428a      	cmp	r2, r1
 800577a:	bf04      	itt	eq
 800577c:	6811      	ldreq	r1, [r2, #0]
 800577e:	6852      	ldreq	r2, [r2, #4]
 8005780:	6062      	str	r2, [r4, #4]
 8005782:	bf04      	itt	eq
 8005784:	1809      	addeq	r1, r1, r0
 8005786:	6021      	streq	r1, [r4, #0]
 8005788:	605c      	str	r4, [r3, #4]
 800578a:	e7c7      	b.n	800571c <_free_r+0x24>
 800578c:	bd38      	pop	{r3, r4, r5, pc}
 800578e:	bf00      	nop
 8005790:	20004a68 	.word	0x20004a68

08005794 <__sfputc_r>:
 8005794:	6893      	ldr	r3, [r2, #8]
 8005796:	3b01      	subs	r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	b410      	push	{r4}
 800579c:	6093      	str	r3, [r2, #8]
 800579e:	da08      	bge.n	80057b2 <__sfputc_r+0x1e>
 80057a0:	6994      	ldr	r4, [r2, #24]
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	db01      	blt.n	80057aa <__sfputc_r+0x16>
 80057a6:	290a      	cmp	r1, #10
 80057a8:	d103      	bne.n	80057b2 <__sfputc_r+0x1e>
 80057aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ae:	f000 bacb 	b.w	8005d48 <__swbuf_r>
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	1c58      	adds	r0, r3, #1
 80057b6:	6010      	str	r0, [r2, #0]
 80057b8:	7019      	strb	r1, [r3, #0]
 80057ba:	4608      	mov	r0, r1
 80057bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <__sfputs_r>:
 80057c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	4614      	mov	r4, r2
 80057ca:	18d5      	adds	r5, r2, r3
 80057cc:	42ac      	cmp	r4, r5
 80057ce:	d101      	bne.n	80057d4 <__sfputs_r+0x12>
 80057d0:	2000      	movs	r0, #0
 80057d2:	e007      	b.n	80057e4 <__sfputs_r+0x22>
 80057d4:	463a      	mov	r2, r7
 80057d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057da:	4630      	mov	r0, r6
 80057dc:	f7ff ffda 	bl	8005794 <__sfputc_r>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d1f3      	bne.n	80057cc <__sfputs_r+0xa>
 80057e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057e8 <_vfiprintf_r>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	460c      	mov	r4, r1
 80057ee:	b09d      	sub	sp, #116	; 0x74
 80057f0:	4617      	mov	r7, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	4606      	mov	r6, r0
 80057f6:	b118      	cbz	r0, 8005800 <_vfiprintf_r+0x18>
 80057f8:	6983      	ldr	r3, [r0, #24]
 80057fa:	b90b      	cbnz	r3, 8005800 <_vfiprintf_r+0x18>
 80057fc:	f7ff fca4 	bl	8005148 <__sinit>
 8005800:	4b7c      	ldr	r3, [pc, #496]	; (80059f4 <_vfiprintf_r+0x20c>)
 8005802:	429c      	cmp	r4, r3
 8005804:	d158      	bne.n	80058b8 <_vfiprintf_r+0xd0>
 8005806:	6874      	ldr	r4, [r6, #4]
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	0718      	lsls	r0, r3, #28
 800580c:	d55e      	bpl.n	80058cc <_vfiprintf_r+0xe4>
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05b      	beq.n	80058cc <_vfiprintf_r+0xe4>
 8005814:	2300      	movs	r3, #0
 8005816:	9309      	str	r3, [sp, #36]	; 0x24
 8005818:	2320      	movs	r3, #32
 800581a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800581e:	2330      	movs	r3, #48	; 0x30
 8005820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005824:	9503      	str	r5, [sp, #12]
 8005826:	f04f 0b01 	mov.w	fp, #1
 800582a:	46b8      	mov	r8, r7
 800582c:	4645      	mov	r5, r8
 800582e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005832:	b10b      	cbz	r3, 8005838 <_vfiprintf_r+0x50>
 8005834:	2b25      	cmp	r3, #37	; 0x25
 8005836:	d154      	bne.n	80058e2 <_vfiprintf_r+0xfa>
 8005838:	ebb8 0a07 	subs.w	sl, r8, r7
 800583c:	d00b      	beq.n	8005856 <_vfiprintf_r+0x6e>
 800583e:	4653      	mov	r3, sl
 8005840:	463a      	mov	r2, r7
 8005842:	4621      	mov	r1, r4
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff ffbc 	bl	80057c2 <__sfputs_r>
 800584a:	3001      	adds	r0, #1
 800584c:	f000 80c2 	beq.w	80059d4 <_vfiprintf_r+0x1ec>
 8005850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005852:	4453      	add	r3, sl
 8005854:	9309      	str	r3, [sp, #36]	; 0x24
 8005856:	f898 3000 	ldrb.w	r3, [r8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80ba 	beq.w	80059d4 <_vfiprintf_r+0x1ec>
 8005860:	2300      	movs	r3, #0
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005872:	931a      	str	r3, [sp, #104]	; 0x68
 8005874:	46a8      	mov	r8, r5
 8005876:	2205      	movs	r2, #5
 8005878:	f818 1b01 	ldrb.w	r1, [r8], #1
 800587c:	485e      	ldr	r0, [pc, #376]	; (80059f8 <_vfiprintf_r+0x210>)
 800587e:	f7fa fcaf 	bl	80001e0 <memchr>
 8005882:	9b04      	ldr	r3, [sp, #16]
 8005884:	bb78      	cbnz	r0, 80058e6 <_vfiprintf_r+0xfe>
 8005886:	06d9      	lsls	r1, r3, #27
 8005888:	bf44      	itt	mi
 800588a:	2220      	movmi	r2, #32
 800588c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005890:	071a      	lsls	r2, r3, #28
 8005892:	bf44      	itt	mi
 8005894:	222b      	movmi	r2, #43	; 0x2b
 8005896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800589a:	782a      	ldrb	r2, [r5, #0]
 800589c:	2a2a      	cmp	r2, #42	; 0x2a
 800589e:	d02a      	beq.n	80058f6 <_vfiprintf_r+0x10e>
 80058a0:	9a07      	ldr	r2, [sp, #28]
 80058a2:	46a8      	mov	r8, r5
 80058a4:	2000      	movs	r0, #0
 80058a6:	250a      	movs	r5, #10
 80058a8:	4641      	mov	r1, r8
 80058aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ae:	3b30      	subs	r3, #48	; 0x30
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d969      	bls.n	8005988 <_vfiprintf_r+0x1a0>
 80058b4:	b360      	cbz	r0, 8005910 <_vfiprintf_r+0x128>
 80058b6:	e024      	b.n	8005902 <_vfiprintf_r+0x11a>
 80058b8:	4b50      	ldr	r3, [pc, #320]	; (80059fc <_vfiprintf_r+0x214>)
 80058ba:	429c      	cmp	r4, r3
 80058bc:	d101      	bne.n	80058c2 <_vfiprintf_r+0xda>
 80058be:	68b4      	ldr	r4, [r6, #8]
 80058c0:	e7a2      	b.n	8005808 <_vfiprintf_r+0x20>
 80058c2:	4b4f      	ldr	r3, [pc, #316]	; (8005a00 <_vfiprintf_r+0x218>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	bf08      	it	eq
 80058c8:	68f4      	ldreq	r4, [r6, #12]
 80058ca:	e79d      	b.n	8005808 <_vfiprintf_r+0x20>
 80058cc:	4621      	mov	r1, r4
 80058ce:	4630      	mov	r0, r6
 80058d0:	f000 fa8c 	bl	8005dec <__swsetup_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d09d      	beq.n	8005814 <_vfiprintf_r+0x2c>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	b01d      	add	sp, #116	; 0x74
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	46a8      	mov	r8, r5
 80058e4:	e7a2      	b.n	800582c <_vfiprintf_r+0x44>
 80058e6:	4a44      	ldr	r2, [pc, #272]	; (80059f8 <_vfiprintf_r+0x210>)
 80058e8:	1a80      	subs	r0, r0, r2
 80058ea:	fa0b f000 	lsl.w	r0, fp, r0
 80058ee:	4318      	orrs	r0, r3
 80058f0:	9004      	str	r0, [sp, #16]
 80058f2:	4645      	mov	r5, r8
 80058f4:	e7be      	b.n	8005874 <_vfiprintf_r+0x8c>
 80058f6:	9a03      	ldr	r2, [sp, #12]
 80058f8:	1d11      	adds	r1, r2, #4
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	9103      	str	r1, [sp, #12]
 80058fe:	2a00      	cmp	r2, #0
 8005900:	db01      	blt.n	8005906 <_vfiprintf_r+0x11e>
 8005902:	9207      	str	r2, [sp, #28]
 8005904:	e004      	b.n	8005910 <_vfiprintf_r+0x128>
 8005906:	4252      	negs	r2, r2
 8005908:	f043 0302 	orr.w	r3, r3, #2
 800590c:	9207      	str	r2, [sp, #28]
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	f898 3000 	ldrb.w	r3, [r8]
 8005914:	2b2e      	cmp	r3, #46	; 0x2e
 8005916:	d10e      	bne.n	8005936 <_vfiprintf_r+0x14e>
 8005918:	f898 3001 	ldrb.w	r3, [r8, #1]
 800591c:	2b2a      	cmp	r3, #42	; 0x2a
 800591e:	d138      	bne.n	8005992 <_vfiprintf_r+0x1aa>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	9203      	str	r2, [sp, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfb8      	it	lt
 800592c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005930:	f108 0802 	add.w	r8, r8, #2
 8005934:	9305      	str	r3, [sp, #20]
 8005936:	4d33      	ldr	r5, [pc, #204]	; (8005a04 <_vfiprintf_r+0x21c>)
 8005938:	f898 1000 	ldrb.w	r1, [r8]
 800593c:	2203      	movs	r2, #3
 800593e:	4628      	mov	r0, r5
 8005940:	f7fa fc4e 	bl	80001e0 <memchr>
 8005944:	b140      	cbz	r0, 8005958 <_vfiprintf_r+0x170>
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	1b40      	subs	r0, r0, r5
 800594a:	fa03 f000 	lsl.w	r0, r3, r0
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	4303      	orrs	r3, r0
 8005952:	f108 0801 	add.w	r8, r8, #1
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	f898 1000 	ldrb.w	r1, [r8]
 800595c:	482a      	ldr	r0, [pc, #168]	; (8005a08 <_vfiprintf_r+0x220>)
 800595e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005962:	2206      	movs	r2, #6
 8005964:	f108 0701 	add.w	r7, r8, #1
 8005968:	f7fa fc3a 	bl	80001e0 <memchr>
 800596c:	2800      	cmp	r0, #0
 800596e:	d037      	beq.n	80059e0 <_vfiprintf_r+0x1f8>
 8005970:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <_vfiprintf_r+0x224>)
 8005972:	bb1b      	cbnz	r3, 80059bc <_vfiprintf_r+0x1d4>
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	3307      	adds	r3, #7
 8005978:	f023 0307 	bic.w	r3, r3, #7
 800597c:	3308      	adds	r3, #8
 800597e:	9303      	str	r3, [sp, #12]
 8005980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005982:	444b      	add	r3, r9
 8005984:	9309      	str	r3, [sp, #36]	; 0x24
 8005986:	e750      	b.n	800582a <_vfiprintf_r+0x42>
 8005988:	fb05 3202 	mla	r2, r5, r2, r3
 800598c:	2001      	movs	r0, #1
 800598e:	4688      	mov	r8, r1
 8005990:	e78a      	b.n	80058a8 <_vfiprintf_r+0xc0>
 8005992:	2300      	movs	r3, #0
 8005994:	f108 0801 	add.w	r8, r8, #1
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	4619      	mov	r1, r3
 800599c:	250a      	movs	r5, #10
 800599e:	4640      	mov	r0, r8
 80059a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059a4:	3a30      	subs	r2, #48	; 0x30
 80059a6:	2a09      	cmp	r2, #9
 80059a8:	d903      	bls.n	80059b2 <_vfiprintf_r+0x1ca>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0c3      	beq.n	8005936 <_vfiprintf_r+0x14e>
 80059ae:	9105      	str	r1, [sp, #20]
 80059b0:	e7c1      	b.n	8005936 <_vfiprintf_r+0x14e>
 80059b2:	fb05 2101 	mla	r1, r5, r1, r2
 80059b6:	2301      	movs	r3, #1
 80059b8:	4680      	mov	r8, r0
 80059ba:	e7f0      	b.n	800599e <_vfiprintf_r+0x1b6>
 80059bc:	ab03      	add	r3, sp, #12
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	4622      	mov	r2, r4
 80059c2:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <_vfiprintf_r+0x228>)
 80059c4:	a904      	add	r1, sp, #16
 80059c6:	4630      	mov	r0, r6
 80059c8:	f3af 8000 	nop.w
 80059cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059d0:	4681      	mov	r9, r0
 80059d2:	d1d5      	bne.n	8005980 <_vfiprintf_r+0x198>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	065b      	lsls	r3, r3, #25
 80059d8:	f53f af7e 	bmi.w	80058d8 <_vfiprintf_r+0xf0>
 80059dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059de:	e77d      	b.n	80058dc <_vfiprintf_r+0xf4>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4622      	mov	r2, r4
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <_vfiprintf_r+0x228>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4630      	mov	r0, r6
 80059ec:	f000 f888 	bl	8005b00 <_printf_i>
 80059f0:	e7ec      	b.n	80059cc <_vfiprintf_r+0x1e4>
 80059f2:	bf00      	nop
 80059f4:	08006090 	.word	0x08006090
 80059f8:	080060d4 	.word	0x080060d4
 80059fc:	080060b0 	.word	0x080060b0
 8005a00:	08006070 	.word	0x08006070
 8005a04:	080060da 	.word	0x080060da
 8005a08:	080060de 	.word	0x080060de
 8005a0c:	00000000 	.word	0x00000000
 8005a10:	080057c3 	.word	0x080057c3

08005a14 <_printf_common>:
 8005a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	4691      	mov	r9, r2
 8005a1a:	461f      	mov	r7, r3
 8005a1c:	688a      	ldr	r2, [r1, #8]
 8005a1e:	690b      	ldr	r3, [r1, #16]
 8005a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	bfb8      	it	lt
 8005a28:	4613      	movlt	r3, r2
 8005a2a:	f8c9 3000 	str.w	r3, [r9]
 8005a2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a32:	4606      	mov	r6, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	b112      	cbz	r2, 8005a3e <_printf_common+0x2a>
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f8c9 3000 	str.w	r3, [r9]
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	0699      	lsls	r1, r3, #26
 8005a42:	bf42      	ittt	mi
 8005a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a48:	3302      	addmi	r3, #2
 8005a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d107      	bne.n	8005a66 <_printf_common+0x52>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	42ab      	cmp	r3, r5
 8005a64:	dc28      	bgt.n	8005ab8 <_printf_common+0xa4>
 8005a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	3300      	adds	r3, #0
 8005a6e:	bf18      	it	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	0692      	lsls	r2, r2, #26
 8005a74:	d42d      	bmi.n	8005ad2 <_printf_common+0xbe>
 8005a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	47c0      	blx	r8
 8005a80:	3001      	adds	r0, #1
 8005a82:	d020      	beq.n	8005ac6 <_printf_common+0xb2>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	68e5      	ldr	r5, [r4, #12]
 8005a88:	f8d9 2000 	ldr.w	r2, [r9]
 8005a8c:	f003 0306 	and.w	r3, r3, #6
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	bf08      	it	eq
 8005a94:	1aad      	subeq	r5, r5, r2
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	bf0c      	ite	eq
 8005a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa0:	2500      	movne	r5, #0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bfc4      	itt	gt
 8005aa6:	1a9b      	subgt	r3, r3, r2
 8005aa8:	18ed      	addgt	r5, r5, r3
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	341a      	adds	r4, #26
 8005ab0:	454d      	cmp	r5, r9
 8005ab2:	d11a      	bne.n	8005aea <_printf_common+0xd6>
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	e008      	b.n	8005aca <_printf_common+0xb6>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4652      	mov	r2, sl
 8005abc:	4639      	mov	r1, r7
 8005abe:	4630      	mov	r0, r6
 8005ac0:	47c0      	blx	r8
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d103      	bne.n	8005ace <_printf_common+0xba>
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ace:	3501      	adds	r5, #1
 8005ad0:	e7c3      	b.n	8005a5a <_printf_common+0x46>
 8005ad2:	18e1      	adds	r1, r4, r3
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	2030      	movs	r0, #48	; 0x30
 8005ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005adc:	4422      	add	r2, r4
 8005ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	e7c5      	b.n	8005a76 <_printf_common+0x62>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4622      	mov	r2, r4
 8005aee:	4639      	mov	r1, r7
 8005af0:	4630      	mov	r0, r6
 8005af2:	47c0      	blx	r8
 8005af4:	3001      	adds	r0, #1
 8005af6:	d0e6      	beq.n	8005ac6 <_printf_common+0xb2>
 8005af8:	f109 0901 	add.w	r9, r9, #1
 8005afc:	e7d8      	b.n	8005ab0 <_printf_common+0x9c>
	...

08005b00 <_printf_i>:
 8005b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b08:	460c      	mov	r4, r1
 8005b0a:	7e09      	ldrb	r1, [r1, #24]
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	296e      	cmp	r1, #110	; 0x6e
 8005b10:	4617      	mov	r7, r2
 8005b12:	4606      	mov	r6, r0
 8005b14:	4698      	mov	r8, r3
 8005b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b18:	f000 80b3 	beq.w	8005c82 <_printf_i+0x182>
 8005b1c:	d822      	bhi.n	8005b64 <_printf_i+0x64>
 8005b1e:	2963      	cmp	r1, #99	; 0x63
 8005b20:	d036      	beq.n	8005b90 <_printf_i+0x90>
 8005b22:	d80a      	bhi.n	8005b3a <_printf_i+0x3a>
 8005b24:	2900      	cmp	r1, #0
 8005b26:	f000 80b9 	beq.w	8005c9c <_printf_i+0x19c>
 8005b2a:	2958      	cmp	r1, #88	; 0x58
 8005b2c:	f000 8083 	beq.w	8005c36 <_printf_i+0x136>
 8005b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b38:	e032      	b.n	8005ba0 <_printf_i+0xa0>
 8005b3a:	2964      	cmp	r1, #100	; 0x64
 8005b3c:	d001      	beq.n	8005b42 <_printf_i+0x42>
 8005b3e:	2969      	cmp	r1, #105	; 0x69
 8005b40:	d1f6      	bne.n	8005b30 <_printf_i+0x30>
 8005b42:	6820      	ldr	r0, [r4, #0]
 8005b44:	6813      	ldr	r3, [r2, #0]
 8005b46:	0605      	lsls	r5, r0, #24
 8005b48:	f103 0104 	add.w	r1, r3, #4
 8005b4c:	d52a      	bpl.n	8005ba4 <_printf_i+0xa4>
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6011      	str	r1, [r2, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da03      	bge.n	8005b5e <_printf_i+0x5e>
 8005b56:	222d      	movs	r2, #45	; 0x2d
 8005b58:	425b      	negs	r3, r3
 8005b5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b5e:	486f      	ldr	r0, [pc, #444]	; (8005d1c <_printf_i+0x21c>)
 8005b60:	220a      	movs	r2, #10
 8005b62:	e039      	b.n	8005bd8 <_printf_i+0xd8>
 8005b64:	2973      	cmp	r1, #115	; 0x73
 8005b66:	f000 809d 	beq.w	8005ca4 <_printf_i+0x1a4>
 8005b6a:	d808      	bhi.n	8005b7e <_printf_i+0x7e>
 8005b6c:	296f      	cmp	r1, #111	; 0x6f
 8005b6e:	d020      	beq.n	8005bb2 <_printf_i+0xb2>
 8005b70:	2970      	cmp	r1, #112	; 0x70
 8005b72:	d1dd      	bne.n	8005b30 <_printf_i+0x30>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	f043 0320 	orr.w	r3, r3, #32
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	e003      	b.n	8005b86 <_printf_i+0x86>
 8005b7e:	2975      	cmp	r1, #117	; 0x75
 8005b80:	d017      	beq.n	8005bb2 <_printf_i+0xb2>
 8005b82:	2978      	cmp	r1, #120	; 0x78
 8005b84:	d1d4      	bne.n	8005b30 <_printf_i+0x30>
 8005b86:	2378      	movs	r3, #120	; 0x78
 8005b88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b8c:	4864      	ldr	r0, [pc, #400]	; (8005d20 <_printf_i+0x220>)
 8005b8e:	e055      	b.n	8005c3c <_printf_i+0x13c>
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	1d19      	adds	r1, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6011      	str	r1, [r2, #0]
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e08c      	b.n	8005cbe <_printf_i+0x1be>
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6011      	str	r1, [r2, #0]
 8005ba8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bac:	bf18      	it	ne
 8005bae:	b21b      	sxthne	r3, r3
 8005bb0:	e7cf      	b.n	8005b52 <_printf_i+0x52>
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1d18      	adds	r0, r3, #4
 8005bb8:	6010      	str	r0, [r2, #0]
 8005bba:	0628      	lsls	r0, r5, #24
 8005bbc:	d501      	bpl.n	8005bc2 <_printf_i+0xc2>
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	e002      	b.n	8005bc8 <_printf_i+0xc8>
 8005bc2:	0668      	lsls	r0, r5, #25
 8005bc4:	d5fb      	bpl.n	8005bbe <_printf_i+0xbe>
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	4854      	ldr	r0, [pc, #336]	; (8005d1c <_printf_i+0x21c>)
 8005bca:	296f      	cmp	r1, #111	; 0x6f
 8005bcc:	bf14      	ite	ne
 8005bce:	220a      	movne	r2, #10
 8005bd0:	2208      	moveq	r2, #8
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bd8:	6865      	ldr	r5, [r4, #4]
 8005bda:	60a5      	str	r5, [r4, #8]
 8005bdc:	2d00      	cmp	r5, #0
 8005bde:	f2c0 8095 	blt.w	8005d0c <_printf_i+0x20c>
 8005be2:	6821      	ldr	r1, [r4, #0]
 8005be4:	f021 0104 	bic.w	r1, r1, #4
 8005be8:	6021      	str	r1, [r4, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d13d      	bne.n	8005c6a <_printf_i+0x16a>
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	f040 808e 	bne.w	8005d10 <_printf_i+0x210>
 8005bf4:	4665      	mov	r5, ip
 8005bf6:	2a08      	cmp	r2, #8
 8005bf8:	d10b      	bne.n	8005c12 <_printf_i+0x112>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	07db      	lsls	r3, r3, #31
 8005bfe:	d508      	bpl.n	8005c12 <_printf_i+0x112>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	6862      	ldr	r2, [r4, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	bfde      	ittt	le
 8005c08:	2330      	movle	r3, #48	; 0x30
 8005c0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c12:	ebac 0305 	sub.w	r3, ip, r5
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	f8cd 8000 	str.w	r8, [sp]
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	aa03      	add	r2, sp, #12
 8005c20:	4621      	mov	r1, r4
 8005c22:	4630      	mov	r0, r6
 8005c24:	f7ff fef6 	bl	8005a14 <_printf_common>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d14d      	bne.n	8005cc8 <_printf_i+0x1c8>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	b005      	add	sp, #20
 8005c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c36:	4839      	ldr	r0, [pc, #228]	; (8005d1c <_printf_i+0x21c>)
 8005c38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c3c:	6813      	ldr	r3, [r2, #0]
 8005c3e:	6821      	ldr	r1, [r4, #0]
 8005c40:	1d1d      	adds	r5, r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6015      	str	r5, [r2, #0]
 8005c46:	060a      	lsls	r2, r1, #24
 8005c48:	d50b      	bpl.n	8005c62 <_printf_i+0x162>
 8005c4a:	07ca      	lsls	r2, r1, #31
 8005c4c:	bf44      	itt	mi
 8005c4e:	f041 0120 	orrmi.w	r1, r1, #32
 8005c52:	6021      	strmi	r1, [r4, #0]
 8005c54:	b91b      	cbnz	r3, 8005c5e <_printf_i+0x15e>
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	f022 0220 	bic.w	r2, r2, #32
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	2210      	movs	r2, #16
 8005c60:	e7b7      	b.n	8005bd2 <_printf_i+0xd2>
 8005c62:	064d      	lsls	r5, r1, #25
 8005c64:	bf48      	it	mi
 8005c66:	b29b      	uxthmi	r3, r3
 8005c68:	e7ef      	b.n	8005c4a <_printf_i+0x14a>
 8005c6a:	4665      	mov	r5, ip
 8005c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c70:	fb02 3311 	mls	r3, r2, r1, r3
 8005c74:	5cc3      	ldrb	r3, [r0, r3]
 8005c76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d1f5      	bne.n	8005c6c <_printf_i+0x16c>
 8005c80:	e7b9      	b.n	8005bf6 <_printf_i+0xf6>
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	6961      	ldr	r1, [r4, #20]
 8005c88:	1d18      	adds	r0, r3, #4
 8005c8a:	6010      	str	r0, [r2, #0]
 8005c8c:	0628      	lsls	r0, r5, #24
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	d501      	bpl.n	8005c96 <_printf_i+0x196>
 8005c92:	6019      	str	r1, [r3, #0]
 8005c94:	e002      	b.n	8005c9c <_printf_i+0x19c>
 8005c96:	066a      	lsls	r2, r5, #25
 8005c98:	d5fb      	bpl.n	8005c92 <_printf_i+0x192>
 8005c9a:	8019      	strh	r1, [r3, #0]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	4665      	mov	r5, ip
 8005ca2:	e7b9      	b.n	8005c18 <_printf_i+0x118>
 8005ca4:	6813      	ldr	r3, [r2, #0]
 8005ca6:	1d19      	adds	r1, r3, #4
 8005ca8:	6011      	str	r1, [r2, #0]
 8005caa:	681d      	ldr	r5, [r3, #0]
 8005cac:	6862      	ldr	r2, [r4, #4]
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f7fa fa95 	bl	80001e0 <memchr>
 8005cb6:	b108      	cbz	r0, 8005cbc <_printf_i+0x1bc>
 8005cb8:	1b40      	subs	r0, r0, r5
 8005cba:	6060      	str	r0, [r4, #4]
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc6:	e7a7      	b.n	8005c18 <_printf_i+0x118>
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	462a      	mov	r2, r5
 8005ccc:	4639      	mov	r1, r7
 8005cce:	4630      	mov	r0, r6
 8005cd0:	47c0      	blx	r8
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d0aa      	beq.n	8005c2c <_printf_i+0x12c>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	079b      	lsls	r3, r3, #30
 8005cda:	d413      	bmi.n	8005d04 <_printf_i+0x204>
 8005cdc:	68e0      	ldr	r0, [r4, #12]
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	4298      	cmp	r0, r3
 8005ce2:	bfb8      	it	lt
 8005ce4:	4618      	movlt	r0, r3
 8005ce6:	e7a3      	b.n	8005c30 <_printf_i+0x130>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	464a      	mov	r2, r9
 8005cec:	4639      	mov	r1, r7
 8005cee:	4630      	mov	r0, r6
 8005cf0:	47c0      	blx	r8
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d09a      	beq.n	8005c2c <_printf_i+0x12c>
 8005cf6:	3501      	adds	r5, #1
 8005cf8:	68e3      	ldr	r3, [r4, #12]
 8005cfa:	9a03      	ldr	r2, [sp, #12]
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	42ab      	cmp	r3, r5
 8005d00:	dcf2      	bgt.n	8005ce8 <_printf_i+0x1e8>
 8005d02:	e7eb      	b.n	8005cdc <_printf_i+0x1dc>
 8005d04:	2500      	movs	r5, #0
 8005d06:	f104 0919 	add.w	r9, r4, #25
 8005d0a:	e7f5      	b.n	8005cf8 <_printf_i+0x1f8>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1ac      	bne.n	8005c6a <_printf_i+0x16a>
 8005d10:	7803      	ldrb	r3, [r0, #0]
 8005d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d1a:	e76c      	b.n	8005bf6 <_printf_i+0xf6>
 8005d1c:	080060e5 	.word	0x080060e5
 8005d20:	080060f6 	.word	0x080060f6

08005d24 <_read_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4c07      	ldr	r4, [pc, #28]	; (8005d44 <_read_r+0x20>)
 8005d28:	4605      	mov	r5, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	6022      	str	r2, [r4, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fa fea4 	bl	8000a80 <_read>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_read_r+0x1e>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_read_r+0x1e>
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20004b34 	.word	0x20004b34

08005d48 <__swbuf_r>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	4614      	mov	r4, r2
 8005d4e:	4605      	mov	r5, r0
 8005d50:	b118      	cbz	r0, 8005d5a <__swbuf_r+0x12>
 8005d52:	6983      	ldr	r3, [r0, #24]
 8005d54:	b90b      	cbnz	r3, 8005d5a <__swbuf_r+0x12>
 8005d56:	f7ff f9f7 	bl	8005148 <__sinit>
 8005d5a:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <__swbuf_r+0x98>)
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d12a      	bne.n	8005db6 <__swbuf_r+0x6e>
 8005d60:	686c      	ldr	r4, [r5, #4]
 8005d62:	69a3      	ldr	r3, [r4, #24]
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	071a      	lsls	r2, r3, #28
 8005d6a:	d52e      	bpl.n	8005dca <__swbuf_r+0x82>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b363      	cbz	r3, 8005dca <__swbuf_r+0x82>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	1ac0      	subs	r0, r0, r3
 8005d76:	6963      	ldr	r3, [r4, #20]
 8005d78:	b2f6      	uxtb	r6, r6
 8005d7a:	4283      	cmp	r3, r0
 8005d7c:	4637      	mov	r7, r6
 8005d7e:	dc04      	bgt.n	8005d8a <__swbuf_r+0x42>
 8005d80:	4621      	mov	r1, r4
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff fc7a 	bl	800567c <_fflush_r>
 8005d88:	bb28      	cbnz	r0, 8005dd6 <__swbuf_r+0x8e>
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	60a3      	str	r3, [r4, #8]
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	701e      	strb	r6, [r3, #0]
 8005d98:	6963      	ldr	r3, [r4, #20]
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	4283      	cmp	r3, r0
 8005d9e:	d004      	beq.n	8005daa <__swbuf_r+0x62>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	07db      	lsls	r3, r3, #31
 8005da4:	d519      	bpl.n	8005dda <__swbuf_r+0x92>
 8005da6:	2e0a      	cmp	r6, #10
 8005da8:	d117      	bne.n	8005dda <__swbuf_r+0x92>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff fc65 	bl	800567c <_fflush_r>
 8005db2:	b190      	cbz	r0, 8005dda <__swbuf_r+0x92>
 8005db4:	e00f      	b.n	8005dd6 <__swbuf_r+0x8e>
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <__swbuf_r+0x9c>)
 8005db8:	429c      	cmp	r4, r3
 8005dba:	d101      	bne.n	8005dc0 <__swbuf_r+0x78>
 8005dbc:	68ac      	ldr	r4, [r5, #8]
 8005dbe:	e7d0      	b.n	8005d62 <__swbuf_r+0x1a>
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <__swbuf_r+0xa0>)
 8005dc2:	429c      	cmp	r4, r3
 8005dc4:	bf08      	it	eq
 8005dc6:	68ec      	ldreq	r4, [r5, #12]
 8005dc8:	e7cb      	b.n	8005d62 <__swbuf_r+0x1a>
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 f80d 	bl	8005dec <__swsetup_r>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0cc      	beq.n	8005d70 <__swbuf_r+0x28>
 8005dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8005dda:	4638      	mov	r0, r7
 8005ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	08006090 	.word	0x08006090
 8005de4:	080060b0 	.word	0x080060b0
 8005de8:	08006070 	.word	0x08006070

08005dec <__swsetup_r>:
 8005dec:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <__swsetup_r+0xcc>)
 8005dee:	b570      	push	{r4, r5, r6, lr}
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	4606      	mov	r6, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	b125      	cbz	r5, 8005e02 <__swsetup_r+0x16>
 8005df8:	69ab      	ldr	r3, [r5, #24]
 8005dfa:	b913      	cbnz	r3, 8005e02 <__swsetup_r+0x16>
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f7ff f9a3 	bl	8005148 <__sinit>
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <__swsetup_r+0xd0>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d10f      	bne.n	8005e28 <__swsetup_r+0x3c>
 8005e08:	686c      	ldr	r4, [r5, #4]
 8005e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	0715      	lsls	r5, r2, #28
 8005e12:	d42c      	bmi.n	8005e6e <__swsetup_r+0x82>
 8005e14:	06d0      	lsls	r0, r2, #27
 8005e16:	d411      	bmi.n	8005e3c <__swsetup_r+0x50>
 8005e18:	2209      	movs	r2, #9
 8005e1a:	6032      	str	r2, [r6, #0]
 8005e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	e03e      	b.n	8005ea6 <__swsetup_r+0xba>
 8005e28:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <__swsetup_r+0xd4>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d101      	bne.n	8005e32 <__swsetup_r+0x46>
 8005e2e:	68ac      	ldr	r4, [r5, #8]
 8005e30:	e7eb      	b.n	8005e0a <__swsetup_r+0x1e>
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <__swsetup_r+0xd8>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	bf08      	it	eq
 8005e38:	68ec      	ldreq	r4, [r5, #12]
 8005e3a:	e7e6      	b.n	8005e0a <__swsetup_r+0x1e>
 8005e3c:	0751      	lsls	r1, r2, #29
 8005e3e:	d512      	bpl.n	8005e66 <__swsetup_r+0x7a>
 8005e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e42:	b141      	cbz	r1, 8005e56 <__swsetup_r+0x6a>
 8005e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	d002      	beq.n	8005e52 <__swsetup_r+0x66>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff fc53 	bl	80056f8 <_free_r>
 8005e52:	2300      	movs	r3, #0
 8005e54:	6363      	str	r3, [r4, #52]	; 0x34
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6063      	str	r3, [r4, #4]
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f043 0308 	orr.w	r3, r3, #8
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	b94b      	cbnz	r3, 8005e86 <__swsetup_r+0x9a>
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d003      	beq.n	8005e86 <__swsetup_r+0x9a>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 f845 	bl	8005f10 <__smakebuf_r>
 8005e86:	89a2      	ldrh	r2, [r4, #12]
 8005e88:	f012 0301 	ands.w	r3, r2, #1
 8005e8c:	d00c      	beq.n	8005ea8 <__swsetup_r+0xbc>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	6963      	ldr	r3, [r4, #20]
 8005e94:	425b      	negs	r3, r3
 8005e96:	61a3      	str	r3, [r4, #24]
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	b953      	cbnz	r3, 8005eb2 <__swsetup_r+0xc6>
 8005e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ea4:	d1ba      	bne.n	8005e1c <__swsetup_r+0x30>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	0792      	lsls	r2, r2, #30
 8005eaa:	bf58      	it	pl
 8005eac:	6963      	ldrpl	r3, [r4, #20]
 8005eae:	60a3      	str	r3, [r4, #8]
 8005eb0:	e7f2      	b.n	8005e98 <__swsetup_r+0xac>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e7f7      	b.n	8005ea6 <__swsetup_r+0xba>
 8005eb6:	bf00      	nop
 8005eb8:	20000010 	.word	0x20000010
 8005ebc:	08006090 	.word	0x08006090
 8005ec0:	080060b0 	.word	0x080060b0
 8005ec4:	08006070 	.word	0x08006070

08005ec8 <__swhatbuf_r>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	460e      	mov	r6, r1
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	b096      	sub	sp, #88	; 0x58
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	da07      	bge.n	8005eea <__swhatbuf_r+0x22>
 8005eda:	2300      	movs	r3, #0
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	89b3      	ldrh	r3, [r6, #12]
 8005ee0:	061a      	lsls	r2, r3, #24
 8005ee2:	d410      	bmi.n	8005f06 <__swhatbuf_r+0x3e>
 8005ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee8:	e00e      	b.n	8005f08 <__swhatbuf_r+0x40>
 8005eea:	466a      	mov	r2, sp
 8005eec:	f000 f850 	bl	8005f90 <_fstat_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dbf2      	blt.n	8005eda <__swhatbuf_r+0x12>
 8005ef4:	9a01      	ldr	r2, [sp, #4]
 8005ef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005efa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005efe:	425a      	negs	r2, r3
 8005f00:	415a      	adcs	r2, r3
 8005f02:	602a      	str	r2, [r5, #0]
 8005f04:	e7ee      	b.n	8005ee4 <__swhatbuf_r+0x1c>
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	2000      	movs	r0, #0
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	b016      	add	sp, #88	; 0x58
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}

08005f10 <__smakebuf_r>:
 8005f10:	898b      	ldrh	r3, [r1, #12]
 8005f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f14:	079d      	lsls	r5, r3, #30
 8005f16:	4606      	mov	r6, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	d507      	bpl.n	8005f2c <__smakebuf_r+0x1c>
 8005f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	2301      	movs	r3, #1
 8005f26:	6163      	str	r3, [r4, #20]
 8005f28:	b002      	add	sp, #8
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	ab01      	add	r3, sp, #4
 8005f2e:	466a      	mov	r2, sp
 8005f30:	f7ff ffca 	bl	8005ec8 <__swhatbuf_r>
 8005f34:	9900      	ldr	r1, [sp, #0]
 8005f36:	4605      	mov	r5, r0
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f7ff f9c7 	bl	80052cc <_malloc_r>
 8005f3e:	b948      	cbnz	r0, 8005f54 <__smakebuf_r+0x44>
 8005f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f44:	059a      	lsls	r2, r3, #22
 8005f46:	d4ef      	bmi.n	8005f28 <__smakebuf_r+0x18>
 8005f48:	f023 0303 	bic.w	r3, r3, #3
 8005f4c:	f043 0302 	orr.w	r3, r3, #2
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	e7e3      	b.n	8005f1c <__smakebuf_r+0xc>
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <__smakebuf_r+0x7c>)
 8005f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	6020      	str	r0, [r4, #0]
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f60:	81a3      	strh	r3, [r4, #12]
 8005f62:	9b00      	ldr	r3, [sp, #0]
 8005f64:	6163      	str	r3, [r4, #20]
 8005f66:	9b01      	ldr	r3, [sp, #4]
 8005f68:	6120      	str	r0, [r4, #16]
 8005f6a:	b15b      	cbz	r3, 8005f84 <__smakebuf_r+0x74>
 8005f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f70:	4630      	mov	r0, r6
 8005f72:	f000 f81f 	bl	8005fb4 <_isatty_r>
 8005f76:	b128      	cbz	r0, 8005f84 <__smakebuf_r+0x74>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	431d      	orrs	r5, r3
 8005f88:	81a5      	strh	r5, [r4, #12]
 8005f8a:	e7cd      	b.n	8005f28 <__smakebuf_r+0x18>
 8005f8c:	08005111 	.word	0x08005111

08005f90 <_fstat_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4c07      	ldr	r4, [pc, #28]	; (8005fb0 <_fstat_r+0x20>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4605      	mov	r5, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	f7fa fdb4 	bl	8000b0a <_fstat>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	d102      	bne.n	8005fac <_fstat_r+0x1c>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	b103      	cbz	r3, 8005fac <_fstat_r+0x1c>
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	bd38      	pop	{r3, r4, r5, pc}
 8005fae:	bf00      	nop
 8005fb0:	20004b34 	.word	0x20004b34

08005fb4 <_isatty_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4c06      	ldr	r4, [pc, #24]	; (8005fd0 <_isatty_r+0x1c>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4605      	mov	r5, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	f7fa fdb3 	bl	8000b2a <_isatty>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_isatty_r+0x1a>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_isatty_r+0x1a>
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20004b34 	.word	0x20004b34

08005fd4 <_init>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr

08005fe0 <_fini>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr
