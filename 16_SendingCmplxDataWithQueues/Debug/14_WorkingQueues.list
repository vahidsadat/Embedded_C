
14_WorkingQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ecc  08005ecc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed4  08005ed4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac0  20000074  08005f50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b34  08005f50  00024b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193d3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003151  00000000  00000000  00039477  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003d918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004659  00000000  00000000  0003eb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1fb  00000000  00000000  00043169  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000969ca  00000000  00000000  00052364  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  000e8dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d64 	.word	0x08005d64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005d64 	.word	0x08005d64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:

TaskHandle_t sender_handler, receiver_handler;

QueueHandle_t yearQueue;
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  HAL_Init();
 8000586:	f000 fb29 	bl	8000bdc <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f89f 	bl	80006cc <SystemClock_Config>
  MX_GPIO_Init();
 800058e:	f000 f927 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8fb 	bl	800078c <MX_USART2_UART_Init>

  yearQueue = xQueueCreate(5,sizeof(int32_t));
 8000596:	2200      	movs	r2, #0
 8000598:	2104      	movs	r1, #4
 800059a:	2005      	movs	r0, #5
 800059c:	f002 f9dd 	bl	800295a <xQueueGenericCreate>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0x54>)
 80005a4:	601a      	str	r2, [r3, #0]

  xTaskCreate(SenderTask,"Sender Task",100,NULL,1,&sender_handler);
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0x58>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	490a      	ldr	r1, [pc, #40]	; (80005dc <main+0x5c>)
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x60>)
 80005b6:	f002 fe63 	bl	8003280 <xTaskCreate>
  xTaskCreate(ReceiverTask,"Receiver Task",100,NULL,1,&receiver_handler);
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <main+0x64>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2264      	movs	r2, #100	; 0x64
 80005c6:	4908      	ldr	r1, [pc, #32]	; (80005e8 <main+0x68>)
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x6c>)
 80005ca:	f002 fe59 	bl	8003280 <xTaskCreate>
  vTaskStartScheduler();
 80005ce:	f002 ffb3 	bl	8003538 <vTaskStartScheduler>
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x52>
 80005d4:	20004a60 	.word	0x20004a60
 80005d8:	20004a68 	.word	0x20004a68
 80005dc:	08005d7c 	.word	0x08005d7c
 80005e0:	080005f1 	.word	0x080005f1
 80005e4:	20004a64 	.word	0x20004a64
 80005e8:	08005d88 	.word	0x08005d88
 80005ec:	08000641 	.word	0x08000641

080005f0 <SenderTask>:
  {
  }
}

void SenderTask(void *pvParameter)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	int32_t value_to_send = 2050;
 80005f8:	f640 0302 	movw	r3, #2050	; 0x802
 80005fc:	60fb      	str	r3, [r7, #12]
	BaseType_t qStatus;
	while(1)
	{
		qStatus = xQueueSend(yearQueue,&value_to_send,0);
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <SenderTask+0x44>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	2300      	movs	r3, #0
 8000608:	2200      	movs	r2, #0
 800060a:	f002 fa09 	bl	8002a20 <xQueueGenericSend>
 800060e:	6138      	str	r0, [r7, #16]
		if(qStatus != pdPASS)
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d002      	beq.n	800061c <SenderTask+0x2c>
		{
			printf("Error : Data couldn't be sent....\n\r");
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <SenderTask+0x48>)
 8000618:	f004 fd7a 	bl	8005110 <iprintf>
		}
		for(int i = 0;i<100000;i++){}
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	e002      	b.n	8000628 <SenderTask+0x38>
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <SenderTask+0x4c>)
 800062c:	4293      	cmp	r3, r2
 800062e:	ddf8      	ble.n	8000622 <SenderTask+0x32>
		qStatus = xQueueSend(yearQueue,&value_to_send,0);
 8000630:	e7e5      	b.n	80005fe <SenderTask+0xe>
 8000632:	bf00      	nop
 8000634:	20004a60 	.word	0x20004a60
 8000638:	08005d98 	.word	0x08005d98
 800063c:	0001869f 	.word	0x0001869f

08000640 <ReceiverTask>:
	}
}
void ReceiverTask(void *pvParameter)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	int32_t value_received;
	BaseType_t qStatus;
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	617b      	str	r3, [r7, #20]
	while(1)
	{
		qStatus = xQueueReceive(yearQueue,&value_received,wait_time);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <ReceiverTask+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010c 	add.w	r1, r7, #12
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fb70 	bl	8002d3c <xQueueReceive>
 800065c:	6138      	str	r0, [r7, #16]
		if(qStatus == pdPASS)
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <ReceiverTask+0x30>
		{
			printf("The value received id : %ld....\n\r",value_received);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4619      	mov	r1, r3
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <ReceiverTask+0x3c>)
 800066a:	f004 fd51 	bl	8005110 <iprintf>
 800066e:	e7ed      	b.n	800064c <ReceiverTask+0xc>
		}
		else
		{
			printf("Error : Data couldn't receive....\n\r");
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <ReceiverTask+0x40>)
 8000672:	f004 fd4d 	bl	8005110 <iprintf>
		qStatus = xQueueReceive(yearQueue,&value_received,wait_time);
 8000676:	e7e9      	b.n	800064c <ReceiverTask+0xc>
 8000678:	20004a60 	.word	0x20004a60
 800067c:	08005dbc 	.word	0x08005dbc
 8000680:	08005de0 	.word	0x08005de0

08000684 <uart2_write>:
		}
	}
}

int uart2_write(int ch)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	while (!(USART2->SR &0x0080)){}
 800068c:	bf00      	nop
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <uart2_write+0x2c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f9      	beq.n	800068e <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <uart2_write+0x2c>)
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	6053      	str	r3, [r2, #4]

	return ch;
 80006a2:	687b      	ldr	r3, [r7, #4]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40004400 	.word	0x40004400

080006b4 <__io_putchar>:

int __io_putchar(int ch)
	{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ffe1 	bl	8000684 <uart2_write>
	return ch;
 80006c2:	687b      	ldr	r3, [r7, #4]
	}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fcb5 	bl	800504a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xb8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SystemClock_Config+0xb8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemClock_Config+0xb8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemClock_Config+0xbc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <SystemClock_Config+0xbc>)
 800071a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <SystemClock_Config+0xbc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fcf1 	bl	8001128 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800074c:	f000 f874 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ff4c 	bl	8001608 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000776:	f000 f85f 	bl	8000838 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f001 fb3c 	bl	8001e40 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f833 	bl	8000838 <Error_Handler>
  }

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20004a6c 	.word	0x20004a6c
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_GPIO_Init+0x30>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <MX_GPIO_Init+0x30>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_GPIO_Init+0x30>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f9fb 	bl	8000c20 <HAL_IncTick>
  }
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010000 	.word	0x40010000

08000838 <Error_Handler>:

void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x54>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <HAL_MspInit+0x54>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_MspInit+0x54>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_MspInit+0x54>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 fa9f 	bl	8000dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_UART_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090a:	2307      	movs	r3, #7
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_UART_MspInit+0x8c>)
 8000916:	f000 fa85 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40004400 	.word	0x40004400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2019      	movs	r0, #25
 8000946:	f000 fa43 	bl	8000dd0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800094a:	2019      	movs	r0, #25
 800094c:	f000 fa5c 	bl	8000e08 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <HAL_InitTick+0xa0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <HAL_InitTick+0xa0>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6453      	str	r3, [r2, #68]	; 0x44
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_InitTick+0xa0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800096c:	f107 0210 	add.w	r2, r7, #16
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f001 f812 	bl	80019a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800097c:	f000 fffc 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 8000980:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <HAL_InitTick+0xa4>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9b      	lsrs	r3, r3, #18
 800098c:	3b01      	subs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_InitTick+0xa8>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <HAL_InitTick+0xac>)
 8000994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_InitTick+0xa8>)
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_InitTick+0xa8>)
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_InitTick+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_InitTick+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <HAL_InitTick+0xa8>)
 80009b2:	f001 f827 	bl	8001a04 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <HAL_InitTick+0xa8>)
 80009be:	f001 f856 	bl	8001a6e <HAL_TIM_Base_Start_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	20004aac 	.word	0x20004aac
 80009dc:	40010000 	.word	0x40010000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a1a:	f001 f84c 	bl	8001ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20004aac 	.word	0x20004aac

08000a28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
	}

return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe19 	bl	80006b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
	}
	return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x50>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x16>
		heap_end = &end;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <_sbrk+0x50>)
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <_sbrk+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <_sbrk+0x50>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <_sbrk+0x50>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	466a      	mov	r2, sp
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d907      	bls.n	8000b3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b2e:	f004 f98d 	bl	8004e4c <__errno>
 8000b32:	4602      	mov	r2, r0
 8000b34:	230c      	movs	r3, #12
 8000b36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	e006      	b.n	8000b4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <_sbrk+0x50>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <_sbrk+0x50>)
 8000b48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000090 	.word	0x20000090
 8000b58:	20004b38 	.word	0x20004b38

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SystemInit+0x28>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SystemInit+0x28>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SystemInit+0x28>)
 8000b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b76:	609a      	str	r2, [r3, #8]
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd3 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fa19 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fce1 	bl	8000580 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000bc4:	08005edc 	.word	0x08005edc
  ldr  r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bcc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000bd0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000bd4:	20004b34 	.word	0x20004b34

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f8d8 	bl	8000dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fe90 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fe1a 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20004aec 	.word	0x20004aec

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20004aec 	.word	0x20004aec

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff4c 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff61 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ffb1 	bl	8000d54 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff80 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff54 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e159      	b.n	80010f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8148 	bne.w	80010ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d00b      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	2b11      	cmp	r3, #17
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0xfc>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a2 	beq.w	80010ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b56      	ldr	r3, [pc, #344]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a55      	ldr	r2, [pc, #340]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a51      	ldr	r2, [pc, #324]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_GPIO_Init+0x2ec>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d019      	beq.n	8001026 <HAL_GPIO_Init+0x202>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a47      	ldr	r2, [pc, #284]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x1fe>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_GPIO_Init+0x2f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x1fa>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x1f6>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a44      	ldr	r2, [pc, #272]	; (8001120 <HAL_GPIO_Init+0x2fc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x1f2>
 8001012:	2304      	movs	r3, #4
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x204>
 8001016:	2307      	movs	r3, #7
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x204>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x204>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x204>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x204>
 8001026:	2300      	movs	r3, #0
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001038:	4934      	ldr	r1, [pc, #208]	; (800110c <HAL_GPIO_Init+0x2e8>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_GPIO_Init+0x300>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001094:	4a23      	ldr	r2, [pc, #140]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_GPIO_Init+0x300>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	f67f aea2 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010fc:	bf00      	nop
 80010fe:	3724      	adds	r7, #36	; 0x24
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40013c00 	.word	0x40013c00

08001128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e25b      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d075      	beq.n	8001232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001146:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00c      	beq.n	800116c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001152:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d112      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4b9d      	ldr	r3, [pc, #628]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116a:	d10b      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4b99      	ldr	r3, [pc, #612]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d05b      	beq.n	8001230 <HAL_RCC_OscConfig+0x108>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d157      	bne.n	8001230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e236      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x74>
 800118e:	4b91      	ldr	r3, [pc, #580]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a90      	ldr	r2, [pc, #576]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e01d      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a8a      	ldr	r2, [pc, #552]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 80011c0:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a80      	ldr	r2, [pc, #512]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fd32 	bl	8000c48 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fd2e 	bl	8000c48 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1fb      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0xc0>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fd1e 	bl	8000c48 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fd1a 	bl	8000c48 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1e7      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0xe8>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d063      	beq.n	8001306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124a:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d11c      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d001      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e1bb      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4952      	ldr	r1, [pc, #328]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	e03a      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001298:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <HAL_RCC_OscConfig+0x2b0>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fcd3 	bl	8000c48 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fccf 	bl	8000c48 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e19c      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4940      	ldr	r1, [pc, #256]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_RCC_OscConfig+0x2b0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcb2 	bl	8000c48 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fcae 	bl	8000c48 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e17b      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d016      	beq.n	8001348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_RCC_OscConfig+0x2b4>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fc92 	bl	8000c48 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fc8e 	bl	8000c48 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e15b      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x200>
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_OscConfig+0x2b4>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fc7b 	bl	8000c48 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fc77 	bl	8000c48 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e144      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80a0 	beq.w	80014c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10f      	bne.n	80013b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ae:	2301      	movs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x2b8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d121      	bne.n	8001402 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_RCC_OscConfig+0x2b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_RCC_OscConfig+0x2b8>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fc3d 	bl	8000c48 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	e011      	b.n	80013f6 <HAL_RCC_OscConfig+0x2ce>
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
 80013e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e4:	f7ff fc30 	bl	8000c48 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0fd      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x4d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x2f0>
 800140a:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a7c      	ldr	r2, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	e01c      	b.n	8001452 <HAL_RCC_OscConfig+0x32a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x312>
 8001420:	4b77      	ldr	r3, [pc, #476]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a76      	ldr	r2, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b74      	ldr	r3, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a73      	ldr	r2, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x32a>
 800143a:	4b71      	ldr	r3, [pc, #452]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	4a70      	ldr	r2, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6713      	str	r3, [r2, #112]	; 0x70
 8001446:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a6d      	ldr	r2, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff fbf5 	bl	8000c48 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fbf1 	bl	8000c48 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0bc      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ee      	beq.n	8001462 <HAL_RCC_OscConfig+0x33a>
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fbdf 	bl	8000c48 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fbdb 	bl	8000c48 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0a6      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	4b56      	ldr	r3, [pc, #344]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ee      	bne.n	800148e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d105      	bne.n	80014c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b6:	4b52      	ldr	r3, [pc, #328]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a51      	ldr	r2, [pc, #324]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 80014bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8092 	beq.w	80015f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d05c      	beq.n	8001592 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d141      	bne.n	8001564 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e0:	4b48      	ldr	r3, [pc, #288]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fbaf 	bl	8000c48 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fbab 	bl	8000c48 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e078      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	019b      	lsls	r3, r3, #6
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	4933      	ldr	r1, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb84 	bl	8000c48 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb80 	bl	8000c48 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e04d      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x41c>
 8001562:	e045      	b.n	80015f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fb6d 	bl	8000c48 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff fb69 	bl	8000c48 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e036      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x44a>
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e029      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d115      	bne.n	80015ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d10d      	bne.n	80015ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000
 8001600:	40023800 	.word	0x40023800
 8001604:	42470060 	.word	0x42470060

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cc      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d90c      	bls.n	8001644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800167e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d044      	beq.n	8001728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e067      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4934      	ldr	r1, [pc, #208]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff faa6 	bl	8000c48 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff faa2 	bl	8000c48 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e04f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4601      	mov	r1, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	fa21 f303 	lsr.w	r3, r1, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f8be 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	08005e1c 	.word	0x08005e1c
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ea:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_GetSysClockFreq+0x158>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d007      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x32>
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d008      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x38>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 808d 	bne.w	800191a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001802:	60bb      	str	r3, [r7, #8]
       break;
 8001804:	e08c      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_RCC_GetSysClockFreq+0x160>)
 8001808:	60bb      	str	r3, [r7, #8]
      break;
 800180a:	e089      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_GetSysClockFreq+0x158>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4b45      	ldr	r3, [pc, #276]	; (800192c <HAL_RCC_GetSysClockFreq+0x158>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d023      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <HAL_RCC_GetSysClockFreq+0x158>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	ea03 0501 	and.w	r5, r3, r1
 8001838:	ea04 0602 	and.w	r6, r4, r2
 800183c:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <HAL_RCC_GetSysClockFreq+0x160>)
 800183e:	fb02 f106 	mul.w	r1, r2, r6
 8001842:	2200      	movs	r2, #0
 8001844:	fb02 f205 	mul.w	r2, r2, r5
 8001848:	440a      	add	r2, r1
 800184a:	493a      	ldr	r1, [pc, #232]	; (8001934 <HAL_RCC_GetSysClockFreq+0x160>)
 800184c:	fba5 0101 	umull	r0, r1, r5, r1
 8001850:	1853      	adds	r3, r2, r1
 8001852:	4619      	mov	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f04f 0400 	mov.w	r4, #0
 800185a:	461a      	mov	r2, r3
 800185c:	4623      	mov	r3, r4
 800185e:	f7fe fd0f 	bl	8000280 <__aeabi_uldivmod>
 8001862:	4603      	mov	r3, r0
 8001864:	460c      	mov	r4, r1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e049      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_RCC_GetSysClockFreq+0x158>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	ea03 0501 	and.w	r5, r3, r1
 8001880:	ea04 0602 	and.w	r6, r4, r2
 8001884:	4629      	mov	r1, r5
 8001886:	4632      	mov	r2, r6
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	0154      	lsls	r4, r2, #5
 8001892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001896:	014b      	lsls	r3, r1, #5
 8001898:	4619      	mov	r1, r3
 800189a:	4622      	mov	r2, r4
 800189c:	1b49      	subs	r1, r1, r5
 800189e:	eb62 0206 	sbc.w	r2, r2, r6
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	f04f 0400 	mov.w	r4, #0
 80018aa:	0194      	lsls	r4, r2, #6
 80018ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018b0:	018b      	lsls	r3, r1, #6
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	eb64 0402 	sbc.w	r4, r4, r2
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	00e2      	lsls	r2, r4, #3
 80018c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018c6:	00d9      	lsls	r1, r3, #3
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	195b      	adds	r3, r3, r5
 80018ce:	eb44 0406 	adc.w	r4, r4, r6
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	02a2      	lsls	r2, r4, #10
 80018dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018e0:	0299      	lsls	r1, r3, #10
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	4621      	mov	r1, r4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f04f 0400 	mov.w	r4, #0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	f7fe fcc4 	bl	8000280 <__aeabi_uldivmod>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0x158>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0c1b      	lsrs	r3, r3, #16
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	3301      	adds	r3, #1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	60bb      	str	r3, [r7, #8]
      break;
 8001918:	e002      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetSysClockFreq+0x15c>)
 800191c:	60bb      	str	r3, [r7, #8]
      break;
 800191e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001920:	68bb      	ldr	r3, [r7, #8]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	017d7840 	.word	0x017d7840

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCC_GetHCLKFreq+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff0 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001958:	4601      	mov	r1, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	fa21 f303 	lsr.w	r3, r1, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	08005e2c 	.word	0x08005e2c

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800197c:	f7ff ffdc 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001980:	4601      	mov	r1, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0b5b      	lsrs	r3, r3, #13
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_RCC_GetPCLK2Freq+0x24>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	08005e2c 	.word	0x08005e2c

080019a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	220f      	movs	r2, #15
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_RCC_GetClockConfig+0x60>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 020f 	and.w	r2, r3, #15
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01d      	b.n	8001a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f815 	bl	8001a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 f968 	bl	8001d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d007      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d122      	bne.n	8001b12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d11b      	bne.n	8001b12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f06f 0202 	mvn.w	r2, #2
 8001ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8ee 	bl	8001cda <HAL_TIM_IC_CaptureCallback>
 8001afe:	e005      	b.n	8001b0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8e0 	bl	8001cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8f1 	bl	8001cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d122      	bne.n	8001b66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d11b      	bne.n	8001b66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f06f 0204 	mvn.w	r2, #4
 8001b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f8c4 	bl	8001cda <HAL_TIM_IC_CaptureCallback>
 8001b52:	e005      	b.n	8001b60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8b6 	bl	8001cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8c7 	bl	8001cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d122      	bne.n	8001bba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d11b      	bne.n	8001bba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0208 	mvn.w	r2, #8
 8001b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f89a 	bl	8001cda <HAL_TIM_IC_CaptureCallback>
 8001ba6:	e005      	b.n	8001bb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f88c 	bl	8001cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f89d 	bl	8001cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d122      	bne.n	8001c0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d11b      	bne.n	8001c0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f06f 0210 	mvn.w	r2, #16
 8001bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2208      	movs	r2, #8
 8001be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f870 	bl	8001cda <HAL_TIM_IC_CaptureCallback>
 8001bfa:	e005      	b.n	8001c08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f862 	bl	8001cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f873 	bl	8001cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10e      	bne.n	8001c3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0201 	mvn.w	r2, #1
 8001c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe fded 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	2b80      	cmp	r3, #128	; 0x80
 8001c46:	d10e      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	d107      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8e3 	bl	8001e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c70:	2b40      	cmp	r3, #64	; 0x40
 8001c72:	d10e      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d107      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f838 	bl	8001d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d10e      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d107      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f06f 0220 	mvn.w	r2, #32
 8001cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8ad 	bl	8001e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <TIM_Base_SetConfig+0xe4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00f      	beq.n	8001d50 <TIM_Base_SetConfig+0x38>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d36:	d00b      	beq.n	8001d50 <TIM_Base_SetConfig+0x38>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a31      	ldr	r2, [pc, #196]	; (8001e00 <TIM_Base_SetConfig+0xe8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <TIM_Base_SetConfig+0x38>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <TIM_Base_SetConfig+0xec>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d003      	beq.n	8001d50 <TIM_Base_SetConfig+0x38>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <TIM_Base_SetConfig+0xf0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <TIM_Base_SetConfig+0xe4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01b      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d017      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <TIM_Base_SetConfig+0xe8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <TIM_Base_SetConfig+0xec>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00f      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <TIM_Base_SetConfig+0xf0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <TIM_Base_SetConfig+0xf4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <TIM_Base_SetConfig+0xf8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x8a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <TIM_Base_SetConfig+0xfc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <TIM_Base_SetConfig+0xe4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d103      	bne.n	8001de8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	615a      	str	r2, [r3, #20]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40000c00 	.word	0x40000c00
 8001e0c:	40014000 	.word	0x40014000
 8001e10:	40014400 	.word	0x40014400
 8001e14:	40014800 	.word	0x40014800

08001e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e03f      	b.n	8001ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fd1a 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f829 	bl	8001edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f1e:	f023 030c 	bic.w	r3, r3, #12
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4a:	f040 818b 	bne.w	8002264 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4ac1      	ldr	r2, [pc, #772]	; (8002258 <UART_SetConfig+0x37c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d005      	beq.n	8001f64 <UART_SetConfig+0x88>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4abf      	ldr	r2, [pc, #764]	; (800225c <UART_SetConfig+0x380>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	f040 80bd 	bne.w	80020de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f64:	f7ff fd08 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 8001f68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	461d      	mov	r5, r3
 8001f6e:	f04f 0600 	mov.w	r6, #0
 8001f72:	46a8      	mov	r8, r5
 8001f74:	46b1      	mov	r9, r6
 8001f76:	eb18 0308 	adds.w	r3, r8, r8
 8001f7a:	eb49 0409 	adc.w	r4, r9, r9
 8001f7e:	4698      	mov	r8, r3
 8001f80:	46a1      	mov	r9, r4
 8001f82:	eb18 0805 	adds.w	r8, r8, r5
 8001f86:	eb49 0906 	adc.w	r9, r9, r6
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f9e:	4688      	mov	r8, r1
 8001fa0:	4691      	mov	r9, r2
 8001fa2:	eb18 0005 	adds.w	r0, r8, r5
 8001fa6:	eb49 0106 	adc.w	r1, r9, r6
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	461d      	mov	r5, r3
 8001fb0:	f04f 0600 	mov.w	r6, #0
 8001fb4:	196b      	adds	r3, r5, r5
 8001fb6:	eb46 0406 	adc.w	r4, r6, r6
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4623      	mov	r3, r4
 8001fbe:	f7fe f95f 	bl	8000280 <__aeabi_uldivmod>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4ba5      	ldr	r3, [pc, #660]	; (8002260 <UART_SetConfig+0x384>)
 8001fca:	fba3 2302 	umull	r2, r3, r3, r2
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	f04f 0600 	mov.w	r6, #0
 8001fdc:	46a9      	mov	r9, r5
 8001fde:	46b2      	mov	sl, r6
 8001fe0:	eb19 0309 	adds.w	r3, r9, r9
 8001fe4:	eb4a 040a 	adc.w	r4, sl, sl
 8001fe8:	4699      	mov	r9, r3
 8001fea:	46a2      	mov	sl, r4
 8001fec:	eb19 0905 	adds.w	r9, r9, r5
 8001ff0:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002000:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002004:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002008:	4689      	mov	r9, r1
 800200a:	4692      	mov	sl, r2
 800200c:	eb19 0005 	adds.w	r0, r9, r5
 8002010:	eb4a 0106 	adc.w	r1, sl, r6
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	461d      	mov	r5, r3
 800201a:	f04f 0600 	mov.w	r6, #0
 800201e:	196b      	adds	r3, r5, r5
 8002020:	eb46 0406 	adc.w	r4, r6, r6
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	f7fe f92a 	bl	8000280 <__aeabi_uldivmod>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	461a      	mov	r2, r3
 8002032:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <UART_SetConfig+0x384>)
 8002034:	fba3 1302 	umull	r1, r3, r3, r2
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	2164      	movs	r1, #100	; 0x64
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	3332      	adds	r3, #50	; 0x32
 8002046:	4a86      	ldr	r2, [pc, #536]	; (8002260 <UART_SetConfig+0x384>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002054:	4498      	add	r8, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	461d      	mov	r5, r3
 800205a:	f04f 0600 	mov.w	r6, #0
 800205e:	46a9      	mov	r9, r5
 8002060:	46b2      	mov	sl, r6
 8002062:	eb19 0309 	adds.w	r3, r9, r9
 8002066:	eb4a 040a 	adc.w	r4, sl, sl
 800206a:	4699      	mov	r9, r3
 800206c:	46a2      	mov	sl, r4
 800206e:	eb19 0905 	adds.w	r9, r9, r5
 8002072:	eb4a 0a06 	adc.w	sl, sl, r6
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800208a:	4689      	mov	r9, r1
 800208c:	4692      	mov	sl, r2
 800208e:	eb19 0005 	adds.w	r0, r9, r5
 8002092:	eb4a 0106 	adc.w	r1, sl, r6
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	461d      	mov	r5, r3
 800209c:	f04f 0600 	mov.w	r6, #0
 80020a0:	196b      	adds	r3, r5, r5
 80020a2:	eb46 0406 	adc.w	r4, r6, r6
 80020a6:	461a      	mov	r2, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	f7fe f8e9 	bl	8000280 <__aeabi_uldivmod>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <UART_SetConfig+0x384>)
 80020b6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2164      	movs	r1, #100	; 0x64
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	3332      	adds	r3, #50	; 0x32
 80020c8:	4a65      	ldr	r2, [pc, #404]	; (8002260 <UART_SetConfig+0x384>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4442      	add	r2, r8
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e26f      	b.n	80025be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020de:	f7ff fc37 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80020e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	461d      	mov	r5, r3
 80020e8:	f04f 0600 	mov.w	r6, #0
 80020ec:	46a8      	mov	r8, r5
 80020ee:	46b1      	mov	r9, r6
 80020f0:	eb18 0308 	adds.w	r3, r8, r8
 80020f4:	eb49 0409 	adc.w	r4, r9, r9
 80020f8:	4698      	mov	r8, r3
 80020fa:	46a1      	mov	r9, r4
 80020fc:	eb18 0805 	adds.w	r8, r8, r5
 8002100:	eb49 0906 	adc.w	r9, r9, r6
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002110:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002114:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002118:	4688      	mov	r8, r1
 800211a:	4691      	mov	r9, r2
 800211c:	eb18 0005 	adds.w	r0, r8, r5
 8002120:	eb49 0106 	adc.w	r1, r9, r6
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	461d      	mov	r5, r3
 800212a:	f04f 0600 	mov.w	r6, #0
 800212e:	196b      	adds	r3, r5, r5
 8002130:	eb46 0406 	adc.w	r4, r6, r6
 8002134:	461a      	mov	r2, r3
 8002136:	4623      	mov	r3, r4
 8002138:	f7fe f8a2 	bl	8000280 <__aeabi_uldivmod>
 800213c:	4603      	mov	r3, r0
 800213e:	460c      	mov	r4, r1
 8002140:	461a      	mov	r2, r3
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <UART_SetConfig+0x384>)
 8002144:	fba3 2302 	umull	r2, r3, r3, r2
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	461d      	mov	r5, r3
 8002152:	f04f 0600 	mov.w	r6, #0
 8002156:	46a9      	mov	r9, r5
 8002158:	46b2      	mov	sl, r6
 800215a:	eb19 0309 	adds.w	r3, r9, r9
 800215e:	eb4a 040a 	adc.w	r4, sl, sl
 8002162:	4699      	mov	r9, r3
 8002164:	46a2      	mov	sl, r4
 8002166:	eb19 0905 	adds.w	r9, r9, r5
 800216a:	eb4a 0a06 	adc.w	sl, sl, r6
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800217a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800217e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002182:	4689      	mov	r9, r1
 8002184:	4692      	mov	sl, r2
 8002186:	eb19 0005 	adds.w	r0, r9, r5
 800218a:	eb4a 0106 	adc.w	r1, sl, r6
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	461d      	mov	r5, r3
 8002194:	f04f 0600 	mov.w	r6, #0
 8002198:	196b      	adds	r3, r5, r5
 800219a:	eb46 0406 	adc.w	r4, r6, r6
 800219e:	461a      	mov	r2, r3
 80021a0:	4623      	mov	r3, r4
 80021a2:	f7fe f86d 	bl	8000280 <__aeabi_uldivmod>
 80021a6:	4603      	mov	r3, r0
 80021a8:	460c      	mov	r4, r1
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <UART_SetConfig+0x384>)
 80021ae:	fba3 1302 	umull	r1, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	3332      	adds	r3, #50	; 0x32
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <UART_SetConfig+0x384>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021ce:	4498      	add	r8, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	461d      	mov	r5, r3
 80021d4:	f04f 0600 	mov.w	r6, #0
 80021d8:	46a9      	mov	r9, r5
 80021da:	46b2      	mov	sl, r6
 80021dc:	eb19 0309 	adds.w	r3, r9, r9
 80021e0:	eb4a 040a 	adc.w	r4, sl, sl
 80021e4:	4699      	mov	r9, r3
 80021e6:	46a2      	mov	sl, r4
 80021e8:	eb19 0905 	adds.w	r9, r9, r5
 80021ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002204:	4689      	mov	r9, r1
 8002206:	4692      	mov	sl, r2
 8002208:	eb19 0005 	adds.w	r0, r9, r5
 800220c:	eb4a 0106 	adc.w	r1, sl, r6
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	461d      	mov	r5, r3
 8002216:	f04f 0600 	mov.w	r6, #0
 800221a:	196b      	adds	r3, r5, r5
 800221c:	eb46 0406 	adc.w	r4, r6, r6
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	f7fe f82c 	bl	8000280 <__aeabi_uldivmod>
 8002228:	4603      	mov	r3, r0
 800222a:	460c      	mov	r4, r1
 800222c:	461a      	mov	r2, r3
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <UART_SetConfig+0x384>)
 8002230:	fba3 1302 	umull	r1, r3, r3, r2
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	2164      	movs	r1, #100	; 0x64
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3332      	adds	r3, #50	; 0x32
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <UART_SetConfig+0x384>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4442      	add	r2, r8
 8002254:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002256:	e1b2      	b.n	80025be <UART_SetConfig+0x6e2>
 8002258:	40011000 	.word	0x40011000
 800225c:	40011400 	.word	0x40011400
 8002260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4ad7      	ldr	r2, [pc, #860]	; (80025c8 <UART_SetConfig+0x6ec>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d005      	beq.n	800227a <UART_SetConfig+0x39e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4ad6      	ldr	r2, [pc, #856]	; (80025cc <UART_SetConfig+0x6f0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	f040 80d1 	bne.w	800241c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800227a:	f7ff fb7d 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 800227e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	469a      	mov	sl, r3
 8002284:	f04f 0b00 	mov.w	fp, #0
 8002288:	46d0      	mov	r8, sl
 800228a:	46d9      	mov	r9, fp
 800228c:	eb18 0308 	adds.w	r3, r8, r8
 8002290:	eb49 0409 	adc.w	r4, r9, r9
 8002294:	4698      	mov	r8, r3
 8002296:	46a1      	mov	r9, r4
 8002298:	eb18 080a 	adds.w	r8, r8, sl
 800229c:	eb49 090b 	adc.w	r9, r9, fp
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022b4:	4688      	mov	r8, r1
 80022b6:	4691      	mov	r9, r2
 80022b8:	eb1a 0508 	adds.w	r5, sl, r8
 80022bc:	eb4b 0609 	adc.w	r6, fp, r9
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	f04f 0400 	mov.w	r4, #0
 80022d2:	0094      	lsls	r4, r2, #2
 80022d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022d8:	008b      	lsls	r3, r1, #2
 80022da:	461a      	mov	r2, r3
 80022dc:	4623      	mov	r3, r4
 80022de:	4628      	mov	r0, r5
 80022e0:	4631      	mov	r1, r6
 80022e2:	f7fd ffcd 	bl	8000280 <__aeabi_uldivmod>
 80022e6:	4603      	mov	r3, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	461a      	mov	r2, r3
 80022ec:	4bb8      	ldr	r3, [pc, #736]	; (80025d0 <UART_SetConfig+0x6f4>)
 80022ee:	fba3 2302 	umull	r2, r3, r3, r2
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	469b      	mov	fp, r3
 80022fc:	f04f 0c00 	mov.w	ip, #0
 8002300:	46d9      	mov	r9, fp
 8002302:	46e2      	mov	sl, ip
 8002304:	eb19 0309 	adds.w	r3, r9, r9
 8002308:	eb4a 040a 	adc.w	r4, sl, sl
 800230c:	4699      	mov	r9, r3
 800230e:	46a2      	mov	sl, r4
 8002310:	eb19 090b 	adds.w	r9, r9, fp
 8002314:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002324:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002328:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800232c:	4689      	mov	r9, r1
 800232e:	4692      	mov	sl, r2
 8002330:	eb1b 0509 	adds.w	r5, fp, r9
 8002334:	eb4c 060a 	adc.w	r6, ip, sl
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	f04f 0400 	mov.w	r4, #0
 800234a:	0094      	lsls	r4, r2, #2
 800234c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002350:	008b      	lsls	r3, r1, #2
 8002352:	461a      	mov	r2, r3
 8002354:	4623      	mov	r3, r4
 8002356:	4628      	mov	r0, r5
 8002358:	4631      	mov	r1, r6
 800235a:	f7fd ff91 	bl	8000280 <__aeabi_uldivmod>
 800235e:	4603      	mov	r3, r0
 8002360:	460c      	mov	r4, r1
 8002362:	461a      	mov	r2, r3
 8002364:	4b9a      	ldr	r3, [pc, #616]	; (80025d0 <UART_SetConfig+0x6f4>)
 8002366:	fba3 1302 	umull	r1, r3, r3, r2
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2164      	movs	r1, #100	; 0x64
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	3332      	adds	r3, #50	; 0x32
 8002378:	4a95      	ldr	r2, [pc, #596]	; (80025d0 <UART_SetConfig+0x6f4>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	4498      	add	r8, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	469b      	mov	fp, r3
 800238a:	f04f 0c00 	mov.w	ip, #0
 800238e:	46d9      	mov	r9, fp
 8002390:	46e2      	mov	sl, ip
 8002392:	eb19 0309 	adds.w	r3, r9, r9
 8002396:	eb4a 040a 	adc.w	r4, sl, sl
 800239a:	4699      	mov	r9, r3
 800239c:	46a2      	mov	sl, r4
 800239e:	eb19 090b 	adds.w	r9, r9, fp
 80023a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ba:	4689      	mov	r9, r1
 80023bc:	4692      	mov	sl, r2
 80023be:	eb1b 0509 	adds.w	r5, fp, r9
 80023c2:	eb4c 060a 	adc.w	r6, ip, sl
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	f04f 0400 	mov.w	r4, #0
 80023d8:	0094      	lsls	r4, r2, #2
 80023da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023de:	008b      	lsls	r3, r1, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	4628      	mov	r0, r5
 80023e6:	4631      	mov	r1, r6
 80023e8:	f7fd ff4a 	bl	8000280 <__aeabi_uldivmod>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b77      	ldr	r3, [pc, #476]	; (80025d0 <UART_SetConfig+0x6f4>)
 80023f4:	fba3 1302 	umull	r1, r3, r3, r2
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	3332      	adds	r3, #50	; 0x32
 8002406:	4a72      	ldr	r2, [pc, #456]	; (80025d0 <UART_SetConfig+0x6f4>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4442      	add	r2, r8
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e0d0      	b.n	80025be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800241c:	f7ff fa98 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8002420:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	469a      	mov	sl, r3
 8002426:	f04f 0b00 	mov.w	fp, #0
 800242a:	46d0      	mov	r8, sl
 800242c:	46d9      	mov	r9, fp
 800242e:	eb18 0308 	adds.w	r3, r8, r8
 8002432:	eb49 0409 	adc.w	r4, r9, r9
 8002436:	4698      	mov	r8, r3
 8002438:	46a1      	mov	r9, r4
 800243a:	eb18 080a 	adds.w	r8, r8, sl
 800243e:	eb49 090b 	adc.w	r9, r9, fp
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800244e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002452:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002456:	4688      	mov	r8, r1
 8002458:	4691      	mov	r9, r2
 800245a:	eb1a 0508 	adds.w	r5, sl, r8
 800245e:	eb4b 0609 	adc.w	r6, fp, r9
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	0094      	lsls	r4, r2, #2
 8002476:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800247a:	008b      	lsls	r3, r1, #2
 800247c:	461a      	mov	r2, r3
 800247e:	4623      	mov	r3, r4
 8002480:	4628      	mov	r0, r5
 8002482:	4631      	mov	r1, r6
 8002484:	f7fd fefc 	bl	8000280 <__aeabi_uldivmod>
 8002488:	4603      	mov	r3, r0
 800248a:	460c      	mov	r4, r1
 800248c:	461a      	mov	r2, r3
 800248e:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <UART_SetConfig+0x6f4>)
 8002490:	fba3 2302 	umull	r2, r3, r3, r2
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	469b      	mov	fp, r3
 800249e:	f04f 0c00 	mov.w	ip, #0
 80024a2:	46d9      	mov	r9, fp
 80024a4:	46e2      	mov	sl, ip
 80024a6:	eb19 0309 	adds.w	r3, r9, r9
 80024aa:	eb4a 040a 	adc.w	r4, sl, sl
 80024ae:	4699      	mov	r9, r3
 80024b0:	46a2      	mov	sl, r4
 80024b2:	eb19 090b 	adds.w	r9, r9, fp
 80024b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024ce:	4689      	mov	r9, r1
 80024d0:	4692      	mov	sl, r2
 80024d2:	eb1b 0509 	adds.w	r5, fp, r9
 80024d6:	eb4c 060a 	adc.w	r6, ip, sl
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	f04f 0400 	mov.w	r4, #0
 80024ec:	0094      	lsls	r4, r2, #2
 80024ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024f2:	008b      	lsls	r3, r1, #2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4623      	mov	r3, r4
 80024f8:	4628      	mov	r0, r5
 80024fa:	4631      	mov	r1, r6
 80024fc:	f7fd fec0 	bl	8000280 <__aeabi_uldivmod>
 8002500:	4603      	mov	r3, r0
 8002502:	460c      	mov	r4, r1
 8002504:	461a      	mov	r2, r3
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <UART_SetConfig+0x6f4>)
 8002508:	fba3 1302 	umull	r1, r3, r3, r2
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	2164      	movs	r1, #100	; 0x64
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	3332      	adds	r3, #50	; 0x32
 800251a:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <UART_SetConfig+0x6f4>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002526:	4498      	add	r8, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	469b      	mov	fp, r3
 800252c:	f04f 0c00 	mov.w	ip, #0
 8002530:	46d9      	mov	r9, fp
 8002532:	46e2      	mov	sl, ip
 8002534:	eb19 0309 	adds.w	r3, r9, r9
 8002538:	eb4a 040a 	adc.w	r4, sl, sl
 800253c:	4699      	mov	r9, r3
 800253e:	46a2      	mov	sl, r4
 8002540:	eb19 090b 	adds.w	r9, r9, fp
 8002544:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800255c:	4689      	mov	r9, r1
 800255e:	4692      	mov	sl, r2
 8002560:	eb1b 0509 	adds.w	r5, fp, r9
 8002564:	eb4c 060a 	adc.w	r6, ip, sl
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f04f 0400 	mov.w	r4, #0
 800257a:	0094      	lsls	r4, r2, #2
 800257c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002580:	008b      	lsls	r3, r1, #2
 8002582:	461a      	mov	r2, r3
 8002584:	4623      	mov	r3, r4
 8002586:	4628      	mov	r0, r5
 8002588:	4631      	mov	r1, r6
 800258a:	f7fd fe79 	bl	8000280 <__aeabi_uldivmod>
 800258e:	4603      	mov	r3, r0
 8002590:	460c      	mov	r4, r1
 8002592:	461a      	mov	r2, r3
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <UART_SetConfig+0x6f4>)
 8002596:	fba3 1302 	umull	r1, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2164      	movs	r1, #100	; 0x64
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	3332      	adds	r3, #50	; 0x32
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <UART_SetConfig+0x6f4>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4442      	add	r2, r8
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	e7ff      	b.n	80025be <UART_SetConfig+0x6e2>
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	51eb851f 	.word	0x51eb851f

080025d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <vApplicationGetIdleTaskMemory+0x2c>)
 80025e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <vApplicationGetIdleTaskMemory+0x30>)
 80025ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000094 	.word	0x20000094
 8002604:	20000150 	.word	0x20000150

08002608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <vApplicationGetTimerTaskMemory+0x2c>)
 8002618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <vApplicationGetTimerTaskMemory+0x30>)
 800261e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	20000350 	.word	0x20000350
 8002638:	2000040c 	.word	0x2000040c

0800263c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0208 	add.w	r2, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f103 0208 	add.w	r2, r3, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0208 	add.w	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d103      	bne.n	80026fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e00c      	b.n	8002718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3308      	adds	r3, #8
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e002      	b.n	800270c <vListInsert+0x2e>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	d2f6      	bcs.n	8002706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6892      	ldr	r2, [r2, #8]
 8002766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6852      	ldr	r2, [r2, #4]
 8002770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	d103      	bne.n	8002784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	e7fe      	b.n	80027ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80027cc:	f002 f84e 	bl	800486c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	441a      	add	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	3b01      	subs	r3, #1
 80027fe:	68f9      	ldr	r1, [r7, #12]
 8002800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	441a      	add	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	22ff      	movs	r2, #255	; 0xff
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d114      	bne.n	800284c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3310      	adds	r3, #16
 800282e:	4618      	mov	r0, r3
 8002830:	f001 f914 	bl	8003a5c <xTaskRemoveFromEventList>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <xQueueGenericReset+0xcc>)
 800283c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	e009      	b.n	8002860 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3310      	adds	r3, #16
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fef3 	bl	800263c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3324      	adds	r3, #36	; 0x24
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff feee 	bl	800263c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002860:	f002 f832 	bl	80048c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <xQueueGenericCreateStatic+0x28>
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
 800289a:	e7fe      	b.n	800289a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <xQueueGenericCreateStatic+0x42>
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <xQueueGenericCreateStatic+0x4e>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <xQueueGenericCreateStatic+0x52>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueGenericCreateStatic+0x54>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <xQueueGenericCreateStatic+0x6c>
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	e7fe      	b.n	80028de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <xQueueGenericCreateStatic+0x78>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <xQueueGenericCreateStatic+0x7c>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <xQueueGenericCreateStatic+0x7e>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <xQueueGenericCreateStatic+0x96>
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e7fe      	b.n	8002908 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800290a:	2350      	movs	r3, #80	; 0x50
 800290c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b50      	cmp	r3, #80	; 0x50
 8002912:	d009      	beq.n	8002928 <xQueueGenericCreateStatic+0xb4>
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e7fe      	b.n	8002926 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002928:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800293c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f844 	bl	80029d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002952:	4618      	mov	r0, r3
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08a      	sub	sp, #40	; 0x28
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	4613      	mov	r3, r2
 8002966:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <xQueueGenericCreate+0x28>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e7fe      	b.n	8002980 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	e004      	b.n	8002998 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3350      	adds	r3, #80	; 0x50
 800299c:	4618      	mov	r0, r3
 800299e:	f002 f87f 	bl	8004aa0 <pvPortMalloc>
 80029a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3350      	adds	r3, #80	; 0x50
 80029b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f805 	bl	80029d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ce:	69bb      	ldr	r3, [r7, #24]
	}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e002      	b.n	80029fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a06:	2101      	movs	r1, #1
 8002a08:	69b8      	ldr	r0, [r7, #24]
 8002a0a:	f7ff fecb 	bl	80027a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <xQueueGenericSend+0x30>
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4e:	e7fe      	b.n	8002a4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <xQueueGenericSend+0x3e>
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <xQueueGenericSend+0x42>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <xQueueGenericSend+0x44>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <xQueueGenericSend+0x5c>
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e7fe      	b.n	8002a7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d103      	bne.n	8002a8a <xQueueGenericSend+0x6a>
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <xQueueGenericSend+0x6e>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericSend+0x70>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <xQueueGenericSend+0x88>
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	e7fe      	b.n	8002aa6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aa8:	f001 f994 	bl	8003dd4 <xTaskGetSchedulerState>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <xQueueGenericSend+0x98>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <xQueueGenericSend+0x9c>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <xQueueGenericSend+0x9e>
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <xQueueGenericSend+0xb6>
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ad6:	f001 fec9 	bl	800486c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <xQueueGenericSend+0xcc>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d129      	bne.n	8002b40 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af2:	f000 f9ff 	bl	8002ef4 <prvCopyDataToQueue>
 8002af6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d010      	beq.n	8002b22 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3324      	adds	r3, #36	; 0x24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 ffa9 	bl	8003a5c <xTaskRemoveFromEventList>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b10:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <xQueueGenericSend+0x1f0>)
 8002b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	e00a      	b.n	8002b38 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b28:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <xQueueGenericSend+0x1f0>)
 8002b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b38:	f001 fec6 	bl	80048c8 <vPortExitCritical>
				return pdPASS;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e063      	b.n	8002c08 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b46:	f001 febf 	bl	80048c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e05c      	b.n	8002c08 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 ffe1 	bl	8003b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b62:	f001 feb1 	bl	80048c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b66:	f000 fd55 	bl	8003614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b6a:	f001 fe7f 	bl	800486c <vPortEnterCritical>
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d103      	bne.n	8002b84 <xQueueGenericSend+0x164>
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d103      	bne.n	8002b9a <xQueueGenericSend+0x17a>
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b9a:	f001 fe95 	bl	80048c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b9e:	1d3a      	adds	r2, r7, #4
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 ffd0 	bl	8003b4c <xTaskCheckForTimeOut>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d124      	bne.n	8002bfc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb4:	f000 fa96 	bl	80030e4 <prvIsQueueFull>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	3310      	adds	r3, #16
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fefa 	bl	80039c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bce:	f000 fa21 	bl	8003014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bd2:	f000 fd2d 	bl	8003630 <xTaskResumeAll>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f af7c 	bne.w	8002ad6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <xQueueGenericSend+0x1f0>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	e772      	b.n	8002ad6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf2:	f000 fa0f 	bl	8003014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bf6:	f000 fd1b 	bl	8003630 <xTaskResumeAll>
 8002bfa:	e76c      	b.n	8002ad6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfe:	f000 fa09 	bl	8003014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c02:	f000 fd15 	bl	8003630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3738      	adds	r7, #56	; 0x38
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	e000ed04 	.word	0xe000ed04

08002c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	; 0x38
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <xQueueGenericSendFromISR+0x2c>
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	e7fe      	b.n	8002c3e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <xQueueGenericSendFromISR+0x3a>
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <xQueueGenericSendFromISR+0x3e>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericSendFromISR+0x40>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <xQueueGenericSendFromISR+0x58>
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	e7fe      	b.n	8002c6a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d103      	bne.n	8002c7a <xQueueGenericSendFromISR+0x66>
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <xQueueGenericSendFromISR+0x6a>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueGenericSendFromISR+0x6c>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <xQueueGenericSendFromISR+0x84>
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e7fe      	b.n	8002c96 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c98:	f001 fec4 	bl	8004a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61ba      	str	r2, [r7, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <xQueueGenericSendFromISR+0xb6>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d12c      	bne.n	8002d24 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cda:	f000 f90b 	bl	8002ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cde:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d112      	bne.n	8002d0e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d016      	beq.n	8002d1e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 feb1 	bl	8003a5c <xTaskRemoveFromEventList>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	b25a      	sxtb	r2, r3
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d22:	e001      	b.n	8002d28 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3738      	adds	r7, #56	; 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <xQueueReceive+0x2e>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	e7fe      	b.n	8002d68 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <xQueueReceive+0x3c>
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <xQueueReceive+0x40>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <xQueueReceive+0x42>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <xQueueReceive+0x5a>
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	e7fe      	b.n	8002d94 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d96:	f001 f81d 	bl	8003dd4 <xTaskGetSchedulerState>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <xQueueReceive+0x6a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <xQueueReceive+0x6e>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <xQueueReceive+0x70>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <xQueueReceive+0x88>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e7fe      	b.n	8002dc2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dc4:	f001 fd52 	bl	800486c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01f      	beq.n	8002e14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd8:	f000 f8f6 	bl	8002fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	3310      	adds	r3, #16
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fe33 	bl	8003a5c <xTaskRemoveFromEventList>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002dfc:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <xQueueReceive+0x1b4>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e0c:	f001 fd5c 	bl	80048c8 <vPortExitCritical>
				return pdPASS;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e069      	b.n	8002ee8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e1a:	f001 fd55 	bl	80048c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e062      	b.n	8002ee8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fe77 	bl	8003b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e36:	f001 fd47 	bl	80048c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e3a:	f000 fbeb 	bl	8003614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e3e:	f001 fd15 	bl	800486c <vPortEnterCritical>
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d103      	bne.n	8002e58 <xQueueReceive+0x11c>
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d103      	bne.n	8002e6e <xQueueReceive+0x132>
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6e:	f001 fd2b 	bl	80048c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e72:	1d3a      	adds	r2, r7, #4
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fe66 	bl	8003b4c <xTaskCheckForTimeOut>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d123      	bne.n	8002ece <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e88:	f000 f916 	bl	80030b8 <prvIsQueueEmpty>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	3324      	adds	r3, #36	; 0x24
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fd90 	bl	80039c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea2:	f000 f8b7 	bl	8003014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ea6:	f000 fbc3 	bl	8003630 <xTaskResumeAll>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d189      	bne.n	8002dc4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <xQueueReceive+0x1b4>)
 8002eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	e780      	b.n	8002dc4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec4:	f000 f8a6 	bl	8003014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ec8:	f000 fbb2 	bl	8003630 <xTaskResumeAll>
 8002ecc:	e77a      	b.n	8002dc4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed0:	f000 f8a0 	bl	8003014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ed4:	f000 fbac 	bl	8003630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 f8ed 	bl	80030b8 <prvIsQueueEmpty>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f43f af6f 	beq.w	8002dc4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ee6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3730      	adds	r7, #48	; 0x30
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d14d      	bne.n	8002fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ff76 	bl	8003e10 <xTaskPriorityDisinherit>
 8002f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e043      	b.n	8002fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d119      	bne.n	8002f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6858      	ldr	r0, [r3, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	f002 f878 	bl	8005034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	441a      	add	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d32b      	bcc.n	8002fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	e026      	b.n	8002fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68d8      	ldr	r0, [r3, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	f002 f85e 	bl	8005034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	425b      	negs	r3, r3
 8002f82:	441a      	add	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	425b      	negs	r3, r3
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d105      	bne.n	8002fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fbe:	697b      	ldr	r3, [r7, #20]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	441a      	add	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d303      	bcc.n	8002ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68d9      	ldr	r1, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	461a      	mov	r2, r3
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f002 f814 	bl	8005034 <memcpy>
	}
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800301c:	f001 fc26 	bl	800486c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003028:	e011      	b.n	800304e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3324      	adds	r3, #36	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fd10 	bl	8003a5c <xTaskRemoveFromEventList>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003042:	f000 fde3 	bl	8003c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	dce9      	bgt.n	800302a <prvUnlockQueue+0x16>
 8003056:	e000      	b.n	800305a <prvUnlockQueue+0x46>
					break;
 8003058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003062:	f001 fc31 	bl	80048c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003066:	f001 fc01 	bl	800486c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003072:	e011      	b.n	8003098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3310      	adds	r3, #16
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fceb 	bl	8003a5c <xTaskRemoveFromEventList>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800308c:	f000 fdbe 	bl	8003c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003090:	7bbb      	ldrb	r3, [r7, #14]
 8003092:	3b01      	subs	r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800309c:	2b00      	cmp	r3, #0
 800309e:	dce9      	bgt.n	8003074 <prvUnlockQueue+0x60>
 80030a0:	e000      	b.n	80030a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030ac:	f001 fc0c 	bl	80048c8 <vPortExitCritical>
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030c0:	f001 fbd4 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e001      	b.n	80030d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030d6:	f001 fbf7 	bl	80048c8 <vPortExitCritical>

	return xReturn;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030ec:	f001 fbbe 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d102      	bne.n	8003102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003106:	f001 fbdf 	bl	80048c8 <vPortExitCritical>

	return xReturn;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e014      	b.n	800314e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003124:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <vQueueAddToRegistry+0x4c>)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003130:	490b      	ldr	r1, [pc, #44]	; (8003160 <vQueueAddToRegistry+0x4c>)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <vQueueAddToRegistry+0x4c>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003146:	e005      	b.n	8003154 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b07      	cmp	r3, #7
 8003152:	d9e7      	bls.n	8003124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20004af0 	.word	0x20004af0

08003164 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003174:	f001 fb7a 	bl	800486c <vPortEnterCritical>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800317e:	b25b      	sxtb	r3, r3
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d103      	bne.n	800318e <vQueueWaitForMessageRestricted+0x2a>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003194:	b25b      	sxtb	r3, r3
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d103      	bne.n	80031a4 <vQueueWaitForMessageRestricted+0x40>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a4:	f001 fb90 	bl	80048c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3324      	adds	r3, #36	; 0x24
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fc25 	bl	8003a08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff28 	bl	8003014 <prvUnlockQueue>
	}
 80031c4:	bf00      	nop
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	; 0x38
 80031d0:	af04      	add	r7, sp, #16
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <xTaskCreateStatic+0x28>
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	e7fe      	b.n	80031f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <xTaskCreateStatic+0x42>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	e7fe      	b.n	800320c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800320e:	23bc      	movs	r3, #188	; 0xbc
 8003210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2bbc      	cmp	r3, #188	; 0xbc
 8003216:	d009      	beq.n	800322c <xTaskCreateStatic+0x60>
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e7fe      	b.n	800322a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800322c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01e      	beq.n	8003272 <xTaskCreateStatic+0xa6>
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01b      	beq.n	8003272 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003242:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	2202      	movs	r2, #2
 8003248:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800324c:	2300      	movs	r3, #0
 800324e:	9303      	str	r3, [sp, #12]
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	9302      	str	r3, [sp, #8]
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f851 	bl	800330c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800326a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800326c:	f000 f8f4 	bl	8003458 <prvAddNewTaskToReadyList>
 8003270:	e001      	b.n	8003276 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003276:	697b      	ldr	r3, [r7, #20]
	}
 8003278:	4618      	mov	r0, r3
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fc03 	bl	8004aa0 <pvPortMalloc>
 800329a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032a2:	20bc      	movs	r0, #188	; 0xbc
 80032a4:	f001 fbfc 	bl	8004aa0 <pvPortMalloc>
 80032a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
 80032b6:	e005      	b.n	80032c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f001 fcb3 	bl	8004c24 <vPortFree>
 80032be:	e001      	b.n	80032c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	2300      	movs	r3, #0
 80032d6:	9303      	str	r3, [sp, #12]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	9302      	str	r3, [sp, #8]
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f80f 	bl	800330c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ee:	69f8      	ldr	r0, [r7, #28]
 80032f0:	f000 f8b2 	bl	8003458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032f4:	2301      	movs	r3, #1
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e002      	b.n	8003300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003300:	69bb      	ldr	r3, [r7, #24]
	}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	461a      	mov	r2, r3
 8003324:	21a5      	movs	r1, #165	; 0xa5
 8003326:	f001 fe90 	bl	800504a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003334:	3b01      	subs	r3, #1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f023 0307 	bic.w	r3, r3, #7
 8003342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <prvInitialiseNewTask+0x56>
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e7fe      	b.n	8003360 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01f      	beq.n	80033a8 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	e012      	b.n	8003394 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	7819      	ldrb	r1, [r3, #0]
 8003376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	3334      	adds	r3, #52	; 0x34
 800337e:	460a      	mov	r2, r1
 8003380:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d9e9      	bls.n	800336e <prvInitialiseNewTask+0x62>
 800339a:	e000      	b.n	800339e <prvInitialiseNewTask+0x92>
			{
				break;
 800339c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a6:	e003      	b.n	80033b0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2b37      	cmp	r3, #55	; 0x37
 80033b4:	d901      	bls.n	80033ba <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033b6:	2337      	movs	r3, #55	; 0x37
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	3304      	adds	r3, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f953 	bl	800267c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	3318      	adds	r3, #24
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff f94e 	bl	800267c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2200      	movs	r2, #0
 8003402:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	3354      	adds	r3, #84	; 0x54
 800340a:	2260      	movs	r2, #96	; 0x60
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fe1b 	bl	800504a <memset>
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	4a0d      	ldr	r2, [pc, #52]	; (800344c <prvInitialiseNewTask+0x140>)
 8003418:	659a      	str	r2, [r3, #88]	; 0x58
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <prvInitialiseNewTask+0x144>)
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <prvInitialiseNewTask+0x148>)
 8003424:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	69b8      	ldr	r0, [r7, #24]
 800342c:	f001 f8f6 	bl	800461c <pxPortInitialiseStack>
 8003430:	4602      	mov	r2, r0
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	08005e54 	.word	0x08005e54
 8003450:	08005e74 	.word	0x08005e74
 8003454:	08005e34 	.word	0x08005e34

08003458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003460:	f001 fa04 	bl	800486c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a2c      	ldr	r2, [pc, #176]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 800346c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003476:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800347c:	4b27      	ldr	r3, [pc, #156]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d110      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003484:	f000 fbe6 	bl	8003c54 <prvInitialiseTaskLists>
 8003488:	e00d      	b.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <prvAddNewTaskToReadyList+0xcc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d802      	bhi.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <prvAddNewTaskToReadyList+0xd0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <prvAddNewTaskToReadyList+0xd0>)
 80034ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <prvAddNewTaskToReadyList+0xd0>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <prvAddNewTaskToReadyList+0xd4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d903      	bls.n	80034cc <prvAddNewTaskToReadyList+0x74>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <prvAddNewTaskToReadyList+0xd4>)
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <prvAddNewTaskToReadyList+0xd8>)
 80034da:	441a      	add	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f7ff f8d7 	bl	8002696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034e8:	f001 f9ee 	bl	80048c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034ec:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <prvAddNewTaskToReadyList+0xcc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d207      	bcs.n	8003512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <prvAddNewTaskToReadyList+0xdc>)
 8003504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000ce0 	.word	0x20000ce0
 8003520:	2000080c 	.word	0x2000080c
 8003524:	20000cec 	.word	0x20000cec
 8003528:	20000cfc 	.word	0x20000cfc
 800352c:	20000ce8 	.word	0x20000ce8
 8003530:	20000810 	.word	0x20000810
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003546:	463a      	mov	r2, r7
 8003548:	1d39      	adds	r1, r7, #4
 800354a:	f107 0308 	add.w	r3, r7, #8
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f840 	bl	80025d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	9202      	str	r2, [sp, #8]
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	460a      	mov	r2, r1
 8003566:	4923      	ldr	r1, [pc, #140]	; (80035f4 <vTaskStartScheduler+0xbc>)
 8003568:	4823      	ldr	r0, [pc, #140]	; (80035f8 <vTaskStartScheduler+0xc0>)
 800356a:	f7ff fe2f 	bl	80031cc <xTaskCreateStatic>
 800356e:	4602      	mov	r2, r0
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <vTaskStartScheduler+0xc4>)
 8003572:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <vTaskStartScheduler+0xc4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800357c:	2301      	movs	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e001      	b.n	8003586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d102      	bne.n	8003592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800358c:	f000 fd00 	bl	8003f90 <xTimerCreateTimerTask>
 8003590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d11a      	bne.n	80035ce <vTaskStartScheduler+0x96>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <vTaskStartScheduler+0xc8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3354      	adds	r3, #84	; 0x54
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <vTaskStartScheduler+0xcc>)
 80035b2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <vTaskStartScheduler+0xd0>)
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <vTaskStartScheduler+0xd4>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <vTaskStartScheduler+0xd8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035c8:	f001 f8b2 	bl	8004730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035cc:	e00d      	b.n	80035ea <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d109      	bne.n	80035ea <vTaskStartScheduler+0xb2>
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e7fe      	b.n	80035e8 <vTaskStartScheduler+0xb0>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08005e04 	.word	0x08005e04
 80035f8:	08003c25 	.word	0x08003c25
 80035fc:	20000d04 	.word	0x20000d04
 8003600:	2000080c 	.word	0x2000080c
 8003604:	20000010 	.word	0x20000010
 8003608:	20000d00 	.word	0x20000d00
 800360c:	20000cec 	.word	0x20000cec
 8003610:	20000ce4 	.word	0x20000ce4

08003614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <vTaskSuspendAll+0x18>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	4a03      	ldr	r2, [pc, #12]	; (800362c <vTaskSuspendAll+0x18>)
 8003620:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000d08 	.word	0x20000d08

08003630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800363e:	4b41      	ldr	r3, [pc, #260]	; (8003744 <xTaskResumeAll+0x114>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <xTaskResumeAll+0x2a>
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	e7fe      	b.n	8003658 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800365a:	f001 f907 	bl	800486c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <xTaskResumeAll+0x114>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	4a37      	ldr	r2, [pc, #220]	; (8003744 <xTaskResumeAll+0x114>)
 8003666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <xTaskResumeAll+0x114>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d162      	bne.n	8003736 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <xTaskResumeAll+0x118>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05e      	beq.n	8003736 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003678:	e02f      	b.n	80036da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <xTaskResumeAll+0x11c>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3318      	adds	r3, #24
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f862 	bl	8002750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3304      	adds	r3, #4
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff f85d 	bl	8002750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <xTaskResumeAll+0x120>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d903      	bls.n	80036aa <xTaskResumeAll+0x7a>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <xTaskResumeAll+0x120>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a27      	ldr	r2, [pc, #156]	; (8003754 <xTaskResumeAll+0x124>)
 80036b8:	441a      	add	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7fe ffe8 	bl	8002696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <xTaskResumeAll+0x128>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <xTaskResumeAll+0x12c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <xTaskResumeAll+0x11c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1cb      	bne.n	800367a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036e8:	f000 fb54 	bl	8003d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036ec:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <xTaskResumeAll+0x130>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036f8:	f000 f846 	bl	8003788 <xTaskIncrementTick>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <xTaskResumeAll+0x12c>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f1      	bne.n	80036f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <xTaskResumeAll+0x130>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <xTaskResumeAll+0x12c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003722:	2301      	movs	r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <xTaskResumeAll+0x134>)
 8003728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003736:	f001 f8c7 	bl	80048c8 <vPortExitCritical>

	return xAlreadyYielded;
 800373a:	68bb      	ldr	r3, [r7, #8]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000d08 	.word	0x20000d08
 8003748:	20000ce0 	.word	0x20000ce0
 800374c:	20000ca0 	.word	0x20000ca0
 8003750:	20000ce8 	.word	0x20000ce8
 8003754:	20000810 	.word	0x20000810
 8003758:	2000080c 	.word	0x2000080c
 800375c:	20000cf4 	.word	0x20000cf4
 8003760:	20000cf0 	.word	0x20000cf0
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <xTaskGetTickCount+0x1c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000ce4 	.word	0x20000ce4

08003788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003792:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <xTaskIncrementTick+0x144>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 8088 	bne.w	80038ac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <xTaskIncrementTick+0x148>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037a4:	4a4a      	ldr	r2, [pc, #296]	; (80038d0 <xTaskIncrementTick+0x148>)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11f      	bne.n	80037f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80037b0:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <xTaskIncrementTick+0x14c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <xTaskIncrementTick+0x46>
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	e7fe      	b.n	80037cc <xTaskIncrementTick+0x44>
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <xTaskIncrementTick+0x14c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <xTaskIncrementTick+0x150>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3e      	ldr	r2, [pc, #248]	; (80038d4 <xTaskIncrementTick+0x14c>)
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <xTaskIncrementTick+0x150>)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <xTaskIncrementTick+0x154>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <xTaskIncrementTick+0x154>)
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	f000 fad2 	bl	8003d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <xTaskIncrementTick+0x158>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d349      	bcc.n	800388e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <xTaskIncrementTick+0x14c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <xTaskIncrementTick+0x158>)
 8003806:	f04f 32ff 	mov.w	r2, #4294967295
 800380a:	601a      	str	r2, [r3, #0]
					break;
 800380c:	e03f      	b.n	800388e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <xTaskIncrementTick+0x14c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d203      	bcs.n	800382e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003826:	4a2e      	ldr	r2, [pc, #184]	; (80038e0 <xTaskIncrementTick+0x158>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800382c:	e02f      	b.n	800388e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ff8c 	bl	8002750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3318      	adds	r3, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe ff83 	bl	8002750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <xTaskIncrementTick+0x15c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d903      	bls.n	800385e <xTaskIncrementTick+0xd6>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <xTaskIncrementTick+0x15c>)
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <xTaskIncrementTick+0x160>)
 800386c:	441a      	add	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe ff0e 	bl	8002696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <xTaskIncrementTick+0x164>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	429a      	cmp	r2, r3
 8003886:	d3b8      	bcc.n	80037fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800388c:	e7b5      	b.n	80037fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <xTaskIncrementTick+0x164>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	4914      	ldr	r1, [pc, #80]	; (80038e8 <xTaskIncrementTick+0x160>)
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d907      	bls.n	80038b6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e004      	b.n	80038b6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <xTaskIncrementTick+0x168>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a0f      	ldr	r2, [pc, #60]	; (80038f0 <xTaskIncrementTick+0x168>)
 80038b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <xTaskIncrementTick+0x16c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038c2:	697b      	ldr	r3, [r7, #20]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000d08 	.word	0x20000d08
 80038d0:	20000ce4 	.word	0x20000ce4
 80038d4:	20000c98 	.word	0x20000c98
 80038d8:	20000c9c 	.word	0x20000c9c
 80038dc:	20000cf8 	.word	0x20000cf8
 80038e0:	20000d00 	.word	0x20000d00
 80038e4:	20000ce8 	.word	0x20000ce8
 80038e8:	20000810 	.word	0x20000810
 80038ec:	2000080c 	.word	0x2000080c
 80038f0:	20000cf0 	.word	0x20000cf0
 80038f4:	20000cf4 	.word	0x20000cf4

080038f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <vTaskSwitchContext+0xb0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <vTaskSwitchContext+0xb4>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800390c:	e045      	b.n	800399a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <vTaskSwitchContext+0xb4>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <vTaskSwitchContext+0xb8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e00f      	b.n	800393c <vTaskSwitchContext+0x44>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <vTaskSwitchContext+0x3e>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	e7fe      	b.n	8003934 <vTaskSwitchContext+0x3c>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b01      	subs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	491d      	ldr	r1, [pc, #116]	; (80039b4 <vTaskSwitchContext+0xbc>)
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0e5      	beq.n	800391c <vTaskSwitchContext+0x24>
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <vTaskSwitchContext+0xbc>)
 800395c:	4413      	add	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3308      	adds	r3, #8
 8003972:	429a      	cmp	r2, r3
 8003974:	d104      	bne.n	8003980 <vTaskSwitchContext+0x88>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <vTaskSwitchContext+0xc0>)
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <vTaskSwitchContext+0xb8>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <vTaskSwitchContext+0xc0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3354      	adds	r3, #84	; 0x54
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <vTaskSwitchContext+0xc4>)
 8003998:	6013      	str	r3, [r2, #0]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000d08 	.word	0x20000d08
 80039ac:	20000cf4 	.word	0x20000cf4
 80039b0:	20000ce8 	.word	0x20000ce8
 80039b4:	20000810 	.word	0x20000810
 80039b8:	2000080c 	.word	0x2000080c
 80039bc:	20000010 	.word	0x20000010

080039c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <vTaskPlaceOnEventList+0x24>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e7fe      	b.n	80039e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <vTaskPlaceOnEventList+0x44>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3318      	adds	r3, #24
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fe fe76 	bl	80026de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039f2:	2101      	movs	r1, #1
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	f000 fa77 	bl	8003ee8 <prvAddCurrentTaskToDelayedList>
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000080c 	.word	0x2000080c

08003a08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <vTaskPlaceOnEventListRestricted+0x26>
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e7fe      	b.n	8003a2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <vTaskPlaceOnEventListRestricted+0x50>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3318      	adds	r3, #24
 8003a34:	4619      	mov	r1, r3
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7fe fe2d 	bl	8002696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68b8      	ldr	r0, [r7, #8]
 8003a4c:	f000 fa4c 	bl	8003ee8 <prvAddCurrentTaskToDelayedList>
	}
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	2000080c 	.word	0x2000080c

08003a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <xTaskRemoveFromEventList+0x2a>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e7fe      	b.n	8003a84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3318      	adds	r3, #24
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fe60 	bl	8002750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <xTaskRemoveFromEventList+0xac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d11d      	bne.n	8003ad4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fe57 	bl	8002750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <xTaskRemoveFromEventList+0xb0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d903      	bls.n	8003ab6 <xTaskRemoveFromEventList+0x5a>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <xTaskRemoveFromEventList+0xb0>)
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <xTaskRemoveFromEventList+0xb4>)
 8003ac4:	441a      	add	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7fe fde2 	bl	8002696 <vListInsertEnd>
 8003ad2:	e005      	b.n	8003ae0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3318      	adds	r3, #24
 8003ad8:	4619      	mov	r1, r3
 8003ada:	480e      	ldr	r0, [pc, #56]	; (8003b14 <xTaskRemoveFromEventList+0xb8>)
 8003adc:	f7fe fddb 	bl	8002696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <xTaskRemoveFromEventList+0xbc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d905      	bls.n	8003afa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <xTaskRemoveFromEventList+0xc0>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e001      	b.n	8003afe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003afe:	697b      	ldr	r3, [r7, #20]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000d08 	.word	0x20000d08
 8003b0c:	20000ce8 	.word	0x20000ce8
 8003b10:	20000810 	.word	0x20000810
 8003b14:	20000ca0 	.word	0x20000ca0
 8003b18:	2000080c 	.word	0x2000080c
 8003b1c:	20000cf4 	.word	0x20000cf4

08003b20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <vTaskInternalSetTimeOutState+0x24>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <vTaskInternalSetTimeOutState+0x28>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	605a      	str	r2, [r3, #4]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20000cf8 	.word	0x20000cf8
 8003b48:	20000ce4 	.word	0x20000ce4

08003b4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <xTaskCheckForTimeOut+0x24>
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e7fe      	b.n	8003b6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <xTaskCheckForTimeOut+0x3e>
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e7fe      	b.n	8003b88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003b8a:	f000 fe6f 	bl	800486c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <xTaskCheckForTimeOut+0xb8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d102      	bne.n	8003bae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e023      	b.n	8003bf6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <xTaskCheckForTimeOut+0xbc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d007      	beq.n	8003bca <xTaskCheckForTimeOut+0x7e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e015      	b.n	8003bf6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d20b      	bcs.n	8003bec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff9d 	bl	8003b20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e004      	b.n	8003bf6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bf6:	f000 fe67 	bl	80048c8 <vPortExitCritical>

	return xReturn;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000ce4 	.word	0x20000ce4
 8003c08:	20000cf8 	.word	0x20000cf8

08003c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <vTaskMissedYield+0x14>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000cf4 	.word	0x20000cf4

08003c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c2c:	f000 f852 	bl	8003cd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <prvIdleTask+0x28>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d9f9      	bls.n	8003c2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <prvIdleTask+0x2c>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c48:	e7f0      	b.n	8003c2c <prvIdleTask+0x8>
 8003c4a:	bf00      	nop
 8003c4c:	20000810 	.word	0x20000810
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	e00c      	b.n	8003c7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <prvInitialiseTaskLists+0x60>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fce4 	bl	800263c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3301      	adds	r3, #1
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b37      	cmp	r3, #55	; 0x37
 8003c7e:	d9ef      	bls.n	8003c60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c80:	480d      	ldr	r0, [pc, #52]	; (8003cb8 <prvInitialiseTaskLists+0x64>)
 8003c82:	f7fe fcdb 	bl	800263c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c86:	480d      	ldr	r0, [pc, #52]	; (8003cbc <prvInitialiseTaskLists+0x68>)
 8003c88:	f7fe fcd8 	bl	800263c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c8c:	480c      	ldr	r0, [pc, #48]	; (8003cc0 <prvInitialiseTaskLists+0x6c>)
 8003c8e:	f7fe fcd5 	bl	800263c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c92:	480c      	ldr	r0, [pc, #48]	; (8003cc4 <prvInitialiseTaskLists+0x70>)
 8003c94:	f7fe fcd2 	bl	800263c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c98:	480b      	ldr	r0, [pc, #44]	; (8003cc8 <prvInitialiseTaskLists+0x74>)
 8003c9a:	f7fe fccf 	bl	800263c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <prvInitialiseTaskLists+0x78>)
 8003ca0:	4a05      	ldr	r2, [pc, #20]	; (8003cb8 <prvInitialiseTaskLists+0x64>)
 8003ca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <prvInitialiseTaskLists+0x7c>)
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <prvInitialiseTaskLists+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000810 	.word	0x20000810
 8003cb8:	20000c70 	.word	0x20000c70
 8003cbc:	20000c84 	.word	0x20000c84
 8003cc0:	20000ca0 	.word	0x20000ca0
 8003cc4:	20000cb4 	.word	0x20000cb4
 8003cc8:	20000ccc 	.word	0x20000ccc
 8003ccc:	20000c98 	.word	0x20000c98
 8003cd0:	20000c9c 	.word	0x20000c9c

08003cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cda:	e019      	b.n	8003d10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cdc:	f000 fdc6 	bl	800486c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <prvCheckTasksWaitingTermination+0x4c>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fd2f 	bl	8002750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <prvCheckTasksWaitingTermination+0x50>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <prvCheckTasksWaitingTermination+0x50>)
 8003cfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvCheckTasksWaitingTermination+0x54>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <prvCheckTasksWaitingTermination+0x54>)
 8003d04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d06:	f000 fddf 	bl	80048c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f80e 	bl	8003d2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <prvCheckTasksWaitingTermination+0x54>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e1      	bne.n	8003cdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000cb4 	.word	0x20000cb4
 8003d24:	20000ce0 	.word	0x20000ce0
 8003d28:	20000cc8 	.word	0x20000cc8

08003d2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3354      	adds	r3, #84	; 0x54
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fa0f 	bl	800515c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d108      	bne.n	8003d5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 ff69 	bl	8004c24 <vPortFree>
				vPortFree( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 ff66 	bl	8004c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d58:	e017      	b.n	8003d8a <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d103      	bne.n	8003d6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 ff5d 	bl	8004c24 <vPortFree>
	}
 8003d6a:	e00e      	b.n	8003d8a <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d009      	beq.n	8003d8a <prvDeleteTCB+0x5e>
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e7fe      	b.n	8003d88 <prvDeleteTCB+0x5c>
	}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dac:	e008      	b.n	8003dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000c98 	.word	0x20000c98
 8003dd0:	20000d00 	.word	0x20000d00

08003dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <xTaskGetSchedulerState+0x34>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003de2:	2301      	movs	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	e008      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <xTaskGetSchedulerState+0x38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e001      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dfa:	687b      	ldr	r3, [r7, #4]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000cec 	.word	0x20000cec
 8003e0c:	20000d08 	.word	0x20000d08

08003e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d054      	beq.n	8003ed0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <xTaskPriorityDisinherit+0xcc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d009      	beq.n	8003e44 <xTaskPriorityDisinherit+0x34>
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e7fe      	b.n	8003e42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <xTaskPriorityDisinherit+0x50>
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	e7fe      	b.n	8003e5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d02c      	beq.n	8003ed0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d128      	bne.n	8003ed0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fc64 	bl	8002750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <xTaskPriorityDisinherit+0xd0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d903      	bls.n	8003eb0 <xTaskPriorityDisinherit+0xa0>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <xTaskPriorityDisinherit+0xd0>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <xTaskPriorityDisinherit+0xd4>)
 8003ebe:	441a      	add	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7fe fbe5 	bl	8002696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ed0:	697b      	ldr	r3, [r7, #20]
	}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2000080c 	.word	0x2000080c
 8003ee0:	20000ce8 	.word	0x20000ce8
 8003ee4:	20000810 	.word	0x20000810

08003ee8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fc26 	bl	8002750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d10a      	bne.n	8003f22 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4819      	ldr	r0, [pc, #100]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f1c:	f7fe fbbb 	bl	8002696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f20:	e026      	b.n	8003f70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d209      	bcs.n	8003f4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fe fbc9 	bl	80026de <vListInsert>
}
 8003f4c:	e010      	b.n	8003f70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7fe fbbf 	bl	80026de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d202      	bcs.n	8003f70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000ce4 	.word	0x20000ce4
 8003f7c:	2000080c 	.word	0x2000080c
 8003f80:	20000ccc 	.word	0x20000ccc
 8003f84:	20000c9c 	.word	0x20000c9c
 8003f88:	20000c98 	.word	0x20000c98
 8003f8c:	20000d00 	.word	0x20000d00

08003f90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f9a:	f000 faff 	bl	800459c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <xTimerCreateTimerTask+0x80>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d021      	beq.n	8003fea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fae:	1d3a      	adds	r2, r7, #4
 8003fb0:	f107 0108 	add.w	r1, r7, #8
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fb25 	bl	8002608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	9202      	str	r2, [sp, #8]
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	2302      	movs	r3, #2
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	460a      	mov	r2, r1
 8003fd0:	4910      	ldr	r1, [pc, #64]	; (8004014 <xTimerCreateTimerTask+0x84>)
 8003fd2:	4811      	ldr	r0, [pc, #68]	; (8004018 <xTimerCreateTimerTask+0x88>)
 8003fd4:	f7ff f8fa 	bl	80031cc <xTaskCreateStatic>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <xTimerCreateTimerTask+0x8c>)
 8003fdc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <xTimerCreateTimerTask+0x8c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <xTimerCreateTimerTask+0x74>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	e7fe      	b.n	8004002 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000d3c 	.word	0x20000d3c
 8004014:	08005e0c 	.word	0x08005e0c
 8004018:	08004151 	.word	0x08004151
 800401c:	20000d40 	.word	0x20000d40

08004020 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <xTimerGenericCommand+0x2c>
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	e7fe      	b.n	800404a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <xTimerGenericCommand+0x94>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02a      	beq.n	80040aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b05      	cmp	r3, #5
 8004064:	dc18      	bgt.n	8004098 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004066:	f7ff feb5 	bl	8003dd4 <xTaskGetSchedulerState>
 800406a:	4603      	mov	r3, r0
 800406c:	2b02      	cmp	r3, #2
 800406e:	d109      	bne.n	8004084 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <xTimerGenericCommand+0x94>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f107 0110 	add.w	r1, r7, #16
 8004078:	2300      	movs	r3, #0
 800407a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407c:	f7fe fcd0 	bl	8002a20 <xQueueGenericSend>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24
 8004082:	e012      	b.n	80040aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <xTimerGenericCommand+0x94>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f107 0110 	add.w	r1, r7, #16
 800408c:	2300      	movs	r3, #0
 800408e:	2200      	movs	r2, #0
 8004090:	f7fe fcc6 	bl	8002a20 <xQueueGenericSend>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
 8004096:	e008      	b.n	80040aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <xTimerGenericCommand+0x94>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	f107 0110 	add.w	r1, r7, #16
 80040a0:	2300      	movs	r3, #0
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	f7fe fdb6 	bl	8002c14 <xQueueGenericSendFromISR>
 80040a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000d3c 	.word	0x20000d3c

080040b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <prvProcessExpiredTimer+0x94>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fb3d 	bl	8002750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d021      	beq.n	8004128 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	18d1      	adds	r1, r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	6978      	ldr	r0, [r7, #20]
 80040f2:	f000 f8d1 	bl	8004298 <prvInsertTimerInActiveList>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01e      	beq.n	800413a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	2100      	movs	r1, #0
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7ff ff8a 	bl	8004020 <xTimerGenericCommand>
 800410c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d112      	bne.n	800413a <prvProcessExpiredTimer+0x82>
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e7fe      	b.n	8004126 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	4798      	blx	r3
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000d34 	.word	0x20000d34

08004150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f857 	bl	8004210 <prvGetNextExpireTime>
 8004162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4619      	mov	r1, r3
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f803 	bl	8004174 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800416e:	f000 f8d5 	bl	800431c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004172:	e7f1      	b.n	8004158 <prvTimerTask+0x8>

08004174 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800417e:	f7ff fa49 	bl	8003614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004182:	f107 0308 	add.w	r3, r7, #8
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f866 	bl	8004258 <prvSampleTimeNow>
 800418c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d130      	bne.n	80041f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <prvProcessTimerOrBlockTask+0x3c>
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d806      	bhi.n	80041b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041a2:	f7ff fa45 	bl	8003630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff85 	bl	80040b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041ae:	e024      	b.n	80041fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <prvProcessTimerOrBlockTask+0x90>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <prvProcessTimerOrBlockTask+0x50>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <prvProcessTimerOrBlockTask+0x52>
 80041c4:	2300      	movs	r3, #0
 80041c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <prvProcessTimerOrBlockTask+0x94>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	f7fe ffc5 	bl	8003164 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041da:	f7ff fa29 	bl	8003630 <xTaskResumeAll>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <prvProcessTimerOrBlockTask+0x98>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	f3bf 8f6f 	isb	sy
}
 80041f4:	e001      	b.n	80041fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041f6:	f7ff fa1b 	bl	8003630 <xTaskResumeAll>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000d38 	.word	0x20000d38
 8004208:	20000d3c 	.word	0x20000d3c
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <prvGetNextExpireTime+0x44>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <prvGetNextExpireTime+0x16>
 8004222:	2201      	movs	r2, #1
 8004224:	e000      	b.n	8004228 <prvGetNextExpireTime+0x18>
 8004226:	2200      	movs	r2, #0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <prvGetNextExpireTime+0x44>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e001      	b.n	8004244 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000d34 	.word	0x20000d34

08004258 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004260:	f7ff fa82 	bl	8003768 <xTaskGetTickCount>
 8004264:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <prvSampleTimeNow+0x3c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d205      	bcs.n	800427c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004270:	f000 f930 	bl	80044d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e002      	b.n	8004282 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004282:	4a04      	ldr	r2, [pc, #16]	; (8004294 <prvSampleTimeNow+0x3c>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000d44 	.word	0x20000d44

08004298 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d812      	bhi.n	80042e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad2      	subs	r2, r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e01b      	b.n	800430a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <prvInsertTimerInActiveList+0x7c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3304      	adds	r3, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f7fe f9fe 	bl	80026de <vListInsert>
 80042e2:	e012      	b.n	800430a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d206      	bcs.n	80042fa <prvInsertTimerInActiveList+0x62>
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e007      	b.n	800430a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <prvInsertTimerInActiveList+0x80>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f7fe f9ea 	bl	80026de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800430a:	697b      	ldr	r3, [r7, #20]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000d38 	.word	0x20000d38
 8004318:	20000d34 	.word	0x20000d34

0800431c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004322:	e0c6      	b.n	80044b2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da17      	bge.n	800435a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	3304      	adds	r3, #4
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <prvProcessReceivedCommands+0x2e>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e7fe      	b.n	8004348 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004350:	6850      	ldr	r0, [r2, #4]
 8004352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	4611      	mov	r1, r2
 8004358:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f2c0 80a7 	blt.w	80044b0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	3304      	adds	r3, #4
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe f9ec 	bl	8002750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004378:	463b      	mov	r3, r7
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff6c 	bl	8004258 <prvSampleTimeNow>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b09      	cmp	r3, #9
 8004386:	f200 8094 	bhi.w	80044b2 <prvProcessReceivedCommands+0x196>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <prvProcessReceivedCommands+0x74>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043b9 	.word	0x080043b9
 800439c:	0800442b 	.word	0x0800442b
 80043a0:	0800443f 	.word	0x0800443f
 80043a4:	08004487 	.word	0x08004487
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043b9 	.word	0x080043b9
 80043b0:	0800442b 	.word	0x0800442b
 80043b4:	0800443f 	.word	0x0800443f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	18d1      	adds	r1, r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d8:	f7ff ff5e 	bl	8004298 <prvInsertTimerInActiveList>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d067      	beq.n	80044b2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05c      	beq.n	80044b2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	441a      	add	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	2100      	movs	r1, #0
 8004408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440a:	f7ff fe09 	bl	8004020 <xTimerGenericCommand>
 800440e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d14d      	bne.n	80044b2 <prvProcessReceivedCommands+0x196>
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	e7fe      	b.n	8004428 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	b2da      	uxtb	r2, r3
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800443c:	e039      	b.n	80044b2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <prvProcessReceivedCommands+0x156>
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e7fe      	b.n	8004470 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	18d1      	adds	r1, r2, r3
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004480:	f7ff ff0a 	bl	8004298 <prvInsertTimerInActiveList>
					break;
 8004484:	e015      	b.n	80044b2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004496:	f000 fbc5 	bl	8004c24 <vPortFree>
 800449a:	e00a      	b.n	80044b2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044ae:	e000      	b.n	80044b2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <prvProcessReceivedCommands+0x1b4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1d39      	adds	r1, r7, #4
 80044b8:	2200      	movs	r2, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fc3e 	bl	8002d3c <xQueueReceive>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f47f af2e 	bne.w	8004324 <prvProcessReceivedCommands+0x8>
	}
}
 80044c8:	bf00      	nop
 80044ca:	3730      	adds	r7, #48	; 0x30
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000d3c 	.word	0x20000d3c

080044d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044da:	e047      	b.n	800456c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044dc:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <prvSwitchTimerLists+0xc0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044e6:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <prvSwitchTimerLists+0xc0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe f92b 	bl	8002750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02d      	beq.n	800456c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d90e      	bls.n	8004540 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800452e:	4b19      	ldr	r3, [pc, #100]	; (8004594 <prvSwitchTimerLists+0xc0>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7fe f8d0 	bl	80026de <vListInsert>
 800453e:	e015      	b.n	800456c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004540:	2300      	movs	r3, #0
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	2100      	movs	r1, #0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff fd68 	bl	8004020 <xTimerGenericCommand>
 8004550:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <prvSwitchTimerLists+0x98>
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	e7fe      	b.n	800456a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <prvSwitchTimerLists+0xc0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1b2      	bne.n	80044dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <prvSwitchTimerLists+0xc0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvSwitchTimerLists+0xc4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <prvSwitchTimerLists+0xc0>)
 8004582:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <prvSwitchTimerLists+0xc4>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	6013      	str	r3, [r2, #0]
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000d34 	.word	0x20000d34
 8004598:	20000d38 	.word	0x20000d38

0800459c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045a2:	f000 f963 	bl	800486c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <prvCheckForValidListAndQueue+0x60>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d120      	bne.n	80045f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045ae:	4814      	ldr	r0, [pc, #80]	; (8004600 <prvCheckForValidListAndQueue+0x64>)
 80045b0:	f7fe f844 	bl	800263c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045b4:	4813      	ldr	r0, [pc, #76]	; (8004604 <prvCheckForValidListAndQueue+0x68>)
 80045b6:	f7fe f841 	bl	800263c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <prvCheckForValidListAndQueue+0x6c>)
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <prvCheckForValidListAndQueue+0x64>)
 80045be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045c0:	4b12      	ldr	r3, [pc, #72]	; (800460c <prvCheckForValidListAndQueue+0x70>)
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <prvCheckForValidListAndQueue+0x68>)
 80045c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045c6:	2300      	movs	r3, #0
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <prvCheckForValidListAndQueue+0x74>)
 80045cc:	4a11      	ldr	r2, [pc, #68]	; (8004614 <prvCheckForValidListAndQueue+0x78>)
 80045ce:	2110      	movs	r1, #16
 80045d0:	200a      	movs	r0, #10
 80045d2:	f7fe f94f 	bl	8002874 <xQueueGenericCreateStatic>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <prvCheckForValidListAndQueue+0x60>)
 80045da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <prvCheckForValidListAndQueue+0x60>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <prvCheckForValidListAndQueue+0x60>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	490b      	ldr	r1, [pc, #44]	; (8004618 <prvCheckForValidListAndQueue+0x7c>)
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fd92 	bl	8003114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045f0:	f000 f96a 	bl	80048c8 <vPortExitCritical>
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000d3c 	.word	0x20000d3c
 8004600:	20000d0c 	.word	0x20000d0c
 8004604:	20000d20 	.word	0x20000d20
 8004608:	20000d34 	.word	0x20000d34
 800460c:	20000d38 	.word	0x20000d38
 8004610:	20000de8 	.word	0x20000de8
 8004614:	20000d48 	.word	0x20000d48
 8004618:	08005e14 	.word	0x08005e14

0800461c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b04      	subs	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b04      	subs	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3b04      	subs	r3, #4
 800464a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <pxPortInitialiseStack+0x64>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b14      	subs	r3, #20
 8004656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f06f 0202 	mvn.w	r2, #2
 800466a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b20      	subs	r3, #32
 8004670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	08004685 	.word	0x08004685

08004684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <prvTaskExitError+0x50>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d009      	beq.n	80046ac <prvTaskExitError+0x28>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e7fe      	b.n	80046aa <prvTaskExitError+0x26>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046be:	bf00      	nop
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0fc      	beq.n	80046c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c
	...

080046e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	4770      	bx	lr
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst2>:
 8004700:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <prvPortStartFirstTask+0x24>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8814 	msr	CONTROL, r0
 800471a:	b662      	cpsie	i
 800471c:	b661      	cpsie	f
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	df00      	svc	0
 8004728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800472a:	bf00      	nop
 800472c:	e000ed08 	.word	0xe000ed08

08004730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004736:	4b44      	ldr	r3, [pc, #272]	; (8004848 <xPortStartScheduler+0x118>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a44      	ldr	r2, [pc, #272]	; (800484c <xPortStartScheduler+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d109      	bne.n	8004754 <xPortStartScheduler+0x24>
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e7fe      	b.n	8004752 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004754:	4b3c      	ldr	r3, [pc, #240]	; (8004848 <xPortStartScheduler+0x118>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <xPortStartScheduler+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d109      	bne.n	8004772 <xPortStartScheduler+0x42>
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e7fe      	b.n	8004770 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004772:	4b38      	ldr	r3, [pc, #224]	; (8004854 <xPortStartScheduler+0x124>)
 8004774:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b30      	ldr	r3, [pc, #192]	; (8004858 <xPortStartScheduler+0x128>)
 8004798:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800479a:	4b30      	ldr	r3, [pc, #192]	; (800485c <xPortStartScheduler+0x12c>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047a0:	e009      	b.n	80047b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80047a2:	4b2e      	ldr	r3, [pc, #184]	; (800485c <xPortStartScheduler+0x12c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <xPortStartScheduler+0x12c>)
 80047aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d0ef      	beq.n	80047a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <xPortStartScheduler+0x12c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1c3 0307 	rsb	r3, r3, #7
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d009      	beq.n	80047e2 <xPortStartScheduler+0xb2>
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	e7fe      	b.n	80047e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <xPortStartScheduler+0x12c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <xPortStartScheduler+0x12c>)
 80047ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <xPortStartScheduler+0x12c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <xPortStartScheduler+0x12c>)
 80047f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <xPortStartScheduler+0x130>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a16      	ldr	r2, [pc, #88]	; (8004860 <xPortStartScheduler+0x130>)
 8004806:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800480a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <xPortStartScheduler+0x130>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <xPortStartScheduler+0x130>)
 8004812:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004816:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004818:	f000 f8d6 	bl	80049c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xPortStartScheduler+0x134>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004822:	f000 f8f5 	bl	8004a10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <xPortStartScheduler+0x138>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a0f      	ldr	r2, [pc, #60]	; (8004868 <xPortStartScheduler+0x138>)
 800482c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004830:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004832:	f7ff ff69 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004836:	f7ff f85f 	bl	80038f8 <vTaskSwitchContext>
	prvTaskExitError();
 800483a:	f7ff ff23 	bl	8004684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e000ed00 	.word	0xe000ed00
 800484c:	410fc271 	.word	0x410fc271
 8004850:	410fc270 	.word	0x410fc270
 8004854:	e000e400 	.word	0xe000e400
 8004858:	20000e38 	.word	0x20000e38
 800485c:	20000e3c 	.word	0x20000e3c
 8004860:	e000ed20 	.word	0xe000ed20
 8004864:	2000000c 	.word	0x2000000c
 8004868:	e000ef34 	.word	0xe000ef34

0800486c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004884:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <vPortEnterCritical+0x54>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <vPortEnterCritical+0x54>)
 800488c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <vPortEnterCritical+0x54>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10e      	bne.n	80048b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <vPortEnterCritical+0x58>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <vPortEnterCritical+0x48>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	e7fe      	b.n	80048b2 <vPortEnterCritical+0x46>
	}
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <vPortExitCritical+0x4c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <vPortExitCritical+0x22>
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e7fe      	b.n	80048e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <vPortExitCritical+0x4c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4a08      	ldr	r2, [pc, #32]	; (8004914 <vPortExitCritical+0x4c>)
 80048f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <vPortExitCritical+0x4c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <vPortExitCritical+0x3e>
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c
	...

08004920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004920:	f3ef 8009 	mrs	r0, PSP
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4b15      	ldr	r3, [pc, #84]	; (8004980 <pxCurrentTCBConst>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	f01e 0f10 	tst.w	lr, #16
 8004930:	bf08      	it	eq
 8004932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	6010      	str	r0, [r2, #0]
 800493c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004944:	f380 8811 	msr	BASEPRI, r0
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f7fe ffd2 	bl	80038f8 <vTaskSwitchContext>
 8004954:	f04f 0000 	mov.w	r0, #0
 8004958:	f380 8811 	msr	BASEPRI, r0
 800495c:	bc09      	pop	{r0, r3}
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	6808      	ldr	r0, [r1, #0]
 8004962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004966:	f01e 0f10 	tst.w	lr, #16
 800496a:	bf08      	it	eq
 800496c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004970:	f380 8809 	msr	PSP, r0
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst>:
 8004980:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049a0:	f7fe fef2 	bl	8003788 <xTaskIncrementTick>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <SysTick_Handler+0x3c>)
 80049ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <vPortSetupTimerInterrupt+0x34>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortSetupTimerInterrupt+0x38>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <vPortSetupTimerInterrupt+0x3c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <vPortSetupTimerInterrupt+0x40>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <vPortSetupTimerInterrupt+0x44>)
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <vPortSetupTimerInterrupt+0x34>)
 80049ec:	2207      	movs	r2, #7
 80049ee:	601a      	str	r2, [r3, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e010 	.word	0xe000e010
 8004a00:	e000e018 	.word	0xe000e018
 8004a04:	20000000 	.word	0x20000000
 8004a08:	10624dd3 	.word	0x10624dd3
 8004a0c:	e000e014 	.word	0xe000e014

08004a10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a20 <vPortEnableVFP+0x10>
 8004a14:	6801      	ldr	r1, [r0, #0]
 8004a16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a1a:	6001      	str	r1, [r0, #0]
 8004a1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a1e:	bf00      	nop
 8004a20:	e000ed88 	.word	0xe000ed88

08004a24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a2a:	f3ef 8305 	mrs	r3, IPSR
 8004a2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	d913      	bls.n	8004a5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <vPortValidateInterruptPriority+0x6c>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <vPortValidateInterruptPriority+0x70>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	7afa      	ldrb	r2, [r7, #11]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d209      	bcs.n	8004a5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	e7fe      	b.n	8004a5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <vPortValidateInterruptPriority+0x74>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <vPortValidateInterruptPriority+0x78>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d909      	bls.n	8004a82 <vPortValidateInterruptPriority+0x5e>
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	e7fe      	b.n	8004a80 <vPortValidateInterruptPriority+0x5c>
	}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e3f0 	.word	0xe000e3f0
 8004a94:	20000e38 	.word	0x20000e38
 8004a98:	e000ed0c 	.word	0xe000ed0c
 8004a9c:	20000e3c 	.word	0x20000e3c

08004aa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004aac:	f7fe fdb2 	bl	8003614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ab0:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <pvPortMalloc+0x170>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ab8:	f000 f90c 	bl	8004cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004abc:	4b55      	ldr	r3, [pc, #340]	; (8004c14 <pvPortMalloc+0x174>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f040 808c 	bne.w	8004be2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01c      	beq.n	8004b0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	3308      	adds	r3, #8
 8004aea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <pvPortMalloc+0x6a>
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e7fe      	b.n	8004b08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d068      	beq.n	8004be2 <pvPortMalloc+0x142>
 8004b10:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <pvPortMalloc+0x178>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d863      	bhi.n	8004be2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b1a:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <pvPortMalloc+0x17c>)
 8004b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <pvPortMalloc+0x17c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b24:	e004      	b.n	8004b30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d903      	bls.n	8004b42 <pvPortMalloc+0xa2>
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f1      	bne.n	8004b26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b42:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <pvPortMalloc+0x170>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d04a      	beq.n	8004be2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4413      	add	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	1ad2      	subs	r2, r2, r3
 8004b66:	2308      	movs	r3, #8
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d91e      	bls.n	8004bac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <pvPortMalloc+0xf4>
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e7fe      	b.n	8004b92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ba6:	69b8      	ldr	r0, [r7, #24]
 8004ba8:	f000 f8f6 	bl	8004d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <pvPortMalloc+0x178>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <pvPortMalloc+0x178>)
 8004bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bba:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <pvPortMalloc+0x178>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <pvPortMalloc+0x180>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d203      	bcs.n	8004bce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <pvPortMalloc+0x178>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <pvPortMalloc+0x180>)
 8004bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <pvPortMalloc+0x174>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004be2:	f7fe fd25 	bl	8003630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <pvPortMalloc+0x164>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e7fe      	b.n	8004c02 <pvPortMalloc+0x162>
	return pvReturn;
 8004c04:	69fb      	ldr	r3, [r7, #28]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3728      	adds	r7, #40	; 0x28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20004a48 	.word	0x20004a48
 8004c14:	20004a54 	.word	0x20004a54
 8004c18:	20004a4c 	.word	0x20004a4c
 8004c1c:	20004a40 	.word	0x20004a40
 8004c20:	20004a50 	.word	0x20004a50

08004c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d046      	beq.n	8004cc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c36:	2308      	movs	r3, #8
 8004c38:	425b      	negs	r3, r3
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <vPortFree+0xa8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <vPortFree+0x42>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e7fe      	b.n	8004c64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <vPortFree+0x5e>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	e7fe      	b.n	8004c80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <vPortFree+0xa8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <vPortFree+0xa8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ca8:	f7fe fcb4 	bl	8003614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <vPortFree+0xac>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4a06      	ldr	r2, [pc, #24]	; (8004cd0 <vPortFree+0xac>)
 8004cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cba:	6938      	ldr	r0, [r7, #16]
 8004cbc:	f000 f86c 	bl	8004d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cc0:	f7fe fcb6 	bl	8003630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20004a54 	.word	0x20004a54
 8004cd0:	20004a4c 	.word	0x20004a4c

08004cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <prvHeapInit+0xac>)
 8004ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3307      	adds	r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0307 	bic.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <prvHeapInit+0xac>)
 8004d04:	4413      	add	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <prvHeapInit+0xb0>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <prvHeapInit+0xb0>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d20:	2208      	movs	r2, #8
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <prvHeapInit+0xb4>)
 8004d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <prvHeapInit+0xb4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <prvHeapInit+0xb4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <prvHeapInit+0xb4>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <prvHeapInit+0xb8>)
 8004d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <prvHeapInit+0xbc>)
 8004d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <prvHeapInit+0xc0>)
 8004d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000e40 	.word	0x20000e40
 8004d84:	20004a40 	.word	0x20004a40
 8004d88:	20004a48 	.word	0x20004a48
 8004d8c:	20004a50 	.word	0x20004a50
 8004d90:	20004a4c 	.word	0x20004a4c
 8004d94:	20004a54 	.word	0x20004a54

08004d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <prvInsertBlockIntoFreeList+0xac>)
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e002      	b.n	8004dac <prvInsertBlockIntoFreeList+0x14>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d8f7      	bhi.n	8004da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d108      	bne.n	8004dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d118      	bne.n	8004e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <prvInsertBlockIntoFreeList+0xb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d00d      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e008      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvInsertBlockIntoFreeList+0xb0>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e003      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d002      	beq.n	8004e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20004a40 	.word	0x20004a40
 8004e48:	20004a48 	.word	0x20004a48

08004e4c <__errno>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <__errno+0x8>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000010 	.word	0x20000010

08004e58 <std>:
 8004e58:	2300      	movs	r3, #0
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e62:	6083      	str	r3, [r0, #8]
 8004e64:	8181      	strh	r1, [r0, #12]
 8004e66:	6643      	str	r3, [r0, #100]	; 0x64
 8004e68:	81c2      	strh	r2, [r0, #14]
 8004e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e6e:	6183      	str	r3, [r0, #24]
 8004e70:	4619      	mov	r1, r3
 8004e72:	2208      	movs	r2, #8
 8004e74:	305c      	adds	r0, #92	; 0x5c
 8004e76:	f000 f8e8 	bl	800504a <memset>
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <std+0x38>)
 8004e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <std+0x3c>)
 8004e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <std+0x40>)
 8004e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x44>)
 8004e88:	6224      	str	r4, [r4, #32]
 8004e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	08005235 	.word	0x08005235
 8004e94:	08005257 	.word	0x08005257
 8004e98:	0800528f 	.word	0x0800528f
 8004e9c:	080052b3 	.word	0x080052b3

08004ea0 <_cleanup_r>:
 8004ea0:	4901      	ldr	r1, [pc, #4]	; (8004ea8 <_cleanup_r+0x8>)
 8004ea2:	f000 b885 	b.w	8004fb0 <_fwalk_reent>
 8004ea6:	bf00      	nop
 8004ea8:	0800540d 	.word	0x0800540d

08004eac <__sfmoreglue>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	1e4a      	subs	r2, r1, #1
 8004eb0:	2568      	movs	r5, #104	; 0x68
 8004eb2:	4355      	muls	r5, r2
 8004eb4:	460e      	mov	r6, r1
 8004eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eba:	f000 f8cf 	bl	800505c <_malloc_r>
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	b140      	cbz	r0, 8004ed4 <__sfmoreglue+0x28>
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ec8:	300c      	adds	r0, #12
 8004eca:	60a0      	str	r0, [r4, #8]
 8004ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ed0:	f000 f8bb 	bl	800504a <memset>
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}

08004ed8 <__sinit>:
 8004ed8:	6983      	ldr	r3, [r0, #24]
 8004eda:	b510      	push	{r4, lr}
 8004edc:	4604      	mov	r4, r0
 8004ede:	bb33      	cbnz	r3, 8004f2e <__sinit+0x56>
 8004ee0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ee4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <__sinit+0x58>)
 8004ee8:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <__sinit+0x5c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6282      	str	r2, [r0, #40]	; 0x28
 8004eee:	4298      	cmp	r0, r3
 8004ef0:	bf04      	itt	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	6183      	streq	r3, [r0, #24]
 8004ef6:	f000 f81f 	bl	8004f38 <__sfp>
 8004efa:	6060      	str	r0, [r4, #4]
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f81b 	bl	8004f38 <__sfp>
 8004f02:	60a0      	str	r0, [r4, #8]
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f817 	bl	8004f38 <__sfp>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60e0      	str	r0, [r4, #12]
 8004f0e:	2104      	movs	r1, #4
 8004f10:	6860      	ldr	r0, [r4, #4]
 8004f12:	f7ff ffa1 	bl	8004e58 <std>
 8004f16:	2201      	movs	r2, #1
 8004f18:	2109      	movs	r1, #9
 8004f1a:	68a0      	ldr	r0, [r4, #8]
 8004f1c:	f7ff ff9c 	bl	8004e58 <std>
 8004f20:	2202      	movs	r2, #2
 8004f22:	2112      	movs	r1, #18
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	f7ff ff97 	bl	8004e58 <std>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61a3      	str	r3, [r4, #24]
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	08005e94 	.word	0x08005e94
 8004f34:	08004ea1 	.word	0x08004ea1

08004f38 <__sfp>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <__sfp+0x70>)
 8004f3c:	681e      	ldr	r6, [r3, #0]
 8004f3e:	69b3      	ldr	r3, [r6, #24]
 8004f40:	4607      	mov	r7, r0
 8004f42:	b913      	cbnz	r3, 8004f4a <__sfp+0x12>
 8004f44:	4630      	mov	r0, r6
 8004f46:	f7ff ffc7 	bl	8004ed8 <__sinit>
 8004f4a:	3648      	adds	r6, #72	; 0x48
 8004f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	d503      	bpl.n	8004f5c <__sfp+0x24>
 8004f54:	6833      	ldr	r3, [r6, #0]
 8004f56:	b133      	cbz	r3, 8004f66 <__sfp+0x2e>
 8004f58:	6836      	ldr	r6, [r6, #0]
 8004f5a:	e7f7      	b.n	8004f4c <__sfp+0x14>
 8004f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f60:	b16d      	cbz	r5, 8004f7e <__sfp+0x46>
 8004f62:	3468      	adds	r4, #104	; 0x68
 8004f64:	e7f4      	b.n	8004f50 <__sfp+0x18>
 8004f66:	2104      	movs	r1, #4
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f7ff ff9f 	bl	8004eac <__sfmoreglue>
 8004f6e:	6030      	str	r0, [r6, #0]
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d1f1      	bne.n	8004f58 <__sfp+0x20>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <__sfp+0x74>)
 8004f80:	6665      	str	r5, [r4, #100]	; 0x64
 8004f82:	e9c4 5500 	strd	r5, r5, [r4]
 8004f86:	60a5      	str	r5, [r4, #8]
 8004f88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004f90:	2208      	movs	r2, #8
 8004f92:	4629      	mov	r1, r5
 8004f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f98:	f000 f857 	bl	800504a <memset>
 8004f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fa4:	e7e9      	b.n	8004f7a <__sfp+0x42>
 8004fa6:	bf00      	nop
 8004fa8:	08005e94 	.word	0x08005e94
 8004fac:	ffff0001 	.word	0xffff0001

08004fb0 <_fwalk_reent>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	4689      	mov	r9, r1
 8004fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	b914      	cbnz	r4, 8004fc6 <_fwalk_reent+0x16>
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004fca:	3f01      	subs	r7, #1
 8004fcc:	d501      	bpl.n	8004fd2 <_fwalk_reent+0x22>
 8004fce:	6824      	ldr	r4, [r4, #0]
 8004fd0:	e7f5      	b.n	8004fbe <_fwalk_reent+0xe>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d907      	bls.n	8004fe8 <_fwalk_reent+0x38>
 8004fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	d003      	beq.n	8004fe8 <_fwalk_reent+0x38>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	47c8      	blx	r9
 8004fe6:	4306      	orrs	r6, r0
 8004fe8:	3568      	adds	r5, #104	; 0x68
 8004fea:	e7ee      	b.n	8004fca <_fwalk_reent+0x1a>

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4e0d      	ldr	r6, [pc, #52]	; (8005024 <__libc_init_array+0x38>)
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <__libc_init_array+0x3c>)
 8004ff2:	1ba4      	subs	r4, r4, r6
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	4e0b      	ldr	r6, [pc, #44]	; (800502c <__libc_init_array+0x40>)
 8004ffe:	4c0c      	ldr	r4, [pc, #48]	; (8005030 <__libc_init_array+0x44>)
 8005000:	f000 feb0 	bl	8005d64 <_init>
 8005004:	1ba4      	subs	r4, r4, r6
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	2500      	movs	r5, #0
 800500a:	42a5      	cmp	r5, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005014:	4798      	blx	r3
 8005016:	3501      	adds	r5, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800501e:	4798      	blx	r3
 8005020:	3501      	adds	r5, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	08005ed4 	.word	0x08005ed4
 8005028:	08005ed4 	.word	0x08005ed4
 800502c:	08005ed4 	.word	0x08005ed4
 8005030:	08005ed8 	.word	0x08005ed8

08005034 <memcpy>:
 8005034:	b510      	push	{r4, lr}
 8005036:	1e43      	subs	r3, r0, #1
 8005038:	440a      	add	r2, r1
 800503a:	4291      	cmp	r1, r2
 800503c:	d100      	bne.n	8005040 <memcpy+0xc>
 800503e:	bd10      	pop	{r4, pc}
 8005040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005048:	e7f7      	b.n	800503a <memcpy+0x6>

0800504a <memset>:
 800504a:	4402      	add	r2, r0
 800504c:	4603      	mov	r3, r0
 800504e:	4293      	cmp	r3, r2
 8005050:	d100      	bne.n	8005054 <memset+0xa>
 8005052:	4770      	bx	lr
 8005054:	f803 1b01 	strb.w	r1, [r3], #1
 8005058:	e7f9      	b.n	800504e <memset+0x4>
	...

0800505c <_malloc_r>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	1ccd      	adds	r5, r1, #3
 8005060:	f025 0503 	bic.w	r5, r5, #3
 8005064:	3508      	adds	r5, #8
 8005066:	2d0c      	cmp	r5, #12
 8005068:	bf38      	it	cc
 800506a:	250c      	movcc	r5, #12
 800506c:	2d00      	cmp	r5, #0
 800506e:	4606      	mov	r6, r0
 8005070:	db01      	blt.n	8005076 <_malloc_r+0x1a>
 8005072:	42a9      	cmp	r1, r5
 8005074:	d903      	bls.n	800507e <_malloc_r+0x22>
 8005076:	230c      	movs	r3, #12
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	2000      	movs	r0, #0
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	f000 fa01 	bl	8005484 <__malloc_lock>
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <_malloc_r+0xac>)
 8005084:	6814      	ldr	r4, [r2, #0]
 8005086:	4621      	mov	r1, r4
 8005088:	b991      	cbnz	r1, 80050b0 <_malloc_r+0x54>
 800508a:	4c20      	ldr	r4, [pc, #128]	; (800510c <_malloc_r+0xb0>)
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	b91b      	cbnz	r3, 8005098 <_malloc_r+0x3c>
 8005090:	4630      	mov	r0, r6
 8005092:	f000 f8bf 	bl	8005214 <_sbrk_r>
 8005096:	6020      	str	r0, [r4, #0]
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f000 f8ba 	bl	8005214 <_sbrk_r>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d124      	bne.n	80050ee <_malloc_r+0x92>
 80050a4:	230c      	movs	r3, #12
 80050a6:	6033      	str	r3, [r6, #0]
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 f9ec 	bl	8005486 <__malloc_unlock>
 80050ae:	e7e4      	b.n	800507a <_malloc_r+0x1e>
 80050b0:	680b      	ldr	r3, [r1, #0]
 80050b2:	1b5b      	subs	r3, r3, r5
 80050b4:	d418      	bmi.n	80050e8 <_malloc_r+0x8c>
 80050b6:	2b0b      	cmp	r3, #11
 80050b8:	d90f      	bls.n	80050da <_malloc_r+0x7e>
 80050ba:	600b      	str	r3, [r1, #0]
 80050bc:	50cd      	str	r5, [r1, r3]
 80050be:	18cc      	adds	r4, r1, r3
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f9e0 	bl	8005486 <__malloc_unlock>
 80050c6:	f104 000b 	add.w	r0, r4, #11
 80050ca:	1d23      	adds	r3, r4, #4
 80050cc:	f020 0007 	bic.w	r0, r0, #7
 80050d0:	1ac3      	subs	r3, r0, r3
 80050d2:	d0d3      	beq.n	800507c <_malloc_r+0x20>
 80050d4:	425a      	negs	r2, r3
 80050d6:	50e2      	str	r2, [r4, r3]
 80050d8:	e7d0      	b.n	800507c <_malloc_r+0x20>
 80050da:	428c      	cmp	r4, r1
 80050dc:	684b      	ldr	r3, [r1, #4]
 80050de:	bf16      	itet	ne
 80050e0:	6063      	strne	r3, [r4, #4]
 80050e2:	6013      	streq	r3, [r2, #0]
 80050e4:	460c      	movne	r4, r1
 80050e6:	e7eb      	b.n	80050c0 <_malloc_r+0x64>
 80050e8:	460c      	mov	r4, r1
 80050ea:	6849      	ldr	r1, [r1, #4]
 80050ec:	e7cc      	b.n	8005088 <_malloc_r+0x2c>
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d005      	beq.n	8005104 <_malloc_r+0xa8>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4630      	mov	r0, r6
 80050fc:	f000 f88a 	bl	8005214 <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d0cf      	beq.n	80050a4 <_malloc_r+0x48>
 8005104:	6025      	str	r5, [r4, #0]
 8005106:	e7db      	b.n	80050c0 <_malloc_r+0x64>
 8005108:	20004a58 	.word	0x20004a58
 800510c:	20004a5c 	.word	0x20004a5c

08005110 <iprintf>:
 8005110:	b40f      	push	{r0, r1, r2, r3}
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <iprintf+0x2c>)
 8005114:	b513      	push	{r0, r1, r4, lr}
 8005116:	681c      	ldr	r4, [r3, #0]
 8005118:	b124      	cbz	r4, 8005124 <iprintf+0x14>
 800511a:	69a3      	ldr	r3, [r4, #24]
 800511c:	b913      	cbnz	r3, 8005124 <iprintf+0x14>
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff feda 	bl	8004ed8 <__sinit>
 8005124:	ab05      	add	r3, sp, #20
 8005126:	9a04      	ldr	r2, [sp, #16]
 8005128:	68a1      	ldr	r1, [r4, #8]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fa23 	bl	8005578 <_vfiprintf_r>
 8005132:	b002      	add	sp, #8
 8005134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005138:	b004      	add	sp, #16
 800513a:	4770      	bx	lr
 800513c:	20000010 	.word	0x20000010

08005140 <cleanup_glue>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	460c      	mov	r4, r1
 8005144:	6809      	ldr	r1, [r1, #0]
 8005146:	4605      	mov	r5, r0
 8005148:	b109      	cbz	r1, 800514e <cleanup_glue+0xe>
 800514a:	f7ff fff9 	bl	8005140 <cleanup_glue>
 800514e:	4621      	mov	r1, r4
 8005150:	4628      	mov	r0, r5
 8005152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005156:	f000 b997 	b.w	8005488 <_free_r>
	...

0800515c <_reclaim_reent>:
 800515c:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <_reclaim_reent+0xb4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4283      	cmp	r3, r0
 8005162:	b570      	push	{r4, r5, r6, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	d051      	beq.n	800520c <_reclaim_reent+0xb0>
 8005168:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800516a:	b143      	cbz	r3, 800517e <_reclaim_reent+0x22>
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d14a      	bne.n	8005208 <_reclaim_reent+0xac>
 8005172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	b111      	cbz	r1, 800517e <_reclaim_reent+0x22>
 8005178:	4620      	mov	r0, r4
 800517a:	f000 f985 	bl	8005488 <_free_r>
 800517e:	6961      	ldr	r1, [r4, #20]
 8005180:	b111      	cbz	r1, 8005188 <_reclaim_reent+0x2c>
 8005182:	4620      	mov	r0, r4
 8005184:	f000 f980 	bl	8005488 <_free_r>
 8005188:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800518a:	b111      	cbz	r1, 8005192 <_reclaim_reent+0x36>
 800518c:	4620      	mov	r0, r4
 800518e:	f000 f97b 	bl	8005488 <_free_r>
 8005192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005194:	b111      	cbz	r1, 800519c <_reclaim_reent+0x40>
 8005196:	4620      	mov	r0, r4
 8005198:	f000 f976 	bl	8005488 <_free_r>
 800519c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800519e:	b111      	cbz	r1, 80051a6 <_reclaim_reent+0x4a>
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 f971 	bl	8005488 <_free_r>
 80051a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80051a8:	b111      	cbz	r1, 80051b0 <_reclaim_reent+0x54>
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 f96c 	bl	8005488 <_free_r>
 80051b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80051b2:	b111      	cbz	r1, 80051ba <_reclaim_reent+0x5e>
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 f967 	bl	8005488 <_free_r>
 80051ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80051bc:	b111      	cbz	r1, 80051c4 <_reclaim_reent+0x68>
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 f962 	bl	8005488 <_free_r>
 80051c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c6:	b111      	cbz	r1, 80051ce <_reclaim_reent+0x72>
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 f95d 	bl	8005488 <_free_r>
 80051ce:	69a3      	ldr	r3, [r4, #24]
 80051d0:	b1e3      	cbz	r3, 800520c <_reclaim_reent+0xb0>
 80051d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051d4:	4620      	mov	r0, r4
 80051d6:	4798      	blx	r3
 80051d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80051da:	b1b9      	cbz	r1, 800520c <_reclaim_reent+0xb0>
 80051dc:	4620      	mov	r0, r4
 80051de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051e2:	f7ff bfad 	b.w	8005140 <cleanup_glue>
 80051e6:	5949      	ldr	r1, [r1, r5]
 80051e8:	b941      	cbnz	r1, 80051fc <_reclaim_reent+0xa0>
 80051ea:	3504      	adds	r5, #4
 80051ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ee:	2d80      	cmp	r5, #128	; 0x80
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	d1f8      	bne.n	80051e6 <_reclaim_reent+0x8a>
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 f947 	bl	8005488 <_free_r>
 80051fa:	e7ba      	b.n	8005172 <_reclaim_reent+0x16>
 80051fc:	680e      	ldr	r6, [r1, #0]
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f942 	bl	8005488 <_free_r>
 8005204:	4631      	mov	r1, r6
 8005206:	e7ef      	b.n	80051e8 <_reclaim_reent+0x8c>
 8005208:	2500      	movs	r5, #0
 800520a:	e7ef      	b.n	80051ec <_reclaim_reent+0x90>
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	bf00      	nop
 8005210:	20000010 	.word	0x20000010

08005214 <_sbrk_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4c06      	ldr	r4, [pc, #24]	; (8005230 <_sbrk_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4605      	mov	r5, r0
 800521c:	4608      	mov	r0, r1
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	f7fb fc70 	bl	8000b04 <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_sbrk_r+0x1a>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	b103      	cbz	r3, 800522e <_sbrk_r+0x1a>
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20004b30 	.word	0x20004b30

08005234 <__sread>:
 8005234:	b510      	push	{r4, lr}
 8005236:	460c      	mov	r4, r1
 8005238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523c:	f000 fc3a 	bl	8005ab4 <_read_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	bfab      	itete	ge
 8005244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005246:	89a3      	ldrhlt	r3, [r4, #12]
 8005248:	181b      	addge	r3, r3, r0
 800524a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800524e:	bfac      	ite	ge
 8005250:	6563      	strge	r3, [r4, #84]	; 0x54
 8005252:	81a3      	strhlt	r3, [r4, #12]
 8005254:	bd10      	pop	{r4, pc}

08005256 <__swrite>:
 8005256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	461f      	mov	r7, r3
 800525c:	898b      	ldrh	r3, [r1, #12]
 800525e:	05db      	lsls	r3, r3, #23
 8005260:	4605      	mov	r5, r0
 8005262:	460c      	mov	r4, r1
 8005264:	4616      	mov	r6, r2
 8005266:	d505      	bpl.n	8005274 <__swrite+0x1e>
 8005268:	2302      	movs	r3, #2
 800526a:	2200      	movs	r2, #0
 800526c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005270:	f000 f8f6 	bl	8005460 <_lseek_r>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800527a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	4632      	mov	r2, r6
 8005282:	463b      	mov	r3, r7
 8005284:	4628      	mov	r0, r5
 8005286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528a:	f000 b817 	b.w	80052bc <_write_r>

0800528e <__sseek>:
 800528e:	b510      	push	{r4, lr}
 8005290:	460c      	mov	r4, r1
 8005292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005296:	f000 f8e3 	bl	8005460 <_lseek_r>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	bf15      	itete	ne
 80052a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052aa:	81a3      	strheq	r3, [r4, #12]
 80052ac:	bf18      	it	ne
 80052ae:	81a3      	strhne	r3, [r4, #12]
 80052b0:	bd10      	pop	{r4, pc}

080052b2 <__sclose>:
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 b813 	b.w	80052e0 <_close_r>
	...

080052bc <_write_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4c07      	ldr	r4, [pc, #28]	; (80052dc <_write_r+0x20>)
 80052c0:	4605      	mov	r5, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fb fbc9 	bl	8000a62 <_write>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_write_r+0x1e>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	b103      	cbz	r3, 80052da <_write_r+0x1e>
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20004b30 	.word	0x20004b30

080052e0 <_close_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4c06      	ldr	r4, [pc, #24]	; (80052fc <_close_r+0x1c>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4605      	mov	r5, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	f7fb fbd5 	bl	8000a9a <_close>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_close_r+0x1a>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_close_r+0x1a>
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20004b30 	.word	0x20004b30

08005300 <__sflush_r>:
 8005300:	898a      	ldrh	r2, [r1, #12]
 8005302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005306:	4605      	mov	r5, r0
 8005308:	0710      	lsls	r0, r2, #28
 800530a:	460c      	mov	r4, r1
 800530c:	d458      	bmi.n	80053c0 <__sflush_r+0xc0>
 800530e:	684b      	ldr	r3, [r1, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	dc05      	bgt.n	8005320 <__sflush_r+0x20>
 8005314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	dc02      	bgt.n	8005320 <__sflush_r+0x20>
 800531a:	2000      	movs	r0, #0
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005322:	2e00      	cmp	r6, #0
 8005324:	d0f9      	beq.n	800531a <__sflush_r+0x1a>
 8005326:	2300      	movs	r3, #0
 8005328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800532c:	682f      	ldr	r7, [r5, #0]
 800532e:	6a21      	ldr	r1, [r4, #32]
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	d032      	beq.n	800539a <__sflush_r+0x9a>
 8005334:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	075a      	lsls	r2, r3, #29
 800533a:	d505      	bpl.n	8005348 <__sflush_r+0x48>
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	1ac0      	subs	r0, r0, r3
 8005340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005342:	b10b      	cbz	r3, 8005348 <__sflush_r+0x48>
 8005344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005346:	1ac0      	subs	r0, r0, r3
 8005348:	2300      	movs	r3, #0
 800534a:	4602      	mov	r2, r0
 800534c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800534e:	6a21      	ldr	r1, [r4, #32]
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	d106      	bne.n	8005368 <__sflush_r+0x68>
 800535a:	6829      	ldr	r1, [r5, #0]
 800535c:	291d      	cmp	r1, #29
 800535e:	d848      	bhi.n	80053f2 <__sflush_r+0xf2>
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <__sflush_r+0x108>)
 8005362:	40ca      	lsrs	r2, r1
 8005364:	07d6      	lsls	r6, r2, #31
 8005366:	d544      	bpl.n	80053f2 <__sflush_r+0xf2>
 8005368:	2200      	movs	r2, #0
 800536a:	6062      	str	r2, [r4, #4]
 800536c:	04d9      	lsls	r1, r3, #19
 800536e:	6922      	ldr	r2, [r4, #16]
 8005370:	6022      	str	r2, [r4, #0]
 8005372:	d504      	bpl.n	800537e <__sflush_r+0x7e>
 8005374:	1c42      	adds	r2, r0, #1
 8005376:	d101      	bne.n	800537c <__sflush_r+0x7c>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b903      	cbnz	r3, 800537e <__sflush_r+0x7e>
 800537c:	6560      	str	r0, [r4, #84]	; 0x54
 800537e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005380:	602f      	str	r7, [r5, #0]
 8005382:	2900      	cmp	r1, #0
 8005384:	d0c9      	beq.n	800531a <__sflush_r+0x1a>
 8005386:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800538a:	4299      	cmp	r1, r3
 800538c:	d002      	beq.n	8005394 <__sflush_r+0x94>
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f87a 	bl	8005488 <_free_r>
 8005394:	2000      	movs	r0, #0
 8005396:	6360      	str	r0, [r4, #52]	; 0x34
 8005398:	e7c0      	b.n	800531c <__sflush_r+0x1c>
 800539a:	2301      	movs	r3, #1
 800539c:	4628      	mov	r0, r5
 800539e:	47b0      	blx	r6
 80053a0:	1c41      	adds	r1, r0, #1
 80053a2:	d1c8      	bne.n	8005336 <__sflush_r+0x36>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0c5      	beq.n	8005336 <__sflush_r+0x36>
 80053aa:	2b1d      	cmp	r3, #29
 80053ac:	d001      	beq.n	80053b2 <__sflush_r+0xb2>
 80053ae:	2b16      	cmp	r3, #22
 80053b0:	d101      	bne.n	80053b6 <__sflush_r+0xb6>
 80053b2:	602f      	str	r7, [r5, #0]
 80053b4:	e7b1      	b.n	800531a <__sflush_r+0x1a>
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053bc:	81a3      	strh	r3, [r4, #12]
 80053be:	e7ad      	b.n	800531c <__sflush_r+0x1c>
 80053c0:	690f      	ldr	r7, [r1, #16]
 80053c2:	2f00      	cmp	r7, #0
 80053c4:	d0a9      	beq.n	800531a <__sflush_r+0x1a>
 80053c6:	0793      	lsls	r3, r2, #30
 80053c8:	680e      	ldr	r6, [r1, #0]
 80053ca:	bf08      	it	eq
 80053cc:	694b      	ldreq	r3, [r1, #20]
 80053ce:	600f      	str	r7, [r1, #0]
 80053d0:	bf18      	it	ne
 80053d2:	2300      	movne	r3, #0
 80053d4:	eba6 0807 	sub.w	r8, r6, r7
 80053d8:	608b      	str	r3, [r1, #8]
 80053da:	f1b8 0f00 	cmp.w	r8, #0
 80053de:	dd9c      	ble.n	800531a <__sflush_r+0x1a>
 80053e0:	4643      	mov	r3, r8
 80053e2:	463a      	mov	r2, r7
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b0      	blx	r6
 80053ec:	2800      	cmp	r0, #0
 80053ee:	dc06      	bgt.n	80053fe <__sflush_r+0xfe>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	e78e      	b.n	800531c <__sflush_r+0x1c>
 80053fe:	4407      	add	r7, r0
 8005400:	eba8 0800 	sub.w	r8, r8, r0
 8005404:	e7e9      	b.n	80053da <__sflush_r+0xda>
 8005406:	bf00      	nop
 8005408:	20400001 	.word	0x20400001

0800540c <_fflush_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	4605      	mov	r5, r0
 8005412:	460c      	mov	r4, r1
 8005414:	b1db      	cbz	r3, 800544e <_fflush_r+0x42>
 8005416:	b118      	cbz	r0, 8005420 <_fflush_r+0x14>
 8005418:	6983      	ldr	r3, [r0, #24]
 800541a:	b90b      	cbnz	r3, 8005420 <_fflush_r+0x14>
 800541c:	f7ff fd5c 	bl	8004ed8 <__sinit>
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <_fflush_r+0x48>)
 8005422:	429c      	cmp	r4, r3
 8005424:	d109      	bne.n	800543a <_fflush_r+0x2e>
 8005426:	686c      	ldr	r4, [r5, #4]
 8005428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542c:	b17b      	cbz	r3, 800544e <_fflush_r+0x42>
 800542e:	4621      	mov	r1, r4
 8005430:	4628      	mov	r0, r5
 8005432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005436:	f7ff bf63 	b.w	8005300 <__sflush_r>
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <_fflush_r+0x4c>)
 800543c:	429c      	cmp	r4, r3
 800543e:	d101      	bne.n	8005444 <_fflush_r+0x38>
 8005440:	68ac      	ldr	r4, [r5, #8]
 8005442:	e7f1      	b.n	8005428 <_fflush_r+0x1c>
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <_fflush_r+0x50>)
 8005446:	429c      	cmp	r4, r3
 8005448:	bf08      	it	eq
 800544a:	68ec      	ldreq	r4, [r5, #12]
 800544c:	e7ec      	b.n	8005428 <_fflush_r+0x1c>
 800544e:	2000      	movs	r0, #0
 8005450:	bd38      	pop	{r3, r4, r5, pc}
 8005452:	bf00      	nop
 8005454:	08005e54 	.word	0x08005e54
 8005458:	08005e74 	.word	0x08005e74
 800545c:	08005e34 	.word	0x08005e34

08005460 <_lseek_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4c07      	ldr	r4, [pc, #28]	; (8005480 <_lseek_r+0x20>)
 8005464:	4605      	mov	r5, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	6022      	str	r2, [r4, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fb fb3a 	bl	8000ae8 <_lseek>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_lseek_r+0x1e>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	b103      	cbz	r3, 800547e <_lseek_r+0x1e>
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20004b30 	.word	0x20004b30

08005484 <__malloc_lock>:
 8005484:	4770      	bx	lr

08005486 <__malloc_unlock>:
 8005486:	4770      	bx	lr

08005488 <_free_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4605      	mov	r5, r0
 800548c:	2900      	cmp	r1, #0
 800548e:	d045      	beq.n	800551c <_free_r+0x94>
 8005490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005494:	1f0c      	subs	r4, r1, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	bfb8      	it	lt
 800549a:	18e4      	addlt	r4, r4, r3
 800549c:	f7ff fff2 	bl	8005484 <__malloc_lock>
 80054a0:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <_free_r+0x98>)
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	4610      	mov	r0, r2
 80054a6:	b933      	cbnz	r3, 80054b6 <_free_r+0x2e>
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	6014      	str	r4, [r2, #0]
 80054ac:	4628      	mov	r0, r5
 80054ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b2:	f7ff bfe8 	b.w	8005486 <__malloc_unlock>
 80054b6:	42a3      	cmp	r3, r4
 80054b8:	d90c      	bls.n	80054d4 <_free_r+0x4c>
 80054ba:	6821      	ldr	r1, [r4, #0]
 80054bc:	1862      	adds	r2, r4, r1
 80054be:	4293      	cmp	r3, r2
 80054c0:	bf04      	itt	eq
 80054c2:	681a      	ldreq	r2, [r3, #0]
 80054c4:	685b      	ldreq	r3, [r3, #4]
 80054c6:	6063      	str	r3, [r4, #4]
 80054c8:	bf04      	itt	eq
 80054ca:	1852      	addeq	r2, r2, r1
 80054cc:	6022      	streq	r2, [r4, #0]
 80054ce:	6004      	str	r4, [r0, #0]
 80054d0:	e7ec      	b.n	80054ac <_free_r+0x24>
 80054d2:	4613      	mov	r3, r2
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	b10a      	cbz	r2, 80054dc <_free_r+0x54>
 80054d8:	42a2      	cmp	r2, r4
 80054da:	d9fa      	bls.n	80054d2 <_free_r+0x4a>
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	1858      	adds	r0, r3, r1
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d10b      	bne.n	80054fc <_free_r+0x74>
 80054e4:	6820      	ldr	r0, [r4, #0]
 80054e6:	4401      	add	r1, r0
 80054e8:	1858      	adds	r0, r3, r1
 80054ea:	4282      	cmp	r2, r0
 80054ec:	6019      	str	r1, [r3, #0]
 80054ee:	d1dd      	bne.n	80054ac <_free_r+0x24>
 80054f0:	6810      	ldr	r0, [r2, #0]
 80054f2:	6852      	ldr	r2, [r2, #4]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	4401      	add	r1, r0
 80054f8:	6019      	str	r1, [r3, #0]
 80054fa:	e7d7      	b.n	80054ac <_free_r+0x24>
 80054fc:	d902      	bls.n	8005504 <_free_r+0x7c>
 80054fe:	230c      	movs	r3, #12
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	e7d3      	b.n	80054ac <_free_r+0x24>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	1821      	adds	r1, r4, r0
 8005508:	428a      	cmp	r2, r1
 800550a:	bf04      	itt	eq
 800550c:	6811      	ldreq	r1, [r2, #0]
 800550e:	6852      	ldreq	r2, [r2, #4]
 8005510:	6062      	str	r2, [r4, #4]
 8005512:	bf04      	itt	eq
 8005514:	1809      	addeq	r1, r1, r0
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	605c      	str	r4, [r3, #4]
 800551a:	e7c7      	b.n	80054ac <_free_r+0x24>
 800551c:	bd38      	pop	{r3, r4, r5, pc}
 800551e:	bf00      	nop
 8005520:	20004a58 	.word	0x20004a58

08005524 <__sfputc_r>:
 8005524:	6893      	ldr	r3, [r2, #8]
 8005526:	3b01      	subs	r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	b410      	push	{r4}
 800552c:	6093      	str	r3, [r2, #8]
 800552e:	da08      	bge.n	8005542 <__sfputc_r+0x1e>
 8005530:	6994      	ldr	r4, [r2, #24]
 8005532:	42a3      	cmp	r3, r4
 8005534:	db01      	blt.n	800553a <__sfputc_r+0x16>
 8005536:	290a      	cmp	r1, #10
 8005538:	d103      	bne.n	8005542 <__sfputc_r+0x1e>
 800553a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800553e:	f000 bacb 	b.w	8005ad8 <__swbuf_r>
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	1c58      	adds	r0, r3, #1
 8005546:	6010      	str	r0, [r2, #0]
 8005548:	7019      	strb	r1, [r3, #0]
 800554a:	4608      	mov	r0, r1
 800554c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005550:	4770      	bx	lr

08005552 <__sfputs_r>:
 8005552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005554:	4606      	mov	r6, r0
 8005556:	460f      	mov	r7, r1
 8005558:	4614      	mov	r4, r2
 800555a:	18d5      	adds	r5, r2, r3
 800555c:	42ac      	cmp	r4, r5
 800555e:	d101      	bne.n	8005564 <__sfputs_r+0x12>
 8005560:	2000      	movs	r0, #0
 8005562:	e007      	b.n	8005574 <__sfputs_r+0x22>
 8005564:	463a      	mov	r2, r7
 8005566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556a:	4630      	mov	r0, r6
 800556c:	f7ff ffda 	bl	8005524 <__sfputc_r>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d1f3      	bne.n	800555c <__sfputs_r+0xa>
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005578 <_vfiprintf_r>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	460c      	mov	r4, r1
 800557e:	b09d      	sub	sp, #116	; 0x74
 8005580:	4617      	mov	r7, r2
 8005582:	461d      	mov	r5, r3
 8005584:	4606      	mov	r6, r0
 8005586:	b118      	cbz	r0, 8005590 <_vfiprintf_r+0x18>
 8005588:	6983      	ldr	r3, [r0, #24]
 800558a:	b90b      	cbnz	r3, 8005590 <_vfiprintf_r+0x18>
 800558c:	f7ff fca4 	bl	8004ed8 <__sinit>
 8005590:	4b7c      	ldr	r3, [pc, #496]	; (8005784 <_vfiprintf_r+0x20c>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d158      	bne.n	8005648 <_vfiprintf_r+0xd0>
 8005596:	6874      	ldr	r4, [r6, #4]
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	0718      	lsls	r0, r3, #28
 800559c:	d55e      	bpl.n	800565c <_vfiprintf_r+0xe4>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05b      	beq.n	800565c <_vfiprintf_r+0xe4>
 80055a4:	2300      	movs	r3, #0
 80055a6:	9309      	str	r3, [sp, #36]	; 0x24
 80055a8:	2320      	movs	r3, #32
 80055aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ae:	2330      	movs	r3, #48	; 0x30
 80055b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055b4:	9503      	str	r5, [sp, #12]
 80055b6:	f04f 0b01 	mov.w	fp, #1
 80055ba:	46b8      	mov	r8, r7
 80055bc:	4645      	mov	r5, r8
 80055be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055c2:	b10b      	cbz	r3, 80055c8 <_vfiprintf_r+0x50>
 80055c4:	2b25      	cmp	r3, #37	; 0x25
 80055c6:	d154      	bne.n	8005672 <_vfiprintf_r+0xfa>
 80055c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80055cc:	d00b      	beq.n	80055e6 <_vfiprintf_r+0x6e>
 80055ce:	4653      	mov	r3, sl
 80055d0:	463a      	mov	r2, r7
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7ff ffbc 	bl	8005552 <__sfputs_r>
 80055da:	3001      	adds	r0, #1
 80055dc:	f000 80c2 	beq.w	8005764 <_vfiprintf_r+0x1ec>
 80055e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e2:	4453      	add	r3, sl
 80055e4:	9309      	str	r3, [sp, #36]	; 0x24
 80055e6:	f898 3000 	ldrb.w	r3, [r8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80ba 	beq.w	8005764 <_vfiprintf_r+0x1ec>
 80055f0:	2300      	movs	r3, #0
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	9307      	str	r3, [sp, #28]
 80055fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005602:	931a      	str	r3, [sp, #104]	; 0x68
 8005604:	46a8      	mov	r8, r5
 8005606:	2205      	movs	r2, #5
 8005608:	f818 1b01 	ldrb.w	r1, [r8], #1
 800560c:	485e      	ldr	r0, [pc, #376]	; (8005788 <_vfiprintf_r+0x210>)
 800560e:	f7fa fde7 	bl	80001e0 <memchr>
 8005612:	9b04      	ldr	r3, [sp, #16]
 8005614:	bb78      	cbnz	r0, 8005676 <_vfiprintf_r+0xfe>
 8005616:	06d9      	lsls	r1, r3, #27
 8005618:	bf44      	itt	mi
 800561a:	2220      	movmi	r2, #32
 800561c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005620:	071a      	lsls	r2, r3, #28
 8005622:	bf44      	itt	mi
 8005624:	222b      	movmi	r2, #43	; 0x2b
 8005626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800562a:	782a      	ldrb	r2, [r5, #0]
 800562c:	2a2a      	cmp	r2, #42	; 0x2a
 800562e:	d02a      	beq.n	8005686 <_vfiprintf_r+0x10e>
 8005630:	9a07      	ldr	r2, [sp, #28]
 8005632:	46a8      	mov	r8, r5
 8005634:	2000      	movs	r0, #0
 8005636:	250a      	movs	r5, #10
 8005638:	4641      	mov	r1, r8
 800563a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800563e:	3b30      	subs	r3, #48	; 0x30
 8005640:	2b09      	cmp	r3, #9
 8005642:	d969      	bls.n	8005718 <_vfiprintf_r+0x1a0>
 8005644:	b360      	cbz	r0, 80056a0 <_vfiprintf_r+0x128>
 8005646:	e024      	b.n	8005692 <_vfiprintf_r+0x11a>
 8005648:	4b50      	ldr	r3, [pc, #320]	; (800578c <_vfiprintf_r+0x214>)
 800564a:	429c      	cmp	r4, r3
 800564c:	d101      	bne.n	8005652 <_vfiprintf_r+0xda>
 800564e:	68b4      	ldr	r4, [r6, #8]
 8005650:	e7a2      	b.n	8005598 <_vfiprintf_r+0x20>
 8005652:	4b4f      	ldr	r3, [pc, #316]	; (8005790 <_vfiprintf_r+0x218>)
 8005654:	429c      	cmp	r4, r3
 8005656:	bf08      	it	eq
 8005658:	68f4      	ldreq	r4, [r6, #12]
 800565a:	e79d      	b.n	8005598 <_vfiprintf_r+0x20>
 800565c:	4621      	mov	r1, r4
 800565e:	4630      	mov	r0, r6
 8005660:	f000 fa8c 	bl	8005b7c <__swsetup_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	d09d      	beq.n	80055a4 <_vfiprintf_r+0x2c>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	b01d      	add	sp, #116	; 0x74
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	46a8      	mov	r8, r5
 8005674:	e7a2      	b.n	80055bc <_vfiprintf_r+0x44>
 8005676:	4a44      	ldr	r2, [pc, #272]	; (8005788 <_vfiprintf_r+0x210>)
 8005678:	1a80      	subs	r0, r0, r2
 800567a:	fa0b f000 	lsl.w	r0, fp, r0
 800567e:	4318      	orrs	r0, r3
 8005680:	9004      	str	r0, [sp, #16]
 8005682:	4645      	mov	r5, r8
 8005684:	e7be      	b.n	8005604 <_vfiprintf_r+0x8c>
 8005686:	9a03      	ldr	r2, [sp, #12]
 8005688:	1d11      	adds	r1, r2, #4
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	9103      	str	r1, [sp, #12]
 800568e:	2a00      	cmp	r2, #0
 8005690:	db01      	blt.n	8005696 <_vfiprintf_r+0x11e>
 8005692:	9207      	str	r2, [sp, #28]
 8005694:	e004      	b.n	80056a0 <_vfiprintf_r+0x128>
 8005696:	4252      	negs	r2, r2
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	9207      	str	r2, [sp, #28]
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	f898 3000 	ldrb.w	r3, [r8]
 80056a4:	2b2e      	cmp	r3, #46	; 0x2e
 80056a6:	d10e      	bne.n	80056c6 <_vfiprintf_r+0x14e>
 80056a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80056ac:	2b2a      	cmp	r3, #42	; 0x2a
 80056ae:	d138      	bne.n	8005722 <_vfiprintf_r+0x1aa>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	9203      	str	r2, [sp, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bfb8      	it	lt
 80056bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80056c0:	f108 0802 	add.w	r8, r8, #2
 80056c4:	9305      	str	r3, [sp, #20]
 80056c6:	4d33      	ldr	r5, [pc, #204]	; (8005794 <_vfiprintf_r+0x21c>)
 80056c8:	f898 1000 	ldrb.w	r1, [r8]
 80056cc:	2203      	movs	r2, #3
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7fa fd86 	bl	80001e0 <memchr>
 80056d4:	b140      	cbz	r0, 80056e8 <_vfiprintf_r+0x170>
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	1b40      	subs	r0, r0, r5
 80056da:	fa03 f000 	lsl.w	r0, r3, r0
 80056de:	9b04      	ldr	r3, [sp, #16]
 80056e0:	4303      	orrs	r3, r0
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	f898 1000 	ldrb.w	r1, [r8]
 80056ec:	482a      	ldr	r0, [pc, #168]	; (8005798 <_vfiprintf_r+0x220>)
 80056ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056f2:	2206      	movs	r2, #6
 80056f4:	f108 0701 	add.w	r7, r8, #1
 80056f8:	f7fa fd72 	bl	80001e0 <memchr>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d037      	beq.n	8005770 <_vfiprintf_r+0x1f8>
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <_vfiprintf_r+0x224>)
 8005702:	bb1b      	cbnz	r3, 800574c <_vfiprintf_r+0x1d4>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	3307      	adds	r3, #7
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	3308      	adds	r3, #8
 800570e:	9303      	str	r3, [sp, #12]
 8005710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005712:	444b      	add	r3, r9
 8005714:	9309      	str	r3, [sp, #36]	; 0x24
 8005716:	e750      	b.n	80055ba <_vfiprintf_r+0x42>
 8005718:	fb05 3202 	mla	r2, r5, r2, r3
 800571c:	2001      	movs	r0, #1
 800571e:	4688      	mov	r8, r1
 8005720:	e78a      	b.n	8005638 <_vfiprintf_r+0xc0>
 8005722:	2300      	movs	r3, #0
 8005724:	f108 0801 	add.w	r8, r8, #1
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	4619      	mov	r1, r3
 800572c:	250a      	movs	r5, #10
 800572e:	4640      	mov	r0, r8
 8005730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005734:	3a30      	subs	r2, #48	; 0x30
 8005736:	2a09      	cmp	r2, #9
 8005738:	d903      	bls.n	8005742 <_vfiprintf_r+0x1ca>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0c3      	beq.n	80056c6 <_vfiprintf_r+0x14e>
 800573e:	9105      	str	r1, [sp, #20]
 8005740:	e7c1      	b.n	80056c6 <_vfiprintf_r+0x14e>
 8005742:	fb05 2101 	mla	r1, r5, r1, r2
 8005746:	2301      	movs	r3, #1
 8005748:	4680      	mov	r8, r0
 800574a:	e7f0      	b.n	800572e <_vfiprintf_r+0x1b6>
 800574c:	ab03      	add	r3, sp, #12
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	4622      	mov	r2, r4
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <_vfiprintf_r+0x228>)
 8005754:	a904      	add	r1, sp, #16
 8005756:	4630      	mov	r0, r6
 8005758:	f3af 8000 	nop.w
 800575c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005760:	4681      	mov	r9, r0
 8005762:	d1d5      	bne.n	8005710 <_vfiprintf_r+0x198>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	065b      	lsls	r3, r3, #25
 8005768:	f53f af7e 	bmi.w	8005668 <_vfiprintf_r+0xf0>
 800576c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800576e:	e77d      	b.n	800566c <_vfiprintf_r+0xf4>
 8005770:	ab03      	add	r3, sp, #12
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	4622      	mov	r2, r4
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <_vfiprintf_r+0x228>)
 8005778:	a904      	add	r1, sp, #16
 800577a:	4630      	mov	r0, r6
 800577c:	f000 f888 	bl	8005890 <_printf_i>
 8005780:	e7ec      	b.n	800575c <_vfiprintf_r+0x1e4>
 8005782:	bf00      	nop
 8005784:	08005e54 	.word	0x08005e54
 8005788:	08005e98 	.word	0x08005e98
 800578c:	08005e74 	.word	0x08005e74
 8005790:	08005e34 	.word	0x08005e34
 8005794:	08005e9e 	.word	0x08005e9e
 8005798:	08005ea2 	.word	0x08005ea2
 800579c:	00000000 	.word	0x00000000
 80057a0:	08005553 	.word	0x08005553

080057a4 <_printf_common>:
 80057a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	4691      	mov	r9, r2
 80057aa:	461f      	mov	r7, r3
 80057ac:	688a      	ldr	r2, [r1, #8]
 80057ae:	690b      	ldr	r3, [r1, #16]
 80057b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	bfb8      	it	lt
 80057b8:	4613      	movlt	r3, r2
 80057ba:	f8c9 3000 	str.w	r3, [r9]
 80057be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057c2:	4606      	mov	r6, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	b112      	cbz	r2, 80057ce <_printf_common+0x2a>
 80057c8:	3301      	adds	r3, #1
 80057ca:	f8c9 3000 	str.w	r3, [r9]
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	0699      	lsls	r1, r3, #26
 80057d2:	bf42      	ittt	mi
 80057d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057d8:	3302      	addmi	r3, #2
 80057da:	f8c9 3000 	strmi.w	r3, [r9]
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	f015 0506 	ands.w	r5, r5, #6
 80057e4:	d107      	bne.n	80057f6 <_printf_common+0x52>
 80057e6:	f104 0a19 	add.w	sl, r4, #25
 80057ea:	68e3      	ldr	r3, [r4, #12]
 80057ec:	f8d9 2000 	ldr.w	r2, [r9]
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	42ab      	cmp	r3, r5
 80057f4:	dc28      	bgt.n	8005848 <_printf_common+0xa4>
 80057f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	3300      	adds	r3, #0
 80057fe:	bf18      	it	ne
 8005800:	2301      	movne	r3, #1
 8005802:	0692      	lsls	r2, r2, #26
 8005804:	d42d      	bmi.n	8005862 <_printf_common+0xbe>
 8005806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800580a:	4639      	mov	r1, r7
 800580c:	4630      	mov	r0, r6
 800580e:	47c0      	blx	r8
 8005810:	3001      	adds	r0, #1
 8005812:	d020      	beq.n	8005856 <_printf_common+0xb2>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	68e5      	ldr	r5, [r4, #12]
 8005818:	f8d9 2000 	ldr.w	r2, [r9]
 800581c:	f003 0306 	and.w	r3, r3, #6
 8005820:	2b04      	cmp	r3, #4
 8005822:	bf08      	it	eq
 8005824:	1aad      	subeq	r5, r5, r2
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	bf0c      	ite	eq
 800582c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005830:	2500      	movne	r5, #0
 8005832:	4293      	cmp	r3, r2
 8005834:	bfc4      	itt	gt
 8005836:	1a9b      	subgt	r3, r3, r2
 8005838:	18ed      	addgt	r5, r5, r3
 800583a:	f04f 0900 	mov.w	r9, #0
 800583e:	341a      	adds	r4, #26
 8005840:	454d      	cmp	r5, r9
 8005842:	d11a      	bne.n	800587a <_printf_common+0xd6>
 8005844:	2000      	movs	r0, #0
 8005846:	e008      	b.n	800585a <_printf_common+0xb6>
 8005848:	2301      	movs	r3, #1
 800584a:	4652      	mov	r2, sl
 800584c:	4639      	mov	r1, r7
 800584e:	4630      	mov	r0, r6
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d103      	bne.n	800585e <_printf_common+0xba>
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585e:	3501      	adds	r5, #1
 8005860:	e7c3      	b.n	80057ea <_printf_common+0x46>
 8005862:	18e1      	adds	r1, r4, r3
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	2030      	movs	r0, #48	; 0x30
 8005868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800586c:	4422      	add	r2, r4
 800586e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005876:	3302      	adds	r3, #2
 8005878:	e7c5      	b.n	8005806 <_printf_common+0x62>
 800587a:	2301      	movs	r3, #1
 800587c:	4622      	mov	r2, r4
 800587e:	4639      	mov	r1, r7
 8005880:	4630      	mov	r0, r6
 8005882:	47c0      	blx	r8
 8005884:	3001      	adds	r0, #1
 8005886:	d0e6      	beq.n	8005856 <_printf_common+0xb2>
 8005888:	f109 0901 	add.w	r9, r9, #1
 800588c:	e7d8      	b.n	8005840 <_printf_common+0x9c>
	...

08005890 <_printf_i>:
 8005890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005898:	460c      	mov	r4, r1
 800589a:	7e09      	ldrb	r1, [r1, #24]
 800589c:	b085      	sub	sp, #20
 800589e:	296e      	cmp	r1, #110	; 0x6e
 80058a0:	4617      	mov	r7, r2
 80058a2:	4606      	mov	r6, r0
 80058a4:	4698      	mov	r8, r3
 80058a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058a8:	f000 80b3 	beq.w	8005a12 <_printf_i+0x182>
 80058ac:	d822      	bhi.n	80058f4 <_printf_i+0x64>
 80058ae:	2963      	cmp	r1, #99	; 0x63
 80058b0:	d036      	beq.n	8005920 <_printf_i+0x90>
 80058b2:	d80a      	bhi.n	80058ca <_printf_i+0x3a>
 80058b4:	2900      	cmp	r1, #0
 80058b6:	f000 80b9 	beq.w	8005a2c <_printf_i+0x19c>
 80058ba:	2958      	cmp	r1, #88	; 0x58
 80058bc:	f000 8083 	beq.w	80059c6 <_printf_i+0x136>
 80058c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058c8:	e032      	b.n	8005930 <_printf_i+0xa0>
 80058ca:	2964      	cmp	r1, #100	; 0x64
 80058cc:	d001      	beq.n	80058d2 <_printf_i+0x42>
 80058ce:	2969      	cmp	r1, #105	; 0x69
 80058d0:	d1f6      	bne.n	80058c0 <_printf_i+0x30>
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	6813      	ldr	r3, [r2, #0]
 80058d6:	0605      	lsls	r5, r0, #24
 80058d8:	f103 0104 	add.w	r1, r3, #4
 80058dc:	d52a      	bpl.n	8005934 <_printf_i+0xa4>
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da03      	bge.n	80058ee <_printf_i+0x5e>
 80058e6:	222d      	movs	r2, #45	; 0x2d
 80058e8:	425b      	negs	r3, r3
 80058ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058ee:	486f      	ldr	r0, [pc, #444]	; (8005aac <_printf_i+0x21c>)
 80058f0:	220a      	movs	r2, #10
 80058f2:	e039      	b.n	8005968 <_printf_i+0xd8>
 80058f4:	2973      	cmp	r1, #115	; 0x73
 80058f6:	f000 809d 	beq.w	8005a34 <_printf_i+0x1a4>
 80058fa:	d808      	bhi.n	800590e <_printf_i+0x7e>
 80058fc:	296f      	cmp	r1, #111	; 0x6f
 80058fe:	d020      	beq.n	8005942 <_printf_i+0xb2>
 8005900:	2970      	cmp	r1, #112	; 0x70
 8005902:	d1dd      	bne.n	80058c0 <_printf_i+0x30>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f043 0320 	orr.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	e003      	b.n	8005916 <_printf_i+0x86>
 800590e:	2975      	cmp	r1, #117	; 0x75
 8005910:	d017      	beq.n	8005942 <_printf_i+0xb2>
 8005912:	2978      	cmp	r1, #120	; 0x78
 8005914:	d1d4      	bne.n	80058c0 <_printf_i+0x30>
 8005916:	2378      	movs	r3, #120	; 0x78
 8005918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800591c:	4864      	ldr	r0, [pc, #400]	; (8005ab0 <_printf_i+0x220>)
 800591e:	e055      	b.n	80059cc <_printf_i+0x13c>
 8005920:	6813      	ldr	r3, [r2, #0]
 8005922:	1d19      	adds	r1, r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6011      	str	r1, [r2, #0]
 8005928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800592c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005930:	2301      	movs	r3, #1
 8005932:	e08c      	b.n	8005a4e <_printf_i+0x1be>
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6011      	str	r1, [r2, #0]
 8005938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800593c:	bf18      	it	ne
 800593e:	b21b      	sxthne	r3, r3
 8005940:	e7cf      	b.n	80058e2 <_printf_i+0x52>
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	6825      	ldr	r5, [r4, #0]
 8005946:	1d18      	adds	r0, r3, #4
 8005948:	6010      	str	r0, [r2, #0]
 800594a:	0628      	lsls	r0, r5, #24
 800594c:	d501      	bpl.n	8005952 <_printf_i+0xc2>
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	e002      	b.n	8005958 <_printf_i+0xc8>
 8005952:	0668      	lsls	r0, r5, #25
 8005954:	d5fb      	bpl.n	800594e <_printf_i+0xbe>
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	4854      	ldr	r0, [pc, #336]	; (8005aac <_printf_i+0x21c>)
 800595a:	296f      	cmp	r1, #111	; 0x6f
 800595c:	bf14      	ite	ne
 800595e:	220a      	movne	r2, #10
 8005960:	2208      	moveq	r2, #8
 8005962:	2100      	movs	r1, #0
 8005964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005968:	6865      	ldr	r5, [r4, #4]
 800596a:	60a5      	str	r5, [r4, #8]
 800596c:	2d00      	cmp	r5, #0
 800596e:	f2c0 8095 	blt.w	8005a9c <_printf_i+0x20c>
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	f021 0104 	bic.w	r1, r1, #4
 8005978:	6021      	str	r1, [r4, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d13d      	bne.n	80059fa <_printf_i+0x16a>
 800597e:	2d00      	cmp	r5, #0
 8005980:	f040 808e 	bne.w	8005aa0 <_printf_i+0x210>
 8005984:	4665      	mov	r5, ip
 8005986:	2a08      	cmp	r2, #8
 8005988:	d10b      	bne.n	80059a2 <_printf_i+0x112>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	07db      	lsls	r3, r3, #31
 800598e:	d508      	bpl.n	80059a2 <_printf_i+0x112>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	bfde      	ittt	le
 8005998:	2330      	movle	r3, #48	; 0x30
 800599a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800599e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059a2:	ebac 0305 	sub.w	r3, ip, r5
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f8cd 8000 	str.w	r8, [sp]
 80059ac:	463b      	mov	r3, r7
 80059ae:	aa03      	add	r2, sp, #12
 80059b0:	4621      	mov	r1, r4
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff fef6 	bl	80057a4 <_printf_common>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d14d      	bne.n	8005a58 <_printf_i+0x1c8>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	b005      	add	sp, #20
 80059c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059c6:	4839      	ldr	r0, [pc, #228]	; (8005aac <_printf_i+0x21c>)
 80059c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	1d1d      	adds	r5, r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6015      	str	r5, [r2, #0]
 80059d6:	060a      	lsls	r2, r1, #24
 80059d8:	d50b      	bpl.n	80059f2 <_printf_i+0x162>
 80059da:	07ca      	lsls	r2, r1, #31
 80059dc:	bf44      	itt	mi
 80059de:	f041 0120 	orrmi.w	r1, r1, #32
 80059e2:	6021      	strmi	r1, [r4, #0]
 80059e4:	b91b      	cbnz	r3, 80059ee <_printf_i+0x15e>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	f022 0220 	bic.w	r2, r2, #32
 80059ec:	6022      	str	r2, [r4, #0]
 80059ee:	2210      	movs	r2, #16
 80059f0:	e7b7      	b.n	8005962 <_printf_i+0xd2>
 80059f2:	064d      	lsls	r5, r1, #25
 80059f4:	bf48      	it	mi
 80059f6:	b29b      	uxthmi	r3, r3
 80059f8:	e7ef      	b.n	80059da <_printf_i+0x14a>
 80059fa:	4665      	mov	r5, ip
 80059fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a00:	fb02 3311 	mls	r3, r2, r1, r3
 8005a04:	5cc3      	ldrb	r3, [r0, r3]
 8005a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	d1f5      	bne.n	80059fc <_printf_i+0x16c>
 8005a10:	e7b9      	b.n	8005986 <_printf_i+0xf6>
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	6825      	ldr	r5, [r4, #0]
 8005a16:	6961      	ldr	r1, [r4, #20]
 8005a18:	1d18      	adds	r0, r3, #4
 8005a1a:	6010      	str	r0, [r2, #0]
 8005a1c:	0628      	lsls	r0, r5, #24
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	d501      	bpl.n	8005a26 <_printf_i+0x196>
 8005a22:	6019      	str	r1, [r3, #0]
 8005a24:	e002      	b.n	8005a2c <_printf_i+0x19c>
 8005a26:	066a      	lsls	r2, r5, #25
 8005a28:	d5fb      	bpl.n	8005a22 <_printf_i+0x192>
 8005a2a:	8019      	strh	r1, [r3, #0]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	4665      	mov	r5, ip
 8005a32:	e7b9      	b.n	80059a8 <_printf_i+0x118>
 8005a34:	6813      	ldr	r3, [r2, #0]
 8005a36:	1d19      	adds	r1, r3, #4
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	681d      	ldr	r5, [r3, #0]
 8005a3c:	6862      	ldr	r2, [r4, #4]
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4628      	mov	r0, r5
 8005a42:	f7fa fbcd 	bl	80001e0 <memchr>
 8005a46:	b108      	cbz	r0, 8005a4c <_printf_i+0x1bc>
 8005a48:	1b40      	subs	r0, r0, r5
 8005a4a:	6060      	str	r0, [r4, #4]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	2300      	movs	r3, #0
 8005a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a56:	e7a7      	b.n	80059a8 <_printf_i+0x118>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	4630      	mov	r0, r6
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d0aa      	beq.n	80059bc <_printf_i+0x12c>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	079b      	lsls	r3, r3, #30
 8005a6a:	d413      	bmi.n	8005a94 <_printf_i+0x204>
 8005a6c:	68e0      	ldr	r0, [r4, #12]
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	4298      	cmp	r0, r3
 8005a72:	bfb8      	it	lt
 8005a74:	4618      	movlt	r0, r3
 8005a76:	e7a3      	b.n	80059c0 <_printf_i+0x130>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	464a      	mov	r2, r9
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4630      	mov	r0, r6
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d09a      	beq.n	80059bc <_printf_i+0x12c>
 8005a86:	3501      	adds	r5, #1
 8005a88:	68e3      	ldr	r3, [r4, #12]
 8005a8a:	9a03      	ldr	r2, [sp, #12]
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	42ab      	cmp	r3, r5
 8005a90:	dcf2      	bgt.n	8005a78 <_printf_i+0x1e8>
 8005a92:	e7eb      	b.n	8005a6c <_printf_i+0x1dc>
 8005a94:	2500      	movs	r5, #0
 8005a96:	f104 0919 	add.w	r9, r4, #25
 8005a9a:	e7f5      	b.n	8005a88 <_printf_i+0x1f8>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ac      	bne.n	80059fa <_printf_i+0x16a>
 8005aa0:	7803      	ldrb	r3, [r0, #0]
 8005aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aaa:	e76c      	b.n	8005986 <_printf_i+0xf6>
 8005aac:	08005ea9 	.word	0x08005ea9
 8005ab0:	08005eba 	.word	0x08005eba

08005ab4 <_read_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4c07      	ldr	r4, [pc, #28]	; (8005ad4 <_read_r+0x20>)
 8005ab8:	4605      	mov	r5, r0
 8005aba:	4608      	mov	r0, r1
 8005abc:	4611      	mov	r1, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	6022      	str	r2, [r4, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f7fa ffb0 	bl	8000a28 <_read>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_read_r+0x1e>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_read_r+0x1e>
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	20004b30 	.word	0x20004b30

08005ad8 <__swbuf_r>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	460e      	mov	r6, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	4605      	mov	r5, r0
 8005ae0:	b118      	cbz	r0, 8005aea <__swbuf_r+0x12>
 8005ae2:	6983      	ldr	r3, [r0, #24]
 8005ae4:	b90b      	cbnz	r3, 8005aea <__swbuf_r+0x12>
 8005ae6:	f7ff f9f7 	bl	8004ed8 <__sinit>
 8005aea:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <__swbuf_r+0x98>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d12a      	bne.n	8005b46 <__swbuf_r+0x6e>
 8005af0:	686c      	ldr	r4, [r5, #4]
 8005af2:	69a3      	ldr	r3, [r4, #24]
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	071a      	lsls	r2, r3, #28
 8005afa:	d52e      	bpl.n	8005b5a <__swbuf_r+0x82>
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	b363      	cbz	r3, 8005b5a <__swbuf_r+0x82>
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	1ac0      	subs	r0, r0, r3
 8005b06:	6963      	ldr	r3, [r4, #20]
 8005b08:	b2f6      	uxtb	r6, r6
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	4637      	mov	r7, r6
 8005b0e:	dc04      	bgt.n	8005b1a <__swbuf_r+0x42>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7ff fc7a 	bl	800540c <_fflush_r>
 8005b18:	bb28      	cbnz	r0, 8005b66 <__swbuf_r+0x8e>
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	6022      	str	r2, [r4, #0]
 8005b26:	701e      	strb	r6, [r3, #0]
 8005b28:	6963      	ldr	r3, [r4, #20]
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	4283      	cmp	r3, r0
 8005b2e:	d004      	beq.n	8005b3a <__swbuf_r+0x62>
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	07db      	lsls	r3, r3, #31
 8005b34:	d519      	bpl.n	8005b6a <__swbuf_r+0x92>
 8005b36:	2e0a      	cmp	r6, #10
 8005b38:	d117      	bne.n	8005b6a <__swbuf_r+0x92>
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f7ff fc65 	bl	800540c <_fflush_r>
 8005b42:	b190      	cbz	r0, 8005b6a <__swbuf_r+0x92>
 8005b44:	e00f      	b.n	8005b66 <__swbuf_r+0x8e>
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <__swbuf_r+0x9c>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d101      	bne.n	8005b50 <__swbuf_r+0x78>
 8005b4c:	68ac      	ldr	r4, [r5, #8]
 8005b4e:	e7d0      	b.n	8005af2 <__swbuf_r+0x1a>
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <__swbuf_r+0xa0>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	bf08      	it	eq
 8005b56:	68ec      	ldreq	r4, [r5, #12]
 8005b58:	e7cb      	b.n	8005af2 <__swbuf_r+0x1a>
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 f80d 	bl	8005b7c <__swsetup_r>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d0cc      	beq.n	8005b00 <__swbuf_r+0x28>
 8005b66:	f04f 37ff 	mov.w	r7, #4294967295
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08005e54 	.word	0x08005e54
 8005b74:	08005e74 	.word	0x08005e74
 8005b78:	08005e34 	.word	0x08005e34

08005b7c <__swsetup_r>:
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <__swsetup_r+0xcc>)
 8005b7e:	b570      	push	{r4, r5, r6, lr}
 8005b80:	681d      	ldr	r5, [r3, #0]
 8005b82:	4606      	mov	r6, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	b125      	cbz	r5, 8005b92 <__swsetup_r+0x16>
 8005b88:	69ab      	ldr	r3, [r5, #24]
 8005b8a:	b913      	cbnz	r3, 8005b92 <__swsetup_r+0x16>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f7ff f9a3 	bl	8004ed8 <__sinit>
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <__swsetup_r+0xd0>)
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d10f      	bne.n	8005bb8 <__swsetup_r+0x3c>
 8005b98:	686c      	ldr	r4, [r5, #4]
 8005b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	0715      	lsls	r5, r2, #28
 8005ba2:	d42c      	bmi.n	8005bfe <__swsetup_r+0x82>
 8005ba4:	06d0      	lsls	r0, r2, #27
 8005ba6:	d411      	bmi.n	8005bcc <__swsetup_r+0x50>
 8005ba8:	2209      	movs	r2, #9
 8005baa:	6032      	str	r2, [r6, #0]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	e03e      	b.n	8005c36 <__swsetup_r+0xba>
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <__swsetup_r+0xd4>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d101      	bne.n	8005bc2 <__swsetup_r+0x46>
 8005bbe:	68ac      	ldr	r4, [r5, #8]
 8005bc0:	e7eb      	b.n	8005b9a <__swsetup_r+0x1e>
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <__swsetup_r+0xd8>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	bf08      	it	eq
 8005bc8:	68ec      	ldreq	r4, [r5, #12]
 8005bca:	e7e6      	b.n	8005b9a <__swsetup_r+0x1e>
 8005bcc:	0751      	lsls	r1, r2, #29
 8005bce:	d512      	bpl.n	8005bf6 <__swsetup_r+0x7a>
 8005bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd2:	b141      	cbz	r1, 8005be6 <__swsetup_r+0x6a>
 8005bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <__swsetup_r+0x66>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff fc53 	bl	8005488 <_free_r>
 8005be2:	2300      	movs	r3, #0
 8005be4:	6363      	str	r3, [r4, #52]	; 0x34
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6063      	str	r3, [r4, #4]
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f043 0308 	orr.w	r3, r3, #8
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	b94b      	cbnz	r3, 8005c16 <__swsetup_r+0x9a>
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0c:	d003      	beq.n	8005c16 <__swsetup_r+0x9a>
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f845 	bl	8005ca0 <__smakebuf_r>
 8005c16:	89a2      	ldrh	r2, [r4, #12]
 8005c18:	f012 0301 	ands.w	r3, r2, #1
 8005c1c:	d00c      	beq.n	8005c38 <__swsetup_r+0xbc>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60a3      	str	r3, [r4, #8]
 8005c22:	6963      	ldr	r3, [r4, #20]
 8005c24:	425b      	negs	r3, r3
 8005c26:	61a3      	str	r3, [r4, #24]
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	b953      	cbnz	r3, 8005c42 <__swsetup_r+0xc6>
 8005c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c34:	d1ba      	bne.n	8005bac <__swsetup_r+0x30>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	0792      	lsls	r2, r2, #30
 8005c3a:	bf58      	it	pl
 8005c3c:	6963      	ldrpl	r3, [r4, #20]
 8005c3e:	60a3      	str	r3, [r4, #8]
 8005c40:	e7f2      	b.n	8005c28 <__swsetup_r+0xac>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e7f7      	b.n	8005c36 <__swsetup_r+0xba>
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010
 8005c4c:	08005e54 	.word	0x08005e54
 8005c50:	08005e74 	.word	0x08005e74
 8005c54:	08005e34 	.word	0x08005e34

08005c58 <__swhatbuf_r>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	460e      	mov	r6, r1
 8005c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c60:	2900      	cmp	r1, #0
 8005c62:	b096      	sub	sp, #88	; 0x58
 8005c64:	4614      	mov	r4, r2
 8005c66:	461d      	mov	r5, r3
 8005c68:	da07      	bge.n	8005c7a <__swhatbuf_r+0x22>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	89b3      	ldrh	r3, [r6, #12]
 8005c70:	061a      	lsls	r2, r3, #24
 8005c72:	d410      	bmi.n	8005c96 <__swhatbuf_r+0x3e>
 8005c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c78:	e00e      	b.n	8005c98 <__swhatbuf_r+0x40>
 8005c7a:	466a      	mov	r2, sp
 8005c7c:	f000 f850 	bl	8005d20 <_fstat_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dbf2      	blt.n	8005c6a <__swhatbuf_r+0x12>
 8005c84:	9a01      	ldr	r2, [sp, #4]
 8005c86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c8e:	425a      	negs	r2, r3
 8005c90:	415a      	adcs	r2, r3
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	e7ee      	b.n	8005c74 <__swhatbuf_r+0x1c>
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	2000      	movs	r0, #0
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	b016      	add	sp, #88	; 0x58
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}

08005ca0 <__smakebuf_r>:
 8005ca0:	898b      	ldrh	r3, [r1, #12]
 8005ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ca4:	079d      	lsls	r5, r3, #30
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	d507      	bpl.n	8005cbc <__smakebuf_r+0x1c>
 8005cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	6163      	str	r3, [r4, #20]
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	ab01      	add	r3, sp, #4
 8005cbe:	466a      	mov	r2, sp
 8005cc0:	f7ff ffca 	bl	8005c58 <__swhatbuf_r>
 8005cc4:	9900      	ldr	r1, [sp, #0]
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff f9c7 	bl	800505c <_malloc_r>
 8005cce:	b948      	cbnz	r0, 8005ce4 <__smakebuf_r+0x44>
 8005cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd4:	059a      	lsls	r2, r3, #22
 8005cd6:	d4ef      	bmi.n	8005cb8 <__smakebuf_r+0x18>
 8005cd8:	f023 0303 	bic.w	r3, r3, #3
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	81a3      	strh	r3, [r4, #12]
 8005ce2:	e7e3      	b.n	8005cac <__smakebuf_r+0xc>
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <__smakebuf_r+0x7c>)
 8005ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	6020      	str	r0, [r4, #0]
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	9b00      	ldr	r3, [sp, #0]
 8005cf4:	6163      	str	r3, [r4, #20]
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	6120      	str	r0, [r4, #16]
 8005cfa:	b15b      	cbz	r3, 8005d14 <__smakebuf_r+0x74>
 8005cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f81f 	bl	8005d44 <_isatty_r>
 8005d06:	b128      	cbz	r0, 8005d14 <__smakebuf_r+0x74>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	431d      	orrs	r5, r3
 8005d18:	81a5      	strh	r5, [r4, #12]
 8005d1a:	e7cd      	b.n	8005cb8 <__smakebuf_r+0x18>
 8005d1c:	08004ea1 	.word	0x08004ea1

08005d20 <_fstat_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4c07      	ldr	r4, [pc, #28]	; (8005d40 <_fstat_r+0x20>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	4605      	mov	r5, r0
 8005d28:	4608      	mov	r0, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	f7fa fec0 	bl	8000ab2 <_fstat>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	d102      	bne.n	8005d3c <_fstat_r+0x1c>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	b103      	cbz	r3, 8005d3c <_fstat_r+0x1c>
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
 8005d3e:	bf00      	nop
 8005d40:	20004b30 	.word	0x20004b30

08005d44 <_isatty_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4c06      	ldr	r4, [pc, #24]	; (8005d60 <_isatty_r+0x1c>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	f7fa febf 	bl	8000ad2 <_isatty>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_isatty_r+0x1a>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_isatty_r+0x1a>
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	20004b30 	.word	0x20004b30

08005d64 <_init>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr

08005d70 <_fini>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr
