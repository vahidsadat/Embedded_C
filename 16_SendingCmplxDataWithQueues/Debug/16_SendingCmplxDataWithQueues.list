
16_SendingCmplxDataWithQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac4  20000074  08005f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b38  08005f5c  00024b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019452  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003151  00000000  00000000  000394f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003c648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003d998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004659  00000000  00000000  0003eb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1fb  00000000  00000000  000431e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096a10  00000000  00000000  000523e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8df4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  000e8e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d74 	.word	0x08005d74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005d74 	.word	0x08005d74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
TaskHandle_t hum_task_handle,press_task_handle, receiver_handle;
QueueHandle_t xQueue;
void ReceiverTask(void *pvParameters);
void SenderTask(void *pvParameters);
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  HAL_Init();
 8000586:	f000 fb35 	bl	8000bf4 <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f8ab 	bl	80006e4 <SystemClock_Config>
  MX_GPIO_Init();
 800058e:	f000 f933 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f907 	bl	80007a4 <MX_USART2_UART_Init>


  xQueue = xQueueCreate(3,sizeof(Data_t));
 8000596:	2200      	movs	r2, #0
 8000598:	2102      	movs	r1, #2
 800059a:	2003      	movs	r0, #3
 800059c:	f002 f9e9 	bl	8002972 <xQueueGenericCreate>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <main+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  //Create a receiver task with a priority of 1
  xTaskCreate(ReceiverTask,"Receiver Task",100,NULL,1,&receiver_handle);
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <main+0x6c>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	490f      	ldr	r1, [pc, #60]	; (80005f0 <main+0x70>)
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x74>)
 80005b6:	f002 fe6f 	bl	8003298 <xTaskCreate>
  //Create task to send humidity data with a priority of 2
  xTaskCreate(SenderTask,"Humidity Sender Task",100,(void *)&(xStructsToSend[0]),2,&hum_task_handle);
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0x78>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <main+0x7c>)
 80005c4:	2264      	movs	r2, #100	; 0x64
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <main+0x80>)
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0x84>)
 80005ca:	f002 fe65 	bl	8003298 <xTaskCreate>
  //Create task to send pressure data with a priority of 2
  xTaskCreate(SenderTask,"Pressure Sender Task",100,(void *)&(xStructsToSend[1]),2,&press_task_handle);
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <main+0x88>)
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <main+0x8c>)
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <main+0x90>)
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x84>)
 80005de:	f002 fe5b 	bl	8003298 <xTaskCreate>

  vTaskStartScheduler();
 80005e2:	f002 ffb5 	bl	8003550 <vTaskStartScheduler>
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x66>
 80005e8:	20004a68 	.word	0x20004a68
 80005ec:	20004a64 	.word	0x20004a64
 80005f0:	08005d8c 	.word	0x08005d8c
 80005f4:	08000651 	.word	0x08000651
 80005f8:	20004a6c 	.word	0x20004a6c
 80005fc:	08005e24 	.word	0x08005e24
 8000600:	08005d9c 	.word	0x08005d9c
 8000604:	08000615 	.word	0x08000615
 8000608:	20004a60 	.word	0x20004a60
 800060c:	08005e26 	.word	0x08005e26
 8000610:	08005db4 	.word	0x08005db4

08000614 <SenderTask>:
  {
  }
}

void SenderTask(void *pvParameters)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	BaseType_t qStatus;

	//Enter the blocked state for 200ms for space to become available in the queue each
	//time the queue is full

	const TickType_t wait_time = pdMS_TO_TICKS(200);
 800061c:	23c8      	movs	r3, #200	; 0xc8
 800061e:	613b      	str	r3, [r7, #16]

	while(1)
	{
		qStatus = xQueueSend(xQueue,pvParameters,wait_time);
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <SenderTask+0x34>)
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	f002 fa05 	bl	8002a38 <xQueueGenericSend>
 800062e:	60f8      	str	r0, [r7, #12]
		if(qStatus != pdPASS)
		{
			//Do Sth
		}
		for(int i = 0;i<100000;i++){}
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e002      	b.n	800063c <SenderTask+0x28>
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4a03      	ldr	r2, [pc, #12]	; (800064c <SenderTask+0x38>)
 8000640:	4293      	cmp	r3, r2
 8000642:	ddf8      	ble.n	8000636 <SenderTask+0x22>
		qStatus = xQueueSend(xQueue,pvParameters,wait_time);
 8000644:	e7ec      	b.n	8000620 <SenderTask+0xc>
 8000646:	bf00      	nop
 8000648:	20004a68 	.word	0x20004a68
 800064c:	0001869f 	.word	0x0001869f

08000650 <ReceiverTask>:
	}
}
void ReceiverTask(void *pvParameters)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	BaseType_t qStatus;

	while(1)
	{
		qStatus = xQueueReceive(xQueue,&xReceivedStructure,0);
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <ReceiverTask+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fb76 	bl	8002d54 <xQueueReceive>
 8000668:	60f8      	str	r0, [r7, #12]
		if(qStatus == pdPASS)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1f3      	bne.n	8000658 <ReceiverTask+0x8>
		{
			if(xReceivedStructure.sDataSource == humidity_sensor)
 8000670:	7a7b      	ldrb	r3, [r7, #9]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d105      	bne.n	8000682 <ReceiverTask+0x32>
			{
				printf("Humidity sensor value = %d \n\r",xReceivedStructure.ucValue);
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <ReceiverTask+0x44>)
 800067c:	f004 fd50 	bl	8005120 <iprintf>
 8000680:	e7ea      	b.n	8000658 <ReceiverTask+0x8>
			}
			else
			{
				printf("Pressure sensor value = %d \n\r",xReceivedStructure.ucValue);
 8000682:	7a3b      	ldrb	r3, [r7, #8]
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <ReceiverTask+0x48>)
 8000688:	f004 fd4a 	bl	8005120 <iprintf>
		qStatus = xQueueReceive(xQueue,&xReceivedStructure,0);
 800068c:	e7e4      	b.n	8000658 <ReceiverTask+0x8>
 800068e:	bf00      	nop
 8000690:	20004a68 	.word	0x20004a68
 8000694:	08005dcc 	.word	0x08005dcc
 8000698:	08005dec 	.word	0x08005dec

0800069c <uart2_write>:
			}
		}
	}
}
int uart2_write(int ch)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while (!(USART2->SR &0x0080)){}
 80006a4:	bf00      	nop
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <uart2_write+0x2c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <uart2_write+0x2c>)
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	6053      	str	r3, [r2, #4]

	return ch;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40004400 	.word	0x40004400

080006cc <__io_putchar>:

int __io_putchar(int ch)
	{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffe1 	bl	800069c <uart2_write>
	return ch;
 80006da:	687b      	ldr	r3, [r7, #4]
	}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fcb1 	bl	800505a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xb8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemClock_Config+0xb8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemClock_Config+0xb8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemClock_Config+0xbc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <SystemClock_Config+0xbc>)
 8000732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemClock_Config+0xbc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fcf1 	bl	8001140 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000764:	f000 f874 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff4c 	bl	8001620 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078e:	f000 f85f 	bl	8000850 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f001 fb3c 	bl	8001e58 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f833 	bl	8000850 <Error_Handler>
  }

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20004a70 	.word	0x20004a70
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_GPIO_Init+0x30>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <MX_GPIO_Init+0x30>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_GPIO_Init+0x30>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083e:	f000 f9fb 	bl	8000c38 <HAL_IncTick>
  }
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010000 	.word	0x40010000

08000850 <Error_Handler>:

void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <HAL_MspInit+0x54>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_MspInit+0x54>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fa9f 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_UART_MspInit+0x84>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d12b      	bne.n	8000932 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_UART_MspInit+0x88>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000912:	230c      	movs	r3, #12
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000922:	2307      	movs	r3, #7
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_UART_MspInit+0x8c>)
 800092e:	f000 fa85 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40004400 	.word	0x40004400
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2019      	movs	r0, #25
 800095e:	f000 fa43 	bl	8000de8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000962:	2019      	movs	r0, #25
 8000964:	f000 fa5c 	bl	8000e20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <HAL_InitTick+0xa0>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <HAL_InitTick+0xa0>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6453      	str	r3, [r2, #68]	; 0x44
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <HAL_InitTick+0xa0>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000984:	f107 0210 	add.w	r2, r7, #16
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f812 	bl	80019b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000994:	f000 fffc 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8000998:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_InitTick+0xa4>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	0c9b      	lsrs	r3, r3, #18
 80009a4:	3b01      	subs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_InitTick+0xa8>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <HAL_InitTick+0xac>)
 80009ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_InitTick+0xa8>)
 80009b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_InitTick+0xa8>)
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_InitTick+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_InitTick+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_InitTick+0xa8>)
 80009ca:	f001 f827 	bl	8001a1c <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d104      	bne.n	80009de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <HAL_InitTick+0xa8>)
 80009d6:	f001 f856 	bl	8001a86 <HAL_TIM_Base_Start_IT>
 80009da:	4603      	mov	r3, r0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	20004ab0 	.word	0x20004ab0
 80009f4:	40010000 	.word	0x40010000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a32:	f001 f84c 	bl	8001ace <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20004ab0 	.word	0x20004ab0

08000a40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e00a      	b.n	8000a68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a52:	f3af 8000 	nop.w
 8000a56:	4601      	mov	r1, r0
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf0      	blt.n	8000a52 <_read+0x12>
	}

return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e009      	b.n	8000aa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe19 	bl	80006cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf1      	blt.n	8000a8c <_write+0x12>
	}
	return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_close>:

int _close(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	605a      	str	r2, [r3, #4]
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_isatty>:

int _isatty(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return 1;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x16>
		heap_end = &end;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <_sbrk+0x50>)
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <_sbrk+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <_sbrk+0x50>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <_sbrk+0x50>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	466a      	mov	r2, sp
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d907      	bls.n	8000b56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b46:	f004 f989 	bl	8004e5c <__errno>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	e006      	b.n	8000b64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_sbrk+0x50>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_sbrk+0x50>)
 8000b60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000090 	.word	0x20000090
 8000b70:	20004b38 	.word	0x20004b38

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x28>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x28>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x28>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 fa15 	bl	8004ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcd5 	bl	8000580 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000bdc:	08005ee8 	.word	0x08005ee8
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000be8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000bec:	20004b38 	.word	0x20004b38

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8d8 	bl	8000dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fe90 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe1a 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20004af0 	.word	0x20004af0

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20004af0 	.word	0x20004af0

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff4c 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff61 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb1 	bl	8000d6c <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff80 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff54 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e159      	b.n	800110c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8148 	bne.w	8001106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d00b      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	2b11      	cmp	r3, #17
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0xfc>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a2 	beq.w	8001106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b56      	ldr	r3, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x2e4>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a55      	ldr	r2, [pc, #340]	; (8001120 <HAL_GPIO_Init+0x2e4>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b53      	ldr	r3, [pc, #332]	; (8001120 <HAL_GPIO_Init+0x2e4>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x202>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a47      	ldr	r2, [pc, #284]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x1fe>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a46      	ldr	r2, [pc, #280]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x1fa>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a45      	ldr	r2, [pc, #276]	; (8001134 <HAL_GPIO_Init+0x2f8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x1f6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <HAL_GPIO_Init+0x2fc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x1f2>
 800102a:	2304      	movs	r3, #4
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800102e:	2307      	movs	r3, #7
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4934      	ldr	r1, [pc, #208]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_GPIO_Init+0x300>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a2e      	ldr	r2, [pc, #184]	; (800113c <HAL_GPIO_Init+0x300>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <HAL_GPIO_Init+0x300>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_GPIO_Init+0x300>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_GPIO_Init+0x300>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_GPIO_Init+0x300>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_GPIO_Init+0x300>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_GPIO_Init+0x300>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f aea2 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	3724      	adds	r7, #36	; 0x24
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e25b      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00c      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	2b08      	cmp	r3, #8
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e236      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a90      	ldr	r2, [pc, #576]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a83      	ldr	r2, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a80      	ldr	r2, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fd32 	bl	8000c60 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fd2e 	bl	8000c60 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1fb      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fd1e 	bl	8000c60 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fd1a 	bl	8000c60 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1e7      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1bb      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4952      	ldr	r1, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fcd3 	bl	8000c60 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fccf 	bl	8000c60 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e19c      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4940      	ldr	r1, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcb2 	bl	8000c60 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fcae 	bl	8000c60 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e17b      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fc92 	bl	8000c60 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc8e 	bl	8000c60 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e15b      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fc7b 	bl	8000c60 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fc77 	bl	8000c60 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e144      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a0 	beq.w	80014da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d121      	bne.n	800141a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fc3d 	bl	8000c60 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e011      	b.n	800140e <HAL_RCC_OscConfig+0x2ce>
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	42470000 	.word	0x42470000
 80013f4:	42470e80 	.word	0x42470e80
 80013f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7ff fc30 	bl	8000c60 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0fd      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x4d4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x2f0>
 8001422:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x312>
 8001438:	4b77      	ldr	r3, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a76      	ldr	r2, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	4b74      	ldr	r3, [pc, #464]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a73      	ldr	r2, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001452:	4b71      	ldr	r3, [pc, #452]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fbf5 	bl	8000c60 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fbf1 	bl	8000c60 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0bc      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b61      	ldr	r3, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x33a>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbdf 	bl	8000c60 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fbdb 	bl	8000c60 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0a6      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b56      	ldr	r3, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b52      	ldr	r3, [pc, #328]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a51      	ldr	r2, [pc, #324]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8092 	beq.w	8001608 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d05c      	beq.n	80015aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d141      	bne.n	800157c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fbaf 	bl	8000c60 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fbab 	bl	8000c60 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e078      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	3b01      	subs	r3, #1
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	4933      	ldr	r1, [pc, #204]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154e:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_RCC_OscConfig+0x4dc>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb84 	bl	8000c60 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb80 	bl	8000c60 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e04d      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x41c>
 800157a:	e045      	b.n	8001608 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x4dc>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb6d 	bl	8000c60 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb69 	bl	8000c60 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e036      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x44a>
 80015a8:	e02e      	b.n	8001608 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e029      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11c      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d115      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000
 8001618:	40023800 	.word	0x40023800
 800161c:	42470060 	.word	0x42470060

08001620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0cc      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d90c      	bls.n	800165c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d044      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d119      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d003      	beq.n	80016de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e067      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4934      	ldr	r1, [pc, #208]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff faa6 	bl	8000c60 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff faa2 	bl	8000c60 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e04f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d20c      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4601      	mov	r1, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	fa21 f303 	lsr.w	r3, r1, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f8be 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	08005e28 	.word	0x08005e28
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_GetSysClockFreq+0x158>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d007      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x32>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d008      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x38>
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 808d 	bne.w	8001932 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_RCC_GetSysClockFreq+0x15c>)
 800181a:	60bb      	str	r3, [r7, #8]
       break;
 800181c:	e08c      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181e:	4b4b      	ldr	r3, [pc, #300]	; (800194c <HAL_RCC_GetSysClockFreq+0x160>)
 8001820:	60bb      	str	r3, [r7, #8]
      break;
 8001822:	e089      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_GetSysClockFreq+0x158>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182e:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_RCC_GetSysClockFreq+0x158>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d023      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_RCC_GetSysClockFreq+0x158>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	ea03 0501 	and.w	r5, r3, r1
 8001850:	ea04 0602 	and.w	r6, r4, r2
 8001854:	4a3d      	ldr	r2, [pc, #244]	; (800194c <HAL_RCC_GetSysClockFreq+0x160>)
 8001856:	fb02 f106 	mul.w	r1, r2, r6
 800185a:	2200      	movs	r2, #0
 800185c:	fb02 f205 	mul.w	r2, r2, r5
 8001860:	440a      	add	r2, r1
 8001862:	493a      	ldr	r1, [pc, #232]	; (800194c <HAL_RCC_GetSysClockFreq+0x160>)
 8001864:	fba5 0101 	umull	r0, r1, r5, r1
 8001868:	1853      	adds	r3, r2, r1
 800186a:	4619      	mov	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	461a      	mov	r2, r3
 8001874:	4623      	mov	r3, r4
 8001876:	f7fe fd03 	bl	8000280 <__aeabi_uldivmod>
 800187a:	4603      	mov	r3, r0
 800187c:	460c      	mov	r4, r1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e049      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_GetSysClockFreq+0x158>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	ea03 0501 	and.w	r5, r3, r1
 8001898:	ea04 0602 	and.w	r6, r4, r2
 800189c:	4629      	mov	r1, r5
 800189e:	4632      	mov	r2, r6
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	f04f 0400 	mov.w	r4, #0
 80018a8:	0154      	lsls	r4, r2, #5
 80018aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ae:	014b      	lsls	r3, r1, #5
 80018b0:	4619      	mov	r1, r3
 80018b2:	4622      	mov	r2, r4
 80018b4:	1b49      	subs	r1, r1, r5
 80018b6:	eb62 0206 	sbc.w	r2, r2, r6
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	0194      	lsls	r4, r2, #6
 80018c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018c8:	018b      	lsls	r3, r1, #6
 80018ca:	1a5b      	subs	r3, r3, r1
 80018cc:	eb64 0402 	sbc.w	r4, r4, r2
 80018d0:	f04f 0100 	mov.w	r1, #0
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	00e2      	lsls	r2, r4, #3
 80018da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018de:	00d9      	lsls	r1, r3, #3
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	195b      	adds	r3, r3, r5
 80018e6:	eb44 0406 	adc.w	r4, r4, r6
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	02a2      	lsls	r2, r4, #10
 80018f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018f8:	0299      	lsls	r1, r3, #10
 80018fa:	460b      	mov	r3, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	4621      	mov	r1, r4
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	461a      	mov	r2, r3
 800190a:	4623      	mov	r3, r4
 800190c:	f7fe fcb8 	bl	8000280 <__aeabi_uldivmod>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_GetSysClockFreq+0x158>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	3301      	adds	r3, #1
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	60bb      	str	r3, [r7, #8]
      break;
 8001930:	e002      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001934:	60bb      	str	r3, [r7, #8]
      break;
 8001936:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001938:	68bb      	ldr	r3, [r7, #8]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	00f42400 	.word	0x00f42400
 800194c:	017d7840 	.word	0x017d7840

08001950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_GetHCLKFreq+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff0 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001970:	4601      	mov	r1, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0a9b      	lsrs	r3, r3, #10
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	08005e38 	.word	0x08005e38

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff ffdc 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001998:	4601      	mov	r1, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0b5b      	lsrs	r3, r3, #13
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08005e38 	.word	0x08005e38

080019b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	220f      	movs	r2, #15
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_RCC_GetClockConfig+0x60>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 020f 	and.w	r2, r3, #15
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e01d      	b.n	8001a6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f815 	bl	8001a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f000 f968 	bl	8001d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d007      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d122      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d11b      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0202 	mvn.w	r2, #2
 8001afa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8ee 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001b16:	e005      	b.n	8001b24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f8e0 	bl	8001cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8f1 	bl	8001d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d122      	bne.n	8001b7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d11b      	bne.n	8001b7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0204 	mvn.w	r2, #4
 8001b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8c4 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001b6a:	e005      	b.n	8001b78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8b6 	bl	8001cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8c7 	bl	8001d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d122      	bne.n	8001bd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11b      	bne.n	8001bd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f06f 0208 	mvn.w	r2, #8
 8001ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f89a 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001bbe:	e005      	b.n	8001bcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f88c 	bl	8001cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f89d 	bl	8001d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d122      	bne.n	8001c26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d11b      	bne.n	8001c26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f06f 0210 	mvn.w	r2, #16
 8001bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f870 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001c12:	e005      	b.n	8001c20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f862 	bl	8001cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f873 	bl	8001d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10e      	bne.n	8001c52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f06f 0201 	mvn.w	r2, #1
 8001c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7fe fded 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d10e      	bne.n	8001c7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b80      	cmp	r3, #128	; 0x80
 8001c6c:	d107      	bne.n	8001c7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8e3 	bl	8001e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	2b40      	cmp	r3, #64	; 0x40
 8001c8a:	d10e      	bne.n	8001caa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b40      	cmp	r3, #64	; 0x40
 8001c98:	d107      	bne.n	8001caa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f838 	bl	8001d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d107      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0220 	mvn.w	r2, #32
 8001cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8ad 	bl	8001e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <TIM_Base_SetConfig+0xe4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00f      	beq.n	8001d68 <TIM_Base_SetConfig+0x38>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4e:	d00b      	beq.n	8001d68 <TIM_Base_SetConfig+0x38>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <TIM_Base_SetConfig+0xe8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d007      	beq.n	8001d68 <TIM_Base_SetConfig+0x38>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a30      	ldr	r2, [pc, #192]	; (8001e1c <TIM_Base_SetConfig+0xec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d003      	beq.n	8001d68 <TIM_Base_SetConfig+0x38>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <TIM_Base_SetConfig+0xf0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d108      	bne.n	8001d7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <TIM_Base_SetConfig+0xe4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01b      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d017      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <TIM_Base_SetConfig+0xe8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <TIM_Base_SetConfig+0xec>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00f      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <TIM_Base_SetConfig+0xf0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00b      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <TIM_Base_SetConfig+0xf4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <TIM_Base_SetConfig+0xf8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d003      	beq.n	8001dba <TIM_Base_SetConfig+0x8a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <TIM_Base_SetConfig+0xfc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d108      	bne.n	8001dcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <TIM_Base_SetConfig+0xe4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d103      	bne.n	8001e00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	615a      	str	r2, [r3, #20]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40000c00 	.word	0x40000c00
 8001e24:	40014000 	.word	0x40014000
 8001e28:	40014400 	.word	0x40014400
 8001e2c:	40014800 	.word	0x40014800

08001e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e03f      	b.n	8001eea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fd1a 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2224      	movs	r2, #36	; 0x24
 8001e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f829 	bl	8001ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f36:	f023 030c 	bic.w	r3, r3, #12
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f62:	f040 818b 	bne.w	800227c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4ac1      	ldr	r2, [pc, #772]	; (8002270 <UART_SetConfig+0x37c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d005      	beq.n	8001f7c <UART_SetConfig+0x88>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4abf      	ldr	r2, [pc, #764]	; (8002274 <UART_SetConfig+0x380>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f040 80bd 	bne.w	80020f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f7c:	f7ff fd08 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8001f80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	461d      	mov	r5, r3
 8001f86:	f04f 0600 	mov.w	r6, #0
 8001f8a:	46a8      	mov	r8, r5
 8001f8c:	46b1      	mov	r9, r6
 8001f8e:	eb18 0308 	adds.w	r3, r8, r8
 8001f92:	eb49 0409 	adc.w	r4, r9, r9
 8001f96:	4698      	mov	r8, r3
 8001f98:	46a1      	mov	r9, r4
 8001f9a:	eb18 0805 	adds.w	r8, r8, r5
 8001f9e:	eb49 0906 	adc.w	r9, r9, r6
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	4691      	mov	r9, r2
 8001fba:	eb18 0005 	adds.w	r0, r8, r5
 8001fbe:	eb49 0106 	adc.w	r1, r9, r6
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	f04f 0600 	mov.w	r6, #0
 8001fcc:	196b      	adds	r3, r5, r5
 8001fce:	eb46 0406 	adc.w	r4, r6, r6
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	f7fe f953 	bl	8000280 <__aeabi_uldivmod>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460c      	mov	r4, r1
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4ba5      	ldr	r3, [pc, #660]	; (8002278 <UART_SetConfig+0x384>)
 8001fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	461d      	mov	r5, r3
 8001ff0:	f04f 0600 	mov.w	r6, #0
 8001ff4:	46a9      	mov	r9, r5
 8001ff6:	46b2      	mov	sl, r6
 8001ff8:	eb19 0309 	adds.w	r3, r9, r9
 8001ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8002000:	4699      	mov	r9, r3
 8002002:	46a2      	mov	sl, r4
 8002004:	eb19 0905 	adds.w	r9, r9, r5
 8002008:	eb4a 0a06 	adc.w	sl, sl, r6
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800201c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002020:	4689      	mov	r9, r1
 8002022:	4692      	mov	sl, r2
 8002024:	eb19 0005 	adds.w	r0, r9, r5
 8002028:	eb4a 0106 	adc.w	r1, sl, r6
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	461d      	mov	r5, r3
 8002032:	f04f 0600 	mov.w	r6, #0
 8002036:	196b      	adds	r3, r5, r5
 8002038:	eb46 0406 	adc.w	r4, r6, r6
 800203c:	461a      	mov	r2, r3
 800203e:	4623      	mov	r3, r4
 8002040:	f7fe f91e 	bl	8000280 <__aeabi_uldivmod>
 8002044:	4603      	mov	r3, r0
 8002046:	460c      	mov	r4, r1
 8002048:	461a      	mov	r2, r3
 800204a:	4b8b      	ldr	r3, [pc, #556]	; (8002278 <UART_SetConfig+0x384>)
 800204c:	fba3 1302 	umull	r1, r3, r3, r2
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	2164      	movs	r1, #100	; 0x64
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	3332      	adds	r3, #50	; 0x32
 800205e:	4a86      	ldr	r2, [pc, #536]	; (8002278 <UART_SetConfig+0x384>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800206c:	4498      	add	r8, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	461d      	mov	r5, r3
 8002072:	f04f 0600 	mov.w	r6, #0
 8002076:	46a9      	mov	r9, r5
 8002078:	46b2      	mov	sl, r6
 800207a:	eb19 0309 	adds.w	r3, r9, r9
 800207e:	eb4a 040a 	adc.w	r4, sl, sl
 8002082:	4699      	mov	r9, r3
 8002084:	46a2      	mov	sl, r4
 8002086:	eb19 0905 	adds.w	r9, r9, r5
 800208a:	eb4a 0a06 	adc.w	sl, sl, r6
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800209a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800209e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020a2:	4689      	mov	r9, r1
 80020a4:	4692      	mov	sl, r2
 80020a6:	eb19 0005 	adds.w	r0, r9, r5
 80020aa:	eb4a 0106 	adc.w	r1, sl, r6
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	461d      	mov	r5, r3
 80020b4:	f04f 0600 	mov.w	r6, #0
 80020b8:	196b      	adds	r3, r5, r5
 80020ba:	eb46 0406 	adc.w	r4, r6, r6
 80020be:	461a      	mov	r2, r3
 80020c0:	4623      	mov	r3, r4
 80020c2:	f7fe f8dd 	bl	8000280 <__aeabi_uldivmod>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <UART_SetConfig+0x384>)
 80020ce:	fba3 1302 	umull	r1, r3, r3, r2
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2164      	movs	r1, #100	; 0x64
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	3332      	adds	r3, #50	; 0x32
 80020e0:	4a65      	ldr	r2, [pc, #404]	; (8002278 <UART_SetConfig+0x384>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	f003 0207 	and.w	r2, r3, #7
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4442      	add	r2, r8
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e26f      	b.n	80025d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020f6:	f7ff fc37 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 80020fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	461d      	mov	r5, r3
 8002100:	f04f 0600 	mov.w	r6, #0
 8002104:	46a8      	mov	r8, r5
 8002106:	46b1      	mov	r9, r6
 8002108:	eb18 0308 	adds.w	r3, r8, r8
 800210c:	eb49 0409 	adc.w	r4, r9, r9
 8002110:	4698      	mov	r8, r3
 8002112:	46a1      	mov	r9, r4
 8002114:	eb18 0805 	adds.w	r8, r8, r5
 8002118:	eb49 0906 	adc.w	r9, r9, r6
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002128:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800212c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002130:	4688      	mov	r8, r1
 8002132:	4691      	mov	r9, r2
 8002134:	eb18 0005 	adds.w	r0, r8, r5
 8002138:	eb49 0106 	adc.w	r1, r9, r6
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	461d      	mov	r5, r3
 8002142:	f04f 0600 	mov.w	r6, #0
 8002146:	196b      	adds	r3, r5, r5
 8002148:	eb46 0406 	adc.w	r4, r6, r6
 800214c:	461a      	mov	r2, r3
 800214e:	4623      	mov	r3, r4
 8002150:	f7fe f896 	bl	8000280 <__aeabi_uldivmod>
 8002154:	4603      	mov	r3, r0
 8002156:	460c      	mov	r4, r1
 8002158:	461a      	mov	r2, r3
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <UART_SetConfig+0x384>)
 800215c:	fba3 2302 	umull	r2, r3, r3, r2
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	461d      	mov	r5, r3
 800216a:	f04f 0600 	mov.w	r6, #0
 800216e:	46a9      	mov	r9, r5
 8002170:	46b2      	mov	sl, r6
 8002172:	eb19 0309 	adds.w	r3, r9, r9
 8002176:	eb4a 040a 	adc.w	r4, sl, sl
 800217a:	4699      	mov	r9, r3
 800217c:	46a2      	mov	sl, r4
 800217e:	eb19 0905 	adds.w	r9, r9, r5
 8002182:	eb4a 0a06 	adc.w	sl, sl, r6
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800219a:	4689      	mov	r9, r1
 800219c:	4692      	mov	sl, r2
 800219e:	eb19 0005 	adds.w	r0, r9, r5
 80021a2:	eb4a 0106 	adc.w	r1, sl, r6
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	461d      	mov	r5, r3
 80021ac:	f04f 0600 	mov.w	r6, #0
 80021b0:	196b      	adds	r3, r5, r5
 80021b2:	eb46 0406 	adc.w	r4, r6, r6
 80021b6:	461a      	mov	r2, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	f7fe f861 	bl	8000280 <__aeabi_uldivmod>
 80021be:	4603      	mov	r3, r0
 80021c0:	460c      	mov	r4, r1
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <UART_SetConfig+0x384>)
 80021c6:	fba3 1302 	umull	r1, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2164      	movs	r1, #100	; 0x64
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	3332      	adds	r3, #50	; 0x32
 80021d8:	4a27      	ldr	r2, [pc, #156]	; (8002278 <UART_SetConfig+0x384>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021e6:	4498      	add	r8, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	461d      	mov	r5, r3
 80021ec:	f04f 0600 	mov.w	r6, #0
 80021f0:	46a9      	mov	r9, r5
 80021f2:	46b2      	mov	sl, r6
 80021f4:	eb19 0309 	adds.w	r3, r9, r9
 80021f8:	eb4a 040a 	adc.w	r4, sl, sl
 80021fc:	4699      	mov	r9, r3
 80021fe:	46a2      	mov	sl, r4
 8002200:	eb19 0905 	adds.w	r9, r9, r5
 8002204:	eb4a 0a06 	adc.w	sl, sl, r6
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800221c:	4689      	mov	r9, r1
 800221e:	4692      	mov	sl, r2
 8002220:	eb19 0005 	adds.w	r0, r9, r5
 8002224:	eb4a 0106 	adc.w	r1, sl, r6
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461d      	mov	r5, r3
 800222e:	f04f 0600 	mov.w	r6, #0
 8002232:	196b      	adds	r3, r5, r5
 8002234:	eb46 0406 	adc.w	r4, r6, r6
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	f7fe f820 	bl	8000280 <__aeabi_uldivmod>
 8002240:	4603      	mov	r3, r0
 8002242:	460c      	mov	r4, r1
 8002244:	461a      	mov	r2, r3
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <UART_SetConfig+0x384>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	2164      	movs	r1, #100	; 0x64
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3332      	adds	r3, #50	; 0x32
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <UART_SetConfig+0x384>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	f003 0207 	and.w	r2, r3, #7
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4442      	add	r2, r8
 800226c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800226e:	e1b2      	b.n	80025d6 <UART_SetConfig+0x6e2>
 8002270:	40011000 	.word	0x40011000
 8002274:	40011400 	.word	0x40011400
 8002278:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4ad7      	ldr	r2, [pc, #860]	; (80025e0 <UART_SetConfig+0x6ec>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d005      	beq.n	8002292 <UART_SetConfig+0x39e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4ad6      	ldr	r2, [pc, #856]	; (80025e4 <UART_SetConfig+0x6f0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	f040 80d1 	bne.w	8002434 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002292:	f7ff fb7d 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8002296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	469a      	mov	sl, r3
 800229c:	f04f 0b00 	mov.w	fp, #0
 80022a0:	46d0      	mov	r8, sl
 80022a2:	46d9      	mov	r9, fp
 80022a4:	eb18 0308 	adds.w	r3, r8, r8
 80022a8:	eb49 0409 	adc.w	r4, r9, r9
 80022ac:	4698      	mov	r8, r3
 80022ae:	46a1      	mov	r9, r4
 80022b0:	eb18 080a 	adds.w	r8, r8, sl
 80022b4:	eb49 090b 	adc.w	r9, r9, fp
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022cc:	4688      	mov	r8, r1
 80022ce:	4691      	mov	r9, r2
 80022d0:	eb1a 0508 	adds.w	r5, sl, r8
 80022d4:	eb4b 0609 	adc.w	r6, fp, r9
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4619      	mov	r1, r3
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	f04f 0400 	mov.w	r4, #0
 80022ea:	0094      	lsls	r4, r2, #2
 80022ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022f0:	008b      	lsls	r3, r1, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	4623      	mov	r3, r4
 80022f6:	4628      	mov	r0, r5
 80022f8:	4631      	mov	r1, r6
 80022fa:	f7fd ffc1 	bl	8000280 <__aeabi_uldivmod>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	461a      	mov	r2, r3
 8002304:	4bb8      	ldr	r3, [pc, #736]	; (80025e8 <UART_SetConfig+0x6f4>)
 8002306:	fba3 2302 	umull	r2, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	469b      	mov	fp, r3
 8002314:	f04f 0c00 	mov.w	ip, #0
 8002318:	46d9      	mov	r9, fp
 800231a:	46e2      	mov	sl, ip
 800231c:	eb19 0309 	adds.w	r3, r9, r9
 8002320:	eb4a 040a 	adc.w	r4, sl, sl
 8002324:	4699      	mov	r9, r3
 8002326:	46a2      	mov	sl, r4
 8002328:	eb19 090b 	adds.w	r9, r9, fp
 800232c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800233c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002344:	4689      	mov	r9, r1
 8002346:	4692      	mov	sl, r2
 8002348:	eb1b 0509 	adds.w	r5, fp, r9
 800234c:	eb4c 060a 	adc.w	r6, ip, sl
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	f04f 0400 	mov.w	r4, #0
 8002362:	0094      	lsls	r4, r2, #2
 8002364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002368:	008b      	lsls	r3, r1, #2
 800236a:	461a      	mov	r2, r3
 800236c:	4623      	mov	r3, r4
 800236e:	4628      	mov	r0, r5
 8002370:	4631      	mov	r1, r6
 8002372:	f7fd ff85 	bl	8000280 <__aeabi_uldivmod>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	461a      	mov	r2, r3
 800237c:	4b9a      	ldr	r3, [pc, #616]	; (80025e8 <UART_SetConfig+0x6f4>)
 800237e:	fba3 1302 	umull	r1, r3, r3, r2
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2164      	movs	r1, #100	; 0x64
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	4a95      	ldr	r2, [pc, #596]	; (80025e8 <UART_SetConfig+0x6f4>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239c:	4498      	add	r8, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	469b      	mov	fp, r3
 80023a2:	f04f 0c00 	mov.w	ip, #0
 80023a6:	46d9      	mov	r9, fp
 80023a8:	46e2      	mov	sl, ip
 80023aa:	eb19 0309 	adds.w	r3, r9, r9
 80023ae:	eb4a 040a 	adc.w	r4, sl, sl
 80023b2:	4699      	mov	r9, r3
 80023b4:	46a2      	mov	sl, r4
 80023b6:	eb19 090b 	adds.w	r9, r9, fp
 80023ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d2:	4689      	mov	r9, r1
 80023d4:	4692      	mov	sl, r2
 80023d6:	eb1b 0509 	adds.w	r5, fp, r9
 80023da:	eb4c 060a 	adc.w	r6, ip, sl
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f04f 0400 	mov.w	r4, #0
 80023f0:	0094      	lsls	r4, r2, #2
 80023f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023f6:	008b      	lsls	r3, r1, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	4628      	mov	r0, r5
 80023fe:	4631      	mov	r1, r6
 8002400:	f7fd ff3e 	bl	8000280 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	461a      	mov	r2, r3
 800240a:	4b77      	ldr	r3, [pc, #476]	; (80025e8 <UART_SetConfig+0x6f4>)
 800240c:	fba3 1302 	umull	r1, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	2164      	movs	r1, #100	; 0x64
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	3332      	adds	r3, #50	; 0x32
 800241e:	4a72      	ldr	r2, [pc, #456]	; (80025e8 <UART_SetConfig+0x6f4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4442      	add	r2, r8
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	e0d0      	b.n	80025d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002434:	f7ff fa98 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8002438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	469a      	mov	sl, r3
 800243e:	f04f 0b00 	mov.w	fp, #0
 8002442:	46d0      	mov	r8, sl
 8002444:	46d9      	mov	r9, fp
 8002446:	eb18 0308 	adds.w	r3, r8, r8
 800244a:	eb49 0409 	adc.w	r4, r9, r9
 800244e:	4698      	mov	r8, r3
 8002450:	46a1      	mov	r9, r4
 8002452:	eb18 080a 	adds.w	r8, r8, sl
 8002456:	eb49 090b 	adc.w	r9, r9, fp
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800246a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800246e:	4688      	mov	r8, r1
 8002470:	4691      	mov	r9, r2
 8002472:	eb1a 0508 	adds.w	r5, sl, r8
 8002476:	eb4b 0609 	adc.w	r6, fp, r9
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4619      	mov	r1, r3
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	f04f 0400 	mov.w	r4, #0
 800248c:	0094      	lsls	r4, r2, #2
 800248e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002492:	008b      	lsls	r3, r1, #2
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	4628      	mov	r0, r5
 800249a:	4631      	mov	r1, r6
 800249c:	f7fd fef0 	bl	8000280 <__aeabi_uldivmod>
 80024a0:	4603      	mov	r3, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <UART_SetConfig+0x6f4>)
 80024a8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	469b      	mov	fp, r3
 80024b6:	f04f 0c00 	mov.w	ip, #0
 80024ba:	46d9      	mov	r9, fp
 80024bc:	46e2      	mov	sl, ip
 80024be:	eb19 0309 	adds.w	r3, r9, r9
 80024c2:	eb4a 040a 	adc.w	r4, sl, sl
 80024c6:	4699      	mov	r9, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	eb19 090b 	adds.w	r9, r9, fp
 80024ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024e6:	4689      	mov	r9, r1
 80024e8:	4692      	mov	sl, r2
 80024ea:	eb1b 0509 	adds.w	r5, fp, r9
 80024ee:	eb4c 060a 	adc.w	r6, ip, sl
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f04f 0400 	mov.w	r4, #0
 8002504:	0094      	lsls	r4, r2, #2
 8002506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800250a:	008b      	lsls	r3, r1, #2
 800250c:	461a      	mov	r2, r3
 800250e:	4623      	mov	r3, r4
 8002510:	4628      	mov	r0, r5
 8002512:	4631      	mov	r1, r6
 8002514:	f7fd feb4 	bl	8000280 <__aeabi_uldivmod>
 8002518:	4603      	mov	r3, r0
 800251a:	460c      	mov	r4, r1
 800251c:	461a      	mov	r2, r3
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <UART_SetConfig+0x6f4>)
 8002520:	fba3 1302 	umull	r1, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2164      	movs	r1, #100	; 0x64
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	3332      	adds	r3, #50	; 0x32
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <UART_SetConfig+0x6f4>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253e:	4498      	add	r8, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	469b      	mov	fp, r3
 8002544:	f04f 0c00 	mov.w	ip, #0
 8002548:	46d9      	mov	r9, fp
 800254a:	46e2      	mov	sl, ip
 800254c:	eb19 0309 	adds.w	r3, r9, r9
 8002550:	eb4a 040a 	adc.w	r4, sl, sl
 8002554:	4699      	mov	r9, r3
 8002556:	46a2      	mov	sl, r4
 8002558:	eb19 090b 	adds.w	r9, r9, fp
 800255c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800256c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002574:	4689      	mov	r9, r1
 8002576:	4692      	mov	sl, r2
 8002578:	eb1b 0509 	adds.w	r5, fp, r9
 800257c:	eb4c 060a 	adc.w	r6, ip, sl
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	f04f 0400 	mov.w	r4, #0
 8002592:	0094      	lsls	r4, r2, #2
 8002594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002598:	008b      	lsls	r3, r1, #2
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	4631      	mov	r1, r6
 80025a2:	f7fd fe6d 	bl	8000280 <__aeabi_uldivmod>
 80025a6:	4603      	mov	r3, r0
 80025a8:	460c      	mov	r4, r1
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <UART_SetConfig+0x6f4>)
 80025ae:	fba3 1302 	umull	r1, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2164      	movs	r1, #100	; 0x64
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3332      	adds	r3, #50	; 0x32
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <UART_SetConfig+0x6f4>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4442      	add	r2, r8
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	e7ff      	b.n	80025d6 <UART_SetConfig+0x6e2>
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40011400 	.word	0x40011400
 80025e8:	51eb851f 	.word	0x51eb851f

080025ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <vApplicationGetIdleTaskMemory+0x2c>)
 80025fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <vApplicationGetIdleTaskMemory+0x30>)
 8002602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000094 	.word	0x20000094
 800261c:	20000150 	.word	0x20000150

08002620 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <vApplicationGetTimerTaskMemory+0x2c>)
 8002630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <vApplicationGetTimerTaskMemory+0x30>)
 8002636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263e:	601a      	str	r2, [r3, #0]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000350 	.word	0x20000350
 8002650:	2000040c 	.word	0x2000040c

08002654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0208 	add.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f103 0208 	add.w	r2, r3, #8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 0208 	add.w	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d103      	bne.n	8002716 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e00c      	b.n	8002730 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3308      	adds	r3, #8
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e002      	b.n	8002724 <vListInsert+0x2e>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	429a      	cmp	r2, r3
 800272e:	d2f6      	bcs.n	800271e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6852      	ldr	r2, [r2, #4]
 8002788:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d103      	bne.n	800279c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	e7fe      	b.n	80027e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80027e4:	f002 f84a 	bl	800487c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	441a      	add	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	3b01      	subs	r3, #1
 8002816:	68f9      	ldr	r1, [r7, #12]
 8002818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	22ff      	movs	r2, #255	; 0xff
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	22ff      	movs	r2, #255	; 0xff
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d114      	bne.n	8002864 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01a      	beq.n	8002878 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3310      	adds	r3, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f001 f914 	bl	8003a74 <xTaskRemoveFromEventList>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <xQueueGenericReset+0xcc>)
 8002854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	e009      	b.n	8002878 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3310      	adds	r3, #16
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fef3 	bl	8002654 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3324      	adds	r3, #36	; 0x24
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff feee 	bl	8002654 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002878:	f002 f82e 	bl	80048d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	; 0x38
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <xQueueGenericCreateStatic+0x28>
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b2:	e7fe      	b.n	80028b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <xQueueGenericCreateStatic+0x42>
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	e7fe      	b.n	80028cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <xQueueGenericCreateStatic+0x4e>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <xQueueGenericCreateStatic+0x52>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <xQueueGenericCreateStatic+0x54>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <xQueueGenericCreateStatic+0x6c>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	e7fe      	b.n	80028f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <xQueueGenericCreateStatic+0x78>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <xQueueGenericCreateStatic+0x7c>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <xQueueGenericCreateStatic+0x7e>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <xQueueGenericCreateStatic+0x96>
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	e7fe      	b.n	8002920 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002922:	2350      	movs	r3, #80	; 0x50
 8002924:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d009      	beq.n	8002940 <xQueueGenericCreateStatic+0xb4>
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e7fe      	b.n	800293e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002940:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00d      	beq.n	8002968 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002954:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f844 	bl	80029f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800296a:	4618      	mov	r0, r3
 800296c:	3730      	adds	r7, #48	; 0x30
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002972:	b580      	push	{r7, lr}
 8002974:	b08a      	sub	sp, #40	; 0x28
 8002976:	af02      	add	r7, sp, #8
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <xQueueGenericCreate+0x28>
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e7fe      	b.n	8002998 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	e004      	b.n	80029b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	3350      	adds	r3, #80	; 0x50
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 f87b 	bl	8004ab0 <pvPortMalloc>
 80029ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d011      	beq.n	80029e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3350      	adds	r3, #80	; 0x50
 80029ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029d4:	79fa      	ldrb	r2, [r7, #7]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f805 	bl	80029f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029e6:	69bb      	ldr	r3, [r7, #24]
	}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e002      	b.n	8002a12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a1e:	2101      	movs	r1, #1
 8002a20:	69b8      	ldr	r0, [r7, #24]
 8002a22:	f7ff fecb 	bl	80027bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08e      	sub	sp, #56	; 0x38
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a46:	2300      	movs	r3, #0
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <xQueueGenericSend+0x30>
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a66:	e7fe      	b.n	8002a66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <xQueueGenericSend+0x3e>
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <xQueueGenericSend+0x42>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <xQueueGenericSend+0x44>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <xQueueGenericSend+0x5c>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e7fe      	b.n	8002a92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d103      	bne.n	8002aa2 <xQueueGenericSend+0x6a>
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <xQueueGenericSend+0x6e>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueGenericSend+0x70>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <xQueueGenericSend+0x88>
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	e7fe      	b.n	8002abe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac0:	f001 f994 	bl	8003dec <xTaskGetSchedulerState>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <xQueueGenericSend+0x98>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <xQueueGenericSend+0x9c>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <xQueueGenericSend+0x9e>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <xQueueGenericSend+0xb6>
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aee:	f001 fec5 	bl	800487c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <xQueueGenericSend+0xcc>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d129      	bne.n	8002b58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0a:	f000 f9ff 	bl	8002f0c <prvCopyDataToQueue>
 8002b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	3324      	adds	r3, #36	; 0x24
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 ffa9 	bl	8003a74 <xTaskRemoveFromEventList>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <xQueueGenericSend+0x1f0>)
 8002b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	e00a      	b.n	8002b50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <xQueueGenericSend+0x1f0>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b50:	f001 fec2 	bl	80048d8 <vPortExitCritical>
				return pdPASS;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e063      	b.n	8002c20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b5e:	f001 febb 	bl	80048d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e05c      	b.n	8002c20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 ffe1 	bl	8003b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b7a:	f001 fead 	bl	80048d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b7e:	f000 fd55 	bl	800362c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b82:	f001 fe7b 	bl	800487c <vPortEnterCritical>
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d103      	bne.n	8002b9c <xQueueGenericSend+0x164>
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d103      	bne.n	8002bb2 <xQueueGenericSend+0x17a>
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb2:	f001 fe91 	bl	80048d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bb6:	1d3a      	adds	r2, r7, #4
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 ffd0 	bl	8003b64 <xTaskCheckForTimeOut>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d124      	bne.n	8002c14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bcc:	f000 fa96 	bl	80030fc <prvIsQueueFull>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d018      	beq.n	8002c08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	3310      	adds	r3, #16
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fefa 	bl	80039d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be6:	f000 fa21 	bl	800302c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bea:	f000 fd2d 	bl	8003648 <xTaskResumeAll>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f af7c 	bne.w	8002aee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <xQueueGenericSend+0x1f0>)
 8002bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	e772      	b.n	8002aee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0a:	f000 fa0f 	bl	800302c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c0e:	f000 fd1b 	bl	8003648 <xTaskResumeAll>
 8002c12:	e76c      	b.n	8002aee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c16:	f000 fa09 	bl	800302c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c1a:	f000 fd15 	bl	8003648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3738      	adds	r7, #56	; 0x38
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	e000ed04 	.word	0xe000ed04

08002c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	; 0x38
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <xQueueGenericSendFromISR+0x2c>
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e7fe      	b.n	8002c56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSendFromISR+0x3a>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericSendFromISR+0x3e>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericSendFromISR+0x40>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <xQueueGenericSendFromISR+0x58>
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	e7fe      	b.n	8002c82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d103      	bne.n	8002c92 <xQueueGenericSendFromISR+0x66>
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <xQueueGenericSendFromISR+0x6a>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <xQueueGenericSendFromISR+0x6c>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <xQueueGenericSendFromISR+0x84>
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e7fe      	b.n	8002cae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cb0:	f001 fec0 	bl	8004a34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	61ba      	str	r2, [r7, #24]
 8002cca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <xQueueGenericSendFromISR+0xb6>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d12c      	bne.n	8002d3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf2:	f000 f90b 	bl	8002f0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d112      	bne.n	8002d26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d016      	beq.n	8002d36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 feb1 	bl	8003a74 <xTaskRemoveFromEventList>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e007      	b.n	8002d36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d36:	2301      	movs	r3, #1
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d3a:	e001      	b.n	8002d40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3738      	adds	r7, #56	; 0x38
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <xQueueReceive+0x2e>
	__asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	e7fe      	b.n	8002d80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <xQueueReceive+0x3c>
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <xQueueReceive+0x40>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <xQueueReceive+0x42>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <xQueueReceive+0x5a>
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	e7fe      	b.n	8002dac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dae:	f001 f81d 	bl	8003dec <xTaskGetSchedulerState>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <xQueueReceive+0x6a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <xQueueReceive+0x6e>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueReceive+0x70>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <xQueueReceive+0x88>
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e7fe      	b.n	8002dda <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ddc:	f001 fd4e 	bl	800487c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01f      	beq.n	8002e2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df0:	f000 f8f6 	bl	8002fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1e5a      	subs	r2, r3, #1
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00f      	beq.n	8002e24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	3310      	adds	r3, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fe33 	bl	8003a74 <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <xQueueReceive+0x1b4>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e24:	f001 fd58 	bl	80048d8 <vPortExitCritical>
				return pdPASS;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e069      	b.n	8002f00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e32:	f001 fd51 	bl	80048d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e062      	b.n	8002f00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fe77 	bl	8003b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e4e:	f001 fd43 	bl	80048d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e52:	f000 fbeb 	bl	800362c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e56:	f001 fd11 	bl	800487c <vPortEnterCritical>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d103      	bne.n	8002e70 <xQueueReceive+0x11c>
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e76:	b25b      	sxtb	r3, r3
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d103      	bne.n	8002e86 <xQueueReceive+0x132>
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e86:	f001 fd27 	bl	80048d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e8a:	1d3a      	adds	r2, r7, #4
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fe66 	bl	8003b64 <xTaskCheckForTimeOut>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d123      	bne.n	8002ee6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea0:	f000 f916 	bl	80030d0 <prvIsQueueEmpty>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	3324      	adds	r3, #36	; 0x24
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fd90 	bl	80039d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eba:	f000 f8b7 	bl	800302c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ebe:	f000 fbc3 	bl	8003648 <xTaskResumeAll>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d189      	bne.n	8002ddc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <xQueueReceive+0x1b4>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	e780      	b.n	8002ddc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002edc:	f000 f8a6 	bl	800302c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ee0:	f000 fbb2 	bl	8003648 <xTaskResumeAll>
 8002ee4:	e77a      	b.n	8002ddc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee8:	f000 f8a0 	bl	800302c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eec:	f000 fbac 	bl	8003648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef2:	f000 f8ed 	bl	80030d0 <prvIsQueueEmpty>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f43f af6f 	beq.w	8002ddc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002efe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3730      	adds	r7, #48	; 0x30
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14d      	bne.n	8002fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff76 	bl	8003e28 <xTaskPriorityDisinherit>
 8002f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e043      	b.n	8002fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d119      	bne.n	8002f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6858      	ldr	r0, [r3, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	461a      	mov	r2, r3
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	f002 f874 	bl	8005044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	441a      	add	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d32b      	bcc.n	8002fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e026      	b.n	8002fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68d8      	ldr	r0, [r3, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	f002 f85a 	bl	8005044 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	425b      	negs	r3, r3
 8002f9a:	441a      	add	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d105      	bne.n	8002fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fd6:	697b      	ldr	r3, [r7, #20]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	429a      	cmp	r2, r3
 800300a:	d303      	bcc.n	8003014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68d9      	ldr	r1, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	461a      	mov	r2, r3
 800301e:	6838      	ldr	r0, [r7, #0]
 8003020:	f002 f810 	bl	8005044 <memcpy>
	}
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003034:	f001 fc22 	bl	800487c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003040:	e011      	b.n	8003066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3324      	adds	r3, #36	; 0x24
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fd10 	bl	8003a74 <xTaskRemoveFromEventList>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800305a:	f000 fde3 	bl	8003c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3b01      	subs	r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	dce9      	bgt.n	8003042 <prvUnlockQueue+0x16>
 800306e:	e000      	b.n	8003072 <prvUnlockQueue+0x46>
					break;
 8003070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800307a:	f001 fc2d 	bl	80048d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800307e:	f001 fbfd 	bl	800487c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800308a:	e011      	b.n	80030b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3310      	adds	r3, #16
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fceb 	bl	8003a74 <xTaskRemoveFromEventList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030a4:	f000 fdbe 	bl	8003c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	dce9      	bgt.n	800308c <prvUnlockQueue+0x60>
 80030b8:	e000      	b.n	80030bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030c4:	f001 fc08 	bl	80048d8 <vPortExitCritical>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d8:	f001 fbd0 	bl	800487c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e001      	b.n	80030ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ee:	f001 fbf3 	bl	80048d8 <vPortExitCritical>

	return xReturn;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003104:	f001 fbba 	bl	800487c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	429a      	cmp	r2, r3
 8003112:	d102      	bne.n	800311a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e001      	b.n	800311e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800311e:	f001 fbdb 	bl	80048d8 <vPortExitCritical>

	return xReturn;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e014      	b.n	8003166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800313c:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <vQueueAddToRegistry+0x4c>)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003148:	490b      	ldr	r1, [pc, #44]	; (8003178 <vQueueAddToRegistry+0x4c>)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <vQueueAddToRegistry+0x4c>)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800315e:	e005      	b.n	800316c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b07      	cmp	r3, #7
 800316a:	d9e7      	bls.n	800313c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	20004af4 	.word	0x20004af4

0800317c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800318c:	f001 fb76 	bl	800487c <vPortEnterCritical>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d103      	bne.n	80031a6 <vQueueWaitForMessageRestricted+0x2a>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d103      	bne.n	80031bc <vQueueWaitForMessageRestricted+0x40>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031bc:	f001 fb8c 	bl	80048d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fc25 	bl	8003a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff28 	bl	800302c <prvUnlockQueue>
	}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <xTaskCreateStatic+0x28>
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	e7fe      	b.n	800320a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <xTaskCreateStatic+0x42>
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	e7fe      	b.n	8003224 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003226:	23bc      	movs	r3, #188	; 0xbc
 8003228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2bbc      	cmp	r3, #188	; 0xbc
 800322e:	d009      	beq.n	8003244 <xTaskCreateStatic+0x60>
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e7fe      	b.n	8003242 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003244:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01e      	beq.n	800328a <xTaskCreateStatic+0xa6>
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01b      	beq.n	800328a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2202      	movs	r2, #2
 8003260:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003264:	2300      	movs	r3, #0
 8003266:	9303      	str	r3, [sp, #12]
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	9302      	str	r3, [sp, #8]
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f851 	bl	8003324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003284:	f000 f8f4 	bl	8003470 <prvAddNewTaskToReadyList>
 8003288:	e001      	b.n	800328e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800328e:	697b      	ldr	r3, [r7, #20]
	}
 8003290:	4618      	mov	r0, r3
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	; 0x30
 800329c:	af04      	add	r7, sp, #16
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 fbff 	bl	8004ab0 <pvPortMalloc>
 80032b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032ba:	20bc      	movs	r0, #188	; 0xbc
 80032bc:	f001 fbf8 	bl	8004ab0 <pvPortMalloc>
 80032c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
 80032ce:	e005      	b.n	80032dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032d0:	6978      	ldr	r0, [r7, #20]
 80032d2:	f001 fcaf 	bl	8004c34 <vPortFree>
 80032d6:	e001      	b.n	80032dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	9302      	str	r3, [sp, #8]
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f80f 	bl	8003324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003306:	69f8      	ldr	r0, [r7, #28]
 8003308:	f000 f8b2 	bl	8003470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800330c:	2301      	movs	r3, #1
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e002      	b.n	8003318 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003318:	69bb      	ldr	r3, [r7, #24]
	}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	21a5      	movs	r1, #165	; 0xa5
 800333e:	f001 fe8c 	bl	800505a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800334c:	3b01      	subs	r3, #1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f023 0307 	bic.w	r3, r3, #7
 800335a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <prvInitialiseNewTask+0x56>
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e7fe      	b.n	8003378 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01f      	beq.n	80033c0 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	e012      	b.n	80033ac <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	7819      	ldrb	r1, [r3, #0]
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	3334      	adds	r3, #52	; 0x34
 8003396:	460a      	mov	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	d9e9      	bls.n	8003386 <prvInitialiseNewTask+0x62>
 80033b2:	e000      	b.n	80033b6 <prvInitialiseNewTask+0x92>
			{
				break;
 80033b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033be:	e003      	b.n	80033c8 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	2b37      	cmp	r3, #55	; 0x37
 80033cc:	d901      	bls.n	80033d2 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033ce:	2337      	movs	r3, #55	; 0x37
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	2200      	movs	r2, #0
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	3304      	adds	r3, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f953 	bl	8002694 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	3318      	adds	r3, #24
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f94e 	bl	8002694 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2200      	movs	r2, #0
 800341a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	3354      	adds	r3, #84	; 0x54
 8003422:	2260      	movs	r2, #96	; 0x60
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f001 fe17 	bl	800505a <memset>
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <prvInitialiseNewTask+0x140>)
 8003430:	659a      	str	r2, [r3, #88]	; 0x58
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <prvInitialiseNewTask+0x144>)
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <prvInitialiseNewTask+0x148>)
 800343c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	68f9      	ldr	r1, [r7, #12]
 8003442:	69b8      	ldr	r0, [r7, #24]
 8003444:	f001 f8f6 	bl	8004634 <pxPortInitialiseStack>
 8003448:	4602      	mov	r2, r0
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800345a:	bf00      	nop
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	08005e60 	.word	0x08005e60
 8003468:	08005e80 	.word	0x08005e80
 800346c:	08005e40 	.word	0x08005e40

08003470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003478:	f001 fa00 	bl	800487c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800347c:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <prvAddNewTaskToReadyList+0xc4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <prvAddNewTaskToReadyList+0xc4>)
 8003484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <prvAddNewTaskToReadyList+0xc8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800348e:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <prvAddNewTaskToReadyList+0xc8>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <prvAddNewTaskToReadyList+0xc4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d110      	bne.n	80034be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800349c:	f000 fbe6 	bl	8003c6c <prvInitialiseTaskLists>
 80034a0:	e00d      	b.n	80034be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <prvAddNewTaskToReadyList+0xcc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <prvAddNewTaskToReadyList+0xc8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d802      	bhi.n	80034be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034b8:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <prvAddNewTaskToReadyList+0xc8>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <prvAddNewTaskToReadyList+0xd0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <prvAddNewTaskToReadyList+0xd0>)
 80034c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <prvAddNewTaskToReadyList+0xd0>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <prvAddNewTaskToReadyList+0xd4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d903      	bls.n	80034e4 <prvAddNewTaskToReadyList+0x74>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4a18      	ldr	r2, [pc, #96]	; (8003544 <prvAddNewTaskToReadyList+0xd4>)
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4a15      	ldr	r2, [pc, #84]	; (8003548 <prvAddNewTaskToReadyList+0xd8>)
 80034f2:	441a      	add	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7ff f8d7 	bl	80026ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003500:	f001 f9ea 	bl	80048d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <prvAddNewTaskToReadyList+0xcc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <prvAddNewTaskToReadyList+0xc8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	429a      	cmp	r2, r3
 8003518:	d207      	bcs.n	800352a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <prvAddNewTaskToReadyList+0xdc>)
 800351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000ce0 	.word	0x20000ce0
 8003538:	2000080c 	.word	0x2000080c
 800353c:	20000cec 	.word	0x20000cec
 8003540:	20000cfc 	.word	0x20000cfc
 8003544:	20000ce8 	.word	0x20000ce8
 8003548:	20000810 	.word	0x20000810
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800355e:	463a      	mov	r2, r7
 8003560:	1d39      	adds	r1, r7, #4
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f840 	bl	80025ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	9202      	str	r2, [sp, #8]
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	460a      	mov	r2, r1
 800357e:	4923      	ldr	r1, [pc, #140]	; (800360c <vTaskStartScheduler+0xbc>)
 8003580:	4823      	ldr	r0, [pc, #140]	; (8003610 <vTaskStartScheduler+0xc0>)
 8003582:	f7ff fe2f 	bl	80031e4 <xTaskCreateStatic>
 8003586:	4602      	mov	r2, r0
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <vTaskStartScheduler+0xc4>)
 800358a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <vTaskStartScheduler+0xc4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e001      	b.n	800359e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035a4:	f000 fd00 	bl	8003fa8 <xTimerCreateTimerTask>
 80035a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d11a      	bne.n	80035e6 <vTaskStartScheduler+0x96>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <vTaskStartScheduler+0xc8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3354      	adds	r3, #84	; 0x54
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <vTaskStartScheduler+0xcc>)
 80035ca:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035cc:	4b14      	ldr	r3, [pc, #80]	; (8003620 <vTaskStartScheduler+0xd0>)
 80035ce:	f04f 32ff 	mov.w	r2, #4294967295
 80035d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <vTaskStartScheduler+0xd4>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <vTaskStartScheduler+0xd8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035e0:	f001 f8ae 	bl	8004740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035e4:	e00d      	b.n	8003602 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d109      	bne.n	8003602 <vTaskStartScheduler+0xb2>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e7fe      	b.n	8003600 <vTaskStartScheduler+0xb0>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	08005e0c 	.word	0x08005e0c
 8003610:	08003c3d 	.word	0x08003c3d
 8003614:	20000d04 	.word	0x20000d04
 8003618:	2000080c 	.word	0x2000080c
 800361c:	20000010 	.word	0x20000010
 8003620:	20000d00 	.word	0x20000d00
 8003624:	20000cec 	.word	0x20000cec
 8003628:	20000ce4 	.word	0x20000ce4

0800362c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <vTaskSuspendAll+0x18>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a03      	ldr	r2, [pc, #12]	; (8003644 <vTaskSuspendAll+0x18>)
 8003638:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000d08 	.word	0x20000d08

08003648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <xTaskResumeAll+0x114>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <xTaskResumeAll+0x2a>
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	e7fe      	b.n	8003670 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003672:	f001 f903 	bl	800487c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <xTaskResumeAll+0x114>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3b01      	subs	r3, #1
 800367c:	4a37      	ldr	r2, [pc, #220]	; (800375c <xTaskResumeAll+0x114>)
 800367e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003680:	4b36      	ldr	r3, [pc, #216]	; (800375c <xTaskResumeAll+0x114>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d162      	bne.n	800374e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <xTaskResumeAll+0x118>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05e      	beq.n	800374e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003690:	e02f      	b.n	80036f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <xTaskResumeAll+0x11c>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3318      	adds	r3, #24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f862 	bl	8002768 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f85d 	bl	8002768 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <xTaskResumeAll+0x120>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d903      	bls.n	80036c2 <xTaskResumeAll+0x7a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <xTaskResumeAll+0x120>)
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4a27      	ldr	r2, [pc, #156]	; (800376c <xTaskResumeAll+0x124>)
 80036d0:	441a      	add	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f7fe ffe8 	bl	80026ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4b23      	ldr	r3, [pc, #140]	; (8003770 <xTaskResumeAll+0x128>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <xTaskResumeAll+0x12c>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <xTaskResumeAll+0x11c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1cb      	bne.n	8003692 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003700:	f000 fb54 	bl	8003dac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <xTaskResumeAll+0x130>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003710:	f000 f846 	bl	80037a0 <xTaskIncrementTick>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <xTaskResumeAll+0x12c>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f1      	bne.n	8003710 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <xTaskResumeAll+0x130>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <xTaskResumeAll+0x12c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800373a:	2301      	movs	r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <xTaskResumeAll+0x134>)
 8003740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800374e:	f001 f8c3 	bl	80048d8 <vPortExitCritical>

	return xAlreadyYielded;
 8003752:	68bb      	ldr	r3, [r7, #8]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000d08 	.word	0x20000d08
 8003760:	20000ce0 	.word	0x20000ce0
 8003764:	20000ca0 	.word	0x20000ca0
 8003768:	20000ce8 	.word	0x20000ce8
 800376c:	20000810 	.word	0x20000810
 8003770:	2000080c 	.word	0x2000080c
 8003774:	20000cf4 	.word	0x20000cf4
 8003778:	20000cf0 	.word	0x20000cf0
 800377c:	e000ed04 	.word	0xe000ed04

08003780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <xTaskGetTickCount+0x1c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800378c:	687b      	ldr	r3, [r7, #4]
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000ce4 	.word	0x20000ce4

080037a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037aa:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <xTaskIncrementTick+0x144>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8088 	bne.w	80038c4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037b4:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <xTaskIncrementTick+0x148>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037bc:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <xTaskIncrementTick+0x148>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d11f      	bne.n	8003808 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80037c8:	4b48      	ldr	r3, [pc, #288]	; (80038ec <xTaskIncrementTick+0x14c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <xTaskIncrementTick+0x46>
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	e7fe      	b.n	80037e4 <xTaskIncrementTick+0x44>
 80037e6:	4b41      	ldr	r3, [pc, #260]	; (80038ec <xTaskIncrementTick+0x14c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <xTaskIncrementTick+0x150>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <xTaskIncrementTick+0x14c>)
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4a3e      	ldr	r2, [pc, #248]	; (80038f0 <xTaskIncrementTick+0x150>)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <xTaskIncrementTick+0x154>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <xTaskIncrementTick+0x154>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	f000 fad2 	bl	8003dac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <xTaskIncrementTick+0x158>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d349      	bcc.n	80038a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <xTaskIncrementTick+0x14c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381c:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <xTaskIncrementTick+0x158>)
 800381e:	f04f 32ff 	mov.w	r2, #4294967295
 8003822:	601a      	str	r2, [r3, #0]
					break;
 8003824:	e03f      	b.n	80038a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <xTaskIncrementTick+0x14c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d203      	bcs.n	8003846 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <xTaskIncrementTick+0x158>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003844:	e02f      	b.n	80038a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe ff8c 	bl	8002768 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3318      	adds	r3, #24
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe ff83 	bl	8002768 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <xTaskIncrementTick+0x15c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d903      	bls.n	8003876 <xTaskIncrementTick+0xd6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a22      	ldr	r2, [pc, #136]	; (80038fc <xTaskIncrementTick+0x15c>)
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <xTaskIncrementTick+0x160>)
 8003884:	441a      	add	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3304      	adds	r3, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7fe ff0e 	bl	80026ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <xTaskIncrementTick+0x164>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d3b8      	bcc.n	8003812 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a4:	e7b5      	b.n	8003812 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <xTaskIncrementTick+0x164>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ac:	4914      	ldr	r1, [pc, #80]	; (8003900 <xTaskIncrementTick+0x160>)
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d907      	bls.n	80038ce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e004      	b.n	80038ce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <xTaskIncrementTick+0x168>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <xTaskIncrementTick+0x168>)
 80038cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <xTaskIncrementTick+0x16c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80038d6:	2301      	movs	r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038da:	697b      	ldr	r3, [r7, #20]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000d08 	.word	0x20000d08
 80038e8:	20000ce4 	.word	0x20000ce4
 80038ec:	20000c98 	.word	0x20000c98
 80038f0:	20000c9c 	.word	0x20000c9c
 80038f4:	20000cf8 	.word	0x20000cf8
 80038f8:	20000d00 	.word	0x20000d00
 80038fc:	20000ce8 	.word	0x20000ce8
 8003900:	20000810 	.word	0x20000810
 8003904:	2000080c 	.word	0x2000080c
 8003908:	20000cf0 	.word	0x20000cf0
 800390c:	20000cf4 	.word	0x20000cf4

08003910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <vTaskSwitchContext+0xb0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <vTaskSwitchContext+0xb4>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003924:	e045      	b.n	80039b2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <vTaskSwitchContext+0xb4>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392c:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <vTaskSwitchContext+0xb8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e00f      	b.n	8003954 <vTaskSwitchContext+0x44>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <vTaskSwitchContext+0x3e>
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	e7fe      	b.n	800394c <vTaskSwitchContext+0x3c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b01      	subs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	491d      	ldr	r1, [pc, #116]	; (80039cc <vTaskSwitchContext+0xbc>)
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0e5      	beq.n	8003934 <vTaskSwitchContext+0x24>
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4a16      	ldr	r2, [pc, #88]	; (80039cc <vTaskSwitchContext+0xbc>)
 8003974:	4413      	add	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3308      	adds	r3, #8
 800398a:	429a      	cmp	r2, r3
 800398c:	d104      	bne.n	8003998 <vTaskSwitchContext+0x88>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <vTaskSwitchContext+0xc0>)
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <vTaskSwitchContext+0xb8>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <vTaskSwitchContext+0xc0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3354      	adds	r3, #84	; 0x54
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <vTaskSwitchContext+0xc4>)
 80039b0:	6013      	str	r3, [r2, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000d08 	.word	0x20000d08
 80039c4:	20000cf4 	.word	0x20000cf4
 80039c8:	20000ce8 	.word	0x20000ce8
 80039cc:	20000810 	.word	0x20000810
 80039d0:	2000080c 	.word	0x2000080c
 80039d4:	20000010 	.word	0x20000010

080039d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <vTaskPlaceOnEventList+0x24>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e7fe      	b.n	80039fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <vTaskPlaceOnEventList+0x44>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3318      	adds	r3, #24
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fe fe76 	bl	80026f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	6838      	ldr	r0, [r7, #0]
 8003a0e:	f000 fa77 	bl	8003f00 <prvAddCurrentTaskToDelayedList>
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	2000080c 	.word	0x2000080c

08003a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <vTaskPlaceOnEventListRestricted+0x26>
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e7fe      	b.n	8003a44 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <vTaskPlaceOnEventListRestricted+0x50>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7fe fe2d 	bl	80026ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	f000 fa4c 	bl	8003f00 <prvAddCurrentTaskToDelayedList>
	}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	2000080c 	.word	0x2000080c

08003a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <xTaskRemoveFromEventList+0x2a>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e7fe      	b.n	8003a9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fe60 	bl	8002768 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <xTaskRemoveFromEventList+0xac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11d      	bne.n	8003aec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fe57 	bl	8002768 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <xTaskRemoveFromEventList+0xb0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d903      	bls.n	8003ace <xTaskRemoveFromEventList+0x5a>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <xTaskRemoveFromEventList+0xb0>)
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <xTaskRemoveFromEventList+0xb4>)
 8003adc:	441a      	add	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7fe fde2 	bl	80026ae <vListInsertEnd>
 8003aea:	e005      	b.n	8003af8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3318      	adds	r3, #24
 8003af0:	4619      	mov	r1, r3
 8003af2:	480e      	ldr	r0, [pc, #56]	; (8003b2c <xTaskRemoveFromEventList+0xb8>)
 8003af4:	f7fe fddb 	bl	80026ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <xTaskRemoveFromEventList+0xbc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d905      	bls.n	8003b12 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <xTaskRemoveFromEventList+0xc0>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e001      	b.n	8003b16 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b16:	697b      	ldr	r3, [r7, #20]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000d08 	.word	0x20000d08
 8003b24:	20000ce8 	.word	0x20000ce8
 8003b28:	20000810 	.word	0x20000810
 8003b2c:	20000ca0 	.word	0x20000ca0
 8003b30:	2000080c 	.word	0x2000080c
 8003b34:	20000cf4 	.word	0x20000cf4

08003b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <vTaskInternalSetTimeOutState+0x24>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <vTaskInternalSetTimeOutState+0x28>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000cf8 	.word	0x20000cf8
 8003b60:	20000ce4 	.word	0x20000ce4

08003b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <xTaskCheckForTimeOut+0x24>
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	e7fe      	b.n	8003b86 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <xTaskCheckForTimeOut+0x3e>
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e7fe      	b.n	8003ba0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003ba2:	f000 fe6b 	bl	800487c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <xTaskCheckForTimeOut+0xb8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d102      	bne.n	8003bc6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e023      	b.n	8003c0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <xTaskCheckForTimeOut+0xbc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d007      	beq.n	8003be2 <xTaskCheckForTimeOut+0x7e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e015      	b.n	8003c0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d20b      	bcs.n	8003c04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	1ad2      	subs	r2, r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff9d 	bl	8003b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e004      	b.n	8003c0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c0e:	f000 fe63 	bl	80048d8 <vPortExitCritical>

	return xReturn;
 8003c12:	69fb      	ldr	r3, [r7, #28]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000ce4 	.word	0x20000ce4
 8003c20:	20000cf8 	.word	0x20000cf8

08003c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <vTaskMissedYield+0x14>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	20000cf4 	.word	0x20000cf4

08003c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c44:	f000 f852 	bl	8003cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <prvIdleTask+0x28>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d9f9      	bls.n	8003c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <prvIdleTask+0x2c>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c60:	e7f0      	b.n	8003c44 <prvIdleTask+0x8>
 8003c62:	bf00      	nop
 8003c64:	20000810 	.word	0x20000810
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	e00c      	b.n	8003c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <prvInitialiseTaskLists+0x60>)
 8003c84:	4413      	add	r3, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fce4 	bl	8002654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b37      	cmp	r3, #55	; 0x37
 8003c96:	d9ef      	bls.n	8003c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <prvInitialiseTaskLists+0x64>)
 8003c9a:	f7fe fcdb 	bl	8002654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c9e:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <prvInitialiseTaskLists+0x68>)
 8003ca0:	f7fe fcd8 	bl	8002654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ca4:	480c      	ldr	r0, [pc, #48]	; (8003cd8 <prvInitialiseTaskLists+0x6c>)
 8003ca6:	f7fe fcd5 	bl	8002654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003caa:	480c      	ldr	r0, [pc, #48]	; (8003cdc <prvInitialiseTaskLists+0x70>)
 8003cac:	f7fe fcd2 	bl	8002654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cb0:	480b      	ldr	r0, [pc, #44]	; (8003ce0 <prvInitialiseTaskLists+0x74>)
 8003cb2:	f7fe fccf 	bl	8002654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <prvInitialiseTaskLists+0x78>)
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <prvInitialiseTaskLists+0x64>)
 8003cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <prvInitialiseTaskLists+0x7c>)
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <prvInitialiseTaskLists+0x68>)
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000810 	.word	0x20000810
 8003cd0:	20000c70 	.word	0x20000c70
 8003cd4:	20000c84 	.word	0x20000c84
 8003cd8:	20000ca0 	.word	0x20000ca0
 8003cdc:	20000cb4 	.word	0x20000cb4
 8003ce0:	20000ccc 	.word	0x20000ccc
 8003ce4:	20000c98 	.word	0x20000c98
 8003ce8:	20000c9c 	.word	0x20000c9c

08003cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cf2:	e019      	b.n	8003d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cf4:	f000 fdc2 	bl	800487c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <prvCheckTasksWaitingTermination+0x4c>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fd2f 	bl	8002768 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <prvCheckTasksWaitingTermination+0x50>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <prvCheckTasksWaitingTermination+0x50>)
 8003d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <prvCheckTasksWaitingTermination+0x54>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <prvCheckTasksWaitingTermination+0x54>)
 8003d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d1e:	f000 fddb 	bl	80048d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f80e 	bl	8003d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <prvCheckTasksWaitingTermination+0x54>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e1      	bne.n	8003cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000cb4 	.word	0x20000cb4
 8003d3c:	20000ce0 	.word	0x20000ce0
 8003d40:	20000cc8 	.word	0x20000cc8

08003d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3354      	adds	r3, #84	; 0x54
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fa0b 	bl	800516c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 ff65 	bl	8004c34 <vPortFree>
				vPortFree( pxTCB );
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 ff62 	bl	8004c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d70:	e017      	b.n	8003da2 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d103      	bne.n	8003d84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 ff59 	bl	8004c34 <vPortFree>
	}
 8003d82:	e00e      	b.n	8003da2 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d009      	beq.n	8003da2 <prvDeleteTCB+0x5e>
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e7fe      	b.n	8003da0 <prvDeleteTCB+0x5c>
	}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <prvResetNextTaskUnblockTime+0x38>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvResetNextTaskUnblockTime+0x3c>)
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dc4:	e008      	b.n	8003dd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <prvResetNextTaskUnblockTime+0x38>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <prvResetNextTaskUnblockTime+0x3c>)
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000c98 	.word	0x20000c98
 8003de8:	20000d00 	.word	0x20000d00

08003dec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <xTaskGetSchedulerState+0x34>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	e008      	b.n	8003e12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <xTaskGetSchedulerState+0x38>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	e001      	b.n	8003e12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e12:	687b      	ldr	r3, [r7, #4]
	}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	20000cec 	.word	0x20000cec
 8003e24:	20000d08 	.word	0x20000d08

08003e28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d054      	beq.n	8003ee8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <xTaskPriorityDisinherit+0xcc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d009      	beq.n	8003e5c <xTaskPriorityDisinherit+0x34>
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e7fe      	b.n	8003e5a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <xTaskPriorityDisinherit+0x50>
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	e7fe      	b.n	8003e76 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	1e5a      	subs	r2, r3, #1
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d02c      	beq.n	8003ee8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d128      	bne.n	8003ee8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fc64 	bl	8002768 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <xTaskPriorityDisinherit+0xd0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d903      	bls.n	8003ec8 <xTaskPriorityDisinherit+0xa0>
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <xTaskPriorityDisinherit+0xd0>)
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <xTaskPriorityDisinherit+0xd4>)
 8003ed6:	441a      	add	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f7fe fbe5 	bl	80026ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ee8:	697b      	ldr	r3, [r7, #20]
	}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000080c 	.word	0x2000080c
 8003ef8:	20000ce8 	.word	0x20000ce8
 8003efc:	20000810 	.word	0x20000810

08003f00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f0a:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f10:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fc26 	bl	8002768 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d10a      	bne.n	8003f3a <prvAddCurrentTaskToDelayedList+0x3a>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4819      	ldr	r0, [pc, #100]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f34:	f7fe fbbb 	bl	80026ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f38:	e026      	b.n	8003f88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d209      	bcs.n	8003f66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe fbc9 	bl	80026f6 <vListInsert>
}
 8003f64:	e010      	b.n	8003f88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7fe fbbf 	bl	80026f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d202      	bcs.n	8003f88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000ce4 	.word	0x20000ce4
 8003f94:	2000080c 	.word	0x2000080c
 8003f98:	20000ccc 	.word	0x20000ccc
 8003f9c:	20000c9c 	.word	0x20000c9c
 8003fa0:	20000c98 	.word	0x20000c98
 8003fa4:	20000d00 	.word	0x20000d00

08003fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fb2:	f000 faff 	bl	80045b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <xTimerCreateTimerTask+0x80>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d021      	beq.n	8004002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fc6:	1d3a      	adds	r2, r7, #4
 8003fc8:	f107 0108 	add.w	r1, r7, #8
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fb25 	bl	8002620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	9202      	str	r2, [sp, #8]
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	4910      	ldr	r1, [pc, #64]	; (800402c <xTimerCreateTimerTask+0x84>)
 8003fea:	4811      	ldr	r0, [pc, #68]	; (8004030 <xTimerCreateTimerTask+0x88>)
 8003fec:	f7ff f8fa 	bl	80031e4 <xTaskCreateStatic>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <xTimerCreateTimerTask+0x8c>)
 8003ff4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <xTimerCreateTimerTask+0x8c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ffe:	2301      	movs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <xTimerCreateTimerTask+0x74>
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e7fe      	b.n	800401a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800401c:	697b      	ldr	r3, [r7, #20]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000d3c 	.word	0x20000d3c
 800402c:	08005e14 	.word	0x08005e14
 8004030:	08004169 	.word	0x08004169
 8004034:	20000d40 	.word	0x20000d40

08004038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004046:	2300      	movs	r3, #0
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <xTimerGenericCommand+0x2c>
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	e7fe      	b.n	8004062 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <xTimerGenericCommand+0x94>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02a      	beq.n	80040c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b05      	cmp	r3, #5
 800407c:	dc18      	bgt.n	80040b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800407e:	f7ff feb5 	bl	8003dec <xTaskGetSchedulerState>
 8004082:	4603      	mov	r3, r0
 8004084:	2b02      	cmp	r3, #2
 8004086:	d109      	bne.n	800409c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <xTimerGenericCommand+0x94>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	f107 0110 	add.w	r1, r7, #16
 8004090:	2300      	movs	r3, #0
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	f7fe fcd0 	bl	8002a38 <xQueueGenericSend>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24
 800409a:	e012      	b.n	80040c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <xTimerGenericCommand+0x94>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f107 0110 	add.w	r1, r7, #16
 80040a4:	2300      	movs	r3, #0
 80040a6:	2200      	movs	r2, #0
 80040a8:	f7fe fcc6 	bl	8002a38 <xQueueGenericSend>
 80040ac:	6278      	str	r0, [r7, #36]	; 0x24
 80040ae:	e008      	b.n	80040c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <xTimerGenericCommand+0x94>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	f107 0110 	add.w	r1, r7, #16
 80040b8:	2300      	movs	r3, #0
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	f7fe fdb6 	bl	8002c2c <xQueueGenericSendFromISR>
 80040c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3728      	adds	r7, #40	; 0x28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000d3c 	.word	0x20000d3c

080040d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <prvProcessExpiredTimer+0x94>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fb3d 	bl	8002768 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d021      	beq.n	8004140 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	18d1      	adds	r1, r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	6978      	ldr	r0, [r7, #20]
 800410a:	f000 f8d1 	bl	80042b0 <prvInsertTimerInActiveList>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01e      	beq.n	8004152 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004114:	2300      	movs	r3, #0
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2300      	movs	r3, #0
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	2100      	movs	r1, #0
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff8a 	bl	8004038 <xTimerGenericCommand>
 8004124:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d112      	bne.n	8004152 <prvProcessExpiredTimer+0x82>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e7fe      	b.n	800413e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	4798      	blx	r3
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000d34 	.word	0x20000d34

08004168 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004170:	f107 0308 	add.w	r3, r7, #8
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f857 	bl	8004228 <prvGetNextExpireTime>
 800417a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4619      	mov	r1, r3
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f803 	bl	800418c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004186:	f000 f8d5 	bl	8004334 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800418a:	e7f1      	b.n	8004170 <prvTimerTask+0x8>

0800418c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004196:	f7ff fa49 	bl	800362c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f866 	bl	8004270 <prvSampleTimeNow>
 80041a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d130      	bne.n	800420e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d806      	bhi.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041ba:	f7ff fa45 	bl	8003648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff85 	bl	80040d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041c6:	e024      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <prvProcessTimerOrBlockTask+0x90>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <prvProcessTimerOrBlockTask+0x50>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <prvProcessTimerOrBlockTask+0x52>
 80041dc:	2300      	movs	r3, #0
 80041de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <prvProcessTimerOrBlockTask+0x94>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fe ffc5 	bl	800317c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f7ff fa29 	bl	8003648 <xTaskResumeAll>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <prvProcessTimerOrBlockTask+0x98>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
}
 800420c:	e001      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800420e:	f7ff fa1b 	bl	8003648 <xTaskResumeAll>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000d38 	.word	0x20000d38
 8004220:	20000d3c 	.word	0x20000d3c
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <prvGetNextExpireTime+0x44>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <prvGetNextExpireTime+0x16>
 800423a:	2201      	movs	r2, #1
 800423c:	e000      	b.n	8004240 <prvGetNextExpireTime+0x18>
 800423e:	2200      	movs	r2, #0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800424c:	4b07      	ldr	r3, [pc, #28]	; (800426c <prvGetNextExpireTime+0x44>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e001      	b.n	800425c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000d34 	.word	0x20000d34

08004270 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004278:	f7ff fa82 	bl	8003780 <xTaskGetTickCount>
 800427c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <prvSampleTimeNow+0x3c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	429a      	cmp	r2, r3
 8004286:	d205      	bcs.n	8004294 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004288:	f000 f930 	bl	80044ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e002      	b.n	800429a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800429a:	4a04      	ldr	r2, [pc, #16]	; (80042ac <prvSampleTimeNow+0x3c>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042a0:	68fb      	ldr	r3, [r7, #12]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000d44 	.word	0x20000d44

080042b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d812      	bhi.n	80042fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e01b      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <prvInsertTimerInActiveList+0x7c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe f9fe 	bl	80026f6 <vListInsert>
 80042fa:	e012      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d206      	bcs.n	8004312 <prvInsertTimerInActiveList+0x62>
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e007      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <prvInsertTimerInActiveList+0x80>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe f9ea 	bl	80026f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004322:	697b      	ldr	r3, [r7, #20]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000d38 	.word	0x20000d38
 8004330:	20000d34 	.word	0x20000d34

08004334 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	; 0x38
 8004338:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800433a:	e0c6      	b.n	80044ca <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da17      	bge.n	8004372 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	3304      	adds	r3, #4
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <prvProcessReceivedCommands+0x2e>
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e7fe      	b.n	8004360 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004368:	6850      	ldr	r0, [r2, #4]
 800436a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436c:	6892      	ldr	r2, [r2, #8]
 800436e:	4611      	mov	r1, r2
 8004370:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f2c0 80a7 	blt.w	80044c8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	3304      	adds	r3, #4
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe f9ec 	bl	8002768 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004390:	463b      	mov	r3, r7
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff6c 	bl	8004270 <prvSampleTimeNow>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b09      	cmp	r3, #9
 800439e:	f200 8094 	bhi.w	80044ca <prvProcessReceivedCommands+0x196>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <prvProcessReceivedCommands+0x74>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043d1 	.word	0x080043d1
 80043b4:	08004443 	.word	0x08004443
 80043b8:	08004457 	.word	0x08004457
 80043bc:	0800449f 	.word	0x0800449f
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043d1 	.word	0x080043d1
 80043c8:	08004443 	.word	0x08004443
 80043cc:	08004457 	.word	0x08004457
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	18d1      	adds	r1, r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043f0:	f7ff ff5e 	bl	80042b0 <prvInsertTimerInActiveList>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d067      	beq.n	80044ca <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d05c      	beq.n	80044ca <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	441a      	add	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	2100      	movs	r1, #0
 8004420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004422:	f7ff fe09 	bl	8004038 <xTimerGenericCommand>
 8004426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d14d      	bne.n	80044ca <prvProcessReceivedCommands+0x196>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e7fe      	b.n	8004440 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004454:	e039      	b.n	80044ca <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <prvProcessReceivedCommands+0x156>
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e7fe      	b.n	8004488 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	18d1      	adds	r1, r2, r3
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004498:	f7ff ff0a 	bl	80042b0 <prvInsertTimerInActiveList>
					break;
 800449c:	e015      	b.n	80044ca <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80044ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ae:	f000 fbc1 	bl	8004c34 <vPortFree>
 80044b2:	e00a      	b.n	80044ca <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044c6:	e000      	b.n	80044ca <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <prvProcessReceivedCommands+0x1b4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	1d39      	adds	r1, r7, #4
 80044d0:	2200      	movs	r2, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fc3e 	bl	8002d54 <xQueueReceive>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f47f af2e 	bne.w	800433c <prvProcessReceivedCommands+0x8>
	}
}
 80044e0:	bf00      	nop
 80044e2:	3730      	adds	r7, #48	; 0x30
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000d3c 	.word	0x20000d3c

080044ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044f2:	e047      	b.n	8004584 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044f4:	4b2d      	ldr	r3, [pc, #180]	; (80045ac <prvSwitchTimerLists+0xc0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044fe:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <prvSwitchTimerLists+0xc0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe f92b 	bl	8002768 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02d      	beq.n	8004584 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	429a      	cmp	r2, r3
 8004538:	d90e      	bls.n	8004558 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004546:	4b19      	ldr	r3, [pc, #100]	; (80045ac <prvSwitchTimerLists+0xc0>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe f8d0 	bl	80026f6 <vListInsert>
 8004556:	e015      	b.n	8004584 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	2100      	movs	r1, #0
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff fd68 	bl	8004038 <xTimerGenericCommand>
 8004568:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <prvSwitchTimerLists+0x98>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	e7fe      	b.n	8004582 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <prvSwitchTimerLists+0xc0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1b2      	bne.n	80044f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <prvSwitchTimerLists+0xc0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <prvSwitchTimerLists+0xc4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a04      	ldr	r2, [pc, #16]	; (80045ac <prvSwitchTimerLists+0xc0>)
 800459a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <prvSwitchTimerLists+0xc4>)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6013      	str	r3, [r2, #0]
}
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000d34 	.word	0x20000d34
 80045b0:	20000d38 	.word	0x20000d38

080045b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045ba:	f000 f95f 	bl	800487c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <prvCheckForValidListAndQueue+0x60>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d120      	bne.n	8004608 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045c6:	4814      	ldr	r0, [pc, #80]	; (8004618 <prvCheckForValidListAndQueue+0x64>)
 80045c8:	f7fe f844 	bl	8002654 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045cc:	4813      	ldr	r0, [pc, #76]	; (800461c <prvCheckForValidListAndQueue+0x68>)
 80045ce:	f7fe f841 	bl	8002654 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <prvCheckForValidListAndQueue+0x6c>)
 80045d4:	4a10      	ldr	r2, [pc, #64]	; (8004618 <prvCheckForValidListAndQueue+0x64>)
 80045d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <prvCheckForValidListAndQueue+0x70>)
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <prvCheckForValidListAndQueue+0x68>)
 80045dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045de:	2300      	movs	r3, #0
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <prvCheckForValidListAndQueue+0x74>)
 80045e4:	4a11      	ldr	r2, [pc, #68]	; (800462c <prvCheckForValidListAndQueue+0x78>)
 80045e6:	2110      	movs	r1, #16
 80045e8:	200a      	movs	r0, #10
 80045ea:	f7fe f94f 	bl	800288c <xQueueGenericCreateStatic>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <prvCheckForValidListAndQueue+0x60>)
 80045f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <prvCheckForValidListAndQueue+0x60>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <prvCheckForValidListAndQueue+0x60>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	490b      	ldr	r1, [pc, #44]	; (8004630 <prvCheckForValidListAndQueue+0x7c>)
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fd92 	bl	800312c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004608:	f000 f966 	bl	80048d8 <vPortExitCritical>
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000d3c 	.word	0x20000d3c
 8004618:	20000d0c 	.word	0x20000d0c
 800461c:	20000d20 	.word	0x20000d20
 8004620:	20000d34 	.word	0x20000d34
 8004624:	20000d38 	.word	0x20000d38
 8004628:	20000de8 	.word	0x20000de8
 800462c:	20000d48 	.word	0x20000d48
 8004630:	08005e1c 	.word	0x08005e1c

08004634 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b04      	subs	r3, #4
 8004644:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800464c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b04      	subs	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0201 	bic.w	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004664:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <pxPortInitialiseStack+0x64>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b14      	subs	r3, #20
 800466e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f06f 0202 	mvn.w	r2, #2
 8004682:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b20      	subs	r3, #32
 8004688:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	0800469d 	.word	0x0800469d

0800469c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <prvTaskExitError+0x50>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d009      	beq.n	80046c4 <prvTaskExitError+0x28>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e7fe      	b.n	80046c2 <prvTaskExitError+0x26>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046d6:	bf00      	nop
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0fc      	beq.n	80046d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	2000000c 	.word	0x2000000c

080046f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <pxCurrentTCBConst2>)
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	f380 8809 	msr	PSP, r0
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	4770      	bx	lr
 800470c:	f3af 8000 	nop.w

08004710 <pxCurrentTCBConst2>:
 8004710:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004718:	4808      	ldr	r0, [pc, #32]	; (800473c <prvPortStartFirstTask+0x24>)
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	6800      	ldr	r0, [r0, #0]
 800471e:	f380 8808 	msr	MSP, r0
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8814 	msr	CONTROL, r0
 800472a:	b662      	cpsie	i
 800472c:	b661      	cpsie	f
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	df00      	svc	0
 8004738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800473a:	bf00      	nop
 800473c:	e000ed08 	.word	0xe000ed08

08004740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004746:	4b44      	ldr	r3, [pc, #272]	; (8004858 <xPortStartScheduler+0x118>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a44      	ldr	r2, [pc, #272]	; (800485c <xPortStartScheduler+0x11c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d109      	bne.n	8004764 <xPortStartScheduler+0x24>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e7fe      	b.n	8004762 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004764:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <xPortStartScheduler+0x118>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3d      	ldr	r2, [pc, #244]	; (8004860 <xPortStartScheduler+0x120>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d109      	bne.n	8004782 <xPortStartScheduler+0x42>
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e7fe      	b.n	8004780 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004782:	4b38      	ldr	r3, [pc, #224]	; (8004864 <xPortStartScheduler+0x124>)
 8004784:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4b30      	ldr	r3, [pc, #192]	; (8004868 <xPortStartScheduler+0x128>)
 80047a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047aa:	4b30      	ldr	r3, [pc, #192]	; (800486c <xPortStartScheduler+0x12c>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047b0:	e009      	b.n	80047c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <xPortStartScheduler+0x12c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4a2c      	ldr	r2, [pc, #176]	; (800486c <xPortStartScheduler+0x12c>)
 80047ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b80      	cmp	r3, #128	; 0x80
 80047d0:	d0ef      	beq.n	80047b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <xPortStartScheduler+0x12c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f1c3 0307 	rsb	r3, r3, #7
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d009      	beq.n	80047f2 <xPortStartScheduler+0xb2>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	e7fe      	b.n	80047f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <xPortStartScheduler+0x12c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <xPortStartScheduler+0x12c>)
 80047fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <xPortStartScheduler+0x12c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <xPortStartScheduler+0x12c>)
 8004806:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <xPortStartScheduler+0x130>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a16      	ldr	r2, [pc, #88]	; (8004870 <xPortStartScheduler+0x130>)
 8004816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800481a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <xPortStartScheduler+0x130>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <xPortStartScheduler+0x130>)
 8004822:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004826:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004828:	f000 f8d6 	bl	80049d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <xPortStartScheduler+0x134>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004832:	f000 f8f5 	bl	8004a20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <xPortStartScheduler+0x138>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <xPortStartScheduler+0x138>)
 800483c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004840:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004842:	f7ff ff69 	bl	8004718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004846:	f7ff f863 	bl	8003910 <vTaskSwitchContext>
	prvTaskExitError();
 800484a:	f7ff ff27 	bl	800469c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed00 	.word	0xe000ed00
 800485c:	410fc271 	.word	0x410fc271
 8004860:	410fc270 	.word	0x410fc270
 8004864:	e000e400 	.word	0xe000e400
 8004868:	20000e38 	.word	0x20000e38
 800486c:	20000e3c 	.word	0x20000e3c
 8004870:	e000ed20 	.word	0xe000ed20
 8004874:	2000000c 	.word	0x2000000c
 8004878:	e000ef34 	.word	0xe000ef34

0800487c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <vPortEnterCritical+0x54>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a0d      	ldr	r2, [pc, #52]	; (80048d0 <vPortEnterCritical+0x54>)
 800489c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <vPortEnterCritical+0x54>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10e      	bne.n	80048c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <vPortEnterCritical+0x58>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <vPortEnterCritical+0x48>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	e7fe      	b.n	80048c2 <vPortEnterCritical+0x46>
	}
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	2000000c 	.word	0x2000000c
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <vPortExitCritical+0x4c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <vPortExitCritical+0x22>
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	e7fe      	b.n	80048f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <vPortExitCritical+0x4c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3b01      	subs	r3, #1
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <vPortExitCritical+0x4c>)
 8004902:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <vPortExitCritical+0x4c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <vPortExitCritical+0x3e>
 800490c:	2300      	movs	r3, #0
 800490e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c
	...

08004930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004930:	f3ef 8009 	mrs	r0, PSP
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <pxCurrentTCBConst>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f01e 0f10 	tst.w	lr, #16
 8004940:	bf08      	it	eq
 8004942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	6010      	str	r0, [r2, #0]
 800494c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004954:	f380 8811 	msr	BASEPRI, r0
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f7fe ffd6 	bl	8003910 <vTaskSwitchContext>
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f380 8811 	msr	BASEPRI, r0
 800496c:	bc09      	pop	{r0, r3}
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	6808      	ldr	r0, [r1, #0]
 8004972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004976:	f01e 0f10 	tst.w	lr, #16
 800497a:	bf08      	it	eq
 800497c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004980:	f380 8809 	msr	PSP, r0
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w

08004990 <pxCurrentTCBConst>:
 8004990:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop

08004998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049b0:	f7fe fef6 	bl	80037a0 <xTaskIncrementTick>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <SysTick_Handler+0x3c>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	e000ed04 	.word	0xe000ed04

080049d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <vPortSetupTimerInterrupt+0x34>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <vPortSetupTimerInterrupt+0x38>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <vPortSetupTimerInterrupt+0x3c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <vPortSetupTimerInterrupt+0x40>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <vPortSetupTimerInterrupt+0x44>)
 80049f6:	3b01      	subs	r3, #1
 80049f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049fa:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <vPortSetupTimerInterrupt+0x34>)
 80049fc:	2207      	movs	r2, #7
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e010 	.word	0xe000e010
 8004a10:	e000e018 	.word	0xe000e018
 8004a14:	20000000 	.word	0x20000000
 8004a18:	10624dd3 	.word	0x10624dd3
 8004a1c:	e000e014 	.word	0xe000e014

08004a20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a30 <vPortEnableVFP+0x10>
 8004a24:	6801      	ldr	r1, [r0, #0]
 8004a26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a2a:	6001      	str	r1, [r0, #0]
 8004a2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a2e:	bf00      	nop
 8004a30:	e000ed88 	.word	0xe000ed88

08004a34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a3a:	f3ef 8305 	mrs	r3, IPSR
 8004a3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d913      	bls.n	8004a6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <vPortValidateInterruptPriority+0x6c>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <vPortValidateInterruptPriority+0x70>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	7afa      	ldrb	r2, [r7, #11]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d209      	bcs.n	8004a6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e7fe      	b.n	8004a6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <vPortValidateInterruptPriority+0x74>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <vPortValidateInterruptPriority+0x78>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d909      	bls.n	8004a92 <vPortValidateInterruptPriority+0x5e>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	e7fe      	b.n	8004a90 <vPortValidateInterruptPriority+0x5c>
	}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e3f0 	.word	0xe000e3f0
 8004aa4:	20000e38 	.word	0x20000e38
 8004aa8:	e000ed0c 	.word	0xe000ed0c
 8004aac:	20000e3c 	.word	0x20000e3c

08004ab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004abc:	f7fe fdb6 	bl	800362c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ac0:	4b57      	ldr	r3, [pc, #348]	; (8004c20 <pvPortMalloc+0x170>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ac8:	f000 f90c 	bl	8004ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <pvPortMalloc+0x174>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 808c 	bne.w	8004bf2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d013      	beq.n	8004b1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f023 0307 	bic.w	r3, r3, #7
 8004af8:	3308      	adds	r3, #8
 8004afa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <pvPortMalloc+0x6a>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e7fe      	b.n	8004b18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d068      	beq.n	8004bf2 <pvPortMalloc+0x142>
 8004b20:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <pvPortMalloc+0x178>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d863      	bhi.n	8004bf2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b2a:	4b40      	ldr	r3, [pc, #256]	; (8004c2c <pvPortMalloc+0x17c>)
 8004b2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b2e:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <pvPortMalloc+0x17c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b34:	e004      	b.n	8004b40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d903      	bls.n	8004b52 <pvPortMalloc+0xa2>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f1      	bne.n	8004b36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b52:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <pvPortMalloc+0x170>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d04a      	beq.n	8004bf2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2208      	movs	r2, #8
 8004b62:	4413      	add	r3, r2
 8004b64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad2      	subs	r2, r2, r3
 8004b76:	2308      	movs	r3, #8
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d91e      	bls.n	8004bbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <pvPortMalloc+0xf4>
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e7fe      	b.n	8004ba2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bb6:	69b8      	ldr	r0, [r7, #24]
 8004bb8:	f000 f8f6 	bl	8004da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <pvPortMalloc+0x178>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <pvPortMalloc+0x178>)
 8004bc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <pvPortMalloc+0x178>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <pvPortMalloc+0x180>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d203      	bcs.n	8004bde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <pvPortMalloc+0x178>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <pvPortMalloc+0x180>)
 8004bdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <pvPortMalloc+0x174>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bf2:	f7fe fd29 	bl	8003648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <pvPortMalloc+0x164>
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0x162>
	return pvReturn;
 8004c14:	69fb      	ldr	r3, [r7, #28]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3728      	adds	r7, #40	; 0x28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20004a48 	.word	0x20004a48
 8004c24:	20004a54 	.word	0x20004a54
 8004c28:	20004a4c 	.word	0x20004a4c
 8004c2c:	20004a40 	.word	0x20004a40
 8004c30:	20004a50 	.word	0x20004a50

08004c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d046      	beq.n	8004cd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c46:	2308      	movs	r3, #8
 8004c48:	425b      	negs	r3, r3
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <vPortFree+0xa8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <vPortFree+0x42>
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e7fe      	b.n	8004c74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <vPortFree+0x5e>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	e7fe      	b.n	8004c90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <vPortFree+0xa8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d019      	beq.n	8004cd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d115      	bne.n	8004cd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <vPortFree+0xa8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cb8:	f7fe fcb8 	bl	800362c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <vPortFree+0xac>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4a06      	ldr	r2, [pc, #24]	; (8004ce0 <vPortFree+0xac>)
 8004cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cca:	6938      	ldr	r0, [r7, #16]
 8004ccc:	f000 f86c 	bl	8004da8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cd0:	f7fe fcba 	bl	8003648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20004a54 	.word	0x20004a54
 8004ce0:	20004a4c 	.word	0x20004a4c

08004ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <prvHeapInit+0xac>)
 8004cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3307      	adds	r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0307 	bic.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <prvHeapInit+0xac>)
 8004d14:	4413      	add	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <prvHeapInit+0xb0>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <prvHeapInit+0xb0>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d30:	2208      	movs	r2, #8
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0307 	bic.w	r3, r3, #7
 8004d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <prvHeapInit+0xb4>)
 8004d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <prvHeapInit+0xb4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <prvHeapInit+0xb4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <prvHeapInit+0xb4>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <prvHeapInit+0xb8>)
 8004d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <prvHeapInit+0xbc>)
 8004d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <prvHeapInit+0xc0>)
 8004d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d82:	601a      	str	r2, [r3, #0]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000e40 	.word	0x20000e40
 8004d94:	20004a40 	.word	0x20004a40
 8004d98:	20004a48 	.word	0x20004a48
 8004d9c:	20004a50 	.word	0x20004a50
 8004da0:	20004a4c 	.word	0x20004a4c
 8004da4:	20004a54 	.word	0x20004a54

08004da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004db0:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <prvInsertBlockIntoFreeList+0xac>)
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e002      	b.n	8004dbc <prvInsertBlockIntoFreeList+0x14>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d8f7      	bhi.n	8004db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d108      	bne.n	8004dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	441a      	add	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d118      	bne.n	8004e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <prvInsertBlockIntoFreeList+0xb0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d00d      	beq.n	8004e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e008      	b.n	8004e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <prvInsertBlockIntoFreeList+0xb0>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e003      	b.n	8004e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d002      	beq.n	8004e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20004a40 	.word	0x20004a40
 8004e58:	20004a48 	.word	0x20004a48

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	; (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000010 	.word	0x20000010

08004e68 <std>:
 8004e68:	2300      	movs	r3, #0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e72:	6083      	str	r3, [r0, #8]
 8004e74:	8181      	strh	r1, [r0, #12]
 8004e76:	6643      	str	r3, [r0, #100]	; 0x64
 8004e78:	81c2      	strh	r2, [r0, #14]
 8004e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e7e:	6183      	str	r3, [r0, #24]
 8004e80:	4619      	mov	r1, r3
 8004e82:	2208      	movs	r2, #8
 8004e84:	305c      	adds	r0, #92	; 0x5c
 8004e86:	f000 f8e8 	bl	800505a <memset>
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <std+0x38>)
 8004e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x3c>)
 8004e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <std+0x40>)
 8004e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <std+0x44>)
 8004e98:	6224      	str	r4, [r4, #32]
 8004e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08005245 	.word	0x08005245
 8004ea4:	08005267 	.word	0x08005267
 8004ea8:	0800529f 	.word	0x0800529f
 8004eac:	080052c3 	.word	0x080052c3

08004eb0 <_cleanup_r>:
 8004eb0:	4901      	ldr	r1, [pc, #4]	; (8004eb8 <_cleanup_r+0x8>)
 8004eb2:	f000 b885 	b.w	8004fc0 <_fwalk_reent>
 8004eb6:	bf00      	nop
 8004eb8:	0800541d 	.word	0x0800541d

08004ebc <__sfmoreglue>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	1e4a      	subs	r2, r1, #1
 8004ec0:	2568      	movs	r5, #104	; 0x68
 8004ec2:	4355      	muls	r5, r2
 8004ec4:	460e      	mov	r6, r1
 8004ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eca:	f000 f8cf 	bl	800506c <_malloc_r>
 8004ece:	4604      	mov	r4, r0
 8004ed0:	b140      	cbz	r0, 8004ee4 <__sfmoreglue+0x28>
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ed8:	300c      	adds	r0, #12
 8004eda:	60a0      	str	r0, [r4, #8]
 8004edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ee0:	f000 f8bb 	bl	800505a <memset>
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}

08004ee8 <__sinit>:
 8004ee8:	6983      	ldr	r3, [r0, #24]
 8004eea:	b510      	push	{r4, lr}
 8004eec:	4604      	mov	r4, r0
 8004eee:	bb33      	cbnz	r3, 8004f3e <__sinit+0x56>
 8004ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <__sinit+0x58>)
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <__sinit+0x5c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6282      	str	r2, [r0, #40]	; 0x28
 8004efe:	4298      	cmp	r0, r3
 8004f00:	bf04      	itt	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	6183      	streq	r3, [r0, #24]
 8004f06:	f000 f81f 	bl	8004f48 <__sfp>
 8004f0a:	6060      	str	r0, [r4, #4]
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 f81b 	bl	8004f48 <__sfp>
 8004f12:	60a0      	str	r0, [r4, #8]
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 f817 	bl	8004f48 <__sfp>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	60e0      	str	r0, [r4, #12]
 8004f1e:	2104      	movs	r1, #4
 8004f20:	6860      	ldr	r0, [r4, #4]
 8004f22:	f7ff ffa1 	bl	8004e68 <std>
 8004f26:	2201      	movs	r2, #1
 8004f28:	2109      	movs	r1, #9
 8004f2a:	68a0      	ldr	r0, [r4, #8]
 8004f2c:	f7ff ff9c 	bl	8004e68 <std>
 8004f30:	2202      	movs	r2, #2
 8004f32:	2112      	movs	r1, #18
 8004f34:	68e0      	ldr	r0, [r4, #12]
 8004f36:	f7ff ff97 	bl	8004e68 <std>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61a3      	str	r3, [r4, #24]
 8004f3e:	bd10      	pop	{r4, pc}
 8004f40:	08005ea0 	.word	0x08005ea0
 8004f44:	08004eb1 	.word	0x08004eb1

08004f48 <__sfp>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <__sfp+0x70>)
 8004f4c:	681e      	ldr	r6, [r3, #0]
 8004f4e:	69b3      	ldr	r3, [r6, #24]
 8004f50:	4607      	mov	r7, r0
 8004f52:	b913      	cbnz	r3, 8004f5a <__sfp+0x12>
 8004f54:	4630      	mov	r0, r6
 8004f56:	f7ff ffc7 	bl	8004ee8 <__sinit>
 8004f5a:	3648      	adds	r6, #72	; 0x48
 8004f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	d503      	bpl.n	8004f6c <__sfp+0x24>
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	b133      	cbz	r3, 8004f76 <__sfp+0x2e>
 8004f68:	6836      	ldr	r6, [r6, #0]
 8004f6a:	e7f7      	b.n	8004f5c <__sfp+0x14>
 8004f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f70:	b16d      	cbz	r5, 8004f8e <__sfp+0x46>
 8004f72:	3468      	adds	r4, #104	; 0x68
 8004f74:	e7f4      	b.n	8004f60 <__sfp+0x18>
 8004f76:	2104      	movs	r1, #4
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f7ff ff9f 	bl	8004ebc <__sfmoreglue>
 8004f7e:	6030      	str	r0, [r6, #0]
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1f1      	bne.n	8004f68 <__sfp+0x20>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <__sfp+0x74>)
 8004f90:	6665      	str	r5, [r4, #100]	; 0x64
 8004f92:	e9c4 5500 	strd	r5, r5, [r4]
 8004f96:	60a5      	str	r5, [r4, #8]
 8004f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fa8:	f000 f857 	bl	800505a <memset>
 8004fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb4:	e7e9      	b.n	8004f8a <__sfp+0x42>
 8004fb6:	bf00      	nop
 8004fb8:	08005ea0 	.word	0x08005ea0
 8004fbc:	ffff0001 	.word	0xffff0001

08004fc0 <_fwalk_reent>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fcc:	2600      	movs	r6, #0
 8004fce:	b914      	cbnz	r4, 8004fd6 <_fwalk_reent+0x16>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004fda:	3f01      	subs	r7, #1
 8004fdc:	d501      	bpl.n	8004fe2 <_fwalk_reent+0x22>
 8004fde:	6824      	ldr	r4, [r4, #0]
 8004fe0:	e7f5      	b.n	8004fce <_fwalk_reent+0xe>
 8004fe2:	89ab      	ldrh	r3, [r5, #12]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d907      	bls.n	8004ff8 <_fwalk_reent+0x38>
 8004fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fec:	3301      	adds	r3, #1
 8004fee:	d003      	beq.n	8004ff8 <_fwalk_reent+0x38>
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	47c8      	blx	r9
 8004ff6:	4306      	orrs	r6, r0
 8004ff8:	3568      	adds	r5, #104	; 0x68
 8004ffa:	e7ee      	b.n	8004fda <_fwalk_reent+0x1a>

08004ffc <__libc_init_array>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4e0d      	ldr	r6, [pc, #52]	; (8005034 <__libc_init_array+0x38>)
 8005000:	4c0d      	ldr	r4, [pc, #52]	; (8005038 <__libc_init_array+0x3c>)
 8005002:	1ba4      	subs	r4, r4, r6
 8005004:	10a4      	asrs	r4, r4, #2
 8005006:	2500      	movs	r5, #0
 8005008:	42a5      	cmp	r5, r4
 800500a:	d109      	bne.n	8005020 <__libc_init_array+0x24>
 800500c:	4e0b      	ldr	r6, [pc, #44]	; (800503c <__libc_init_array+0x40>)
 800500e:	4c0c      	ldr	r4, [pc, #48]	; (8005040 <__libc_init_array+0x44>)
 8005010:	f000 feb0 	bl	8005d74 <_init>
 8005014:	1ba4      	subs	r4, r4, r6
 8005016:	10a4      	asrs	r4, r4, #2
 8005018:	2500      	movs	r5, #0
 800501a:	42a5      	cmp	r5, r4
 800501c:	d105      	bne.n	800502a <__libc_init_array+0x2e>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005024:	4798      	blx	r3
 8005026:	3501      	adds	r5, #1
 8005028:	e7ee      	b.n	8005008 <__libc_init_array+0xc>
 800502a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800502e:	4798      	blx	r3
 8005030:	3501      	adds	r5, #1
 8005032:	e7f2      	b.n	800501a <__libc_init_array+0x1e>
 8005034:	08005ee0 	.word	0x08005ee0
 8005038:	08005ee0 	.word	0x08005ee0
 800503c:	08005ee0 	.word	0x08005ee0
 8005040:	08005ee4 	.word	0x08005ee4

08005044 <memcpy>:
 8005044:	b510      	push	{r4, lr}
 8005046:	1e43      	subs	r3, r0, #1
 8005048:	440a      	add	r2, r1
 800504a:	4291      	cmp	r1, r2
 800504c:	d100      	bne.n	8005050 <memcpy+0xc>
 800504e:	bd10      	pop	{r4, pc}
 8005050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005054:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005058:	e7f7      	b.n	800504a <memcpy+0x6>

0800505a <memset>:
 800505a:	4402      	add	r2, r0
 800505c:	4603      	mov	r3, r0
 800505e:	4293      	cmp	r3, r2
 8005060:	d100      	bne.n	8005064 <memset+0xa>
 8005062:	4770      	bx	lr
 8005064:	f803 1b01 	strb.w	r1, [r3], #1
 8005068:	e7f9      	b.n	800505e <memset+0x4>
	...

0800506c <_malloc_r>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	1ccd      	adds	r5, r1, #3
 8005070:	f025 0503 	bic.w	r5, r5, #3
 8005074:	3508      	adds	r5, #8
 8005076:	2d0c      	cmp	r5, #12
 8005078:	bf38      	it	cc
 800507a:	250c      	movcc	r5, #12
 800507c:	2d00      	cmp	r5, #0
 800507e:	4606      	mov	r6, r0
 8005080:	db01      	blt.n	8005086 <_malloc_r+0x1a>
 8005082:	42a9      	cmp	r1, r5
 8005084:	d903      	bls.n	800508e <_malloc_r+0x22>
 8005086:	230c      	movs	r3, #12
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	2000      	movs	r0, #0
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	f000 fa01 	bl	8005494 <__malloc_lock>
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <_malloc_r+0xac>)
 8005094:	6814      	ldr	r4, [r2, #0]
 8005096:	4621      	mov	r1, r4
 8005098:	b991      	cbnz	r1, 80050c0 <_malloc_r+0x54>
 800509a:	4c20      	ldr	r4, [pc, #128]	; (800511c <_malloc_r+0xb0>)
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	b91b      	cbnz	r3, 80050a8 <_malloc_r+0x3c>
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 f8bf 	bl	8005224 <_sbrk_r>
 80050a6:	6020      	str	r0, [r4, #0]
 80050a8:	4629      	mov	r1, r5
 80050aa:	4630      	mov	r0, r6
 80050ac:	f000 f8ba 	bl	8005224 <_sbrk_r>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d124      	bne.n	80050fe <_malloc_r+0x92>
 80050b4:	230c      	movs	r3, #12
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 f9ec 	bl	8005496 <__malloc_unlock>
 80050be:	e7e4      	b.n	800508a <_malloc_r+0x1e>
 80050c0:	680b      	ldr	r3, [r1, #0]
 80050c2:	1b5b      	subs	r3, r3, r5
 80050c4:	d418      	bmi.n	80050f8 <_malloc_r+0x8c>
 80050c6:	2b0b      	cmp	r3, #11
 80050c8:	d90f      	bls.n	80050ea <_malloc_r+0x7e>
 80050ca:	600b      	str	r3, [r1, #0]
 80050cc:	50cd      	str	r5, [r1, r3]
 80050ce:	18cc      	adds	r4, r1, r3
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 f9e0 	bl	8005496 <__malloc_unlock>
 80050d6:	f104 000b 	add.w	r0, r4, #11
 80050da:	1d23      	adds	r3, r4, #4
 80050dc:	f020 0007 	bic.w	r0, r0, #7
 80050e0:	1ac3      	subs	r3, r0, r3
 80050e2:	d0d3      	beq.n	800508c <_malloc_r+0x20>
 80050e4:	425a      	negs	r2, r3
 80050e6:	50e2      	str	r2, [r4, r3]
 80050e8:	e7d0      	b.n	800508c <_malloc_r+0x20>
 80050ea:	428c      	cmp	r4, r1
 80050ec:	684b      	ldr	r3, [r1, #4]
 80050ee:	bf16      	itet	ne
 80050f0:	6063      	strne	r3, [r4, #4]
 80050f2:	6013      	streq	r3, [r2, #0]
 80050f4:	460c      	movne	r4, r1
 80050f6:	e7eb      	b.n	80050d0 <_malloc_r+0x64>
 80050f8:	460c      	mov	r4, r1
 80050fa:	6849      	ldr	r1, [r1, #4]
 80050fc:	e7cc      	b.n	8005098 <_malloc_r+0x2c>
 80050fe:	1cc4      	adds	r4, r0, #3
 8005100:	f024 0403 	bic.w	r4, r4, #3
 8005104:	42a0      	cmp	r0, r4
 8005106:	d005      	beq.n	8005114 <_malloc_r+0xa8>
 8005108:	1a21      	subs	r1, r4, r0
 800510a:	4630      	mov	r0, r6
 800510c:	f000 f88a 	bl	8005224 <_sbrk_r>
 8005110:	3001      	adds	r0, #1
 8005112:	d0cf      	beq.n	80050b4 <_malloc_r+0x48>
 8005114:	6025      	str	r5, [r4, #0]
 8005116:	e7db      	b.n	80050d0 <_malloc_r+0x64>
 8005118:	20004a58 	.word	0x20004a58
 800511c:	20004a5c 	.word	0x20004a5c

08005120 <iprintf>:
 8005120:	b40f      	push	{r0, r1, r2, r3}
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <iprintf+0x2c>)
 8005124:	b513      	push	{r0, r1, r4, lr}
 8005126:	681c      	ldr	r4, [r3, #0]
 8005128:	b124      	cbz	r4, 8005134 <iprintf+0x14>
 800512a:	69a3      	ldr	r3, [r4, #24]
 800512c:	b913      	cbnz	r3, 8005134 <iprintf+0x14>
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff feda 	bl	8004ee8 <__sinit>
 8005134:	ab05      	add	r3, sp, #20
 8005136:	9a04      	ldr	r2, [sp, #16]
 8005138:	68a1      	ldr	r1, [r4, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	4620      	mov	r0, r4
 800513e:	f000 fa23 	bl	8005588 <_vfiprintf_r>
 8005142:	b002      	add	sp, #8
 8005144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005148:	b004      	add	sp, #16
 800514a:	4770      	bx	lr
 800514c:	20000010 	.word	0x20000010

08005150 <cleanup_glue>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	6809      	ldr	r1, [r1, #0]
 8005156:	4605      	mov	r5, r0
 8005158:	b109      	cbz	r1, 800515e <cleanup_glue+0xe>
 800515a:	f7ff fff9 	bl	8005150 <cleanup_glue>
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005166:	f000 b997 	b.w	8005498 <_free_r>
	...

0800516c <_reclaim_reent>:
 800516c:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <_reclaim_reent+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4283      	cmp	r3, r0
 8005172:	b570      	push	{r4, r5, r6, lr}
 8005174:	4604      	mov	r4, r0
 8005176:	d051      	beq.n	800521c <_reclaim_reent+0xb0>
 8005178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800517a:	b143      	cbz	r3, 800518e <_reclaim_reent+0x22>
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d14a      	bne.n	8005218 <_reclaim_reent+0xac>
 8005182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	b111      	cbz	r1, 800518e <_reclaim_reent+0x22>
 8005188:	4620      	mov	r0, r4
 800518a:	f000 f985 	bl	8005498 <_free_r>
 800518e:	6961      	ldr	r1, [r4, #20]
 8005190:	b111      	cbz	r1, 8005198 <_reclaim_reent+0x2c>
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f980 	bl	8005498 <_free_r>
 8005198:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800519a:	b111      	cbz	r1, 80051a2 <_reclaim_reent+0x36>
 800519c:	4620      	mov	r0, r4
 800519e:	f000 f97b 	bl	8005498 <_free_r>
 80051a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051a4:	b111      	cbz	r1, 80051ac <_reclaim_reent+0x40>
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f976 	bl	8005498 <_free_r>
 80051ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051ae:	b111      	cbz	r1, 80051b6 <_reclaim_reent+0x4a>
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 f971 	bl	8005498 <_free_r>
 80051b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80051b8:	b111      	cbz	r1, 80051c0 <_reclaim_reent+0x54>
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 f96c 	bl	8005498 <_free_r>
 80051c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80051c2:	b111      	cbz	r1, 80051ca <_reclaim_reent+0x5e>
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 f967 	bl	8005498 <_free_r>
 80051ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80051cc:	b111      	cbz	r1, 80051d4 <_reclaim_reent+0x68>
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f962 	bl	8005498 <_free_r>
 80051d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d6:	b111      	cbz	r1, 80051de <_reclaim_reent+0x72>
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f95d 	bl	8005498 <_free_r>
 80051de:	69a3      	ldr	r3, [r4, #24]
 80051e0:	b1e3      	cbz	r3, 800521c <_reclaim_reent+0xb0>
 80051e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051e4:	4620      	mov	r0, r4
 80051e6:	4798      	blx	r3
 80051e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80051ea:	b1b9      	cbz	r1, 800521c <_reclaim_reent+0xb0>
 80051ec:	4620      	mov	r0, r4
 80051ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051f2:	f7ff bfad 	b.w	8005150 <cleanup_glue>
 80051f6:	5949      	ldr	r1, [r1, r5]
 80051f8:	b941      	cbnz	r1, 800520c <_reclaim_reent+0xa0>
 80051fa:	3504      	adds	r5, #4
 80051fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051fe:	2d80      	cmp	r5, #128	; 0x80
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	d1f8      	bne.n	80051f6 <_reclaim_reent+0x8a>
 8005204:	4620      	mov	r0, r4
 8005206:	f000 f947 	bl	8005498 <_free_r>
 800520a:	e7ba      	b.n	8005182 <_reclaim_reent+0x16>
 800520c:	680e      	ldr	r6, [r1, #0]
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f942 	bl	8005498 <_free_r>
 8005214:	4631      	mov	r1, r6
 8005216:	e7ef      	b.n	80051f8 <_reclaim_reent+0x8c>
 8005218:	2500      	movs	r5, #0
 800521a:	e7ef      	b.n	80051fc <_reclaim_reent+0x90>
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	bf00      	nop
 8005220:	20000010 	.word	0x20000010

08005224 <_sbrk_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4c06      	ldr	r4, [pc, #24]	; (8005240 <_sbrk_r+0x1c>)
 8005228:	2300      	movs	r3, #0
 800522a:	4605      	mov	r5, r0
 800522c:	4608      	mov	r0, r1
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	f7fb fc74 	bl	8000b1c <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_sbrk_r+0x1a>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	b103      	cbz	r3, 800523e <_sbrk_r+0x1a>
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20004b34 	.word	0x20004b34

08005244 <__sread>:
 8005244:	b510      	push	{r4, lr}
 8005246:	460c      	mov	r4, r1
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	f000 fc3a 	bl	8005ac4 <_read_r>
 8005250:	2800      	cmp	r0, #0
 8005252:	bfab      	itete	ge
 8005254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005256:	89a3      	ldrhlt	r3, [r4, #12]
 8005258:	181b      	addge	r3, r3, r0
 800525a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800525e:	bfac      	ite	ge
 8005260:	6563      	strge	r3, [r4, #84]	; 0x54
 8005262:	81a3      	strhlt	r3, [r4, #12]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__swrite>:
 8005266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	461f      	mov	r7, r3
 800526c:	898b      	ldrh	r3, [r1, #12]
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	4605      	mov	r5, r0
 8005272:	460c      	mov	r4, r1
 8005274:	4616      	mov	r6, r2
 8005276:	d505      	bpl.n	8005284 <__swrite+0x1e>
 8005278:	2302      	movs	r3, #2
 800527a:	2200      	movs	r2, #0
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	f000 f8f6 	bl	8005470 <_lseek_r>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	4632      	mov	r2, r6
 8005292:	463b      	mov	r3, r7
 8005294:	4628      	mov	r0, r5
 8005296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	f000 b817 	b.w	80052cc <_write_r>

0800529e <__sseek>:
 800529e:	b510      	push	{r4, lr}
 80052a0:	460c      	mov	r4, r1
 80052a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a6:	f000 f8e3 	bl	8005470 <_lseek_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	bf15      	itete	ne
 80052b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ba:	81a3      	strheq	r3, [r4, #12]
 80052bc:	bf18      	it	ne
 80052be:	81a3      	strhne	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__sclose>:
 80052c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c6:	f000 b813 	b.w	80052f0 <_close_r>
	...

080052cc <_write_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4c07      	ldr	r4, [pc, #28]	; (80052ec <_write_r+0x20>)
 80052d0:	4605      	mov	r5, r0
 80052d2:	4608      	mov	r0, r1
 80052d4:	4611      	mov	r1, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	6022      	str	r2, [r4, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fb fbcd 	bl	8000a7a <_write>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_write_r+0x1e>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_write_r+0x1e>
 80052e8:	602b      	str	r3, [r5, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20004b34 	.word	0x20004b34

080052f0 <_close_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4c06      	ldr	r4, [pc, #24]	; (800530c <_close_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4605      	mov	r5, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	f7fb fbd9 	bl	8000ab2 <_close>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_close_r+0x1a>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	b103      	cbz	r3, 800530a <_close_r+0x1a>
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	20004b34 	.word	0x20004b34

08005310 <__sflush_r>:
 8005310:	898a      	ldrh	r2, [r1, #12]
 8005312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005316:	4605      	mov	r5, r0
 8005318:	0710      	lsls	r0, r2, #28
 800531a:	460c      	mov	r4, r1
 800531c:	d458      	bmi.n	80053d0 <__sflush_r+0xc0>
 800531e:	684b      	ldr	r3, [r1, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dc05      	bgt.n	8005330 <__sflush_r+0x20>
 8005324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	dc02      	bgt.n	8005330 <__sflush_r+0x20>
 800532a:	2000      	movs	r0, #0
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005332:	2e00      	cmp	r6, #0
 8005334:	d0f9      	beq.n	800532a <__sflush_r+0x1a>
 8005336:	2300      	movs	r3, #0
 8005338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800533c:	682f      	ldr	r7, [r5, #0]
 800533e:	6a21      	ldr	r1, [r4, #32]
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	d032      	beq.n	80053aa <__sflush_r+0x9a>
 8005344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	075a      	lsls	r2, r3, #29
 800534a:	d505      	bpl.n	8005358 <__sflush_r+0x48>
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	1ac0      	subs	r0, r0, r3
 8005350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005352:	b10b      	cbz	r3, 8005358 <__sflush_r+0x48>
 8005354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005356:	1ac0      	subs	r0, r0, r3
 8005358:	2300      	movs	r3, #0
 800535a:	4602      	mov	r2, r0
 800535c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800535e:	6a21      	ldr	r1, [r4, #32]
 8005360:	4628      	mov	r0, r5
 8005362:	47b0      	blx	r6
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	d106      	bne.n	8005378 <__sflush_r+0x68>
 800536a:	6829      	ldr	r1, [r5, #0]
 800536c:	291d      	cmp	r1, #29
 800536e:	d848      	bhi.n	8005402 <__sflush_r+0xf2>
 8005370:	4a29      	ldr	r2, [pc, #164]	; (8005418 <__sflush_r+0x108>)
 8005372:	40ca      	lsrs	r2, r1
 8005374:	07d6      	lsls	r6, r2, #31
 8005376:	d544      	bpl.n	8005402 <__sflush_r+0xf2>
 8005378:	2200      	movs	r2, #0
 800537a:	6062      	str	r2, [r4, #4]
 800537c:	04d9      	lsls	r1, r3, #19
 800537e:	6922      	ldr	r2, [r4, #16]
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	d504      	bpl.n	800538e <__sflush_r+0x7e>
 8005384:	1c42      	adds	r2, r0, #1
 8005386:	d101      	bne.n	800538c <__sflush_r+0x7c>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b903      	cbnz	r3, 800538e <__sflush_r+0x7e>
 800538c:	6560      	str	r0, [r4, #84]	; 0x54
 800538e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005390:	602f      	str	r7, [r5, #0]
 8005392:	2900      	cmp	r1, #0
 8005394:	d0c9      	beq.n	800532a <__sflush_r+0x1a>
 8005396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800539a:	4299      	cmp	r1, r3
 800539c:	d002      	beq.n	80053a4 <__sflush_r+0x94>
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f87a 	bl	8005498 <_free_r>
 80053a4:	2000      	movs	r0, #0
 80053a6:	6360      	str	r0, [r4, #52]	; 0x34
 80053a8:	e7c0      	b.n	800532c <__sflush_r+0x1c>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b0      	blx	r6
 80053b0:	1c41      	adds	r1, r0, #1
 80053b2:	d1c8      	bne.n	8005346 <__sflush_r+0x36>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0c5      	beq.n	8005346 <__sflush_r+0x36>
 80053ba:	2b1d      	cmp	r3, #29
 80053bc:	d001      	beq.n	80053c2 <__sflush_r+0xb2>
 80053be:	2b16      	cmp	r3, #22
 80053c0:	d101      	bne.n	80053c6 <__sflush_r+0xb6>
 80053c2:	602f      	str	r7, [r5, #0]
 80053c4:	e7b1      	b.n	800532a <__sflush_r+0x1a>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053cc:	81a3      	strh	r3, [r4, #12]
 80053ce:	e7ad      	b.n	800532c <__sflush_r+0x1c>
 80053d0:	690f      	ldr	r7, [r1, #16]
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	d0a9      	beq.n	800532a <__sflush_r+0x1a>
 80053d6:	0793      	lsls	r3, r2, #30
 80053d8:	680e      	ldr	r6, [r1, #0]
 80053da:	bf08      	it	eq
 80053dc:	694b      	ldreq	r3, [r1, #20]
 80053de:	600f      	str	r7, [r1, #0]
 80053e0:	bf18      	it	ne
 80053e2:	2300      	movne	r3, #0
 80053e4:	eba6 0807 	sub.w	r8, r6, r7
 80053e8:	608b      	str	r3, [r1, #8]
 80053ea:	f1b8 0f00 	cmp.w	r8, #0
 80053ee:	dd9c      	ble.n	800532a <__sflush_r+0x1a>
 80053f0:	4643      	mov	r3, r8
 80053f2:	463a      	mov	r2, r7
 80053f4:	6a21      	ldr	r1, [r4, #32]
 80053f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b0      	blx	r6
 80053fc:	2800      	cmp	r0, #0
 80053fe:	dc06      	bgt.n	800540e <__sflush_r+0xfe>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e78e      	b.n	800532c <__sflush_r+0x1c>
 800540e:	4407      	add	r7, r0
 8005410:	eba8 0800 	sub.w	r8, r8, r0
 8005414:	e7e9      	b.n	80053ea <__sflush_r+0xda>
 8005416:	bf00      	nop
 8005418:	20400001 	.word	0x20400001

0800541c <_fflush_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	690b      	ldr	r3, [r1, #16]
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	b1db      	cbz	r3, 800545e <_fflush_r+0x42>
 8005426:	b118      	cbz	r0, 8005430 <_fflush_r+0x14>
 8005428:	6983      	ldr	r3, [r0, #24]
 800542a:	b90b      	cbnz	r3, 8005430 <_fflush_r+0x14>
 800542c:	f7ff fd5c 	bl	8004ee8 <__sinit>
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <_fflush_r+0x48>)
 8005432:	429c      	cmp	r4, r3
 8005434:	d109      	bne.n	800544a <_fflush_r+0x2e>
 8005436:	686c      	ldr	r4, [r5, #4]
 8005438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800543c:	b17b      	cbz	r3, 800545e <_fflush_r+0x42>
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005446:	f7ff bf63 	b.w	8005310 <__sflush_r>
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <_fflush_r+0x4c>)
 800544c:	429c      	cmp	r4, r3
 800544e:	d101      	bne.n	8005454 <_fflush_r+0x38>
 8005450:	68ac      	ldr	r4, [r5, #8]
 8005452:	e7f1      	b.n	8005438 <_fflush_r+0x1c>
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <_fflush_r+0x50>)
 8005456:	429c      	cmp	r4, r3
 8005458:	bf08      	it	eq
 800545a:	68ec      	ldreq	r4, [r5, #12]
 800545c:	e7ec      	b.n	8005438 <_fflush_r+0x1c>
 800545e:	2000      	movs	r0, #0
 8005460:	bd38      	pop	{r3, r4, r5, pc}
 8005462:	bf00      	nop
 8005464:	08005e60 	.word	0x08005e60
 8005468:	08005e80 	.word	0x08005e80
 800546c:	08005e40 	.word	0x08005e40

08005470 <_lseek_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4c07      	ldr	r4, [pc, #28]	; (8005490 <_lseek_r+0x20>)
 8005474:	4605      	mov	r5, r0
 8005476:	4608      	mov	r0, r1
 8005478:	4611      	mov	r1, r2
 800547a:	2200      	movs	r2, #0
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fb fb3e 	bl	8000b00 <_lseek>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_lseek_r+0x1e>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	b103      	cbz	r3, 800548e <_lseek_r+0x1e>
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20004b34 	.word	0x20004b34

08005494 <__malloc_lock>:
 8005494:	4770      	bx	lr

08005496 <__malloc_unlock>:
 8005496:	4770      	bx	lr

08005498 <_free_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4605      	mov	r5, r0
 800549c:	2900      	cmp	r1, #0
 800549e:	d045      	beq.n	800552c <_free_r+0x94>
 80054a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a4:	1f0c      	subs	r4, r1, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	18e4      	addlt	r4, r4, r3
 80054ac:	f7ff fff2 	bl	8005494 <__malloc_lock>
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <_free_r+0x98>)
 80054b2:	6813      	ldr	r3, [r2, #0]
 80054b4:	4610      	mov	r0, r2
 80054b6:	b933      	cbnz	r3, 80054c6 <_free_r+0x2e>
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	6014      	str	r4, [r2, #0]
 80054bc:	4628      	mov	r0, r5
 80054be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c2:	f7ff bfe8 	b.w	8005496 <__malloc_unlock>
 80054c6:	42a3      	cmp	r3, r4
 80054c8:	d90c      	bls.n	80054e4 <_free_r+0x4c>
 80054ca:	6821      	ldr	r1, [r4, #0]
 80054cc:	1862      	adds	r2, r4, r1
 80054ce:	4293      	cmp	r3, r2
 80054d0:	bf04      	itt	eq
 80054d2:	681a      	ldreq	r2, [r3, #0]
 80054d4:	685b      	ldreq	r3, [r3, #4]
 80054d6:	6063      	str	r3, [r4, #4]
 80054d8:	bf04      	itt	eq
 80054da:	1852      	addeq	r2, r2, r1
 80054dc:	6022      	streq	r2, [r4, #0]
 80054de:	6004      	str	r4, [r0, #0]
 80054e0:	e7ec      	b.n	80054bc <_free_r+0x24>
 80054e2:	4613      	mov	r3, r2
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	b10a      	cbz	r2, 80054ec <_free_r+0x54>
 80054e8:	42a2      	cmp	r2, r4
 80054ea:	d9fa      	bls.n	80054e2 <_free_r+0x4a>
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	1858      	adds	r0, r3, r1
 80054f0:	42a0      	cmp	r0, r4
 80054f2:	d10b      	bne.n	800550c <_free_r+0x74>
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	4401      	add	r1, r0
 80054f8:	1858      	adds	r0, r3, r1
 80054fa:	4282      	cmp	r2, r0
 80054fc:	6019      	str	r1, [r3, #0]
 80054fe:	d1dd      	bne.n	80054bc <_free_r+0x24>
 8005500:	6810      	ldr	r0, [r2, #0]
 8005502:	6852      	ldr	r2, [r2, #4]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	4401      	add	r1, r0
 8005508:	6019      	str	r1, [r3, #0]
 800550a:	e7d7      	b.n	80054bc <_free_r+0x24>
 800550c:	d902      	bls.n	8005514 <_free_r+0x7c>
 800550e:	230c      	movs	r3, #12
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	e7d3      	b.n	80054bc <_free_r+0x24>
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	1821      	adds	r1, r4, r0
 8005518:	428a      	cmp	r2, r1
 800551a:	bf04      	itt	eq
 800551c:	6811      	ldreq	r1, [r2, #0]
 800551e:	6852      	ldreq	r2, [r2, #4]
 8005520:	6062      	str	r2, [r4, #4]
 8005522:	bf04      	itt	eq
 8005524:	1809      	addeq	r1, r1, r0
 8005526:	6021      	streq	r1, [r4, #0]
 8005528:	605c      	str	r4, [r3, #4]
 800552a:	e7c7      	b.n	80054bc <_free_r+0x24>
 800552c:	bd38      	pop	{r3, r4, r5, pc}
 800552e:	bf00      	nop
 8005530:	20004a58 	.word	0x20004a58

08005534 <__sfputc_r>:
 8005534:	6893      	ldr	r3, [r2, #8]
 8005536:	3b01      	subs	r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	b410      	push	{r4}
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	da08      	bge.n	8005552 <__sfputc_r+0x1e>
 8005540:	6994      	ldr	r4, [r2, #24]
 8005542:	42a3      	cmp	r3, r4
 8005544:	db01      	blt.n	800554a <__sfputc_r+0x16>
 8005546:	290a      	cmp	r1, #10
 8005548:	d103      	bne.n	8005552 <__sfputc_r+0x1e>
 800554a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554e:	f000 bacb 	b.w	8005ae8 <__swbuf_r>
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	1c58      	adds	r0, r3, #1
 8005556:	6010      	str	r0, [r2, #0]
 8005558:	7019      	strb	r1, [r3, #0]
 800555a:	4608      	mov	r0, r1
 800555c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005560:	4770      	bx	lr

08005562 <__sfputs_r>:
 8005562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005564:	4606      	mov	r6, r0
 8005566:	460f      	mov	r7, r1
 8005568:	4614      	mov	r4, r2
 800556a:	18d5      	adds	r5, r2, r3
 800556c:	42ac      	cmp	r4, r5
 800556e:	d101      	bne.n	8005574 <__sfputs_r+0x12>
 8005570:	2000      	movs	r0, #0
 8005572:	e007      	b.n	8005584 <__sfputs_r+0x22>
 8005574:	463a      	mov	r2, r7
 8005576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ffda 	bl	8005534 <__sfputc_r>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d1f3      	bne.n	800556c <__sfputs_r+0xa>
 8005584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005588 <_vfiprintf_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	460c      	mov	r4, r1
 800558e:	b09d      	sub	sp, #116	; 0x74
 8005590:	4617      	mov	r7, r2
 8005592:	461d      	mov	r5, r3
 8005594:	4606      	mov	r6, r0
 8005596:	b118      	cbz	r0, 80055a0 <_vfiprintf_r+0x18>
 8005598:	6983      	ldr	r3, [r0, #24]
 800559a:	b90b      	cbnz	r3, 80055a0 <_vfiprintf_r+0x18>
 800559c:	f7ff fca4 	bl	8004ee8 <__sinit>
 80055a0:	4b7c      	ldr	r3, [pc, #496]	; (8005794 <_vfiprintf_r+0x20c>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	d158      	bne.n	8005658 <_vfiprintf_r+0xd0>
 80055a6:	6874      	ldr	r4, [r6, #4]
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	0718      	lsls	r0, r3, #28
 80055ac:	d55e      	bpl.n	800566c <_vfiprintf_r+0xe4>
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05b      	beq.n	800566c <_vfiprintf_r+0xe4>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9309      	str	r3, [sp, #36]	; 0x24
 80055b8:	2320      	movs	r3, #32
 80055ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055be:	2330      	movs	r3, #48	; 0x30
 80055c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055c4:	9503      	str	r5, [sp, #12]
 80055c6:	f04f 0b01 	mov.w	fp, #1
 80055ca:	46b8      	mov	r8, r7
 80055cc:	4645      	mov	r5, r8
 80055ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055d2:	b10b      	cbz	r3, 80055d8 <_vfiprintf_r+0x50>
 80055d4:	2b25      	cmp	r3, #37	; 0x25
 80055d6:	d154      	bne.n	8005682 <_vfiprintf_r+0xfa>
 80055d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80055dc:	d00b      	beq.n	80055f6 <_vfiprintf_r+0x6e>
 80055de:	4653      	mov	r3, sl
 80055e0:	463a      	mov	r2, r7
 80055e2:	4621      	mov	r1, r4
 80055e4:	4630      	mov	r0, r6
 80055e6:	f7ff ffbc 	bl	8005562 <__sfputs_r>
 80055ea:	3001      	adds	r0, #1
 80055ec:	f000 80c2 	beq.w	8005774 <_vfiprintf_r+0x1ec>
 80055f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f2:	4453      	add	r3, sl
 80055f4:	9309      	str	r3, [sp, #36]	; 0x24
 80055f6:	f898 3000 	ldrb.w	r3, [r8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80ba 	beq.w	8005774 <_vfiprintf_r+0x1ec>
 8005600:	2300      	movs	r3, #0
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800560a:	9304      	str	r3, [sp, #16]
 800560c:	9307      	str	r3, [sp, #28]
 800560e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005612:	931a      	str	r3, [sp, #104]	; 0x68
 8005614:	46a8      	mov	r8, r5
 8005616:	2205      	movs	r2, #5
 8005618:	f818 1b01 	ldrb.w	r1, [r8], #1
 800561c:	485e      	ldr	r0, [pc, #376]	; (8005798 <_vfiprintf_r+0x210>)
 800561e:	f7fa fddf 	bl	80001e0 <memchr>
 8005622:	9b04      	ldr	r3, [sp, #16]
 8005624:	bb78      	cbnz	r0, 8005686 <_vfiprintf_r+0xfe>
 8005626:	06d9      	lsls	r1, r3, #27
 8005628:	bf44      	itt	mi
 800562a:	2220      	movmi	r2, #32
 800562c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005630:	071a      	lsls	r2, r3, #28
 8005632:	bf44      	itt	mi
 8005634:	222b      	movmi	r2, #43	; 0x2b
 8005636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800563a:	782a      	ldrb	r2, [r5, #0]
 800563c:	2a2a      	cmp	r2, #42	; 0x2a
 800563e:	d02a      	beq.n	8005696 <_vfiprintf_r+0x10e>
 8005640:	9a07      	ldr	r2, [sp, #28]
 8005642:	46a8      	mov	r8, r5
 8005644:	2000      	movs	r0, #0
 8005646:	250a      	movs	r5, #10
 8005648:	4641      	mov	r1, r8
 800564a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800564e:	3b30      	subs	r3, #48	; 0x30
 8005650:	2b09      	cmp	r3, #9
 8005652:	d969      	bls.n	8005728 <_vfiprintf_r+0x1a0>
 8005654:	b360      	cbz	r0, 80056b0 <_vfiprintf_r+0x128>
 8005656:	e024      	b.n	80056a2 <_vfiprintf_r+0x11a>
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <_vfiprintf_r+0x214>)
 800565a:	429c      	cmp	r4, r3
 800565c:	d101      	bne.n	8005662 <_vfiprintf_r+0xda>
 800565e:	68b4      	ldr	r4, [r6, #8]
 8005660:	e7a2      	b.n	80055a8 <_vfiprintf_r+0x20>
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <_vfiprintf_r+0x218>)
 8005664:	429c      	cmp	r4, r3
 8005666:	bf08      	it	eq
 8005668:	68f4      	ldreq	r4, [r6, #12]
 800566a:	e79d      	b.n	80055a8 <_vfiprintf_r+0x20>
 800566c:	4621      	mov	r1, r4
 800566e:	4630      	mov	r0, r6
 8005670:	f000 fa8c 	bl	8005b8c <__swsetup_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	d09d      	beq.n	80055b4 <_vfiprintf_r+0x2c>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b01d      	add	sp, #116	; 0x74
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	46a8      	mov	r8, r5
 8005684:	e7a2      	b.n	80055cc <_vfiprintf_r+0x44>
 8005686:	4a44      	ldr	r2, [pc, #272]	; (8005798 <_vfiprintf_r+0x210>)
 8005688:	1a80      	subs	r0, r0, r2
 800568a:	fa0b f000 	lsl.w	r0, fp, r0
 800568e:	4318      	orrs	r0, r3
 8005690:	9004      	str	r0, [sp, #16]
 8005692:	4645      	mov	r5, r8
 8005694:	e7be      	b.n	8005614 <_vfiprintf_r+0x8c>
 8005696:	9a03      	ldr	r2, [sp, #12]
 8005698:	1d11      	adds	r1, r2, #4
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	9103      	str	r1, [sp, #12]
 800569e:	2a00      	cmp	r2, #0
 80056a0:	db01      	blt.n	80056a6 <_vfiprintf_r+0x11e>
 80056a2:	9207      	str	r2, [sp, #28]
 80056a4:	e004      	b.n	80056b0 <_vfiprintf_r+0x128>
 80056a6:	4252      	negs	r2, r2
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	9207      	str	r2, [sp, #28]
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	f898 3000 	ldrb.w	r3, [r8]
 80056b4:	2b2e      	cmp	r3, #46	; 0x2e
 80056b6:	d10e      	bne.n	80056d6 <_vfiprintf_r+0x14e>
 80056b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80056bc:	2b2a      	cmp	r3, #42	; 0x2a
 80056be:	d138      	bne.n	8005732 <_vfiprintf_r+0x1aa>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	9203      	str	r2, [sp, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bfb8      	it	lt
 80056cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80056d0:	f108 0802 	add.w	r8, r8, #2
 80056d4:	9305      	str	r3, [sp, #20]
 80056d6:	4d33      	ldr	r5, [pc, #204]	; (80057a4 <_vfiprintf_r+0x21c>)
 80056d8:	f898 1000 	ldrb.w	r1, [r8]
 80056dc:	2203      	movs	r2, #3
 80056de:	4628      	mov	r0, r5
 80056e0:	f7fa fd7e 	bl	80001e0 <memchr>
 80056e4:	b140      	cbz	r0, 80056f8 <_vfiprintf_r+0x170>
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	1b40      	subs	r0, r0, r5
 80056ea:	fa03 f000 	lsl.w	r0, r3, r0
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	4303      	orrs	r3, r0
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	f898 1000 	ldrb.w	r1, [r8]
 80056fc:	482a      	ldr	r0, [pc, #168]	; (80057a8 <_vfiprintf_r+0x220>)
 80056fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005702:	2206      	movs	r2, #6
 8005704:	f108 0701 	add.w	r7, r8, #1
 8005708:	f7fa fd6a 	bl	80001e0 <memchr>
 800570c:	2800      	cmp	r0, #0
 800570e:	d037      	beq.n	8005780 <_vfiprintf_r+0x1f8>
 8005710:	4b26      	ldr	r3, [pc, #152]	; (80057ac <_vfiprintf_r+0x224>)
 8005712:	bb1b      	cbnz	r3, 800575c <_vfiprintf_r+0x1d4>
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	3307      	adds	r3, #7
 8005718:	f023 0307 	bic.w	r3, r3, #7
 800571c:	3308      	adds	r3, #8
 800571e:	9303      	str	r3, [sp, #12]
 8005720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005722:	444b      	add	r3, r9
 8005724:	9309      	str	r3, [sp, #36]	; 0x24
 8005726:	e750      	b.n	80055ca <_vfiprintf_r+0x42>
 8005728:	fb05 3202 	mla	r2, r5, r2, r3
 800572c:	2001      	movs	r0, #1
 800572e:	4688      	mov	r8, r1
 8005730:	e78a      	b.n	8005648 <_vfiprintf_r+0xc0>
 8005732:	2300      	movs	r3, #0
 8005734:	f108 0801 	add.w	r8, r8, #1
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	4619      	mov	r1, r3
 800573c:	250a      	movs	r5, #10
 800573e:	4640      	mov	r0, r8
 8005740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005744:	3a30      	subs	r2, #48	; 0x30
 8005746:	2a09      	cmp	r2, #9
 8005748:	d903      	bls.n	8005752 <_vfiprintf_r+0x1ca>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0c3      	beq.n	80056d6 <_vfiprintf_r+0x14e>
 800574e:	9105      	str	r1, [sp, #20]
 8005750:	e7c1      	b.n	80056d6 <_vfiprintf_r+0x14e>
 8005752:	fb05 2101 	mla	r1, r5, r1, r2
 8005756:	2301      	movs	r3, #1
 8005758:	4680      	mov	r8, r0
 800575a:	e7f0      	b.n	800573e <_vfiprintf_r+0x1b6>
 800575c:	ab03      	add	r3, sp, #12
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4622      	mov	r2, r4
 8005762:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <_vfiprintf_r+0x228>)
 8005764:	a904      	add	r1, sp, #16
 8005766:	4630      	mov	r0, r6
 8005768:	f3af 8000 	nop.w
 800576c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005770:	4681      	mov	r9, r0
 8005772:	d1d5      	bne.n	8005720 <_vfiprintf_r+0x198>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	065b      	lsls	r3, r3, #25
 8005778:	f53f af7e 	bmi.w	8005678 <_vfiprintf_r+0xf0>
 800577c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800577e:	e77d      	b.n	800567c <_vfiprintf_r+0xf4>
 8005780:	ab03      	add	r3, sp, #12
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4622      	mov	r2, r4
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <_vfiprintf_r+0x228>)
 8005788:	a904      	add	r1, sp, #16
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f888 	bl	80058a0 <_printf_i>
 8005790:	e7ec      	b.n	800576c <_vfiprintf_r+0x1e4>
 8005792:	bf00      	nop
 8005794:	08005e60 	.word	0x08005e60
 8005798:	08005ea4 	.word	0x08005ea4
 800579c:	08005e80 	.word	0x08005e80
 80057a0:	08005e40 	.word	0x08005e40
 80057a4:	08005eaa 	.word	0x08005eaa
 80057a8:	08005eae 	.word	0x08005eae
 80057ac:	00000000 	.word	0x00000000
 80057b0:	08005563 	.word	0x08005563

080057b4 <_printf_common>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	4691      	mov	r9, r2
 80057ba:	461f      	mov	r7, r3
 80057bc:	688a      	ldr	r2, [r1, #8]
 80057be:	690b      	ldr	r3, [r1, #16]
 80057c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bfb8      	it	lt
 80057c8:	4613      	movlt	r3, r2
 80057ca:	f8c9 3000 	str.w	r3, [r9]
 80057ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d2:	4606      	mov	r6, r0
 80057d4:	460c      	mov	r4, r1
 80057d6:	b112      	cbz	r2, 80057de <_printf_common+0x2a>
 80057d8:	3301      	adds	r3, #1
 80057da:	f8c9 3000 	str.w	r3, [r9]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	0699      	lsls	r1, r3, #26
 80057e2:	bf42      	ittt	mi
 80057e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057e8:	3302      	addmi	r3, #2
 80057ea:	f8c9 3000 	strmi.w	r3, [r9]
 80057ee:	6825      	ldr	r5, [r4, #0]
 80057f0:	f015 0506 	ands.w	r5, r5, #6
 80057f4:	d107      	bne.n	8005806 <_printf_common+0x52>
 80057f6:	f104 0a19 	add.w	sl, r4, #25
 80057fa:	68e3      	ldr	r3, [r4, #12]
 80057fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	42ab      	cmp	r3, r5
 8005804:	dc28      	bgt.n	8005858 <_printf_common+0xa4>
 8005806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	3300      	adds	r3, #0
 800580e:	bf18      	it	ne
 8005810:	2301      	movne	r3, #1
 8005812:	0692      	lsls	r2, r2, #26
 8005814:	d42d      	bmi.n	8005872 <_printf_common+0xbe>
 8005816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800581a:	4639      	mov	r1, r7
 800581c:	4630      	mov	r0, r6
 800581e:	47c0      	blx	r8
 8005820:	3001      	adds	r0, #1
 8005822:	d020      	beq.n	8005866 <_printf_common+0xb2>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	68e5      	ldr	r5, [r4, #12]
 8005828:	f8d9 2000 	ldr.w	r2, [r9]
 800582c:	f003 0306 	and.w	r3, r3, #6
 8005830:	2b04      	cmp	r3, #4
 8005832:	bf08      	it	eq
 8005834:	1aad      	subeq	r5, r5, r2
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	bf0c      	ite	eq
 800583c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005840:	2500      	movne	r5, #0
 8005842:	4293      	cmp	r3, r2
 8005844:	bfc4      	itt	gt
 8005846:	1a9b      	subgt	r3, r3, r2
 8005848:	18ed      	addgt	r5, r5, r3
 800584a:	f04f 0900 	mov.w	r9, #0
 800584e:	341a      	adds	r4, #26
 8005850:	454d      	cmp	r5, r9
 8005852:	d11a      	bne.n	800588a <_printf_common+0xd6>
 8005854:	2000      	movs	r0, #0
 8005856:	e008      	b.n	800586a <_printf_common+0xb6>
 8005858:	2301      	movs	r3, #1
 800585a:	4652      	mov	r2, sl
 800585c:	4639      	mov	r1, r7
 800585e:	4630      	mov	r0, r6
 8005860:	47c0      	blx	r8
 8005862:	3001      	adds	r0, #1
 8005864:	d103      	bne.n	800586e <_printf_common+0xba>
 8005866:	f04f 30ff 	mov.w	r0, #4294967295
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	3501      	adds	r5, #1
 8005870:	e7c3      	b.n	80057fa <_printf_common+0x46>
 8005872:	18e1      	adds	r1, r4, r3
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	2030      	movs	r0, #48	; 0x30
 8005878:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800587c:	4422      	add	r2, r4
 800587e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005886:	3302      	adds	r3, #2
 8005888:	e7c5      	b.n	8005816 <_printf_common+0x62>
 800588a:	2301      	movs	r3, #1
 800588c:	4622      	mov	r2, r4
 800588e:	4639      	mov	r1, r7
 8005890:	4630      	mov	r0, r6
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d0e6      	beq.n	8005866 <_printf_common+0xb2>
 8005898:	f109 0901 	add.w	r9, r9, #1
 800589c:	e7d8      	b.n	8005850 <_printf_common+0x9c>
	...

080058a0 <_printf_i>:
 80058a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058a8:	460c      	mov	r4, r1
 80058aa:	7e09      	ldrb	r1, [r1, #24]
 80058ac:	b085      	sub	sp, #20
 80058ae:	296e      	cmp	r1, #110	; 0x6e
 80058b0:	4617      	mov	r7, r2
 80058b2:	4606      	mov	r6, r0
 80058b4:	4698      	mov	r8, r3
 80058b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b8:	f000 80b3 	beq.w	8005a22 <_printf_i+0x182>
 80058bc:	d822      	bhi.n	8005904 <_printf_i+0x64>
 80058be:	2963      	cmp	r1, #99	; 0x63
 80058c0:	d036      	beq.n	8005930 <_printf_i+0x90>
 80058c2:	d80a      	bhi.n	80058da <_printf_i+0x3a>
 80058c4:	2900      	cmp	r1, #0
 80058c6:	f000 80b9 	beq.w	8005a3c <_printf_i+0x19c>
 80058ca:	2958      	cmp	r1, #88	; 0x58
 80058cc:	f000 8083 	beq.w	80059d6 <_printf_i+0x136>
 80058d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058d8:	e032      	b.n	8005940 <_printf_i+0xa0>
 80058da:	2964      	cmp	r1, #100	; 0x64
 80058dc:	d001      	beq.n	80058e2 <_printf_i+0x42>
 80058de:	2969      	cmp	r1, #105	; 0x69
 80058e0:	d1f6      	bne.n	80058d0 <_printf_i+0x30>
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	6813      	ldr	r3, [r2, #0]
 80058e6:	0605      	lsls	r5, r0, #24
 80058e8:	f103 0104 	add.w	r1, r3, #4
 80058ec:	d52a      	bpl.n	8005944 <_printf_i+0xa4>
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da03      	bge.n	80058fe <_printf_i+0x5e>
 80058f6:	222d      	movs	r2, #45	; 0x2d
 80058f8:	425b      	negs	r3, r3
 80058fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058fe:	486f      	ldr	r0, [pc, #444]	; (8005abc <_printf_i+0x21c>)
 8005900:	220a      	movs	r2, #10
 8005902:	e039      	b.n	8005978 <_printf_i+0xd8>
 8005904:	2973      	cmp	r1, #115	; 0x73
 8005906:	f000 809d 	beq.w	8005a44 <_printf_i+0x1a4>
 800590a:	d808      	bhi.n	800591e <_printf_i+0x7e>
 800590c:	296f      	cmp	r1, #111	; 0x6f
 800590e:	d020      	beq.n	8005952 <_printf_i+0xb2>
 8005910:	2970      	cmp	r1, #112	; 0x70
 8005912:	d1dd      	bne.n	80058d0 <_printf_i+0x30>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	f043 0320 	orr.w	r3, r3, #32
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	e003      	b.n	8005926 <_printf_i+0x86>
 800591e:	2975      	cmp	r1, #117	; 0x75
 8005920:	d017      	beq.n	8005952 <_printf_i+0xb2>
 8005922:	2978      	cmp	r1, #120	; 0x78
 8005924:	d1d4      	bne.n	80058d0 <_printf_i+0x30>
 8005926:	2378      	movs	r3, #120	; 0x78
 8005928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800592c:	4864      	ldr	r0, [pc, #400]	; (8005ac0 <_printf_i+0x220>)
 800592e:	e055      	b.n	80059dc <_printf_i+0x13c>
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	1d19      	adds	r1, r3, #4
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6011      	str	r1, [r2, #0]
 8005938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800593c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005940:	2301      	movs	r3, #1
 8005942:	e08c      	b.n	8005a5e <_printf_i+0x1be>
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6011      	str	r1, [r2, #0]
 8005948:	f010 0f40 	tst.w	r0, #64	; 0x40
 800594c:	bf18      	it	ne
 800594e:	b21b      	sxthne	r3, r3
 8005950:	e7cf      	b.n	80058f2 <_printf_i+0x52>
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	6825      	ldr	r5, [r4, #0]
 8005956:	1d18      	adds	r0, r3, #4
 8005958:	6010      	str	r0, [r2, #0]
 800595a:	0628      	lsls	r0, r5, #24
 800595c:	d501      	bpl.n	8005962 <_printf_i+0xc2>
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	e002      	b.n	8005968 <_printf_i+0xc8>
 8005962:	0668      	lsls	r0, r5, #25
 8005964:	d5fb      	bpl.n	800595e <_printf_i+0xbe>
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	4854      	ldr	r0, [pc, #336]	; (8005abc <_printf_i+0x21c>)
 800596a:	296f      	cmp	r1, #111	; 0x6f
 800596c:	bf14      	ite	ne
 800596e:	220a      	movne	r2, #10
 8005970:	2208      	moveq	r2, #8
 8005972:	2100      	movs	r1, #0
 8005974:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005978:	6865      	ldr	r5, [r4, #4]
 800597a:	60a5      	str	r5, [r4, #8]
 800597c:	2d00      	cmp	r5, #0
 800597e:	f2c0 8095 	blt.w	8005aac <_printf_i+0x20c>
 8005982:	6821      	ldr	r1, [r4, #0]
 8005984:	f021 0104 	bic.w	r1, r1, #4
 8005988:	6021      	str	r1, [r4, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d13d      	bne.n	8005a0a <_printf_i+0x16a>
 800598e:	2d00      	cmp	r5, #0
 8005990:	f040 808e 	bne.w	8005ab0 <_printf_i+0x210>
 8005994:	4665      	mov	r5, ip
 8005996:	2a08      	cmp	r2, #8
 8005998:	d10b      	bne.n	80059b2 <_printf_i+0x112>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	07db      	lsls	r3, r3, #31
 800599e:	d508      	bpl.n	80059b2 <_printf_i+0x112>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	6862      	ldr	r2, [r4, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	bfde      	ittt	le
 80059a8:	2330      	movle	r3, #48	; 0x30
 80059aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059b2:	ebac 0305 	sub.w	r3, ip, r5
 80059b6:	6123      	str	r3, [r4, #16]
 80059b8:	f8cd 8000 	str.w	r8, [sp]
 80059bc:	463b      	mov	r3, r7
 80059be:	aa03      	add	r2, sp, #12
 80059c0:	4621      	mov	r1, r4
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff fef6 	bl	80057b4 <_printf_common>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d14d      	bne.n	8005a68 <_printf_i+0x1c8>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	b005      	add	sp, #20
 80059d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059d6:	4839      	ldr	r0, [pc, #228]	; (8005abc <_printf_i+0x21c>)
 80059d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	6821      	ldr	r1, [r4, #0]
 80059e0:	1d1d      	adds	r5, r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6015      	str	r5, [r2, #0]
 80059e6:	060a      	lsls	r2, r1, #24
 80059e8:	d50b      	bpl.n	8005a02 <_printf_i+0x162>
 80059ea:	07ca      	lsls	r2, r1, #31
 80059ec:	bf44      	itt	mi
 80059ee:	f041 0120 	orrmi.w	r1, r1, #32
 80059f2:	6021      	strmi	r1, [r4, #0]
 80059f4:	b91b      	cbnz	r3, 80059fe <_printf_i+0x15e>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	f022 0220 	bic.w	r2, r2, #32
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	2210      	movs	r2, #16
 8005a00:	e7b7      	b.n	8005972 <_printf_i+0xd2>
 8005a02:	064d      	lsls	r5, r1, #25
 8005a04:	bf48      	it	mi
 8005a06:	b29b      	uxthmi	r3, r3
 8005a08:	e7ef      	b.n	80059ea <_printf_i+0x14a>
 8005a0a:	4665      	mov	r5, ip
 8005a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a10:	fb02 3311 	mls	r3, r2, r1, r3
 8005a14:	5cc3      	ldrb	r3, [r0, r3]
 8005a16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	d1f5      	bne.n	8005a0c <_printf_i+0x16c>
 8005a20:	e7b9      	b.n	8005996 <_printf_i+0xf6>
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	6825      	ldr	r5, [r4, #0]
 8005a26:	6961      	ldr	r1, [r4, #20]
 8005a28:	1d18      	adds	r0, r3, #4
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	0628      	lsls	r0, r5, #24
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	d501      	bpl.n	8005a36 <_printf_i+0x196>
 8005a32:	6019      	str	r1, [r3, #0]
 8005a34:	e002      	b.n	8005a3c <_printf_i+0x19c>
 8005a36:	066a      	lsls	r2, r5, #25
 8005a38:	d5fb      	bpl.n	8005a32 <_printf_i+0x192>
 8005a3a:	8019      	strh	r1, [r3, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6123      	str	r3, [r4, #16]
 8005a40:	4665      	mov	r5, ip
 8005a42:	e7b9      	b.n	80059b8 <_printf_i+0x118>
 8005a44:	6813      	ldr	r3, [r2, #0]
 8005a46:	1d19      	adds	r1, r3, #4
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	681d      	ldr	r5, [r3, #0]
 8005a4c:	6862      	ldr	r2, [r4, #4]
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4628      	mov	r0, r5
 8005a52:	f7fa fbc5 	bl	80001e0 <memchr>
 8005a56:	b108      	cbz	r0, 8005a5c <_printf_i+0x1bc>
 8005a58:	1b40      	subs	r0, r0, r5
 8005a5a:	6060      	str	r0, [r4, #4]
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	2300      	movs	r3, #0
 8005a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a66:	e7a7      	b.n	80059b8 <_printf_i+0x118>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	4630      	mov	r0, r6
 8005a70:	47c0      	blx	r8
 8005a72:	3001      	adds	r0, #1
 8005a74:	d0aa      	beq.n	80059cc <_printf_i+0x12c>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	079b      	lsls	r3, r3, #30
 8005a7a:	d413      	bmi.n	8005aa4 <_printf_i+0x204>
 8005a7c:	68e0      	ldr	r0, [r4, #12]
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	4298      	cmp	r0, r3
 8005a82:	bfb8      	it	lt
 8005a84:	4618      	movlt	r0, r3
 8005a86:	e7a3      	b.n	80059d0 <_printf_i+0x130>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	464a      	mov	r2, r9
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	4630      	mov	r0, r6
 8005a90:	47c0      	blx	r8
 8005a92:	3001      	adds	r0, #1
 8005a94:	d09a      	beq.n	80059cc <_printf_i+0x12c>
 8005a96:	3501      	adds	r5, #1
 8005a98:	68e3      	ldr	r3, [r4, #12]
 8005a9a:	9a03      	ldr	r2, [sp, #12]
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	42ab      	cmp	r3, r5
 8005aa0:	dcf2      	bgt.n	8005a88 <_printf_i+0x1e8>
 8005aa2:	e7eb      	b.n	8005a7c <_printf_i+0x1dc>
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	f104 0919 	add.w	r9, r4, #25
 8005aaa:	e7f5      	b.n	8005a98 <_printf_i+0x1f8>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ac      	bne.n	8005a0a <_printf_i+0x16a>
 8005ab0:	7803      	ldrb	r3, [r0, #0]
 8005ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aba:	e76c      	b.n	8005996 <_printf_i+0xf6>
 8005abc:	08005eb5 	.word	0x08005eb5
 8005ac0:	08005ec6 	.word	0x08005ec6

08005ac4 <_read_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4c07      	ldr	r4, [pc, #28]	; (8005ae4 <_read_r+0x20>)
 8005ac8:	4605      	mov	r5, r0
 8005aca:	4608      	mov	r0, r1
 8005acc:	4611      	mov	r1, r2
 8005ace:	2200      	movs	r2, #0
 8005ad0:	6022      	str	r2, [r4, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f7fa ffb4 	bl	8000a40 <_read>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_read_r+0x1e>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_read_r+0x1e>
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	20004b34 	.word	0x20004b34

08005ae8 <__swbuf_r>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	460e      	mov	r6, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	4605      	mov	r5, r0
 8005af0:	b118      	cbz	r0, 8005afa <__swbuf_r+0x12>
 8005af2:	6983      	ldr	r3, [r0, #24]
 8005af4:	b90b      	cbnz	r3, 8005afa <__swbuf_r+0x12>
 8005af6:	f7ff f9f7 	bl	8004ee8 <__sinit>
 8005afa:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <__swbuf_r+0x98>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d12a      	bne.n	8005b56 <__swbuf_r+0x6e>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	69a3      	ldr	r3, [r4, #24]
 8005b04:	60a3      	str	r3, [r4, #8]
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	071a      	lsls	r2, r3, #28
 8005b0a:	d52e      	bpl.n	8005b6a <__swbuf_r+0x82>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	b363      	cbz	r3, 8005b6a <__swbuf_r+0x82>
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	1ac0      	subs	r0, r0, r3
 8005b16:	6963      	ldr	r3, [r4, #20]
 8005b18:	b2f6      	uxtb	r6, r6
 8005b1a:	4283      	cmp	r3, r0
 8005b1c:	4637      	mov	r7, r6
 8005b1e:	dc04      	bgt.n	8005b2a <__swbuf_r+0x42>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	f7ff fc7a 	bl	800541c <_fflush_r>
 8005b28:	bb28      	cbnz	r0, 8005b76 <__swbuf_r+0x8e>
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	6022      	str	r2, [r4, #0]
 8005b36:	701e      	strb	r6, [r3, #0]
 8005b38:	6963      	ldr	r3, [r4, #20]
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	4283      	cmp	r3, r0
 8005b3e:	d004      	beq.n	8005b4a <__swbuf_r+0x62>
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	07db      	lsls	r3, r3, #31
 8005b44:	d519      	bpl.n	8005b7a <__swbuf_r+0x92>
 8005b46:	2e0a      	cmp	r6, #10
 8005b48:	d117      	bne.n	8005b7a <__swbuf_r+0x92>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff fc65 	bl	800541c <_fflush_r>
 8005b52:	b190      	cbz	r0, 8005b7a <__swbuf_r+0x92>
 8005b54:	e00f      	b.n	8005b76 <__swbuf_r+0x8e>
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <__swbuf_r+0x9c>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	d101      	bne.n	8005b60 <__swbuf_r+0x78>
 8005b5c:	68ac      	ldr	r4, [r5, #8]
 8005b5e:	e7d0      	b.n	8005b02 <__swbuf_r+0x1a>
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <__swbuf_r+0xa0>)
 8005b62:	429c      	cmp	r4, r3
 8005b64:	bf08      	it	eq
 8005b66:	68ec      	ldreq	r4, [r5, #12]
 8005b68:	e7cb      	b.n	8005b02 <__swbuf_r+0x1a>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 f80d 	bl	8005b8c <__swsetup_r>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d0cc      	beq.n	8005b10 <__swbuf_r+0x28>
 8005b76:	f04f 37ff 	mov.w	r7, #4294967295
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005e60 	.word	0x08005e60
 8005b84:	08005e80 	.word	0x08005e80
 8005b88:	08005e40 	.word	0x08005e40

08005b8c <__swsetup_r>:
 8005b8c:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <__swsetup_r+0xcc>)
 8005b8e:	b570      	push	{r4, r5, r6, lr}
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	b125      	cbz	r5, 8005ba2 <__swsetup_r+0x16>
 8005b98:	69ab      	ldr	r3, [r5, #24]
 8005b9a:	b913      	cbnz	r3, 8005ba2 <__swsetup_r+0x16>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f7ff f9a3 	bl	8004ee8 <__sinit>
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	; (8005c5c <__swsetup_r+0xd0>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	d10f      	bne.n	8005bc8 <__swsetup_r+0x3c>
 8005ba8:	686c      	ldr	r4, [r5, #4]
 8005baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	0715      	lsls	r5, r2, #28
 8005bb2:	d42c      	bmi.n	8005c0e <__swsetup_r+0x82>
 8005bb4:	06d0      	lsls	r0, r2, #27
 8005bb6:	d411      	bmi.n	8005bdc <__swsetup_r+0x50>
 8005bb8:	2209      	movs	r2, #9
 8005bba:	6032      	str	r2, [r6, #0]
 8005bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	e03e      	b.n	8005c46 <__swsetup_r+0xba>
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <__swsetup_r+0xd4>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d101      	bne.n	8005bd2 <__swsetup_r+0x46>
 8005bce:	68ac      	ldr	r4, [r5, #8]
 8005bd0:	e7eb      	b.n	8005baa <__swsetup_r+0x1e>
 8005bd2:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <__swsetup_r+0xd8>)
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	bf08      	it	eq
 8005bd8:	68ec      	ldreq	r4, [r5, #12]
 8005bda:	e7e6      	b.n	8005baa <__swsetup_r+0x1e>
 8005bdc:	0751      	lsls	r1, r2, #29
 8005bde:	d512      	bpl.n	8005c06 <__swsetup_r+0x7a>
 8005be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be2:	b141      	cbz	r1, 8005bf6 <__swsetup_r+0x6a>
 8005be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <__swsetup_r+0x66>
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff fc53 	bl	8005498 <_free_r>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f043 0308 	orr.w	r3, r3, #8
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	b94b      	cbnz	r3, 8005c26 <__swsetup_r+0x9a>
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1c:	d003      	beq.n	8005c26 <__swsetup_r+0x9a>
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f845 	bl	8005cb0 <__smakebuf_r>
 8005c26:	89a2      	ldrh	r2, [r4, #12]
 8005c28:	f012 0301 	ands.w	r3, r2, #1
 8005c2c:	d00c      	beq.n	8005c48 <__swsetup_r+0xbc>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60a3      	str	r3, [r4, #8]
 8005c32:	6963      	ldr	r3, [r4, #20]
 8005c34:	425b      	negs	r3, r3
 8005c36:	61a3      	str	r3, [r4, #24]
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	b953      	cbnz	r3, 8005c52 <__swsetup_r+0xc6>
 8005c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c44:	d1ba      	bne.n	8005bbc <__swsetup_r+0x30>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	0792      	lsls	r2, r2, #30
 8005c4a:	bf58      	it	pl
 8005c4c:	6963      	ldrpl	r3, [r4, #20]
 8005c4e:	60a3      	str	r3, [r4, #8]
 8005c50:	e7f2      	b.n	8005c38 <__swsetup_r+0xac>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e7f7      	b.n	8005c46 <__swsetup_r+0xba>
 8005c56:	bf00      	nop
 8005c58:	20000010 	.word	0x20000010
 8005c5c:	08005e60 	.word	0x08005e60
 8005c60:	08005e80 	.word	0x08005e80
 8005c64:	08005e40 	.word	0x08005e40

08005c68 <__swhatbuf_r>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	460e      	mov	r6, r1
 8005c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c70:	2900      	cmp	r1, #0
 8005c72:	b096      	sub	sp, #88	; 0x58
 8005c74:	4614      	mov	r4, r2
 8005c76:	461d      	mov	r5, r3
 8005c78:	da07      	bge.n	8005c8a <__swhatbuf_r+0x22>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	89b3      	ldrh	r3, [r6, #12]
 8005c80:	061a      	lsls	r2, r3, #24
 8005c82:	d410      	bmi.n	8005ca6 <__swhatbuf_r+0x3e>
 8005c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c88:	e00e      	b.n	8005ca8 <__swhatbuf_r+0x40>
 8005c8a:	466a      	mov	r2, sp
 8005c8c:	f000 f850 	bl	8005d30 <_fstat_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	dbf2      	blt.n	8005c7a <__swhatbuf_r+0x12>
 8005c94:	9a01      	ldr	r2, [sp, #4]
 8005c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c9e:	425a      	negs	r2, r3
 8005ca0:	415a      	adcs	r2, r3
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	e7ee      	b.n	8005c84 <__swhatbuf_r+0x1c>
 8005ca6:	2340      	movs	r3, #64	; 0x40
 8005ca8:	2000      	movs	r0, #0
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	b016      	add	sp, #88	; 0x58
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <__smakebuf_r>:
 8005cb0:	898b      	ldrh	r3, [r1, #12]
 8005cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cb4:	079d      	lsls	r5, r3, #30
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	d507      	bpl.n	8005ccc <__smakebuf_r+0x1c>
 8005cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	6163      	str	r3, [r4, #20]
 8005cc8:	b002      	add	sp, #8
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	ab01      	add	r3, sp, #4
 8005cce:	466a      	mov	r2, sp
 8005cd0:	f7ff ffca 	bl	8005c68 <__swhatbuf_r>
 8005cd4:	9900      	ldr	r1, [sp, #0]
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f7ff f9c7 	bl	800506c <_malloc_r>
 8005cde:	b948      	cbnz	r0, 8005cf4 <__smakebuf_r+0x44>
 8005ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce4:	059a      	lsls	r2, r3, #22
 8005ce6:	d4ef      	bmi.n	8005cc8 <__smakebuf_r+0x18>
 8005ce8:	f023 0303 	bic.w	r3, r3, #3
 8005cec:	f043 0302 	orr.w	r3, r3, #2
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	e7e3      	b.n	8005cbc <__smakebuf_r+0xc>
 8005cf4:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <__smakebuf_r+0x7c>)
 8005cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	6020      	str	r0, [r4, #0]
 8005cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	9b00      	ldr	r3, [sp, #0]
 8005d04:	6163      	str	r3, [r4, #20]
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	6120      	str	r0, [r4, #16]
 8005d0a:	b15b      	cbz	r3, 8005d24 <__smakebuf_r+0x74>
 8005d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d10:	4630      	mov	r0, r6
 8005d12:	f000 f81f 	bl	8005d54 <_isatty_r>
 8005d16:	b128      	cbz	r0, 8005d24 <__smakebuf_r+0x74>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	431d      	orrs	r5, r3
 8005d28:	81a5      	strh	r5, [r4, #12]
 8005d2a:	e7cd      	b.n	8005cc8 <__smakebuf_r+0x18>
 8005d2c:	08004eb1 	.word	0x08004eb1

08005d30 <_fstat_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4c07      	ldr	r4, [pc, #28]	; (8005d50 <_fstat_r+0x20>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4605      	mov	r5, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	f7fa fec4 	bl	8000aca <_fstat>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d102      	bne.n	8005d4c <_fstat_r+0x1c>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	b103      	cbz	r3, 8005d4c <_fstat_r+0x1c>
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	20004b34 	.word	0x20004b34

08005d54 <_isatty_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4c06      	ldr	r4, [pc, #24]	; (8005d70 <_isatty_r+0x1c>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	f7fa fec3 	bl	8000aea <_isatty>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_isatty_r+0x1a>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_isatty_r+0x1a>
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20004b34 	.word	0x20004b34

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
