
0001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059dc  080059dc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080059e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  2000007c  08005a60  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014490  08005a60  00024490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147d4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002866  00000000  00000000  00034880  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  000370e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179f3  00000000  00000000  00039190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcd6  00000000  00000000  00050b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000967d1  00000000  00000000  0005e859  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f502a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d0  00000000  00000000  000f50a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005830 	.word	0x08005830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005830 	.word	0x08005830

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200143e4 	.word	0x200143e4
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 f9f5 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f84d 	bl	80006c8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  DWT ->CTRL |= (1<<0);
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <main+0x88>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <main+0x88>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <main+0x8c>)
 800063c:	f002 fb7e 	bl	8002d3c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000640:	f002 f9ae 	bl	80029a0 <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();
  status = xTaskCreate(task1_handler_function, "Task-1",200,"Hello world from Task-1",2,&task1_handler);
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <main+0x90>)
 8000650:	22c8      	movs	r2, #200	; 0xc8
 8000652:	4918      	ldr	r1, [pc, #96]	; (80006b4 <main+0x94>)
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <main+0x98>)
 8000656:	f001 f9a6 	bl	80019a6 <xTaskCreate>
 800065a:	6178      	str	r0, [r7, #20]
  configASSERT(status ==  pdPASS);
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d009      	beq.n	8000676 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000666:	f383 8811 	msr	BASEPRI, r3
 800066a:	f3bf 8f6f 	isb	sy
 800066e:	f3bf 8f4f 	dsb	sy
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	e7fe      	b.n	8000674 <main+0x54>

  status = xTaskCreate(task2_handler_function, "Task-2",200,"Hello world from Task-2",2,&task2_handler);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0x9c>)
 8000680:	22c8      	movs	r2, #200	; 0xc8
 8000682:	490f      	ldr	r1, [pc, #60]	; (80006c0 <main+0xa0>)
 8000684:	480f      	ldr	r0, [pc, #60]	; (80006c4 <main+0xa4>)
 8000686:	f001 f98e 	bl	80019a6 <xTaskCreate>
 800068a:	6178      	str	r0, [r7, #20]

  configASSERT(status ==  pdPASS);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d009      	beq.n	80006a6 <main+0x86>
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e7fe      	b.n	80006a4 <main+0x84>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x86>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0007a120 	.word	0x0007a120
 80006b0:	08005848 	.word	0x08005848
 80006b4:	08005860 	.word	0x08005860
 80006b8:	0800079d 	.word	0x0800079d
 80006bc:	08005868 	.word	0x08005868
 80006c0:	08005880 	.word	0x08005880
 80006c4:	080007d9 	.word	0x080007d9

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fc84 	bl	8004fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemClock_Config+0xd0>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000740:	2354      	movs	r3, #84	; 0x54
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fa83 	bl	8000c5c <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800075c:	f000 f86c 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2102      	movs	r1, #2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fcdd 	bl	800113c <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000788:	f000 f856 	bl	8000838 <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	; 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <task1_handler_function>:

/* USER CODE BEGIN 4 */
static void task1_handler_function(void *parameter)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameter);

		snprintf(msg,100,"%s\n", (char*)parameter);
 80007a4:	f107 000c 	add.w	r0, r7, #12
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <task1_handler_function+0x34>)
 80007ac:	2164      	movs	r1, #100	; 0x64
 80007ae:	f004 fc21 	bl	8004ff4 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fb38 	bl	8004e2c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <task1_handler_function+0x38>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
	{
 80007cc:	e7ea      	b.n	80007a4 <task1_handler_function+0x8>
 80007ce:	bf00      	nop
 80007d0:	08005888 	.word	0x08005888
 80007d4:	e000ed04 	.word	0xe000ed04

080007d8 <task2_handler_function>:
	}


}
static void task2_handler_function(void *parameter)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
		{
			//printf("%s\n", (char*)parameter);
			snprintf(msg,100,"%s\n", (char*)parameter);
 80007e0:	f107 000c 	add.w	r0, r7, #12
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <task2_handler_function+0x34>)
 80007e8:	2164      	movs	r1, #100	; 0x64
 80007ea:	f004 fc03 	bl	8004ff4 <sniprintf>

			SEGGER_SYSVIEW_PrintfTarget(msg);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fb1a 	bl	8004e2c <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <task2_handler_function+0x38>)
 80007fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	f3bf 8f4f 	dsb	sy
 8000804:	f3bf 8f6f 	isb	sy
		{
 8000808:	e7ea      	b.n	80007e0 <task2_handler_function+0x8>
 800080a:	bf00      	nop
 800080c:	08005888 	.word	0x08005888
 8000810:	e000ed04 	.word	0xe000ed04

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f917 	bl	8000a58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40000c00 	.word	0x40000c00

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000886:	f001 fd47 	bl	8002318 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2032      	movs	r0, #50	; 0x32
 80008ae:	f000 f9ab 	bl	8000c08 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80008b2:	2032      	movs	r0, #50	; 0x32
 80008b4:	f000 f9c4 	bl	8000c40 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_InitTick+0xa4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a1e      	ldr	r2, [pc, #120]	; (800093c <HAL_InitTick+0xa4>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_InitTick+0xa4>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d4:	f107 0210 	add.w	r2, r7, #16
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fde4 	bl	80014ac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008e4:	f000 fdce 	bl	8001484 <HAL_RCC_GetPCLK1Freq>
 80008e8:	4603      	mov	r3, r0
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <HAL_InitTick+0xa8>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3b01      	subs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_InitTick+0xac>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_InitTick+0xb0>)
 8000900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_InitTick+0xac>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_InitTick+0xac>)
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_InitTick+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_InitTick+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_InitTick+0xac>)
 800091e:	f000 fdf7 	bl	8001510 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <HAL_InitTick+0xac>)
 800092a:	f000 fe26 	bl	800157a <HAL_TIM_Base_Start_IT>
 800092e:	4603      	mov	r3, r0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	431bde83 	.word	0x431bde83
 8000944:	200143a0 	.word	0x200143a0
 8000948:	40000c00 	.word	0x40000c00

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM5_IRQHandler+0x10>)
 8000986:	f000 fe1c 	bl	80015c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200143a0 	.word	0x200143a0

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <SystemInit+0x28>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <SystemInit+0x28>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SystemInit+0x28>)
 80009aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ae:	609a      	str	r2, [r3, #8]
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
  ldr  r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ffd3 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f004 fabb 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fe15 	bl	8000620 <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80009fc:	080059e4 	.word	0x080059e4
  ldr  r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a04:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000a08:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000a0c:	20014490 	.word	0x20014490

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_Init+0x40>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_Init+0x40>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_Init+0x40>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f8d8 	bl	8000bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff28 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fefe 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200143e0 	.word	0x200143e0

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200143e0 	.word	0x200143e0

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff4c 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1a:	f7ff ff61 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	6978      	ldr	r0, [r7, #20]
 8000c26:	f7ff ffb1 	bl	8000b8c <NVIC_EncodePriority>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff80 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff54 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e25b      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d075      	beq.n	8000d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c7a:	4ba3      	ldr	r3, [pc, #652]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d00c      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c86:	4ba0      	ldr	r3, [pc, #640]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d112      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c92:	4b9d      	ldr	r3, [pc, #628]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c9e:	d10b      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca0:	4b99      	ldr	r3, [pc, #612]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d05b      	beq.n	8000d64 <HAL_RCC_OscConfig+0x108>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d157      	bne.n	8000d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e236      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d106      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x74>
 8000cc2:	4b91      	ldr	r3, [pc, #580]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a90      	ldr	r2, [pc, #576]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01d      	b.n	8000d0c <HAL_RCC_OscConfig+0xb0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x98>
 8000cda:	4b8b      	ldr	r3, [pc, #556]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a8a      	ldr	r2, [pc, #552]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b88      	ldr	r3, [pc, #544]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a87      	ldr	r2, [pc, #540]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e00b      	b.n	8000d0c <HAL_RCC_OscConfig+0xb0>
 8000cf4:	4b84      	ldr	r3, [pc, #528]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a83      	ldr	r2, [pc, #524]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b81      	ldr	r3, [pc, #516]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a80      	ldr	r2, [pc, #512]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff feb4 	bl	8000a80 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff feb0 	bl	8000a80 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e1fb      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0xc0>
 8000d3a:	e014      	b.n	8000d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fea0 	bl	8000a80 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fe9c 	bl	8000a80 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1e7      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	4b6c      	ldr	r3, [pc, #432]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0xe8>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d063      	beq.n	8000e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d72:	4b65      	ldr	r3, [pc, #404]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d7e:	4b62      	ldr	r3, [pc, #392]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d11c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d8a:	4b5f      	ldr	r3, [pc, #380]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4b5c      	ldr	r3, [pc, #368]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <HAL_RCC_OscConfig+0x152>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d001      	beq.n	8000dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1bb      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dae:	4b56      	ldr	r3, [pc, #344]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4952      	ldr	r1, [pc, #328]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	e03a      	b.n	8000e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d020      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_RCC_OscConfig+0x2b0>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fe55 	bl	8000a80 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fe51 	bl	8000a80 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e19c      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4940      	ldr	r1, [pc, #256]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <HAL_RCC_OscConfig+0x2b0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fe34 	bl	8000a80 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fe30 	bl	8000a80 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e17b      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d030      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d016      	beq.n	8000e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x2b4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e54:	f7ff fe14 	bl	8000a80 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fe10 	bl	8000a80 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e15b      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x200>
 8000e7a:	e015      	b.n	8000ea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_RCC_OscConfig+0x2b4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fdfd 	bl	8000a80 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fdf9 	bl	8000a80 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e144      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a0 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_RCC_OscConfig+0x2ac>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_RCC_OscConfig+0x2b8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d121      	bne.n	8000f36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_RCC_OscConfig+0x2b8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_RCC_OscConfig+0x2b8>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fdbf 	bl	8000a80 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	e011      	b.n	8000f2a <HAL_RCC_OscConfig+0x2ce>
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	42470000 	.word	0x42470000
 8000f10:	42470e80 	.word	0x42470e80
 8000f14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f18:	f7ff fdb2 	bl	8000a80 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e0fd      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b81      	ldr	r3, [pc, #516]	; (8001130 <HAL_RCC_OscConfig+0x4d4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d106      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2f0>
 8000f3e:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f42:	4a7c      	ldr	r2, [pc, #496]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6713      	str	r3, [r2, #112]	; 0x70
 8000f4a:	e01c      	b.n	8000f86 <HAL_RCC_OscConfig+0x32a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x312>
 8000f54:	4b77      	ldr	r3, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f58:	4a76      	ldr	r2, [pc, #472]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f60:	4b74      	ldr	r3, [pc, #464]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f64:	4a73      	ldr	r2, [pc, #460]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6c:	e00b      	b.n	8000f86 <HAL_RCC_OscConfig+0x32a>
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f72:	4a70      	ldr	r2, [pc, #448]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7a:	4b6e      	ldr	r3, [pc, #440]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7e:	4a6d      	ldr	r2, [pc, #436]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d015      	beq.n	8000fba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fd77 	bl	8000a80 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f94:	e00a      	b.n	8000fac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fd73 	bl	8000a80 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e0bc      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	4b61      	ldr	r3, [pc, #388]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ee      	beq.n	8000f96 <HAL_RCC_OscConfig+0x33a>
 8000fb8:	e014      	b.n	8000fe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fd61 	bl	8000a80 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fd5d 	bl	8000a80 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0a6      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	4b56      	ldr	r3, [pc, #344]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1ee      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d105      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fea:	4b52      	ldr	r3, [pc, #328]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8000ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8092 	beq.w	8001124 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001000:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d05c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d141      	bne.n	8001098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001014:	4b48      	ldr	r3, [pc, #288]	; (8001138 <HAL_RCC_OscConfig+0x4dc>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fd31 	bl	8000a80 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fd2d 	bl	8000a80 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e078      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001034:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f0      	bne.n	8001022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69da      	ldr	r2, [r3, #28]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	019b      	lsls	r3, r3, #6
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	3b01      	subs	r3, #1
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	061b      	lsls	r3, r3, #24
 8001064:	4933      	ldr	r1, [pc, #204]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 8001066:	4313      	orrs	r3, r2
 8001068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_RCC_OscConfig+0x4dc>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fd06 	bl	8000a80 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001078:	f7ff fd02 	bl	8000a80 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e04d      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x41c>
 8001096:	e045      	b.n	8001124 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <HAL_RCC_OscConfig+0x4dc>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fcef 	bl	8000a80 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a6:	f7ff fceb 	bl	8000a80 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e036      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f0      	bne.n	80010a6 <HAL_RCC_OscConfig+0x44a>
 80010c4:	e02e      	b.n	8001124 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e029      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_RCC_OscConfig+0x4d8>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d11c      	bne.n	8001120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d115      	bne.n	8001120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010fa:	4013      	ands	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001100:	4293      	cmp	r3, r2
 8001102:	d10d      	bne.n	8001120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800110e:	429a      	cmp	r2, r3
 8001110:	d106      	bne.n	8001120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000
 8001134:	40023800 	.word	0x40023800
 8001138:	42470060 	.word	0x42470060

0800113c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0cc      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001150:	4b68      	ldr	r3, [pc, #416]	; (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d90c      	bls.n	8001178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d001      	beq.n	8001178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0b8      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001190:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800119a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b4:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	494d      	ldr	r1, [pc, #308]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d044      	beq.n	800125c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d119      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e07f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d003      	beq.n	80011fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e06f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e067      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f023 0203 	bic.w	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4934      	ldr	r1, [pc, #208]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800122c:	f7ff fc28 	bl	8000a80 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	e00a      	b.n	800124a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001234:	f7ff fc24 	bl	8000a80 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001242:	4293      	cmp	r3, r2
 8001244:	d901      	bls.n	800124a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e04f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 020c 	and.w	r2, r3, #12
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	429a      	cmp	r2, r3
 800125a:	d1eb      	bne.n	8001234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d20c      	bcs.n	8001284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e032      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4916      	ldr	r1, [pc, #88]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d009      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	490e      	ldr	r1, [pc, #56]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c2:	f000 f821 	bl	8001308 <HAL_RCC_GetSysClockFreq>
 80012c6:	4601      	mov	r1, r0
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	fa21 f303 	lsr.w	r3, r1, r3
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fad8 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00
 80012f8:	40023800 	.word	0x40023800
 80012fc:	0800594c 	.word	0x0800594c
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <HAL_RCC_GetSysClockFreq+0x158>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b04      	cmp	r3, #4
 8001328:	d007      	beq.n	800133a <HAL_RCC_GetSysClockFreq+0x32>
 800132a:	2b08      	cmp	r3, #8
 800132c:	d008      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x38>
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 808d 	bne.w	800144e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001336:	60bb      	str	r3, [r7, #8]
       break;
 8001338:	e08c      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <HAL_RCC_GetSysClockFreq+0x160>)
 800133c:	60bb      	str	r3, [r7, #8]
      break;
 800133e:	e089      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <HAL_RCC_GetSysClockFreq+0x158>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_RCC_GetSysClockFreq+0x158>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d023      	beq.n	800139e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <HAL_RCC_GetSysClockFreq+0x158>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	099b      	lsrs	r3, r3, #6
 800135c:	f04f 0400 	mov.w	r4, #0
 8001360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	ea03 0501 	and.w	r5, r3, r1
 800136c:	ea04 0602 	and.w	r6, r4, r2
 8001370:	4a3d      	ldr	r2, [pc, #244]	; (8001468 <HAL_RCC_GetSysClockFreq+0x160>)
 8001372:	fb02 f106 	mul.w	r1, r2, r6
 8001376:	2200      	movs	r2, #0
 8001378:	fb02 f205 	mul.w	r2, r2, r5
 800137c:	440a      	add	r2, r1
 800137e:	493a      	ldr	r1, [pc, #232]	; (8001468 <HAL_RCC_GetSysClockFreq+0x160>)
 8001380:	fba5 0101 	umull	r0, r1, r5, r1
 8001384:	1853      	adds	r3, r2, r1
 8001386:	4619      	mov	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0400 	mov.w	r4, #0
 800138e:	461a      	mov	r2, r3
 8001390:	4623      	mov	r3, r4
 8001392:	f7fe ffc5 	bl	8000320 <__aeabi_uldivmod>
 8001396:	4603      	mov	r3, r0
 8001398:	460c      	mov	r4, r1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e049      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_RCC_GetSysClockFreq+0x158>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	099b      	lsrs	r3, r3, #6
 80013a4:	f04f 0400 	mov.w	r4, #0
 80013a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	ea03 0501 	and.w	r5, r3, r1
 80013b4:	ea04 0602 	and.w	r6, r4, r2
 80013b8:	4629      	mov	r1, r5
 80013ba:	4632      	mov	r2, r6
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	f04f 0400 	mov.w	r4, #0
 80013c4:	0154      	lsls	r4, r2, #5
 80013c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ca:	014b      	lsls	r3, r1, #5
 80013cc:	4619      	mov	r1, r3
 80013ce:	4622      	mov	r2, r4
 80013d0:	1b49      	subs	r1, r1, r5
 80013d2:	eb62 0206 	sbc.w	r2, r2, r6
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	f04f 0400 	mov.w	r4, #0
 80013de:	0194      	lsls	r4, r2, #6
 80013e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013e4:	018b      	lsls	r3, r1, #6
 80013e6:	1a5b      	subs	r3, r3, r1
 80013e8:	eb64 0402 	sbc.w	r4, r4, r2
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	00e2      	lsls	r2, r4, #3
 80013f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013fa:	00d9      	lsls	r1, r3, #3
 80013fc:	460b      	mov	r3, r1
 80013fe:	4614      	mov	r4, r2
 8001400:	195b      	adds	r3, r3, r5
 8001402:	eb44 0406 	adc.w	r4, r4, r6
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	02a2      	lsls	r2, r4, #10
 8001410:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001414:	0299      	lsls	r1, r3, #10
 8001416:	460b      	mov	r3, r1
 8001418:	4614      	mov	r4, r2
 800141a:	4618      	mov	r0, r3
 800141c:	4621      	mov	r1, r4
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f04f 0400 	mov.w	r4, #0
 8001424:	461a      	mov	r2, r3
 8001426:	4623      	mov	r3, r4
 8001428:	f7fe ff7a 	bl	8000320 <__aeabi_uldivmod>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_GetSysClockFreq+0x158>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0c1b      	lsrs	r3, r3, #16
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	3301      	adds	r3, #1
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	60bb      	str	r3, [r7, #8]
      break;
 800144c:	e002      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001450:	60bb      	str	r3, [r7, #8]
      break;
 8001452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001454:	68bb      	ldr	r3, [r7, #8]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	00f42400 	.word	0x00f42400
 8001468:	017d7840 	.word	0x017d7840

0800146c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_RCC_GetHCLKFreq+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000

08001484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001488:	f7ff fff0 	bl	800146c <HAL_RCC_GetHCLKFreq>
 800148c:	4601      	mov	r1, r0
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	0a9b      	lsrs	r3, r3, #10
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	0800595c 	.word	0x0800595c

080014ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	220f      	movs	r2, #15
 80014ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_RCC_GetClockConfig+0x5c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_GetClockConfig+0x5c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	08db      	lsrs	r3, r3, #3
 80014e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_RCC_GetClockConfig+0x60>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0207 	and.w	r2, r3, #7
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	601a      	str	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40023c00 	.word	0x40023c00

08001510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e01d      	b.n	800155e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f815 	bl	8001566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f000 f968 	bl	8001824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d007      	beq.n	80015b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d122      	bne.n	800161e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d11b      	bne.n	800161e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f06f 0202 	mvn.w	r2, #2
 80015ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f8ee 	bl	80017e6 <HAL_TIM_IC_CaptureCallback>
 800160a:	e005      	b.n	8001618 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8e0 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f8f1 	bl	80017fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b04      	cmp	r3, #4
 800162a:	d122      	bne.n	8001672 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b04      	cmp	r3, #4
 8001638:	d11b      	bne.n	8001672 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f06f 0204 	mvn.w	r2, #4
 8001642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8c4 	bl	80017e6 <HAL_TIM_IC_CaptureCallback>
 800165e:	e005      	b.n	800166c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f8b6 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f8c7 	bl	80017fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b08      	cmp	r3, #8
 800167e:	d122      	bne.n	80016c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b08      	cmp	r3, #8
 800168c:	d11b      	bne.n	80016c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f06f 0208 	mvn.w	r2, #8
 8001696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2204      	movs	r2, #4
 800169c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f89a 	bl	80017e6 <HAL_TIM_IC_CaptureCallback>
 80016b2:	e005      	b.n	80016c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f88c 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f89d 	bl	80017fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d122      	bne.n	800171a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d11b      	bne.n	800171a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f06f 0210 	mvn.w	r2, #16
 80016ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2208      	movs	r2, #8
 80016f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f870 	bl	80017e6 <HAL_TIM_IC_CaptureCallback>
 8001706:	e005      	b.n	8001714 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f862 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f873 	bl	80017fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10e      	bne.n	8001746 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f06f 0201 	mvn.w	r2, #1
 800173e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff f867 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001750:	2b80      	cmp	r3, #128	; 0x80
 8001752:	d10e      	bne.n	8001772 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	d107      	bne.n	8001772 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800176a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f8e3 	bl	8001938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177c:	2b40      	cmp	r3, #64	; 0x40
 800177e:	d10e      	bne.n	800179e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	2b40      	cmp	r3, #64	; 0x40
 800178c:	d107      	bne.n	800179e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f838 	bl	800180e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d10e      	bne.n	80017ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d107      	bne.n	80017ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f06f 0220 	mvn.w	r2, #32
 80017c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f8ad 	bl	8001924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a34      	ldr	r2, [pc, #208]	; (8001908 <TIM_Base_SetConfig+0xe4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00f      	beq.n	800185c <TIM_Base_SetConfig+0x38>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001842:	d00b      	beq.n	800185c <TIM_Base_SetConfig+0x38>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <TIM_Base_SetConfig+0xe8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <TIM_Base_SetConfig+0x38>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a30      	ldr	r2, [pc, #192]	; (8001910 <TIM_Base_SetConfig+0xec>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d003      	beq.n	800185c <TIM_Base_SetConfig+0x38>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <TIM_Base_SetConfig+0xf0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d108      	bne.n	800186e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <TIM_Base_SetConfig+0xe4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01b      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187c:	d017      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <TIM_Base_SetConfig+0xe8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <TIM_Base_SetConfig+0xec>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00f      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <TIM_Base_SetConfig+0xf0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00b      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <TIM_Base_SetConfig+0xf4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <TIM_Base_SetConfig+0xf8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d003      	beq.n	80018ae <TIM_Base_SetConfig+0x8a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <TIM_Base_SetConfig+0xfc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d108      	bne.n	80018c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <TIM_Base_SetConfig+0xe4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d103      	bne.n	80018f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	615a      	str	r2, [r3, #20]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40010000 	.word	0x40010000
 800190c:	40000400 	.word	0x40000400
 8001910:	40000800 	.word	0x40000800
 8001914:	40000c00 	.word	0x40000c00
 8001918:	40014000 	.word	0x40014000
 800191c:	40014400 	.word	0x40014400
 8001920:	40014800 	.word	0x40014800

08001924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f103 0208 	add.w	r2, r3, #8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f103 0208 	add.w	r2, r3, #8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f103 0208 	add.w	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08c      	sub	sp, #48	; 0x30
 80019aa:	af04      	add	r7, sp, #16
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fe1a 	bl	80025f4 <pvPortMalloc>
 80019c0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019c8:	2058      	movs	r0, #88	; 0x58
 80019ca:	f000 fe13 	bl	80025f4 <pvPortMalloc>
 80019ce:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80019d6:	2258      	movs	r2, #88	; 0x58
 80019d8:	2100      	movs	r1, #0
 80019da:	69f8      	ldr	r0, [r7, #28]
 80019dc:	f003 fb02 	bl	8004fe4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
 80019e6:	e005      	b.n	80019f4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f000 febb 	bl	8002764 <vPortFree>
 80019ee:	e001      	b.n	80019f4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d013      	beq.n	8001a22 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f80e 	bl	8001a32 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001a16:	69f8      	ldr	r0, [r7, #28]
 8001a18:	f000 f898 	bl	8001b4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	e002      	b.n	8001a28 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a28:	69bb      	ldr	r3, [r7, #24]
    }
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b088      	sub	sp, #32
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	21a5      	movs	r1, #165	; 0xa5
 8001a4c:	f003 faca 	bl	8004fe4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f023 0307 	bic.w	r3, r3, #7
 8001a68:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <prvInitialiseNewTask+0x56>
 8001a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a78:	f383 8811 	msr	BASEPRI, r3
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e7fe      	b.n	8001a86 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01e      	beq.n	8001acc <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e012      	b.n	8001aba <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	7819      	ldrb	r1, [r3, #0]
 8001a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3334      	adds	r3, #52	; 0x34
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d9e9      	bls.n	8001a94 <prvInitialiseNewTask+0x62>
 8001ac0:	e000      	b.n	8001ac4 <prvInitialiseNewTask+0x92>
            {
                break;
 8001ac2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d909      	bls.n	8001ae6 <prvInitialiseNewTask+0xb4>
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e7fe      	b.n	8001ae4 <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d901      	bls.n	8001af0 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001aec:	2304      	movs	r3, #4
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001afa:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	3304      	adds	r3, #4
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff43 	bl	800198c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	3318      	adds	r3, #24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff3e 	bl	800198c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b14:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	f1c3 0205 	rsb	r2, r3, #5
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	69b8      	ldr	r0, [r7, #24]
 8001b2c:	f000 fb7e 	bl	800222c <pxPortInitialiseStack>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001b54:	f000 fc5a 	bl	800240c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001b58:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <prvAddNewTaskToReadyList+0x134>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <prvAddNewTaskToReadyList+0x134>)
 8001b60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001b62:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <prvAddNewTaskToReadyList+0x138>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001b6a:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <prvAddNewTaskToReadyList+0x138>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <prvAddNewTaskToReadyList+0x134>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d110      	bne.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b78:	f000 fafc 	bl	8002174 <prvInitialiseTaskLists>
 8001b7c:	e00d      	b.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <prvAddNewTaskToReadyList+0x13c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <prvAddNewTaskToReadyList+0x138>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d802      	bhi.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b94:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <prvAddNewTaskToReadyList+0x138>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <prvAddNewTaskToReadyList+0x140>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <prvAddNewTaskToReadyList+0x140>)
 8001ba2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <prvAddNewTaskToReadyList+0x140>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <prvAddNewTaskToReadyList+0x94>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 ff8d 	bl	8004ad4 <SEGGER_SYSVIEW_OnTaskCreate>
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	461d      	mov	r5, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461c      	mov	r4, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	1ae3      	subs	r3, r4, r3
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	f000 ff7a 	bl	8002ad4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fffa 	bl	8004bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	2201      	movs	r2, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <prvAddNewTaskToReadyList+0x144>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <prvAddNewTaskToReadyList+0x144>)
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfe:	4925      	ldr	r1, [pc, #148]	; (8001c94 <prvAddNewTaskToReadyList+0x148>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	3204      	adds	r2, #4
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1d1a      	adds	r2, r3, #4
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <prvAddNewTaskToReadyList+0x148>)
 8001c3e:	441a      	add	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	4912      	ldr	r1, [pc, #72]	; (8001c94 <prvAddNewTaskToReadyList+0x148>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	1c59      	adds	r1, r3, #1
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <prvAddNewTaskToReadyList+0x148>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4403      	add	r3, r0
 8001c64:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c66:	f000 fbff 	bl	8002468 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <prvAddNewTaskToReadyList+0x13c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <prvAddNewTaskToReadyList+0x138>)
 8001c74:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000016c 	.word	0x2000016c
 8001c84:	20000098 	.word	0x20000098
 8001c88:	20000178 	.word	0x20000178
 8001c8c:	20000188 	.word	0x20000188
 8001c90:	20000174 	.word	0x20000174
 8001c94:	2000009c 	.word	0x2000009c

08001c98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <vTaskSuspendAll+0x18>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <vTaskSuspendAll+0x18>)
 8001ca4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000194 	.word	0x20000194

08001cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <xTaskResumeAll+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <xTaskResumeAll+0x2a>
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	e7fe      	b.n	8001cdc <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001cde:	f000 fb95 	bl	800240c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001ce2:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <xTaskResumeAll+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <xTaskResumeAll+0x1c0>)
 8001cea:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cec:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <xTaskResumeAll+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 80b8 	bne.w	8001e66 <xTaskResumeAll+0x1b2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cf6:	4b60      	ldr	r3, [pc, #384]	; (8001e78 <xTaskResumeAll+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80b3 	beq.w	8001e66 <xTaskResumeAll+0x1b2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d00:	e08e      	b.n	8001e20 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d02:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <xTaskResumeAll+0x1c8>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	6a12      	ldr	r2, [r2, #32]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	69d2      	ldr	r2, [r2, #28]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3318      	adds	r3, #24
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d103      	bne.n	8001d38 <xTaskResumeAll+0x84>
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	6892      	ldr	r2, [r2, #8]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d103      	bne.n	8001d76 <xTaskResumeAll+0xc2>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 ff27 	bl	8004bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	2201      	movs	r2, #1
 8001d94:	409a      	lsls	r2, r3
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <xTaskResumeAll+0x1cc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <xTaskResumeAll+0x1cc>)
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	4937      	ldr	r1, [pc, #220]	; (8001e84 <xTaskResumeAll+0x1d0>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3304      	adds	r3, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	3204      	adds	r2, #4
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	1d1a      	adds	r2, r3, #4
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <xTaskResumeAll+0x1d0>)
 8001de4:	441a      	add	r2, r3
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dee:	4925      	ldr	r1, [pc, #148]	; (8001e84 <xTaskResumeAll+0x1d0>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	1c59      	adds	r1, r3, #1
 8001dfe:	4821      	ldr	r0, [pc, #132]	; (8001e84 <xTaskResumeAll+0x1d0>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4403      	add	r3, r0
 8001e0a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <xTaskResumeAll+0x1d4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <xTaskResumeAll+0x1d8>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <xTaskResumeAll+0x1c8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f af6c 	bne.w	8001d02 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e30:	f000 f9e0 	bl	80021f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <xTaskResumeAll+0x1dc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001e40:	f000 f83a 	bl	8001eb8 <xTaskIncrementTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <xTaskResumeAll+0x1d8>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f1      	bne.n	8001e40 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <xTaskResumeAll+0x1dc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <xTaskResumeAll+0x1d8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001e66:	f000 faff 	bl	8002468 <vPortExitCritical>

    return xAlreadyYielded;
 8001e6a:	697b      	ldr	r3, [r7, #20]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000194 	.word	0x20000194
 8001e78:	2000016c 	.word	0x2000016c
 8001e7c:	20000130 	.word	0x20000130
 8001e80:	20000174 	.word	0x20000174
 8001e84:	2000009c 	.word	0x2000009c
 8001e88:	20000098 	.word	0x20000098
 8001e8c:	20000180 	.word	0x20000180
 8001e90:	2000017c 	.word	0x2000017c

08001e94 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e9a:	f000 fb6d 	bl	8002578 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <xTaskGetTickCountFromISR+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001ea8:	683b      	ldr	r3, [r7, #0]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000170 	.word	0x20000170

08001eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <xTaskIncrementTick+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 80d0 	bne.w	800206c <xTaskIncrementTick+0x1b4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ecc:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <xTaskIncrementTick+0x1cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <xTaskIncrementTick+0x1cc>)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d11f      	bne.n	8001f20 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ee0:	4b69      	ldr	r3, [pc, #420]	; (8002088 <xTaskIncrementTick+0x1d0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <xTaskIncrementTick+0x46>
 8001eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eee:	f383 8811 	msr	BASEPRI, r3
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	f3bf 8f4f 	dsb	sy
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	e7fe      	b.n	8001efc <xTaskIncrementTick+0x44>
 8001efe:	4b62      	ldr	r3, [pc, #392]	; (8002088 <xTaskIncrementTick+0x1d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	4b61      	ldr	r3, [pc, #388]	; (800208c <xTaskIncrementTick+0x1d4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5f      	ldr	r2, [pc, #380]	; (8002088 <xTaskIncrementTick+0x1d0>)
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4a5f      	ldr	r2, [pc, #380]	; (800208c <xTaskIncrementTick+0x1d4>)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <xTaskIncrementTick+0x1d8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <xTaskIncrementTick+0x1d8>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	f000 f96a 	bl	80021f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001f20:	4b5c      	ldr	r3, [pc, #368]	; (8002094 <xTaskIncrementTick+0x1dc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a3a      	ldr	r2, [r7, #32]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	f0c0 80a5 	bcc.w	8002076 <xTaskIncrementTick+0x1be>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f2c:	4b56      	ldr	r3, [pc, #344]	; (8002088 <xTaskIncrementTick+0x1d0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <xTaskIncrementTick+0x1dc>)
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	601a      	str	r2, [r3, #0]
                    break;
 8001f3e:	e09a      	b.n	8002076 <xTaskIncrementTick+0x1be>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f40:	4b51      	ldr	r3, [pc, #324]	; (8002088 <xTaskIncrementTick+0x1d0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d203      	bcs.n	8001f60 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001f58:	4a4e      	ldr	r2, [pc, #312]	; (8002094 <xTaskIncrementTick+0x1dc>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001f5e:	e08a      	b.n	8002076 <xTaskIncrementTick+0x1be>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	6892      	ldr	r2, [r2, #8]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3304      	adds	r3, #4
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d103      	bne.n	8001f8e <xTaskIncrementTick+0xd6>
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01e      	beq.n	8001fe4 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	6a12      	ldr	r2, [r2, #32]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	69d2      	ldr	r2, [r2, #28]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d103      	bne.n	8001fd4 <xTaskIncrementTick+0x11c>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fdf8 	bl	8004bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <xTaskIncrementTick+0x1e0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	4a27      	ldr	r2, [pc, #156]	; (8002098 <xTaskIncrementTick+0x1e0>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	4926      	ldr	r1, [pc, #152]	; (800209c <xTaskIncrementTick+0x1e4>)
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	3204      	adds	r2, #4
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <xTaskIncrementTick+0x1e4>)
 8002042:	441a      	add	r2, r3
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	615a      	str	r2, [r3, #20]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	4913      	ldr	r1, [pc, #76]	; (800209c <xTaskIncrementTick+0x1e4>)
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1c59      	adds	r1, r3, #1
 800205c:	480f      	ldr	r0, [pc, #60]	; (800209c <xTaskIncrementTick+0x1e4>)
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4403      	add	r3, r0
 8002068:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800206a:	e75f      	b.n	8001f2c <xTaskIncrementTick+0x74>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <xTaskIncrementTick+0x1e8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <xTaskIncrementTick+0x1e8>)
 8002074:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002078:	4618      	mov	r0, r3
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000194 	.word	0x20000194
 8002084:	20000170 	.word	0x20000170
 8002088:	20000128 	.word	0x20000128
 800208c:	2000012c 	.word	0x2000012c
 8002090:	20000184 	.word	0x20000184
 8002094:	2000018c 	.word	0x2000018c
 8002098:	20000174 	.word	0x20000174
 800209c:	2000009c 	.word	0x2000009c
 80020a0:	2000017c 	.word	0x2000017c

080020a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <vTaskSwitchContext+0xb8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <vTaskSwitchContext+0xbc>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80020b8:	e04c      	b.n	8002154 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <vTaskSwitchContext+0xbc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <vTaskSwitchContext+0xc0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f1c3 031f 	rsb	r3, r3, #31
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4924      	ldr	r1, [pc, #144]	; (8002168 <vTaskSwitchContext+0xc4>)
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <vTaskSwitchContext+0x5a>
        __asm volatile
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e7fe      	b.n	80020fc <vTaskSwitchContext+0x58>
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <vTaskSwitchContext+0xc4>)
 800210a:	4413      	add	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	3308      	adds	r3, #8
 8002120:	429a      	cmp	r2, r3
 8002122:	d104      	bne.n	800212e <vTaskSwitchContext+0x8a>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <vTaskSwitchContext+0xc8>)
 8002136:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <vTaskSwitchContext+0xc8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <vTaskSwitchContext+0xcc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d102      	bne.n	800214a <vTaskSwitchContext+0xa6>
 8002144:	f002 fcaa 	bl	8004a9c <SEGGER_SYSVIEW_OnIdle>
}
 8002148:	e004      	b.n	8002154 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <vTaskSwitchContext+0xc8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f002 fd02 	bl	8004b58 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000194 	.word	0x20000194
 8002160:	20000180 	.word	0x20000180
 8002164:	20000174 	.word	0x20000174
 8002168:	2000009c 	.word	0x2000009c
 800216c:	20000098 	.word	0x20000098
 8002170:	20000190 	.word	0x20000190

08002174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e00c      	b.n	800219a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <prvInitialiseTaskLists+0x60>)
 800218c:	4413      	add	r3, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fbdc 	bl	800194c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d9ef      	bls.n	8002180 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <prvInitialiseTaskLists+0x64>)
 80021a2:	f7ff fbd3 	bl	800194c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <prvInitialiseTaskLists+0x68>)
 80021a8:	f7ff fbd0 	bl	800194c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <prvInitialiseTaskLists+0x6c>)
 80021ae:	f7ff fbcd 	bl	800194c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80021b2:	480c      	ldr	r0, [pc, #48]	; (80021e4 <prvInitialiseTaskLists+0x70>)
 80021b4:	f7ff fbca 	bl	800194c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <prvInitialiseTaskLists+0x74>)
 80021ba:	f7ff fbc7 	bl	800194c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <prvInitialiseTaskLists+0x78>)
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <prvInitialiseTaskLists+0x64>)
 80021c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <prvInitialiseTaskLists+0x7c>)
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <prvInitialiseTaskLists+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000009c 	.word	0x2000009c
 80021d8:	20000100 	.word	0x20000100
 80021dc:	20000114 	.word	0x20000114
 80021e0:	20000130 	.word	0x20000130
 80021e4:	20000144 	.word	0x20000144
 80021e8:	20000158 	.word	0x20000158
 80021ec:	20000128 	.word	0x20000128
 80021f0:	2000012c 	.word	0x2000012c

080021f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <prvResetNextTaskUnblockTime+0x30>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d104      	bne.n	800220c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <prvResetNextTaskUnblockTime+0x34>)
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800220a:	e005      	b.n	8002218 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <prvResetNextTaskUnblockTime+0x30>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <prvResetNextTaskUnblockTime+0x34>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000128 	.word	0x20000128
 8002228:	2000018c 	.word	0x2000018c

0800222c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3b04      	subs	r3, #4
 800223c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002244:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3b04      	subs	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3b04      	subs	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <pxPortInitialiseStack+0x64>)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b14      	subs	r3, #20
 8002266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3b04      	subs	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f06f 0202 	mvn.w	r2, #2
 800227a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3b20      	subs	r3, #32
 8002280:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	08002295 	.word	0x08002295

08002294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <prvTaskExitError+0x50>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d009      	beq.n	80022bc <prvTaskExitError+0x28>
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e7fe      	b.n	80022ba <prvTaskExitError+0x26>
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80022ce:	bf00      	nop
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0fc      	beq.n	80022d0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000000c 	.word	0x2000000c
	...

080022f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <pxCurrentTCBConst2>)
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	6808      	ldr	r0, [r1, #0]
 80022f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022fa:	f380 8809 	msr	PSP, r0
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f380 8811 	msr	BASEPRI, r0
 800230a:	4770      	bx	lr
 800230c:	f3af 8000 	nop.w

08002310 <pxCurrentTCBConst2>:
 8002310:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop

08002318 <vInitPrioGroupValue>:
}
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <vInitPrioGroupValue+0xdc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a35      	ldr	r2, [pc, #212]	; (80023f8 <vInitPrioGroupValue+0xe0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d109      	bne.n	800233c <vInitPrioGroupValue+0x24>
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e7fe      	b.n	800233a <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <vInitPrioGroupValue+0xdc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <vInitPrioGroupValue+0xe4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d109      	bne.n	800235a <vInitPrioGroupValue+0x42>
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e7fe      	b.n	8002358 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <vInitPrioGroupValue+0xe8>)
 800235c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	22ff      	movs	r2, #255	; 0xff
 800236a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <vInitPrioGroupValue+0xec>)
 8002380:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <vInitPrioGroupValue+0xf0>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002388:	e009      	b.n	800239e <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <vInitPrioGroupValue+0xf0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3b01      	subs	r3, #1
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <vInitPrioGroupValue+0xf0>)
 8002392:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d0ef      	beq.n	800238a <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <vInitPrioGroupValue+0xf0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d009      	beq.n	80023ca <vInitPrioGroupValue+0xb2>
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	e7fe      	b.n	80023c8 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <vInitPrioGroupValue+0xf0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <vInitPrioGroupValue+0xf0>)
 80023d2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <vInitPrioGroupValue+0xf0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <vInitPrioGroupValue+0xf0>)
 80023de:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00
 80023f8:	410fc271 	.word	0x410fc271
 80023fc:	410fc270 	.word	0x410fc270
 8002400:	e000e400 	.word	0xe000e400
 8002404:	20000198 	.word	0x20000198
 8002408:	2000019c 	.word	0x2000019c

0800240c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <vPortEnterCritical+0x54>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <vPortEnterCritical+0x54>)
 800242c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <vPortEnterCritical+0x54>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10e      	bne.n	8002454 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <vPortEnterCritical+0x58>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <vPortEnterCritical+0x48>
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	e7fe      	b.n	8002452 <vPortEnterCritical+0x46>
    }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	2000000c 	.word	0x2000000c
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <vPortExitCritical+0x4c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <vPortExitCritical+0x22>
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	e7fe      	b.n	8002488 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <vPortExitCritical+0x4c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3b01      	subs	r3, #1
 8002490:	4a08      	ldr	r2, [pc, #32]	; (80024b4 <vPortExitCritical+0x4c>)
 8002492:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <vPortExitCritical+0x4c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d104      	bne.n	80024a6 <vPortExitCritical+0x3e>
 800249c:	2300      	movs	r3, #0
 800249e:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	2000000c 	.word	0x2000000c
	...

080024c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80024c0:	f3ef 8009 	mrs	r0, PSP
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <pxCurrentTCBConst>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f01e 0f10 	tst.w	lr, #16
 80024d0:	bf08      	it	eq
 80024d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80024d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024da:	6010      	str	r0, [r2, #0]
 80024dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80024e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024e4:	f380 8811 	msr	BASEPRI, r0
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f7ff fdd8 	bl	80020a4 <vTaskSwitchContext>
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f380 8811 	msr	BASEPRI, r0
 80024fc:	bc09      	pop	{r0, r3}
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	6808      	ldr	r0, [r1, #0]
 8002502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002506:	f01e 0f10 	tst.w	lr, #16
 800250a:	bf08      	it	eq
 800250c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002510:	f380 8809 	msr	PSP, r0
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w

08002520 <pxCurrentTCBConst>:
 8002520:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop

08002528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
        __asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002540:	f002 fa32 	bl	80049a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002544:	f7ff fcb8 	bl	8001eb8 <xTaskIncrementTick>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800254e:	f002 fa89 	bl	8004a64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <SysTick_Handler+0x4c>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e001      	b.n	8002560 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800255c:	f002 fa66 	bl	8004a2c <SEGGER_SYSVIEW_RecordExitISR>
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800257e:	f3ef 8305 	mrs	r3, IPSR
 8002582:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	d913      	bls.n	80025b2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <vPortValidateInterruptPriority+0x6c>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <vPortValidateInterruptPriority+0x70>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	7afa      	ldrb	r2, [r7, #11]
 800259a:	429a      	cmp	r2, r3
 800259c:	d209      	bcs.n	80025b2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	e7fe      	b.n	80025b0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <vPortValidateInterruptPriority+0x74>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <vPortValidateInterruptPriority+0x78>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d909      	bls.n	80025d6 <vPortValidateInterruptPriority+0x5e>
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	e7fe      	b.n	80025d4 <vPortValidateInterruptPriority+0x5c>
    }
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e3f0 	.word	0xe000e3f0
 80025e8:	20000198 	.word	0x20000198
 80025ec:	e000ed0c 	.word	0xe000ed0c
 80025f0:	2000019c 	.word	0x2000019c

080025f4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002600:	f7ff fb4a 	bl	8001c98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002604:	4b52      	ldr	r3, [pc, #328]	; (8002750 <pvPortMalloc+0x15c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800260c:	f000 f904 	bl	8002818 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d012      	beq.n	800263c <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002616:	2208      	movs	r2, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	3308      	adds	r3, #8
 8002622:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	43db      	mvns	r3, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d804      	bhi.n	8002638 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	e001      	b.n	800263c <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db6f      	blt.n	8002722 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d06c      	beq.n	8002722 <pvPortMalloc+0x12e>
 8002648:	4b42      	ldr	r3, [pc, #264]	; (8002754 <pvPortMalloc+0x160>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d867      	bhi.n	8002722 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <pvPortMalloc+0x164>)
 8002654:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <pvPortMalloc+0x164>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800265c:	e004      	b.n	8002668 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d903      	bls.n	800267a <pvPortMalloc+0x86>
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f1      	bne.n	800265e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <pvPortMalloc+0x15c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	429a      	cmp	r2, r3
 8002682:	d04e      	beq.n	8002722 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2208      	movs	r2, #8
 800268a:	4413      	add	r3, r2
 800268c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	2308      	movs	r3, #8
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d91e      	bls.n	80026e4 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <pvPortMalloc+0xd8>
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	e7fe      	b.n	80026ca <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f000 f8f6 	bl	80028d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <pvPortMalloc+0x160>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <pvPortMalloc+0x160>)
 80026f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <pvPortMalloc+0x160>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <pvPortMalloc+0x168>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d203      	bcs.n	8002706 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <pvPortMalloc+0x160>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <pvPortMalloc+0x168>)
 8002704:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <pvPortMalloc+0x16c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a10      	ldr	r2, [pc, #64]	; (8002760 <pvPortMalloc+0x16c>)
 8002720:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002722:	f7ff fac7 	bl	8001cb4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <pvPortMalloc+0x150>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e7fe      	b.n	8002742 <pvPortMalloc+0x14e>
    return pvReturn;
 8002744:	69fb      	ldr	r3, [r7, #28]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20012da8 	.word	0x20012da8
 8002754:	20012dac 	.word	0x20012dac
 8002758:	20012da0 	.word	0x20012da0
 800275c:	20012db0 	.word	0x20012db0
 8002760:	20012db4 	.word	0x20012db4

08002764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d047      	beq.n	8002806 <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002776:	2308      	movs	r3, #8
 8002778:	425b      	negs	r3, r3
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4413      	add	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db09      	blt.n	80027a0 <vPortFree+0x3c>
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e7fe      	b.n	800279e <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <vPortFree+0x58>
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	e7fe      	b.n	80027ba <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0fdb      	lsrs	r3, r3, #31
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01c      	beq.n	8002806 <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d118      	bne.n	8002806 <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80027e0:	f7ff fa5a 	bl	8001c98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <vPortFree+0xac>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <vPortFree+0xac>)
 80027f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027f2:	6938      	ldr	r0, [r7, #16]
 80027f4:	f000 f86c 	bl	80028d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <vPortFree+0xb0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <vPortFree+0xb0>)
 8002800:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002802:	f7ff fa57 	bl	8001cb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20012dac 	.word	0x20012dac
 8002814:	20012db8 	.word	0x20012db8

08002818 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800281e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002822:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <prvHeapInit+0xa4>)
 8002826:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3307      	adds	r3, #7
 8002836:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0307 	bic.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <prvHeapInit+0xa4>)
 8002848:	4413      	add	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <prvHeapInit+0xa8>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <prvHeapInit+0xa8>)
 8002858:	2200      	movs	r2, #0
 800285a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002864:	2208      	movs	r2, #8
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0307 	bic.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <prvHeapInit+0xac>)
 8002878:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <prvHeapInit+0xac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <prvHeapInit+0xac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <prvHeapInit+0xac>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <prvHeapInit+0xb0>)
 80028a6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <prvHeapInit+0xb4>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	200001a0 	.word	0x200001a0
 80028c0:	20012da0 	.word	0x20012da0
 80028c4:	20012da8 	.word	0x20012da8
 80028c8:	20012db0 	.word	0x20012db0
 80028cc:	20012dac 	.word	0x20012dac

080028d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <prvInsertBlockIntoFreeList+0xac>)
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e002      	b.n	80028e4 <prvInsertBlockIntoFreeList+0x14>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d8f7      	bhi.n	80028de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d108      	bne.n	8002912 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	441a      	add	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	441a      	add	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d118      	bne.n	8002958 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <prvInsertBlockIntoFreeList+0xb0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d00d      	beq.n	800294e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e008      	b.n	8002960 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <prvInsertBlockIntoFreeList+0xb0>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e003      	b.n	8002960 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d002      	beq.n	800296e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20012da0 	.word	0x20012da0
 8002980:	20012da8 	.word	0x20012da8

08002984 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <_cbSendSystemDesc+0x14>)
 800298a:	f001 ffb9 	bl	8004900 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800298e:	4803      	ldr	r0, [pc, #12]	; (800299c <_cbSendSystemDesc+0x18>)
 8002990:	f001 ffb6 	bl	8004900 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0800588c 	.word	0x0800588c
 800299c:	080058c8 	.word	0x080058c8

080029a0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <SEGGER_SYSVIEW_Conf+0x20>)
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SEGGER_SYSVIEW_Conf+0x20>)
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <SEGGER_SYSVIEW_Conf+0x24>)
 80029ae:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <SEGGER_SYSVIEW_Conf+0x28>)
 80029b0:	f001 fc2a 	bl	8004208 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80029b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80029b8:	f001 fc6a 	bl	8004290 <SEGGER_SYSVIEW_SetRAMBase>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000000 	.word	0x20000000
 80029c4:	08002985 	.word	0x08002985
 80029c8:	08005964 	.word	0x08005964

080029cc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	e034      	b.n	8002a42 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80029d8:	491e      	ldr	r1, [pc, #120]	; (8002a54 <_cbSendTaskList+0x88>)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	491a      	ldr	r1, [pc, #104]	; (8002a54 <_cbSendTaskList+0x88>)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3304      	adds	r3, #4
 80029f8:	681c      	ldr	r4, [r3, #0]
 80029fa:	4916      	ldr	r1, [pc, #88]	; (8002a54 <_cbSendTaskList+0x88>)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3308      	adds	r3, #8
 8002a0a:	681d      	ldr	r5, [r3, #0]
 8002a0c:	4911      	ldr	r1, [pc, #68]	; (8002a54 <_cbSendTaskList+0x88>)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	681e      	ldr	r6, [r3, #0]
 8002a1e:	490d      	ldr	r1, [pc, #52]	; (8002a54 <_cbSendTaskList+0x88>)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4633      	mov	r3, r6
 8002a34:	462a      	mov	r2, r5
 8002a36:	4621      	mov	r1, r4
 8002a38:	f000 f8b4 	bl	8002ba4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <_cbSendTaskList+0x8c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d3c5      	bcc.n	80029d8 <_cbSendTaskList+0xc>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a54:	20012dbc 	.word	0x20012dbc
 8002a58:	20012e5c 	.word	0x20012e5c

08002a5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002a62:	f7ff fa17 	bl	8001e94 <xTaskGetTickCountFromISR>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f04f 0400 	mov.w	r4, #0
 8002a6c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002a70:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002a74:	462b      	mov	r3, r5
 8002a76:	4634      	mov	r4, r6
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	0162      	lsls	r2, r4, #5
 8002a82:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002a86:	0159      	lsls	r1, r3, #5
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	1b5b      	subs	r3, r3, r5
 8002a8e:	eb64 0406 	sbc.w	r4, r4, r6
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	00a2      	lsls	r2, r4, #2
 8002a9c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002aa0:	0099      	lsls	r1, r3, #2
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	195b      	adds	r3, r3, r5
 8002aa8:	eb44 0406 	adc.w	r4, r4, r6
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	00e2      	lsls	r2, r4, #3
 8002ab6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aba:	00d9      	lsls	r1, r3, #3
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002ac4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	4621      	mov	r1, r4
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ad4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	492b      	ldr	r1, [pc, #172]	; (8002b94 <SYSVIEW_AddTask+0xc0>)
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f002 fa62 	bl	8004fb0 <memcmp>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04b      	beq.n	8002b8a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	d903      	bls.n	8002b02 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002afa:	4828      	ldr	r0, [pc, #160]	; (8002b9c <SYSVIEW_AddTask+0xc8>)
 8002afc:	f002 f9aa 	bl	8004e54 <SEGGER_SYSVIEW_Warn>
    return;
 8002b00:	e044      	b.n	8002b8c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4921      	ldr	r1, [pc, #132]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	491b      	ldr	r1, [pc, #108]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	330c      	adds	r3, #12
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3310      	adds	r3, #16
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b76:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f80e 	bl	8002ba4 <SYSVIEW_SendTaskInfo>
 8002b88:	e000      	b.n	8002b8c <SYSVIEW_AddTask+0xb8>
    return;
 8002b8a:	bf00      	nop

}
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	080058d8 	.word	0x080058d8
 8002b98:	20012e5c 	.word	0x20012e5c
 8002b9c:	080058e0 	.word	0x080058e0
 8002ba0:	20012dbc 	.word	0x20012dbc

08002ba4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	2214      	movs	r2, #20
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fa12 	bl	8004fe4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 fd99 	bl	8004710 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <__NVIC_EnableIRQ>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <__NVIC_EnableIRQ+0x38>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8002c7e:	f002 f945 	bl	8004f0c <SEGGER_SYSVIEW_IsStarted>
 8002c82:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002c8a:	f001 fbc5 	bl	8004418 <SEGGER_SYSVIEW_Start>
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <_cbOnUARTRx+0x3c>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d806      	bhi.n	8002cb8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <_cbOnUARTRx+0x3c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <_cbOnUARTRx+0x3c>)
 8002cb4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002cb6:	e009      	b.n	8002ccc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002cb8:	f7ff ffde 	bl	8002c78 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <_cbOnUARTRx+0x3c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f000 fb9a 	bl	8003400 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002ccc:	bf00      	nop
}
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000010 	.word	0x20000010

08002cd8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <_cbOnUARTTx+0x5c>)
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d80f      	bhi.n	8002d08 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <_cbOnUARTTx+0x5c>)
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <_cbOnUARTTx+0x60>)
 8002cf0:	5c9a      	ldrb	r2, [r3, r2]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <_cbOnUARTTx+0x5c>)
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <_cbOnUARTTx+0x5c>)
 8002d00:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002d06:	e00f      	b.n	8002d28 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <_cbOnUARTTx+0x5c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fa1b 	bl	800314c <SEGGER_RTT_ReadUpBufferNoLock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da02      	bge.n	8002d26 <_cbOnUARTTx+0x4e>
    r = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e000      	b.n	8002d28 <_cbOnUARTTx+0x50>
  }
Done:
 8002d26:	bf00      	nop
  return r;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000010 	.word	0x20000010
 8002d38:	0800596c 	.word	0x0800596c

08002d3c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <SEGGER_UART_init+0x1c>)
 8002d46:	4905      	ldr	r1, [pc, #20]	; (8002d5c <SEGGER_UART_init+0x20>)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f863 	bl	8002e14 <HIF_UART_Init>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	08002c99 	.word	0x08002c99
 8002d5c:	08002cd9 	.word	0x08002cd9

08002d60 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002d66:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <USART2_IRQHandler+0x80>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d011      	beq.n	8002d9a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <USART2_IRQHandler+0x84>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 030b 	and.w	r3, r3, #11
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d108      	bne.n	8002d9a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <USART2_IRQHandler+0x88>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <USART2_IRQHandler+0x88>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	79fa      	ldrb	r2, [r7, #7]
 8002d96:	4610      	mov	r0, r2
 8002d98:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01a      	beq.n	8002dda <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <USART2_IRQHandler+0x8c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <USART2_IRQHandler+0x8c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1dfa      	adds	r2, r7, #7
 8002db2:	4610      	mov	r0, r2
 8002db4:	4798      	blx	r3
 8002db6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <USART2_IRQHandler+0x90>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <USART2_IRQHandler+0x90>)
 8002dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e006      	b.n	8002dda <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <USART2_IRQHandler+0x80>)
 8002dce:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <USART2_IRQHandler+0x84>)
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e000      	b.n	8002dda <USART2_IRQHandler+0x7a>
      return;
 8002dd8:	bf00      	nop
    }
  }
}
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40004400 	.word	0x40004400
 8002de4:	40004404 	.word	0x40004404
 8002de8:	20012e60 	.word	0x20012e60
 8002dec:	20012e64 	.word	0x20012e64
 8002df0:	4000440c 	.word	0x4000440c

08002df4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	4000440c 	.word	0x4000440c

08002e14 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HIF_UART_Init+0xc8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HIF_UART_Init+0xc8>)
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HIF_UART_Init+0xcc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <HIF_UART_Init+0xcc>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HIF_UART_Init+0xd0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e44:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002e4c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8002e4e:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <HIF_UART_Init+0xd0>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002e54:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HIF_UART_Init+0xd4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e60:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002e68:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <HIF_UART_Init+0xd4>)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HIF_UART_Init+0xd8>)
 8002e72:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8002e76:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HIF_UART_Init+0xdc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HIF_UART_Init+0xe0>)
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HIF_UART_Init+0xe4>)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d302      	bcc.n	8002eaa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002ea4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002ea8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <HIF_UART_Init+0xe8>)
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HIF_UART_Init+0xec>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002ec0:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HIF_UART_Init+0xf0>)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002ec6:	2106      	movs	r1, #6
 8002ec8:	2026      	movs	r0, #38	; 0x26
 8002eca:	f7ff feab 	bl	8002c24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8002ece:	2026      	movs	r0, #38	; 0x26
 8002ed0:	f7ff fe8a 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023840 	.word	0x40023840
 8002ee0:	40023830 	.word	0x40023830
 8002ee4:	40020020 	.word	0x40020020
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	4000440c 	.word	0x4000440c
 8002ef0:	40004410 	.word	0x40004410
 8002ef4:	40004414 	.word	0x40004414
 8002ef8:	0501bd00 	.word	0x0501bd00
 8002efc:	40004408 	.word	0x40004408
 8002f00:	20012e60 	.word	0x20012e60
 8002f04:	20012e64 	.word	0x20012e64

08002f08 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <_DoInit+0xa0>)
 8002f10:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002f12:	22a8      	movs	r2, #168	; 0xa8
 8002f14:	2100      	movs	r1, #0
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	f002 f864 	bl	8004fe4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2203      	movs	r2, #3
 8002f26:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <_DoInit+0xa4>)
 8002f2c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <_DoInit+0xa8>)
 8002f32:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4a16      	ldr	r2, [pc, #88]	; (8002fac <_DoInit+0xa4>)
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <_DoInit+0xac>)
 8002f58:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002f72:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	e00c      	b.n	8002f96 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f1c3 030f 	rsb	r3, r3, #15
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <_DoInit+0xb0>)
 8002f84:	5cd1      	ldrb	r1, [r2, r3]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3301      	adds	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d9ef      	bls.n	8002f7c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002f9c:	f3bf 8f5f 	dmb	sy
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200143e4 	.word	0x200143e4
 8002fac:	08005930 	.word	0x08005930
 8002fb0:	20012e68 	.word	0x20012e68
 8002fb4:	20013268 	.word	0x20013268
 8002fb8:	08005970 	.word	0x08005970

08002fbc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d905      	bls.n	8002fec <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e007      	b.n	8002ffc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69b9      	ldr	r1, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	1acb      	subs	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	4293      	cmp	r3, r2
 8003008:	bf28      	it	cs
 800300a:	4613      	movcs	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4293      	cmp	r3, r2
 8003014:	bf28      	it	cs
 8003016:	4613      	movcs	r3, r2
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f001 ffd0 	bl	8004fce <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	4413      	add	r3, r2
 8003034:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	4413      	add	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	4413      	add	r3, r2
 800304c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	429a      	cmp	r2, r3
 8003056:	d101      	bne.n	800305c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800305c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1b2      	bne.n	8002fd2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800306c:	6a3b      	ldr	r3, [r7, #32]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003076:	b580      	push	{r7, lr}
 8003078:	b088      	sub	sp, #32
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d911      	bls.n	80030be <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6938      	ldr	r0, [r7, #16]
 80030aa:	f001 ff90 	bl	8004fce <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80030ae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80030bc:	e01f      	b.n	80030fe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	6938      	ldr	r0, [r7, #16]
 80030d2:	f001 ff7c 	bl	8004fce <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4413      	add	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4619      	mov	r1, r3
 80030ee:	6938      	ldr	r0, [r7, #16]
 80030f0:	f001 ff6d 	bl	8004fce <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80030f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	60da      	str	r2, [r3, #12]
}
 80030fe:	bf00      	nop
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003106:	b480      	push	{r7}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	429a      	cmp	r2, r3
 8003120:	d808      	bhi.n	8003134 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad2      	subs	r2, r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	3b01      	subs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e004      	b.n	800313e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800313e:	697b      	ldr	r3, [r7, #20]
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	; 0x30
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003158:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800315a:	623b      	str	r3, [r7, #32]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b53      	cmp	r3, #83	; 0x53
 8003164:	d001      	beq.n	800316a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003166:	f7ff fecf 	bl	8002f08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4a37      	ldr	r2, [pc, #220]	; (8003254 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003178:	4413      	add	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800318c:	2300      	movs	r3, #0
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	429a      	cmp	r2, r3
 8003196:	d92b      	bls.n	80031f0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	bf28      	it	cs
 80031aa:	4613      	movcs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	4413      	add	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031be:	f001 ff06 	bl	8004fce <memcpy>
    NumBytesRead += NumBytesRem;
 80031c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	4413      	add	r3, r2
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4413      	add	r3, r2
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4413      	add	r3, r2
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d101      	bne.n	80031f0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf28      	it	cs
 8003200:	4613      	movcs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d019      	beq.n	800323e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	4413      	add	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	6939      	ldr	r1, [r7, #16]
 8003218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321a:	f001 fed8 	bl	8004fce <memcpy>
    NumBytesRead += NumBytesRem;
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4413      	add	r3, r2
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4413      	add	r3, r2
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	4413      	add	r3, r2
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003248:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800324c:	4618      	mov	r0, r3
 800324e:	3730      	adds	r7, #48	; 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200143e4 	.word	0x200143e4

08003258 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003264:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <SEGGER_RTT_ReadNoLock+0x108>)
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b53      	cmp	r3, #83	; 0x53
 8003270:	d001      	beq.n	8003276 <SEGGER_RTT_ReadNoLock+0x1e>
 8003272:	f7ff fe49 	bl	8002f08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3360      	adds	r3, #96	; 0x60
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <SEGGER_RTT_ReadNoLock+0x108>)
 8003284:	4413      	add	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800329c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d92b      	bls.n	80032fc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4293      	cmp	r3, r2
 80032b4:	bf28      	it	cs
 80032b6:	4613      	movcs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	4413      	add	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	6939      	ldr	r1, [r7, #16]
 80032c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ca:	f001 fe80 	bl	8004fce <memcpy>
    NumBytesRead += NumBytesRem;
 80032ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4413      	add	r3, r2
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4413      	add	r3, r2
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4413      	add	r3, r2
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d101      	bne.n	80032fc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4293      	cmp	r3, r2
 800330a:	bf28      	it	cs
 800330c:	4613      	movcs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d019      	beq.n	800334a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	4413      	add	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	6939      	ldr	r1, [r7, #16]
 8003324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003326:	f001 fe52 	bl	8004fce <memcpy>
    NumBytesRead += NumBytesRem;
 800332a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4413      	add	r3, r2
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	4413      	add	r3, r2
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4413      	add	r3, r2
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003354:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003358:	4618      	mov	r0, r3
 800335a:	3730      	adds	r7, #48	; 0x30
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200143e4 	.word	0x200143e4

08003364 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	3360      	adds	r3, #96	; 0x60
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 8003382:	4413      	add	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d017      	beq.n	80033be <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 800338e:	2b01      	cmp	r3, #1
 8003390:	d302      	bcc.n	8003398 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 8003392:	2b02      	cmp	r3, #2
 8003394:	d023      	beq.n	80033de <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8003396:	e029      	b.n	80033ec <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003398:	6978      	ldr	r0, [r7, #20]
 800339a:	f7ff feb4 	bl	8003106 <_GetAvailWriteSpace>
 800339e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d202      	bcs.n	80033ae <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80033ac:	e021      	b.n	80033f2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff fe5d 	bl	8003076 <_WriteNoCheck>
    break;
 80033bc:	e019      	b.n	80033f2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff fea1 	bl	8003106 <_GetAvailWriteSpace>
 80033c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4293      	cmp	r3, r2
 80033cc:	bf28      	it	cs
 80033ce:	4613      	movcs	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff fe4d 	bl	8003076 <_WriteNoCheck>
    break;
 80033dc:	e009      	b.n	80033f2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff fdea 	bl	8002fbc <_WriteBlocking>
 80033e8:	61f8      	str	r0, [r7, #28]
    break;
 80033ea:	e002      	b.n	80033f2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
    break;
 80033f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80033f2:	69fb      	ldr	r3, [r7, #28]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200143e4 	.word	0x200143e4

08003400 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b53      	cmp	r3, #83	; 0x53
 8003418:	d001      	beq.n	800341e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800341a:	f7ff fd75 	bl	8002f08 <_DoInit>
  SEGGER_RTT_LOCK();
 800341e:	f3ef 8311 	mrs	r3, BASEPRI
 8003422:	f04f 0120 	mov.w	r1, #32
 8003426:	f381 8811 	msr	BASEPRI, r1
 800342a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff ff97 	bl	8003364 <SEGGER_RTT_WriteDownBufferNoLock>
 8003436:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800343e:	697b      	ldr	r3, [r7, #20]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200143e4 	.word	0x200143e4

0800344c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b53      	cmp	r3, #83	; 0x53
 8003466:	d001      	beq.n	800346c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003468:	f7ff fd4e 	bl	8002f08 <_DoInit>
  SEGGER_RTT_LOCK();
 800346c:	f3ef 8311 	mrs	r3, BASEPRI
 8003470:	f04f 0120 	mov.w	r1, #32
 8003474:	f381 8811 	msr	BASEPRI, r1
 8003478:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800347a:	4b35      	ldr	r3, [pc, #212]	; (8003550 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800347c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003482:	6939      	ldr	r1, [r7, #16]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	3304      	adds	r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbeb      	blt.n	8003482 <SEGGER_RTT_AllocUpBuffer+0x36>
 80034aa:	e000      	b.n	80034ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80034ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	da3f      	bge.n	8003538 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80034b8:	6939      	ldr	r1, [r7, #16]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	3304      	adds	r3, #4
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80034e2:	6939      	ldr	r1, [r7, #16]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	3320      	adds	r3, #32
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80034f6:	6939      	ldr	r1, [r7, #16]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	3328      	adds	r3, #40	; 0x28
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	3324      	adds	r3, #36	; 0x24
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800351e:	6939      	ldr	r1, [r7, #16]
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	332c      	adds	r3, #44	; 0x2c
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003532:	f3bf 8f5f 	dmb	sy
 8003536:	e002      	b.n	800353e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003544:	69fb      	ldr	r3, [r7, #28]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200143e4 	.word	0x200143e4

08003554 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b53      	cmp	r3, #83	; 0x53
 800356e:	d001      	beq.n	8003574 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003570:	f7ff fcca 	bl	8002f08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003574:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003576:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d82c      	bhi.n	80035d8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800357e:	f3ef 8311 	mrs	r3, BASEPRI
 8003582:	f04f 0120 	mov.w	r1, #32
 8003586:	f381 8811 	msr	BASEPRI, r1
 800358a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	3360      	adds	r3, #96	; 0x60
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80035c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e002      	b.n	80035de <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200143e4 	.word	0x200143e4

080035ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	60fa      	str	r2, [r7, #12]
 8003602:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d90a      	bls.n	8003620 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800360e:	e007      	b.n	8003620 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	1c53      	adds	r3, r2, #1
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1c59      	adds	r1, r3, #1
 800361a:	60f9      	str	r1, [r7, #12]
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <_EncodeStr+0x46>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ee      	bne.n	8003610 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	b2da      	uxtb	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3307      	adds	r3, #7
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800366a:	4b32      	ldr	r3, [pc, #200]	; (8003734 <_HandleIncomingPacket+0xd0>)
 800366c:	7e1b      	ldrb	r3, [r3, #24]
 800366e:	4618      	mov	r0, r3
 8003670:	1cfb      	adds	r3, r7, #3
 8003672:	2201      	movs	r2, #1
 8003674:	4619      	mov	r1, r3
 8003676:	f7ff fdef 	bl	8003258 <SEGGER_RTT_ReadNoLock>
 800367a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04c      	beq.n	800371c <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d022      	beq.n	80036ce <_HandleIncomingPacket+0x6a>
 8003688:	2b05      	cmp	r3, #5
 800368a:	dc0b      	bgt.n	80036a4 <_HandleIncomingPacket+0x40>
 800368c:	2b02      	cmp	r3, #2
 800368e:	d015      	beq.n	80036bc <_HandleIncomingPacket+0x58>
 8003690:	2b02      	cmp	r3, #2
 8003692:	dc02      	bgt.n	800369a <_HandleIncomingPacket+0x36>
 8003694:	2b01      	cmp	r3, #1
 8003696:	d00e      	beq.n	80036b6 <_HandleIncomingPacket+0x52>
 8003698:	e033      	b.n	8003702 <_HandleIncomingPacket+0x9e>
 800369a:	2b03      	cmp	r3, #3
 800369c:	d011      	beq.n	80036c2 <_HandleIncomingPacket+0x5e>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d012      	beq.n	80036c8 <_HandleIncomingPacket+0x64>
 80036a2:	e02e      	b.n	8003702 <_HandleIncomingPacket+0x9e>
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	d018      	beq.n	80036da <_HandleIncomingPacket+0x76>
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	db13      	blt.n	80036d4 <_HandleIncomingPacket+0x70>
 80036ac:	2b7f      	cmp	r3, #127	; 0x7f
 80036ae:	d037      	beq.n	8003720 <_HandleIncomingPacket+0xbc>
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d015      	beq.n	80036e0 <_HandleIncomingPacket+0x7c>
 80036b4:	e025      	b.n	8003702 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036b6:	f000 feaf 	bl	8004418 <SEGGER_SYSVIEW_Start>
      break;
 80036ba:	e036      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036bc:	f000 ff68 	bl	8004590 <SEGGER_SYSVIEW_Stop>
      break;
 80036c0:	e033      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036c2:	f001 f941 	bl	8004948 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036c6:	e030      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80036c8:	f001 f906 	bl	80048d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80036cc:	e02d      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80036ce:	f000 ff85 	bl	80045dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80036d2:	e02a      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80036d4:	f001 fb6c 	bl	8004db0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80036d8:	e027      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80036da:	f001 fb4b 	bl	8004d74 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80036de:	e024      	b.n	800372a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <_HandleIncomingPacket+0xd0>)
 80036e2:	7e1b      	ldrb	r3, [r3, #24]
 80036e4:	4618      	mov	r0, r3
 80036e6:	1cfb      	adds	r3, r7, #3
 80036e8:	2201      	movs	r2, #1
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7ff fdb4 	bl	8003258 <SEGGER_RTT_ReadNoLock>
 80036f0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fab0 	bl	8004c60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003700:	e010      	b.n	8003724 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	b25b      	sxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0e      	bge.n	8003728 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <_HandleIncomingPacket+0xd0>)
 800370c:	7e1b      	ldrb	r3, [r3, #24]
 800370e:	4618      	mov	r0, r3
 8003710:	1cfb      	adds	r3, r7, #3
 8003712:	2201      	movs	r2, #1
 8003714:	4619      	mov	r1, r3
 8003716:	f7ff fd9f 	bl	8003258 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800371a:	e005      	b.n	8003728 <_HandleIncomingPacket+0xc4>
    }
  }
 800371c:	bf00      	nop
 800371e:	e004      	b.n	800372a <_HandleIncomingPacket+0xc6>
      break;
 8003720:	bf00      	nop
 8003722:	e002      	b.n	800372a <_HandleIncomingPacket+0xc6>
      break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <_HandleIncomingPacket+0xc6>
      break;
 8003728:	bf00      	nop
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20014280 	.word	0x20014280

08003738 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800373e:	2301      	movs	r3, #1
 8003740:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	3301      	adds	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
 8003752:	e00b      	b.n	800376c <_TrySendOverflowPacket+0x34>
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	b2da      	uxtb	r2, r3
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800375e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	09db      	lsrs	r3, r3, #7
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	2b7f      	cmp	r3, #127	; 0x7f
 8003770:	d8f0      	bhi.n	8003754 <_TrySendOverflowPacket+0x1c>
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <_TrySendOverflowPacket+0xe4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	623b      	str	r3, [r7, #32]
 800379a:	e00b      	b.n	80037b4 <_TrySendOverflowPacket+0x7c>
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	1c59      	adds	r1, r3, #1
 80037a4:	6279      	str	r1, [r7, #36]	; 0x24
 80037a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	09db      	lsrs	r3, r3, #7
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b7f      	cmp	r3, #127	; 0x7f
 80037b8:	d8f0      	bhi.n	800379c <_TrySendOverflowPacket+0x64>
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	627a      	str	r2, [r7, #36]	; 0x24
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 80037cc:	785b      	ldrb	r3, [r3, #1]
 80037ce:	4618      	mov	r0, r3
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	f7fc fd00 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80037e0:	4603      	mov	r3, r0
 80037e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80037e4:	f7ff fb06 	bl	8002df4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e004      	b.n	800380c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <_TrySendOverflowPacket+0xe0>)
 800380a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800380c:	693b      	ldr	r3, [r7, #16]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3730      	adds	r7, #48	; 0x30
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20014280 	.word	0x20014280
 800381c:	e0001004 	.word	0xe0001004

08003820 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800382c:	4b9b      	ldr	r3, [pc, #620]	; (8003a9c <_SendPacket+0x27c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d010      	beq.n	8003856 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003834:	4b99      	ldr	r3, [pc, #612]	; (8003a9c <_SendPacket+0x27c>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 812b 	beq.w	8003a94 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800383e:	4b97      	ldr	r3, [pc, #604]	; (8003a9c <_SendPacket+0x27c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d109      	bne.n	800385a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003846:	f7ff ff77 	bl	8003738 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800384a:	4b94      	ldr	r3, [pc, #592]	; (8003a9c <_SendPacket+0x27c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	f040 8122 	bne.w	8003a98 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8003854:	e001      	b.n	800385a <_SendPacket+0x3a>
    goto Send;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <_SendPacket+0x3c>
Send:
 800385a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b1f      	cmp	r3, #31
 8003860:	d809      	bhi.n	8003876 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003862:	4b8e      	ldr	r3, [pc, #568]	; (8003a9c <_SendPacket+0x27c>)
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 8117 	bne.w	8003aa4 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b17      	cmp	r3, #23
 800387a:	d807      	bhi.n	800388c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b01      	subs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e0c4      	b.n	8003a16 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b7f      	cmp	r3, #127	; 0x7f
 8003898:	d912      	bls.n	80038c0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	09da      	lsrs	r2, r3, #7
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	3a01      	subs	r2, #1
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e006      	b.n	80038ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b7e      	cmp	r3, #126	; 0x7e
 80038d2:	d807      	bhi.n	80038e4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e098      	b.n	8003a16 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ea:	d212      	bcs.n	8003912 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	09da      	lsrs	r2, r3, #7
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	3a01      	subs	r2, #1
 8003904:	60fa      	str	r2, [r7, #12]
 8003906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e081      	b.n	8003a16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003918:	d21d      	bcs.n	8003956 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0b9a      	lsrs	r2, r3, #14
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3b01      	subs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	09db      	lsrs	r3, r3, #7
 800392e:	b2db      	uxtb	r3, r3
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	3a01      	subs	r2, #1
 8003934:	60fa      	str	r2, [r7, #12]
 8003936:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	3a01      	subs	r2, #1
 8003948:	60fa      	str	r2, [r7, #12]
 800394a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e05f      	b.n	8003a16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395c:	d228      	bcs.n	80039b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0d5a      	lsrs	r2, r3, #21
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0b9b      	lsrs	r3, r3, #14
 8003972:	b2db      	uxtb	r3, r3
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	3a01      	subs	r2, #1
 8003978:	60fa      	str	r2, [r7, #12]
 800397a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	09db      	lsrs	r3, r3, #7
 8003988:	b2db      	uxtb	r3, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	3a01      	subs	r2, #1
 800398e:	60fa      	str	r2, [r7, #12]
 8003990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	3a01      	subs	r2, #1
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e032      	b.n	8003a16 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0f1a      	lsrs	r2, r3, #28
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0d5b      	lsrs	r3, r3, #21
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	3a01      	subs	r2, #1
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0b9b      	lsrs	r3, r3, #14
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	3a01      	subs	r2, #1
 80039e0:	60fa      	str	r2, [r7, #12]
 80039e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	09db      	lsrs	r3, r3, #7
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	3a01      	subs	r2, #1
 80039f6:	60fa      	str	r2, [r7, #12]
 80039f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	60fa      	str	r2, [r7, #12]
 8003a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <_SendPacket+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <_SendPacket+0x27c>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	623b      	str	r3, [r7, #32]
 8003a2e:	e00b      	b.n	8003a48 <_SendPacket+0x228>
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	1c59      	adds	r1, r3, #1
 8003a38:	6279      	str	r1, [r7, #36]	; 0x24
 8003a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	09db      	lsrs	r3, r3, #7
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4c:	d8f0      	bhi.n	8003a30 <_SendPacket+0x210>
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	627a      	str	r2, [r7, #36]	; 0x24
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <_SendPacket+0x27c>)
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	4618      	mov	r0, r3
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	f7fc fbb7 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003a72:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003a74:	f7ff f9be 	bl	8002df4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <_SendPacket+0x27c>)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	60d3      	str	r3, [r2, #12]
 8003a84:	e00f      	b.n	8003aa6 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <_SendPacket+0x27c>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <_SendPacket+0x27c>)
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e008      	b.n	8003aa6 <_SendPacket+0x286>
    goto SendDone;
 8003a94:	bf00      	nop
 8003a96:	e006      	b.n	8003aa6 <_SendPacket+0x286>
      goto SendDone;
 8003a98:	bf00      	nop
 8003a9a:	e004      	b.n	8003aa6 <_SendPacket+0x286>
 8003a9c:	20014280 	.word	0x20014280
 8003aa0:	e0001004 	.word	0xe0001004
      goto SendDone;
 8003aa4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <_SendPacket+0x2d8>)
 8003aa8:	7e1b      	ldrb	r3, [r3, #24]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <_SendPacket+0x2dc>)
 8003aae:	460b      	mov	r3, r1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	440b      	add	r3, r1
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	336c      	adds	r3, #108	; 0x6c
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <_SendPacket+0x2d8>)
 8003abe:	7e1b      	ldrb	r3, [r3, #24]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	490e      	ldr	r1, [pc, #56]	; (8003afc <_SendPacket+0x2dc>)
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4403      	add	r3, r0
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	3370      	adds	r3, #112	; 0x70
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d00b      	beq.n	8003aee <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <_SendPacket+0x2d8>)
 8003ad8:	789b      	ldrb	r3, [r3, #2]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d107      	bne.n	8003aee <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <_SendPacket+0x2d8>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003ae4:	f7ff fdbe 	bl	8003664 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <_SendPacket+0x2d8>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003aee:	bf00      	nop
 8003af0:	3728      	adds	r7, #40	; 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20014280 	.word	0x20014280
 8003afc:	200143e4 	.word	0x200143e4

08003b00 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d80a      	bhi.n	8003b30 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6051      	str	r1, [r2, #4]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d15a      	bne.n	8003bee <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	e00b      	b.n	8003b72 <_StoreChar+0x72>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	6279      	str	r1, [r7, #36]	; 0x24
 8003b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	09db      	lsrs	r3, r3, #7
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b7f      	cmp	r3, #127	; 0x7f
 8003b76:	d8f0      	bhi.n	8003b5a <_StoreChar+0x5a>
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e00b      	b.n	8003baa <_StoreChar+0xaa>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	61f9      	str	r1, [r7, #28]
 8003b9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	09db      	lsrs	r3, r3, #7
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b7f      	cmp	r3, #127	; 0x7f
 8003bae:	d8f0      	bhi.n	8003b92 <_StoreChar+0x92>
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	61fa      	str	r2, [r7, #28]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	221a      	movs	r2, #26
 8003bc6:	6939      	ldr	r1, [r7, #16]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fe29 	bl	8003820 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fd3a 	bl	800364c <_PreparePacket>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003c12:	e007      	b.n	8003c24 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	623b      	str	r3, [r7, #32]
    Width++;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003c24:	6a3a      	ldr	r2, [r7, #32]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d2f3      	bcs.n	8003c14 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d901      	bls.n	8003c38 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11f      	bne.n	8003c82 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01c      	beq.n	8003c82 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <_PrintUnsigned+0x66>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <_PrintUnsigned+0x66>
        c = '0';
 8003c58:	2330      	movs	r3, #48	; 0x30
 8003c5a:	76fb      	strb	r3, [r7, #27]
 8003c5c:	e001      	b.n	8003c62 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003c5e:	2320      	movs	r3, #32
 8003c60:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003c62:	e007      	b.n	8003c74 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	3b01      	subs	r3, #1
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003c6a:	7efb      	ldrb	r3, [r7, #27]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff46 	bl	8003b00 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <_PrintUnsigned+0x8a>
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3f0      	bcc.n	8003c64 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d903      	bls.n	8003c90 <_PrintUnsigned+0x98>
      NumDigits--;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	e009      	b.n	8003ca4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d200      	bcs.n	8003ca4 <_PrintUnsigned+0xac>
        break;
 8003ca2:	e005      	b.n	8003cb0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003cae:	e7e8      	b.n	8003c82 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003cc8:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <_PrintUnsigned+0x128>)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4413      	add	r3, r2
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff ff14 	bl	8003b00 <_StoreChar>
    Digit /= Base;
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e3      	bne.n	8003cb0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003cf8:	e006      	b.n	8003d08 <_PrintUnsigned+0x110>
        FieldWidth--;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003d00:	2120      	movs	r1, #32
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff fefc 	bl	8003b00 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <_PrintUnsigned+0x11e>
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3f1      	bcc.n	8003cfa <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003d16:	bf00      	nop
 8003d18:	3728      	adds	r7, #40	; 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	08005990 	.word	0x08005990

08003d24 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfb8      	it	lt
 8003d38:	425b      	neglt	r3, r3
 8003d3a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003d40:	e007      	b.n	8003d52 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d4a:	613b      	str	r3, [r7, #16]
    Width++;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	daf3      	bge.n	8003d42 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d901      	bls.n	8003d66 <_PrintInt+0x42>
    Width = NumDigits;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <_PrintInt+0x5e>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	db04      	blt.n	8003d7c <_PrintInt+0x58>
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <_PrintInt+0x5e>
    FieldWidth--;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <_PrintInt+0x6e>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <_PrintInt+0x9c>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003da2:	e006      	b.n	8003db2 <_PrintInt+0x8e>
        FieldWidth--;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003daa:	2120      	movs	r1, #32
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fea7 	bl	8003b00 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <_PrintInt+0x9c>
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3f1      	bcc.n	8003da4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da07      	bge.n	8003dd6 <_PrintInt+0xb2>
    v = -v;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	425b      	negs	r3, r3
 8003dca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003dcc:	212d      	movs	r1, #45	; 0x2d
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff fe96 	bl	8003b00 <_StoreChar>
 8003dd4:	e008      	b.n	8003de8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003de0:	212b      	movs	r1, #43	; 0x2b
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7ff fe8c 	bl	8003b00 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <_PrintInt+0x102>
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d114      	bne.n	8003e26 <_PrintInt+0x102>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d111      	bne.n	8003e26 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00e      	beq.n	8003e26 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e08:	e006      	b.n	8003e18 <_PrintInt+0xf4>
        FieldWidth--;
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003e10:	2130      	movs	r1, #48	; 0x30
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fe74 	bl	8003b00 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <_PrintInt+0x102>
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3f1      	bcc.n	8003e0a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fedf 	bl	8003bf8 <_PrintUnsigned>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b098      	sub	sp, #96	; 0x60
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e50:	f3ef 8311 	mrs	r3, BASEPRI
 8003e54:	f04f 0120 	mov.w	r1, #32
 8003e58:	f381 8811 	msr	BASEPRI, r1
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5e:	48ab      	ldr	r0, [pc, #684]	; (800410c <_VPrintTarget+0x2c8>)
 8003e60:	f7ff fbf4 	bl	800364c <_PreparePacket>
 8003e64:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003e66:	4ba9      	ldr	r3, [pc, #676]	; (800410c <_VPrintTarget+0x2c8>)
 8003e68:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3301      	adds	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 816c 	beq.w	800416c <_VPrintTarget+0x328>
      break;
    }
    if (c == '%') {
 8003e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e98:	2b25      	cmp	r3, #37	; 0x25
 8003e9a:	f040 8159 	bne.w	8004150 <_VPrintTarget+0x30c>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8003eae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003eb2:	3b23      	subs	r3, #35	; 0x23
 8003eb4:	2b0d      	cmp	r3, #13
 8003eb6:	d83f      	bhi.n	8003f38 <_VPrintTarget+0xf4>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <_VPrintTarget+0x7c>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003f39 	.word	0x08003f39
 8003ec8:	08003f39 	.word	0x08003f39
 8003ecc:	08003f39 	.word	0x08003f39
 8003ed0:	08003f39 	.word	0x08003f39
 8003ed4:	08003f39 	.word	0x08003f39
 8003ed8:	08003f39 	.word	0x08003f39
 8003edc:	08003f39 	.word	0x08003f39
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f39 	.word	0x08003f39
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f09 	.word	0x08003f09
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3301      	adds	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e01a      	b.n	8003f3e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3301      	adds	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e012      	b.n	8003f3e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e00a      	b.n	8003f3e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	f043 0308 	orr.w	r3, r3, #8
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e002      	b.n	8003f3e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f3c:	bf00      	nop
        }
      } while (v);
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1b0      	bne.n	8003ea6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003f44:	2300      	movs	r3, #0
 8003f46:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f54:	2b2f      	cmp	r3, #47	; 0x2f
 8003f56:	d912      	bls.n	8003f7e <_VPrintTarget+0x13a>
 8003f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f5c:	2b39      	cmp	r3, #57	; 0x39
 8003f5e:	d80e      	bhi.n	8003f7e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	461a      	mov	r2, r3
 8003f72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f76:	4413      	add	r3, r2
 8003f78:	3b30      	subs	r3, #48	; 0x30
 8003f7a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003f7c:	e7e4      	b.n	8003f48 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f90:	d11d      	bne.n	8003fce <_VPrintTarget+0x18a>
        sFormat++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fa4:	2b2f      	cmp	r3, #47	; 0x2f
 8003fa6:	d912      	bls.n	8003fce <_VPrintTarget+0x18a>
 8003fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fac:	2b39      	cmp	r3, #57	; 0x39
 8003fae:	d80e      	bhi.n	8003fce <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003fb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b30      	subs	r3, #48	; 0x30
 8003fca:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8003fcc:	e7e4      	b.n	8003f98 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8003fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fda:	2b6c      	cmp	r3, #108	; 0x6c
 8003fdc:	d003      	beq.n	8003fe6 <_VPrintTarget+0x1a2>
 8003fde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fe2:	2b68      	cmp	r3, #104	; 0x68
 8003fe4:	d107      	bne.n	8003ff6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8003ff4:	e7ef      	b.n	8003fd6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8003ff6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d028      	beq.n	8004050 <_VPrintTarget+0x20c>
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	dc07      	bgt.n	8004012 <_VPrintTarget+0x1ce>
 8004002:	2b58      	cmp	r3, #88	; 0x58
 8004004:	d04a      	beq.n	800409c <_VPrintTarget+0x258>
 8004006:	2b63      	cmp	r3, #99	; 0x63
 8004008:	d00f      	beq.n	800402a <_VPrintTarget+0x1e6>
 800400a:	2b25      	cmp	r3, #37	; 0x25
 800400c:	f000 8095 	beq.w	800413a <_VPrintTarget+0x2f6>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8004010:	e09a      	b.n	8004148 <_VPrintTarget+0x304>
      switch (c) {
 8004012:	2b73      	cmp	r3, #115	; 0x73
 8004014:	d055      	beq.n	80040c2 <_VPrintTarget+0x27e>
 8004016:	2b73      	cmp	r3, #115	; 0x73
 8004018:	dc02      	bgt.n	8004020 <_VPrintTarget+0x1dc>
 800401a:	2b70      	cmp	r3, #112	; 0x70
 800401c:	d07a      	beq.n	8004114 <_VPrintTarget+0x2d0>
        break;
 800401e:	e093      	b.n	8004148 <_VPrintTarget+0x304>
      switch (c) {
 8004020:	2b75      	cmp	r3, #117	; 0x75
 8004022:	d028      	beq.n	8004076 <_VPrintTarget+0x232>
 8004024:	2b78      	cmp	r3, #120	; 0x78
 8004026:	d039      	beq.n	800409c <_VPrintTarget+0x258>
        break;
 8004028:	e08e      	b.n	8004148 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	1d19      	adds	r1, r3, #4
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6011      	str	r1, [r2, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 800403e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004042:	f107 0310 	add.w	r3, r7, #16
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fd59 	bl	8003b00 <_StoreChar>
        break;
 800404e:	e07b      	b.n	8004148 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	1d19      	adds	r1, r3, #4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800405e:	f107 0010 	add.w	r0, r7, #16
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406c:	220a      	movs	r2, #10
 800406e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004070:	f7ff fe58 	bl	8003d24 <_PrintInt>
        break;
 8004074:	e068      	b.n	8004148 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	1d19      	adds	r1, r3, #4
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6011      	str	r1, [r2, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004084:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004086:	f107 0010 	add.w	r0, r7, #16
 800408a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	220a      	movs	r2, #10
 8004096:	f7ff fdaf 	bl	8003bf8 <_PrintUnsigned>
        break;
 800409a:	e055      	b.n	8004148 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80040aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040ac:	f107 0010 	add.w	r0, r7, #16
 80040b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ba:	2210      	movs	r2, #16
 80040bc:	f7ff fd9c 	bl	8003bf8 <_PrintUnsigned>
        break;
 80040c0:	e042      	b.n	8004148 <_VPrintTarget+0x304>
        s = va_arg(*pParamList, const char*);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	1d19      	adds	r1, r3, #4
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <_VPrintTarget+0x296>
          s = "(null)";
 80040d6:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <_VPrintTarget+0x2cc>)
 80040d8:	643b      	str	r3, [r7, #64]	; 0x40
          c = *s;
 80040da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80040e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e4:	3301      	adds	r3, #1
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80040e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <_VPrintTarget+0x2c4>
         _StoreChar(&BufferDesc, c);
 80040f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80040f4:	f107 0310 	add.w	r3, r7, #16
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fd00 	bl	8003b00 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	2b7f      	cmp	r3, #127	; 0x7f
 8004104:	d9e9      	bls.n	80040da <_VPrintTarget+0x296>
        break;
 8004106:	e01f      	b.n	8004148 <_VPrintTarget+0x304>
            break;
 8004108:	bf00      	nop
        break;
 800410a:	e01d      	b.n	8004148 <_VPrintTarget+0x304>
 800410c:	200142b0 	.word	0x200142b0
 8004110:	0800593c 	.word	0x0800593c
        v = va_arg(*pParamList, int);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004122:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004124:	f107 0010 	add.w	r0, r7, #16
 8004128:	2300      	movs	r3, #0
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	2308      	movs	r3, #8
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2308      	movs	r3, #8
 8004132:	2210      	movs	r2, #16
 8004134:	f7ff fd60 	bl	8003bf8 <_PrintUnsigned>
        break;
 8004138:	e006      	b.n	8004148 <_VPrintTarget+0x304>
        _StoreChar(&BufferDesc, '%');
 800413a:	f107 0310 	add.w	r3, r7, #16
 800413e:	2125      	movs	r1, #37	; 0x25
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fcdd 	bl	8003b00 <_StoreChar>
        break;
 8004146:	bf00      	nop
      }
      sFormat++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e007      	b.n	8004160 <_VPrintTarget+0x31c>
    } else {
      _StoreChar(&BufferDesc, c);
 8004150:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004154:	f107 0310 	add.w	r3, r7, #16
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fcd0 	bl	8003b00 <_StoreChar>
    }
  } while (*sFormat);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f ae89 	bne.w	8003e7c <_VPrintTarget+0x38>
 800416a:	e000      	b.n	800416e <_VPrintTarget+0x32a>
      break;
 800416c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d041      	beq.n	80041f8 <_VPrintTarget+0x3b4>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	63bb      	str	r3, [r7, #56]	; 0x38
 8004184:	e00b      	b.n	800419e <_VPrintTarget+0x35a>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	b2da      	uxtb	r2, r3
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	1c59      	adds	r1, r3, #1
 800418e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	09db      	lsrs	r3, r3, #7
 800419c:	63bb      	str	r3, [r7, #56]	; 0x38
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	2b7f      	cmp	r3, #127	; 0x7f
 80041a2:	d8f0      	bhi.n	8004186 <_VPrintTarget+0x342>
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
 80041b8:	2300      	movs	r3, #0
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
 80041bc:	e00b      	b.n	80041d6 <_VPrintTarget+0x392>
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c4:	1c59      	adds	r1, r3, #1
 80041c6:	6379      	str	r1, [r7, #52]	; 0x34
 80041c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	09db      	lsrs	r3, r3, #7
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b7f      	cmp	r3, #127	; 0x7f
 80041da:	d8f0      	bhi.n	80041be <_VPrintTarget+0x37a>
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	637a      	str	r2, [r7, #52]	; 0x34
 80041e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	221a      	movs	r2, #26
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fb14 	bl	8003820 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80041fe:	bf00      	nop
 8004200:	3758      	adds	r7, #88	; 0x58
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004216:	2300      	movs	r3, #0
 8004218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800421c:	4917      	ldr	r1, [pc, #92]	; (800427c <SEGGER_SYSVIEW_Init+0x74>)
 800421e:	4818      	ldr	r0, [pc, #96]	; (8004280 <SEGGER_SYSVIEW_Init+0x78>)
 8004220:	f7ff f914 	bl	800344c <SEGGER_RTT_AllocUpBuffer>
 8004224:	4603      	mov	r3, r0
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 800422a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 800422e:	785a      	ldrb	r2, [r3, #1]
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 8004232:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 8004236:	7e1b      	ldrb	r3, [r3, #24]
 8004238:	4618      	mov	r0, r3
 800423a:	2300      	movs	r3, #0
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	2308      	movs	r3, #8
 8004240:	4a11      	ldr	r2, [pc, #68]	; (8004288 <SEGGER_SYSVIEW_Init+0x80>)
 8004242:	490f      	ldr	r1, [pc, #60]	; (8004280 <SEGGER_SYSVIEW_Init+0x78>)
 8004244:	f7ff f986 	bl	8003554 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <SEGGER_SYSVIEW_Init+0x84>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 8004254:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004256:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800425c:	4a09      	ldr	r2, [pc, #36]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004262:	4a08      	ldr	r2, [pc, #32]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004268:	4a06      	ldr	r2, [pc, #24]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <SEGGER_SYSVIEW_Init+0x7c>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20013278 	.word	0x20013278
 8004280:	08005944 	.word	0x08005944
 8004284:	20014280 	.word	0x20014280
 8004288:	20014278 	.word	0x20014278
 800428c:	e0001004 	.word	0xe0001004

08004290 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6113      	str	r3, [r2, #16]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20014280 	.word	0x20014280

080042b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042b8:	f3ef 8311 	mrs	r3, BASEPRI
 80042bc:	f04f 0120 	mov.w	r1, #32
 80042c0:	f381 8811 	msr	BASEPRI, r1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	4808      	ldr	r0, [pc, #32]	; (80042e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80042c8:	f7ff f9c0 	bl	800364c <_PreparePacket>
 80042cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68b8      	ldr	r0, [r7, #8]
 80042d4:	f7ff faa4 	bl	8003820 <_SendPacket>
  RECORD_END();
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f383 8811 	msr	BASEPRI, r3
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	200142b0 	.word	0x200142b0

080042ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042f6:	f3ef 8311 	mrs	r3, BASEPRI
 80042fa:	f04f 0120 	mov.w	r1, #32
 80042fe:	f381 8811 	msr	BASEPRI, r1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	4816      	ldr	r0, [pc, #88]	; (8004360 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004306:	f7ff f9a1 	bl	800364c <_PreparePacket>
 800430a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e00b      	b.n	8004332 <SEGGER_SYSVIEW_RecordU32+0x46>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	61f9      	str	r1, [r7, #28]
 8004324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	09db      	lsrs	r3, r3, #7
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b7f      	cmp	r3, #127	; 0x7f
 8004336:	d8f0      	bhi.n	800431a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	61fa      	str	r2, [r7, #28]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	6938      	ldr	r0, [r7, #16]
 800434e:	f7ff fa67 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f383 8811 	msr	BASEPRI, r3
}
 8004358:	bf00      	nop
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200142b0 	.word	0x200142b0

08004364 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	; 0x30
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004370:	f3ef 8311 	mrs	r3, BASEPRI
 8004374:	f04f 0120 	mov.w	r1, #32
 8004378:	f381 8811 	msr	BASEPRI, r1
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	4825      	ldr	r0, [pc, #148]	; (8004414 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004380:	f7ff f964 	bl	800364c <_PreparePacket>
 8004384:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	e00b      	b.n	80043ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800439e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	09db      	lsrs	r3, r3, #7
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b7f      	cmp	r3, #127	; 0x7f
 80043b0:	d8f0      	bhi.n	8004394 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	e00b      	b.n	80043e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	6279      	str	r1, [r7, #36]	; 0x24
 80043d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	09db      	lsrs	r3, r3, #7
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b7f      	cmp	r3, #127	; 0x7f
 80043e8:	d8f0      	bhi.n	80043cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	627a      	str	r2, [r7, #36]	; 0x24
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	69b8      	ldr	r0, [r7, #24]
 8004400:	f7ff fa0e 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f383 8811 	msr	BASEPRI, r3
}
 800440a:	bf00      	nop
 800440c:	3730      	adds	r7, #48	; 0x30
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200142b0 	.word	0x200142b0

08004418 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800441e:	4b59      	ldr	r3, [pc, #356]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004424:	f3ef 8311 	mrs	r3, BASEPRI
 8004428:	f04f 0120 	mov.w	r1, #32
 800442c:	f381 8811 	msr	BASEPRI, r1
 8004430:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004432:	4b54      	ldr	r3, [pc, #336]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	220a      	movs	r2, #10
 8004438:	4953      	ldr	r1, [pc, #332]	; (8004588 <SEGGER_SYSVIEW_Start+0x170>)
 800443a:	4618      	mov	r0, r3
 800443c:	f7fb fed0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004446:	f7fe fcd5 	bl	8002df4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800444a:	200a      	movs	r0, #10
 800444c:	f7ff ff30 	bl	80042b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004450:	f3ef 8311 	mrs	r3, BASEPRI
 8004454:	f04f 0120 	mov.w	r1, #32
 8004458:	f381 8811 	msr	BASEPRI, r1
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	484b      	ldr	r0, [pc, #300]	; (800458c <SEGGER_SYSVIEW_Start+0x174>)
 8004460:	f7ff f8f4 	bl	800364c <_PreparePacket>
 8004464:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446e:	4b45      	ldr	r3, [pc, #276]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
 8004474:	e00b      	b.n	800448e <SEGGER_SYSVIEW_Start+0x76>
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	b2da      	uxtb	r2, r3
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	1c59      	adds	r1, r3, #1
 800447e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	09db      	lsrs	r3, r3, #7
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2b7f      	cmp	r3, #127	; 0x7f
 8004492:	d8f0      	bhi.n	8004476 <SEGGER_SYSVIEW_Start+0x5e>
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
 80044a8:	4b36      	ldr	r3, [pc, #216]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	e00b      	b.n	80044c8 <SEGGER_SYSVIEW_Start+0xb0>
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	6279      	str	r1, [r7, #36]	; 0x24
 80044ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	09db      	lsrs	r3, r3, #7
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	2b7f      	cmp	r3, #127	; 0x7f
 80044cc:	d8f0      	bhi.n	80044b0 <SEGGER_SYSVIEW_Start+0x98>
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	627a      	str	r2, [r7, #36]	; 0x24
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	4b28      	ldr	r3, [pc, #160]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e00b      	b.n	8004502 <SEGGER_SYSVIEW_Start+0xea>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	61f9      	str	r1, [r7, #28]
 80044f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	09db      	lsrs	r3, r3, #7
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b7f      	cmp	r3, #127	; 0x7f
 8004506:	d8f0      	bhi.n	80044ea <SEGGER_SYSVIEW_Start+0xd2>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e00b      	b.n	800453a <SEGGER_SYSVIEW_Start+0x122>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	6179      	str	r1, [r7, #20]
 800452c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	09db      	lsrs	r3, r3, #7
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b7f      	cmp	r3, #127	; 0x7f
 800453e:	d8f0      	bhi.n	8004522 <SEGGER_SYSVIEW_Start+0x10a>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	617a      	str	r2, [r7, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004550:	2218      	movs	r2, #24
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff f963 	bl	8003820 <_SendPacket>
      RECORD_END();
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <SEGGER_SYSVIEW_Start+0x16c>)
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800456e:	f000 f9eb 	bl	8004948 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004572:	f000 f9b1 	bl	80048d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004576:	f000 fc1b 	bl	8004db0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800457a:	bf00      	nop
 800457c:	3730      	adds	r7, #48	; 0x30
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20014280 	.word	0x20014280
 8004588:	08005984 	.word	0x08005984
 800458c:	200142b0 	.word	0x200142b0

08004590 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004596:	f3ef 8311 	mrs	r3, BASEPRI
 800459a:	f04f 0120 	mov.w	r1, #32
 800459e:	f381 8811 	msr	BASEPRI, r1
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80045a6:	f7ff f851 	bl	800364c <_PreparePacket>
 80045aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80045b4:	220b      	movs	r2, #11
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	6838      	ldr	r0, [r7, #0]
 80045ba:	f7ff f931 	bl	8003820 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f383 8811 	msr	BASEPRI, r3
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200142b0 	.word	0x200142b0
 80045d8:	20014280 	.word	0x20014280

080045dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	; 0x30
 80045e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045e2:	f3ef 8311 	mrs	r3, BASEPRI
 80045e6:	f04f 0120 	mov.w	r1, #32
 80045ea:	f381 8811 	msr	BASEPRI, r1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	4845      	ldr	r0, [pc, #276]	; (8004708 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80045f2:	f7ff f82b 	bl	800364c <_PreparePacket>
 80045f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004600:	4b42      	ldr	r3, [pc, #264]	; (800470c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	e00b      	b.n	8004620 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	b2da      	uxtb	r2, r3
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	09db      	lsrs	r3, r3, #7
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2b7f      	cmp	r3, #127	; 0x7f
 8004624:	d8f0      	bhi.n	8004608 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800462c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	4b34      	ldr	r3, [pc, #208]	; (800470c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	e00b      	b.n	800465a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	6279      	str	r1, [r7, #36]	; 0x24
 800464c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	09db      	lsrs	r3, r3, #7
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	2b7f      	cmp	r3, #127	; 0x7f
 800465e:	d8f0      	bhi.n	8004642 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	627a      	str	r2, [r7, #36]	; 0x24
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	e00b      	b.n	8004694 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1c59      	adds	r1, r3, #1
 8004684:	61f9      	str	r1, [r7, #28]
 8004686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	09db      	lsrs	r3, r3, #7
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b7f      	cmp	r3, #127	; 0x7f
 8004698:	d8f0      	bhi.n	800467c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	61fa      	str	r2, [r7, #28]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e00b      	b.n	80046cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	6179      	str	r1, [r7, #20]
 80046be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	09db      	lsrs	r3, r3, #7
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b7f      	cmp	r3, #127	; 0x7f
 80046d0:	d8f0      	bhi.n	80046b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	617a      	str	r2, [r7, #20]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80046e2:	2218      	movs	r2, #24
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	68b8      	ldr	r0, [r7, #8]
 80046e8:	f7ff f89a 	bl	8003820 <_SendPacket>
  RECORD_END();
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	4798      	blx	r3
  }
}
 8004700:	bf00      	nop
 8004702:	3730      	adds	r7, #48	; 0x30
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200142b0 	.word	0x200142b0
 800470c:	20014280 	.word	0x20014280

08004710 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b092      	sub	sp, #72	; 0x48
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004718:	f3ef 8311 	mrs	r3, BASEPRI
 800471c:	f04f 0120 	mov.w	r1, #32
 8004720:	f381 8811 	msr	BASEPRI, r1
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	486a      	ldr	r0, [pc, #424]	; (80048d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004728:	f7fe ff90 	bl	800364c <_PreparePacket>
 800472c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	647b      	str	r3, [r7, #68]	; 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	643b      	str	r3, [r7, #64]	; 0x40
 8004742:	e00b      	b.n	800475c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004746:	b2da      	uxtb	r2, r3
 8004748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474a:	1c59      	adds	r1, r3, #1
 800474c:	6479      	str	r1, [r7, #68]	; 0x44
 800474e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004758:	09db      	lsrs	r3, r3, #7
 800475a:	643b      	str	r3, [r7, #64]	; 0x40
 800475c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475e:	2b7f      	cmp	r3, #127	; 0x7f
 8004760:	d8f0      	bhi.n	8004744 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	647a      	str	r2, [r7, #68]	; 0x44
 8004768:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
 800477c:	e00b      	b.n	8004796 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	b2da      	uxtb	r2, r3
 8004782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004784:	1c59      	adds	r1, r3, #1
 8004786:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	09db      	lsrs	r3, r3, #7
 8004794:	63bb      	str	r3, [r7, #56]	; 0x38
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2b7f      	cmp	r3, #127	; 0x7f
 800479a:	d8f0      	bhi.n	800477e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	4619      	mov	r1, r3
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7fe ff19 	bl	80035ec <_EncodeStr>
 80047ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80047bc:	2209      	movs	r2, #9
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	6938      	ldr	r0, [r7, #16]
 80047c2:	f7ff f82d 	bl	8003820 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
 80047da:	e00b      	b.n	80047f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	6379      	str	r1, [r7, #52]	; 0x34
 80047e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	09db      	lsrs	r3, r3, #7
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	2b7f      	cmp	r3, #127	; 0x7f
 80047f8:	d8f0      	bhi.n	80047dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	637a      	str	r2, [r7, #52]	; 0x34
 8004800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
 8004814:	e00b      	b.n	800482e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	1c59      	adds	r1, r3, #1
 800481e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	09db      	lsrs	r3, r3, #7
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	2b7f      	cmp	r3, #127	; 0x7f
 8004832:	d8f0      	bhi.n	8004816 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800483a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	e00b      	b.n	8004868 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	6279      	str	r1, [r7, #36]	; 0x24
 800485a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2b7f      	cmp	r3, #127	; 0x7f
 800486c:	d8f0      	bhi.n	8004850 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	627a      	str	r2, [r7, #36]	; 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	e00b      	b.n	80048a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	1c59      	adds	r1, r3, #1
 8004890:	61f9      	str	r1, [r7, #28]
 8004892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	09db      	lsrs	r3, r3, #7
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b7f      	cmp	r3, #127	; 0x7f
 80048a4:	d8f0      	bhi.n	8004888 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	61fa      	str	r2, [r7, #28]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80048b6:	2215      	movs	r2, #21
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	6938      	ldr	r0, [r7, #16]
 80048bc:	f7fe ffb0 	bl	8003820 <_SendPacket>
  RECORD_END();
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f383 8811 	msr	BASEPRI, r3
}
 80048c6:	bf00      	nop
 80048c8:	3748      	adds	r7, #72	; 0x48
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200142b0 	.word	0x200142b0
 80048d4:	20014280 	.word	0x20014280

080048d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80048ee:	4b03      	ldr	r3, [pc, #12]	; (80048fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4798      	blx	r3
  }
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20014280 	.word	0x20014280

08004900 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004908:	f3ef 8311 	mrs	r3, BASEPRI
 800490c:	f04f 0120 	mov.w	r1, #32
 8004910:	f381 8811 	msr	BASEPRI, r1
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	480b      	ldr	r0, [pc, #44]	; (8004944 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004918:	f7fe fe98 	bl	800364c <_PreparePacket>
 800491c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	6938      	ldr	r0, [r7, #16]
 8004924:	f7fe fe62 	bl	80035ec <_EncodeStr>
 8004928:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800492a:	220e      	movs	r2, #14
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	6938      	ldr	r0, [r7, #16]
 8004930:	f7fe ff76 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f383 8811 	msr	BASEPRI, r3
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200142b0 	.word	0x200142b0

08004948 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d019      	beq.n	800498a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004956:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d014      	beq.n	800498a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4798      	blx	r3
 8004968:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800496c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800496e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	0013      	movs	r3, r2
 800497c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800497e:	461a      	mov	r2, r3
 8004980:	4601      	mov	r1, r0
 8004982:	200d      	movs	r0, #13
 8004984:	f7ff fcee 	bl	8004364 <SEGGER_SYSVIEW_RecordU32x2>
 8004988:	e005      	b.n	8004996 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	200c      	movs	r0, #12
 8004992:	f7ff fcab 	bl	80042ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bd90      	pop	{r4, r7, pc}
 800499e:	bf00      	nop
 80049a0:	20014280 	.word	0x20014280
 80049a4:	e0001004 	.word	0xe0001004

080049a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80049ae:	f3ef 8311 	mrs	r3, BASEPRI
 80049b2:	f04f 0120 	mov.w	r1, #32
 80049b6:	f381 8811 	msr	BASEPRI, r1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	4819      	ldr	r0, [pc, #100]	; (8004a24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80049be:	f7fe fe45 	bl	800364c <_PreparePacket>
 80049c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e00b      	b.n	80049f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	6179      	str	r1, [r7, #20]
 80049e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	09db      	lsrs	r3, r3, #7
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b7f      	cmp	r3, #127	; 0x7f
 80049f8:	d8f0      	bhi.n	80049dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	617a      	str	r2, [r7, #20]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	68b8      	ldr	r0, [r7, #8]
 8004a10:	f7fe ff06 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f383 8811 	msr	BASEPRI, r3
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200142b0 	.word	0x200142b0
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a32:	f3ef 8311 	mrs	r3, BASEPRI
 8004a36:	f04f 0120 	mov.w	r1, #32
 8004a3a:	f381 8811 	msr	BASEPRI, r1
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	4807      	ldr	r0, [pc, #28]	; (8004a60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004a42:	f7fe fe03 	bl	800364c <_PreparePacket>
 8004a46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004a48:	2203      	movs	r2, #3
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	6838      	ldr	r0, [r7, #0]
 8004a4e:	f7fe fee7 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f383 8811 	msr	BASEPRI, r3
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200142b0 	.word	0x200142b0

08004a64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a6e:	f04f 0120 	mov.w	r1, #32
 8004a72:	f381 8811 	msr	BASEPRI, r1
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	4807      	ldr	r0, [pc, #28]	; (8004a98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004a7a:	f7fe fde7 	bl	800364c <_PreparePacket>
 8004a7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004a80:	2212      	movs	r2, #18
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	6838      	ldr	r0, [r7, #0]
 8004a86:	f7fe fecb 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f383 8811 	msr	BASEPRI, r3
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	200142b0 	.word	0x200142b0

08004a9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa6:	f04f 0120 	mov.w	r1, #32
 8004aaa:	f381 8811 	msr	BASEPRI, r1
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	4807      	ldr	r0, [pc, #28]	; (8004ad0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ab2:	f7fe fdcb 	bl	800364c <_PreparePacket>
 8004ab6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004ab8:	2211      	movs	r2, #17
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	f7fe feaf 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f383 8811 	msr	BASEPRI, r3
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200142b0 	.word	0x200142b0

08004ad4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004adc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae0:	f04f 0120 	mov.w	r1, #32
 8004ae4:	f381 8811 	msr	BASEPRI, r1
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	4819      	ldr	r0, [pc, #100]	; (8004b50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004aec:	f7fe fdae 	bl	800364c <_PreparePacket>
 8004af0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	61fb      	str	r3, [r7, #28]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e00b      	b.n	8004b22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1c59      	adds	r1, r3, #1
 8004b12:	61f9      	str	r1, [r7, #28]
 8004b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	09db      	lsrs	r3, r3, #7
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b7f      	cmp	r3, #127	; 0x7f
 8004b26:	d8f0      	bhi.n	8004b0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004b38:	2208      	movs	r2, #8
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6938      	ldr	r0, [r7, #16]
 8004b3e:	f7fe fe6f 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f383 8811 	msr	BASEPRI, r3
}
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200142b0 	.word	0x200142b0
 8004b54:	20014280 	.word	0x20014280

08004b58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b60:	f3ef 8311 	mrs	r3, BASEPRI
 8004b64:	f04f 0120 	mov.w	r1, #32
 8004b68:	f381 8811 	msr	BASEPRI, r1
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	4819      	ldr	r0, [pc, #100]	; (8004bd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004b70:	f7fe fd6c 	bl	800364c <_PreparePacket>
 8004b74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	e00b      	b.n	8004ba6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	1c59      	adds	r1, r3, #1
 8004b96:	61f9      	str	r1, [r7, #28]
 8004b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	09db      	lsrs	r3, r3, #7
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8004baa:	d8f0      	bhi.n	8004b8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	61fa      	str	r2, [r7, #28]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6938      	ldr	r0, [r7, #16]
 8004bc2:	f7fe fe2d 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f383 8811 	msr	BASEPRI, r3
}
 8004bcc:	bf00      	nop
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	200142b0 	.word	0x200142b0
 8004bd8:	20014280 	.word	0x20014280

08004bdc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004be4:	f3ef 8311 	mrs	r3, BASEPRI
 8004be8:	f04f 0120 	mov.w	r1, #32
 8004bec:	f381 8811 	msr	BASEPRI, r1
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	4819      	ldr	r0, [pc, #100]	; (8004c58 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004bf4:	f7fe fd2a 	bl	800364c <_PreparePacket>
 8004bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004bfe:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e00b      	b.n	8004c2a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	1c59      	adds	r1, r3, #1
 8004c1a:	61f9      	str	r1, [r7, #28]
 8004c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	09db      	lsrs	r3, r3, #7
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c2e:	d8f0      	bhi.n	8004c12 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004c40:	2206      	movs	r2, #6
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	6938      	ldr	r0, [r7, #16]
 8004c46:	f7fe fdeb 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f383 8811 	msr	BASEPRI, r3
}
 8004c50:	bf00      	nop
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200142b0 	.word	0x200142b0
 8004c5c:	20014280 	.word	0x20014280

08004c60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004c6a:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d077      	beq.n	8004d62 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7c:	e008      	b.n	8004c90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3f2      	bcc.n	8004c7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c98:	e000      	b.n	8004c9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d055      	beq.n	8004d4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca6:	f04f 0120 	mov.w	r1, #32
 8004caa:	f381 8811 	msr	BASEPRI, r1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	482f      	ldr	r0, [pc, #188]	; (8004d70 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004cb2:	f7fe fccb 	bl	800364c <_PreparePacket>
 8004cb6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	e00b      	b.n	8004cde <SEGGER_SYSVIEW_SendModule+0x7e>
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	6279      	str	r1, [r7, #36]	; 0x24
 8004cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	09db      	lsrs	r3, r3, #7
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce2:	d8f0      	bhi.n	8004cc6 <SEGGER_SYSVIEW_SendModule+0x66>
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	627a      	str	r2, [r7, #36]	; 0x24
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e00b      	b.n	8004d18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	61f9      	str	r1, [r7, #28]
 8004d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1c:	d8f0      	bhi.n	8004d00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	4619      	mov	r1, r3
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7fe fc58 	bl	80035ec <_EncodeStr>
 8004d3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004d3e:	2216      	movs	r2, #22
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f7fe fd6c 	bl	8003820 <_SendPacket>
      RECORD_END();
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <SEGGER_SYSVIEW_SendModule+0x102>
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4798      	blx	r3
    }
  }
}
 8004d62:	bf00      	nop
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200142a8 	.word	0x200142a8
 8004d70:	200142b0 	.word	0x200142b0

08004d74 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00f      	beq.n	8004da2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f2      	bne.n	8004d88 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200142a8 	.word	0x200142a8

08004db0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004db6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dba:	f04f 0120 	mov.w	r1, #32
 8004dbe:	f381 8811 	msr	BASEPRI, r1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	4817      	ldr	r0, [pc, #92]	; (8004e24 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004dc6:	f7fe fc41 	bl	800364c <_PreparePacket>
 8004dca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	e00b      	b.n	8004df4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	6179      	str	r1, [r7, #20]
 8004de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	09db      	lsrs	r3, r3, #7
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b7f      	cmp	r3, #127	; 0x7f
 8004df8:	d8f0      	bhi.n	8004ddc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	617a      	str	r2, [r7, #20]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004e0a:	221b      	movs	r2, #27
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	68b8      	ldr	r0, [r7, #8]
 8004e10:	f7fe fd06 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f383 8811 	msr	BASEPRI, r3
}
 8004e1a:	bf00      	nop
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200142b0 	.word	0x200142b0
 8004e28:	200142ac 	.word	0x200142ac

08004e2c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004e2c:	b40f      	push	{r0, r1, r2, r3}
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2100      	movs	r1, #0
 8004e40:	6938      	ldr	r0, [r7, #16]
 8004e42:	f7fe ffff 	bl	8003e44 <_VPrintTarget>
  va_end(ParamList);
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e50:	b004      	add	sp, #16
 8004e52:	4770      	bx	lr

08004e54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e60:	f04f 0120 	mov.w	r1, #32
 8004e64:	f381 8811 	msr	BASEPRI, r1
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	4827      	ldr	r0, [pc, #156]	; (8004f08 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004e6c:	f7fe fbee 	bl	800364c <_PreparePacket>
 8004e70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e72:	2280      	movs	r2, #128	; 0x80
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f7fe fbb8 	bl	80035ec <_EncodeStr>
 8004e7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	2301      	movs	r3, #1
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	e00b      	b.n	8004ea0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	6279      	str	r1, [r7, #36]	; 0x24
 8004e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea4:	d8f0      	bhi.n	8004e88 <SEGGER_SYSVIEW_Warn+0x34>
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	e00b      	b.n	8004ed8 <SEGGER_SYSVIEW_Warn+0x84>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	61f9      	str	r1, [r7, #28]
 8004eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	09db      	lsrs	r3, r3, #7
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b7f      	cmp	r3, #127	; 0x7f
 8004edc:	d8f0      	bhi.n	8004ec0 <SEGGER_SYSVIEW_Warn+0x6c>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	61fa      	str	r2, [r7, #28]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004eee:	221a      	movs	r2, #26
 8004ef0:	68f9      	ldr	r1, [r7, #12]
 8004ef2:	6938      	ldr	r0, [r7, #16]
 8004ef4:	f7fe fc94 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f383 8811 	msr	BASEPRI, r3
}
 8004efe:	bf00      	nop
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200142b0 	.word	0x200142b0

08004f0c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f12:	7e1b      	ldrb	r3, [r3, #24]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004f18:	460b      	mov	r3, r1
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	440b      	add	r3, r1
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	336c      	adds	r3, #108	; 0x6c
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f28:	7e1b      	ldrb	r3, [r3, #24]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	490d      	ldr	r1, [pc, #52]	; (8004f64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004f2e:	4603      	mov	r3, r0
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4403      	add	r3, r0
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	3370      	adds	r3, #112	; 0x70
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d00b      	beq.n	8004f58 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f42:	789b      	ldrb	r3, [r3, #2]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f4e:	f7fe fb89 	bl	8003664 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f52:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004f58:	4b01      	ldr	r3, [pc, #4]	; (8004f60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20014280 	.word	0x20014280
 8004f64:	200143e4 	.word	0x200143e4

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4e0d      	ldr	r6, [pc, #52]	; (8004fa0 <__libc_init_array+0x38>)
 8004f6c:	4c0d      	ldr	r4, [pc, #52]	; (8004fa4 <__libc_init_array+0x3c>)
 8004f6e:	1ba4      	subs	r4, r4, r6
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	2500      	movs	r5, #0
 8004f74:	42a5      	cmp	r5, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	4e0b      	ldr	r6, [pc, #44]	; (8004fa8 <__libc_init_array+0x40>)
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	; (8004fac <__libc_init_array+0x44>)
 8004f7c:	f000 fc58 	bl	8005830 <_init>
 8004f80:	1ba4      	subs	r4, r4, r6
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	2500      	movs	r5, #0
 8004f86:	42a5      	cmp	r5, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f90:	4798      	blx	r3
 8004f92:	3501      	adds	r5, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f9a:	4798      	blx	r3
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	080059dc 	.word	0x080059dc
 8004fa4:	080059dc 	.word	0x080059dc
 8004fa8:	080059dc 	.word	0x080059dc
 8004fac:	080059e0 	.word	0x080059e0

08004fb0 <memcmp>:
 8004fb0:	b530      	push	{r4, r5, lr}
 8004fb2:	2400      	movs	r4, #0
 8004fb4:	42a2      	cmp	r2, r4
 8004fb6:	d101      	bne.n	8004fbc <memcmp+0xc>
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e007      	b.n	8004fcc <memcmp+0x1c>
 8004fbc:	5d03      	ldrb	r3, [r0, r4]
 8004fbe:	3401      	adds	r4, #1
 8004fc0:	190d      	adds	r5, r1, r4
 8004fc2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004fc6:	42ab      	cmp	r3, r5
 8004fc8:	d0f4      	beq.n	8004fb4 <memcmp+0x4>
 8004fca:	1b58      	subs	r0, r3, r5
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <memcpy>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	1e43      	subs	r3, r0, #1
 8004fd2:	440a      	add	r2, r1
 8004fd4:	4291      	cmp	r1, r2
 8004fd6:	d100      	bne.n	8004fda <memcpy+0xc>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe2:	e7f7      	b.n	8004fd4 <memcpy+0x6>

08004fe4 <memset>:
 8004fe4:	4402      	add	r2, r0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d100      	bne.n	8004fee <memset+0xa>
 8004fec:	4770      	bx	lr
 8004fee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff2:	e7f9      	b.n	8004fe8 <memset+0x4>

08004ff4 <sniprintf>:
 8004ff4:	b40c      	push	{r2, r3}
 8004ff6:	b530      	push	{r4, r5, lr}
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <sniprintf+0x64>)
 8004ffa:	1e0c      	subs	r4, r1, #0
 8004ffc:	b09d      	sub	sp, #116	; 0x74
 8004ffe:	681d      	ldr	r5, [r3, #0]
 8005000:	da08      	bge.n	8005014 <sniprintf+0x20>
 8005002:	238b      	movs	r3, #139	; 0x8b
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	f04f 30ff 	mov.w	r0, #4294967295
 800500a:	b01d      	add	sp, #116	; 0x74
 800500c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005010:	b002      	add	sp, #8
 8005012:	4770      	bx	lr
 8005014:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005018:	f8ad 3014 	strh.w	r3, [sp, #20]
 800501c:	bf14      	ite	ne
 800501e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005022:	4623      	moveq	r3, r4
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800502c:	9002      	str	r0, [sp, #8]
 800502e:	9006      	str	r0, [sp, #24]
 8005030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005034:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005036:	ab21      	add	r3, sp, #132	; 0x84
 8005038:	a902      	add	r1, sp, #8
 800503a:	4628      	mov	r0, r5
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	f000 f867 	bl	8005110 <_svfiprintf_r>
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	bfbc      	itt	lt
 8005046:	238b      	movlt	r3, #139	; 0x8b
 8005048:	602b      	strlt	r3, [r5, #0]
 800504a:	2c00      	cmp	r4, #0
 800504c:	d0dd      	beq.n	800500a <sniprintf+0x16>
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e7d9      	b.n	800500a <sniprintf+0x16>
 8005056:	bf00      	nop
 8005058:	20000018 	.word	0x20000018

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	429e      	cmp	r6, r3
 8005064:	4682      	mov	sl, r0
 8005066:	460c      	mov	r4, r1
 8005068:	4690      	mov	r8, r2
 800506a:	4699      	mov	r9, r3
 800506c:	d837      	bhi.n	80050de <__ssputs_r+0x82>
 800506e:	898a      	ldrh	r2, [r1, #12]
 8005070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005074:	d031      	beq.n	80050da <__ssputs_r+0x7e>
 8005076:	6825      	ldr	r5, [r4, #0]
 8005078:	6909      	ldr	r1, [r1, #16]
 800507a:	1a6f      	subs	r7, r5, r1
 800507c:	6965      	ldr	r5, [r4, #20]
 800507e:	2302      	movs	r3, #2
 8005080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005084:	fb95 f5f3 	sdiv	r5, r5, r3
 8005088:	f109 0301 	add.w	r3, r9, #1
 800508c:	443b      	add	r3, r7
 800508e:	429d      	cmp	r5, r3
 8005090:	bf38      	it	cc
 8005092:	461d      	movcc	r5, r3
 8005094:	0553      	lsls	r3, r2, #21
 8005096:	d530      	bpl.n	80050fa <__ssputs_r+0x9e>
 8005098:	4629      	mov	r1, r5
 800509a:	f000 fb21 	bl	80056e0 <_malloc_r>
 800509e:	4606      	mov	r6, r0
 80050a0:	b950      	cbnz	r0, 80050b8 <__ssputs_r+0x5c>
 80050a2:	230c      	movs	r3, #12
 80050a4:	f8ca 3000 	str.w	r3, [sl]
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	463a      	mov	r2, r7
 80050ba:	6921      	ldr	r1, [r4, #16]
 80050bc:	f7ff ff87 	bl	8004fce <memcpy>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	6126      	str	r6, [r4, #16]
 80050ce:	6165      	str	r5, [r4, #20]
 80050d0:	443e      	add	r6, r7
 80050d2:	1bed      	subs	r5, r5, r7
 80050d4:	6026      	str	r6, [r4, #0]
 80050d6:	60a5      	str	r5, [r4, #8]
 80050d8:	464e      	mov	r6, r9
 80050da:	454e      	cmp	r6, r9
 80050dc:	d900      	bls.n	80050e0 <__ssputs_r+0x84>
 80050de:	464e      	mov	r6, r9
 80050e0:	4632      	mov	r2, r6
 80050e2:	4641      	mov	r1, r8
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	f000 fa93 	bl	8005610 <memmove>
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	1b9b      	subs	r3, r3, r6
 80050ee:	60a3      	str	r3, [r4, #8]
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	441e      	add	r6, r3
 80050f4:	6026      	str	r6, [r4, #0]
 80050f6:	2000      	movs	r0, #0
 80050f8:	e7dc      	b.n	80050b4 <__ssputs_r+0x58>
 80050fa:	462a      	mov	r2, r5
 80050fc:	f000 fb4a 	bl	8005794 <_realloc_r>
 8005100:	4606      	mov	r6, r0
 8005102:	2800      	cmp	r0, #0
 8005104:	d1e2      	bne.n	80050cc <__ssputs_r+0x70>
 8005106:	6921      	ldr	r1, [r4, #16]
 8005108:	4650      	mov	r0, sl
 800510a:	f000 fa9b 	bl	8005644 <_free_r>
 800510e:	e7c8      	b.n	80050a2 <__ssputs_r+0x46>

08005110 <_svfiprintf_r>:
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	461d      	mov	r5, r3
 8005116:	898b      	ldrh	r3, [r1, #12]
 8005118:	061f      	lsls	r7, r3, #24
 800511a:	b09d      	sub	sp, #116	; 0x74
 800511c:	4680      	mov	r8, r0
 800511e:	460c      	mov	r4, r1
 8005120:	4616      	mov	r6, r2
 8005122:	d50f      	bpl.n	8005144 <_svfiprintf_r+0x34>
 8005124:	690b      	ldr	r3, [r1, #16]
 8005126:	b96b      	cbnz	r3, 8005144 <_svfiprintf_r+0x34>
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	f000 fad9 	bl	80056e0 <_malloc_r>
 800512e:	6020      	str	r0, [r4, #0]
 8005130:	6120      	str	r0, [r4, #16]
 8005132:	b928      	cbnz	r0, 8005140 <_svfiprintf_r+0x30>
 8005134:	230c      	movs	r3, #12
 8005136:	f8c8 3000 	str.w	r3, [r8]
 800513a:	f04f 30ff 	mov.w	r0, #4294967295
 800513e:	e0c8      	b.n	80052d2 <_svfiprintf_r+0x1c2>
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	6163      	str	r3, [r4, #20]
 8005144:	2300      	movs	r3, #0
 8005146:	9309      	str	r3, [sp, #36]	; 0x24
 8005148:	2320      	movs	r3, #32
 800514a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800514e:	2330      	movs	r3, #48	; 0x30
 8005150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005154:	9503      	str	r5, [sp, #12]
 8005156:	f04f 0b01 	mov.w	fp, #1
 800515a:	4637      	mov	r7, r6
 800515c:	463d      	mov	r5, r7
 800515e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005162:	b10b      	cbz	r3, 8005168 <_svfiprintf_r+0x58>
 8005164:	2b25      	cmp	r3, #37	; 0x25
 8005166:	d13e      	bne.n	80051e6 <_svfiprintf_r+0xd6>
 8005168:	ebb7 0a06 	subs.w	sl, r7, r6
 800516c:	d00b      	beq.n	8005186 <_svfiprintf_r+0x76>
 800516e:	4653      	mov	r3, sl
 8005170:	4632      	mov	r2, r6
 8005172:	4621      	mov	r1, r4
 8005174:	4640      	mov	r0, r8
 8005176:	f7ff ff71 	bl	800505c <__ssputs_r>
 800517a:	3001      	adds	r0, #1
 800517c:	f000 80a4 	beq.w	80052c8 <_svfiprintf_r+0x1b8>
 8005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005182:	4453      	add	r3, sl
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	783b      	ldrb	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 809d 	beq.w	80052c8 <_svfiprintf_r+0x1b8>
 800518e:	2300      	movs	r3, #0
 8005190:	f04f 32ff 	mov.w	r2, #4294967295
 8005194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051a0:	931a      	str	r3, [sp, #104]	; 0x68
 80051a2:	462f      	mov	r7, r5
 80051a4:	2205      	movs	r2, #5
 80051a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051aa:	4850      	ldr	r0, [pc, #320]	; (80052ec <_svfiprintf_r+0x1dc>)
 80051ac:	f7fb f868 	bl	8000280 <memchr>
 80051b0:	9b04      	ldr	r3, [sp, #16]
 80051b2:	b9d0      	cbnz	r0, 80051ea <_svfiprintf_r+0xda>
 80051b4:	06d9      	lsls	r1, r3, #27
 80051b6:	bf44      	itt	mi
 80051b8:	2220      	movmi	r2, #32
 80051ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051be:	071a      	lsls	r2, r3, #28
 80051c0:	bf44      	itt	mi
 80051c2:	222b      	movmi	r2, #43	; 0x2b
 80051c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051c8:	782a      	ldrb	r2, [r5, #0]
 80051ca:	2a2a      	cmp	r2, #42	; 0x2a
 80051cc:	d015      	beq.n	80051fa <_svfiprintf_r+0xea>
 80051ce:	9a07      	ldr	r2, [sp, #28]
 80051d0:	462f      	mov	r7, r5
 80051d2:	2000      	movs	r0, #0
 80051d4:	250a      	movs	r5, #10
 80051d6:	4639      	mov	r1, r7
 80051d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051dc:	3b30      	subs	r3, #48	; 0x30
 80051de:	2b09      	cmp	r3, #9
 80051e0:	d94d      	bls.n	800527e <_svfiprintf_r+0x16e>
 80051e2:	b1b8      	cbz	r0, 8005214 <_svfiprintf_r+0x104>
 80051e4:	e00f      	b.n	8005206 <_svfiprintf_r+0xf6>
 80051e6:	462f      	mov	r7, r5
 80051e8:	e7b8      	b.n	800515c <_svfiprintf_r+0x4c>
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <_svfiprintf_r+0x1dc>)
 80051ec:	1a80      	subs	r0, r0, r2
 80051ee:	fa0b f000 	lsl.w	r0, fp, r0
 80051f2:	4318      	orrs	r0, r3
 80051f4:	9004      	str	r0, [sp, #16]
 80051f6:	463d      	mov	r5, r7
 80051f8:	e7d3      	b.n	80051a2 <_svfiprintf_r+0x92>
 80051fa:	9a03      	ldr	r2, [sp, #12]
 80051fc:	1d11      	adds	r1, r2, #4
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	9103      	str	r1, [sp, #12]
 8005202:	2a00      	cmp	r2, #0
 8005204:	db01      	blt.n	800520a <_svfiprintf_r+0xfa>
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	e004      	b.n	8005214 <_svfiprintf_r+0x104>
 800520a:	4252      	negs	r2, r2
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	9207      	str	r2, [sp, #28]
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	783b      	ldrb	r3, [r7, #0]
 8005216:	2b2e      	cmp	r3, #46	; 0x2e
 8005218:	d10c      	bne.n	8005234 <_svfiprintf_r+0x124>
 800521a:	787b      	ldrb	r3, [r7, #1]
 800521c:	2b2a      	cmp	r3, #42	; 0x2a
 800521e:	d133      	bne.n	8005288 <_svfiprintf_r+0x178>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	bfb8      	it	lt
 800522c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005230:	3702      	adds	r7, #2
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	4d2e      	ldr	r5, [pc, #184]	; (80052f0 <_svfiprintf_r+0x1e0>)
 8005236:	7839      	ldrb	r1, [r7, #0]
 8005238:	2203      	movs	r2, #3
 800523a:	4628      	mov	r0, r5
 800523c:	f7fb f820 	bl	8000280 <memchr>
 8005240:	b138      	cbz	r0, 8005252 <_svfiprintf_r+0x142>
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	1b40      	subs	r0, r0, r5
 8005246:	fa03 f000 	lsl.w	r0, r3, r0
 800524a:	9b04      	ldr	r3, [sp, #16]
 800524c:	4303      	orrs	r3, r0
 800524e:	3701      	adds	r7, #1
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	7839      	ldrb	r1, [r7, #0]
 8005254:	4827      	ldr	r0, [pc, #156]	; (80052f4 <_svfiprintf_r+0x1e4>)
 8005256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800525a:	2206      	movs	r2, #6
 800525c:	1c7e      	adds	r6, r7, #1
 800525e:	f7fb f80f 	bl	8000280 <memchr>
 8005262:	2800      	cmp	r0, #0
 8005264:	d038      	beq.n	80052d8 <_svfiprintf_r+0x1c8>
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <_svfiprintf_r+0x1e8>)
 8005268:	bb13      	cbnz	r3, 80052b0 <_svfiprintf_r+0x1a0>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	3307      	adds	r3, #7
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	3308      	adds	r3, #8
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	444b      	add	r3, r9
 800527a:	9309      	str	r3, [sp, #36]	; 0x24
 800527c:	e76d      	b.n	800515a <_svfiprintf_r+0x4a>
 800527e:	fb05 3202 	mla	r2, r5, r2, r3
 8005282:	2001      	movs	r0, #1
 8005284:	460f      	mov	r7, r1
 8005286:	e7a6      	b.n	80051d6 <_svfiprintf_r+0xc6>
 8005288:	2300      	movs	r3, #0
 800528a:	3701      	adds	r7, #1
 800528c:	9305      	str	r3, [sp, #20]
 800528e:	4619      	mov	r1, r3
 8005290:	250a      	movs	r5, #10
 8005292:	4638      	mov	r0, r7
 8005294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005298:	3a30      	subs	r2, #48	; 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d903      	bls.n	80052a6 <_svfiprintf_r+0x196>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c8      	beq.n	8005234 <_svfiprintf_r+0x124>
 80052a2:	9105      	str	r1, [sp, #20]
 80052a4:	e7c6      	b.n	8005234 <_svfiprintf_r+0x124>
 80052a6:	fb05 2101 	mla	r1, r5, r1, r2
 80052aa:	2301      	movs	r3, #1
 80052ac:	4607      	mov	r7, r0
 80052ae:	e7f0      	b.n	8005292 <_svfiprintf_r+0x182>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4622      	mov	r2, r4
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <_svfiprintf_r+0x1ec>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	4640      	mov	r0, r8
 80052bc:	f3af 8000 	nop.w
 80052c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80052c4:	4681      	mov	r9, r0
 80052c6:	d1d6      	bne.n	8005276 <_svfiprintf_r+0x166>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	065b      	lsls	r3, r3, #25
 80052cc:	f53f af35 	bmi.w	800513a <_svfiprintf_r+0x2a>
 80052d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d2:	b01d      	add	sp, #116	; 0x74
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	4622      	mov	r2, r4
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <_svfiprintf_r+0x1ec>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4640      	mov	r0, r8
 80052e4:	f000 f882 	bl	80053ec <_printf_i>
 80052e8:	e7ea      	b.n	80052c0 <_svfiprintf_r+0x1b0>
 80052ea:	bf00      	nop
 80052ec:	080059a0 	.word	0x080059a0
 80052f0:	080059a6 	.word	0x080059a6
 80052f4:	080059aa 	.word	0x080059aa
 80052f8:	00000000 	.word	0x00000000
 80052fc:	0800505d 	.word	0x0800505d

08005300 <_printf_common>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	4691      	mov	r9, r2
 8005306:	461f      	mov	r7, r3
 8005308:	688a      	ldr	r2, [r1, #8]
 800530a:	690b      	ldr	r3, [r1, #16]
 800530c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005310:	4293      	cmp	r3, r2
 8005312:	bfb8      	it	lt
 8005314:	4613      	movlt	r3, r2
 8005316:	f8c9 3000 	str.w	r3, [r9]
 800531a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800531e:	4606      	mov	r6, r0
 8005320:	460c      	mov	r4, r1
 8005322:	b112      	cbz	r2, 800532a <_printf_common+0x2a>
 8005324:	3301      	adds	r3, #1
 8005326:	f8c9 3000 	str.w	r3, [r9]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005334:	3302      	addmi	r3, #2
 8005336:	f8c9 3000 	strmi.w	r3, [r9]
 800533a:	6825      	ldr	r5, [r4, #0]
 800533c:	f015 0506 	ands.w	r5, r5, #6
 8005340:	d107      	bne.n	8005352 <_printf_common+0x52>
 8005342:	f104 0a19 	add.w	sl, r4, #25
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	f8d9 2000 	ldr.w	r2, [r9]
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	42ab      	cmp	r3, r5
 8005350:	dc28      	bgt.n	80053a4 <_printf_common+0xa4>
 8005352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	3300      	adds	r3, #0
 800535a:	bf18      	it	ne
 800535c:	2301      	movne	r3, #1
 800535e:	0692      	lsls	r2, r2, #26
 8005360:	d42d      	bmi.n	80053be <_printf_common+0xbe>
 8005362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005366:	4639      	mov	r1, r7
 8005368:	4630      	mov	r0, r6
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d020      	beq.n	80053b2 <_printf_common+0xb2>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	68e5      	ldr	r5, [r4, #12]
 8005374:	f8d9 2000 	ldr.w	r2, [r9]
 8005378:	f003 0306 	and.w	r3, r3, #6
 800537c:	2b04      	cmp	r3, #4
 800537e:	bf08      	it	eq
 8005380:	1aad      	subeq	r5, r5, r2
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	6922      	ldr	r2, [r4, #16]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	f04f 0900 	mov.w	r9, #0
 800539a:	341a      	adds	r4, #26
 800539c:	454d      	cmp	r5, r9
 800539e:	d11a      	bne.n	80053d6 <_printf_common+0xd6>
 80053a0:	2000      	movs	r0, #0
 80053a2:	e008      	b.n	80053b6 <_printf_common+0xb6>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4652      	mov	r2, sl
 80053a8:	4639      	mov	r1, r7
 80053aa:	4630      	mov	r0, r6
 80053ac:	47c0      	blx	r8
 80053ae:	3001      	adds	r0, #1
 80053b0:	d103      	bne.n	80053ba <_printf_common+0xba>
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	3501      	adds	r5, #1
 80053bc:	e7c3      	b.n	8005346 <_printf_common+0x46>
 80053be:	18e1      	adds	r1, r4, r3
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	2030      	movs	r0, #48	; 0x30
 80053c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c8:	4422      	add	r2, r4
 80053ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d2:	3302      	adds	r3, #2
 80053d4:	e7c5      	b.n	8005362 <_printf_common+0x62>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4622      	mov	r2, r4
 80053da:	4639      	mov	r1, r7
 80053dc:	4630      	mov	r0, r6
 80053de:	47c0      	blx	r8
 80053e0:	3001      	adds	r0, #1
 80053e2:	d0e6      	beq.n	80053b2 <_printf_common+0xb2>
 80053e4:	f109 0901 	add.w	r9, r9, #1
 80053e8:	e7d8      	b.n	800539c <_printf_common+0x9c>
	...

080053ec <_printf_i>:
 80053ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053f4:	460c      	mov	r4, r1
 80053f6:	7e09      	ldrb	r1, [r1, #24]
 80053f8:	b085      	sub	sp, #20
 80053fa:	296e      	cmp	r1, #110	; 0x6e
 80053fc:	4617      	mov	r7, r2
 80053fe:	4606      	mov	r6, r0
 8005400:	4698      	mov	r8, r3
 8005402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005404:	f000 80b3 	beq.w	800556e <_printf_i+0x182>
 8005408:	d822      	bhi.n	8005450 <_printf_i+0x64>
 800540a:	2963      	cmp	r1, #99	; 0x63
 800540c:	d036      	beq.n	800547c <_printf_i+0x90>
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x3a>
 8005410:	2900      	cmp	r1, #0
 8005412:	f000 80b9 	beq.w	8005588 <_printf_i+0x19c>
 8005416:	2958      	cmp	r1, #88	; 0x58
 8005418:	f000 8083 	beq.w	8005522 <_printf_i+0x136>
 800541c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005420:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005424:	e032      	b.n	800548c <_printf_i+0xa0>
 8005426:	2964      	cmp	r1, #100	; 0x64
 8005428:	d001      	beq.n	800542e <_printf_i+0x42>
 800542a:	2969      	cmp	r1, #105	; 0x69
 800542c:	d1f6      	bne.n	800541c <_printf_i+0x30>
 800542e:	6820      	ldr	r0, [r4, #0]
 8005430:	6813      	ldr	r3, [r2, #0]
 8005432:	0605      	lsls	r5, r0, #24
 8005434:	f103 0104 	add.w	r1, r3, #4
 8005438:	d52a      	bpl.n	8005490 <_printf_i+0xa4>
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	da03      	bge.n	800544a <_printf_i+0x5e>
 8005442:	222d      	movs	r2, #45	; 0x2d
 8005444:	425b      	negs	r3, r3
 8005446:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800544a:	486f      	ldr	r0, [pc, #444]	; (8005608 <_printf_i+0x21c>)
 800544c:	220a      	movs	r2, #10
 800544e:	e039      	b.n	80054c4 <_printf_i+0xd8>
 8005450:	2973      	cmp	r1, #115	; 0x73
 8005452:	f000 809d 	beq.w	8005590 <_printf_i+0x1a4>
 8005456:	d808      	bhi.n	800546a <_printf_i+0x7e>
 8005458:	296f      	cmp	r1, #111	; 0x6f
 800545a:	d020      	beq.n	800549e <_printf_i+0xb2>
 800545c:	2970      	cmp	r1, #112	; 0x70
 800545e:	d1dd      	bne.n	800541c <_printf_i+0x30>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f043 0320 	orr.w	r3, r3, #32
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	e003      	b.n	8005472 <_printf_i+0x86>
 800546a:	2975      	cmp	r1, #117	; 0x75
 800546c:	d017      	beq.n	800549e <_printf_i+0xb2>
 800546e:	2978      	cmp	r1, #120	; 0x78
 8005470:	d1d4      	bne.n	800541c <_printf_i+0x30>
 8005472:	2378      	movs	r3, #120	; 0x78
 8005474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005478:	4864      	ldr	r0, [pc, #400]	; (800560c <_printf_i+0x220>)
 800547a:	e055      	b.n	8005528 <_printf_i+0x13c>
 800547c:	6813      	ldr	r3, [r2, #0]
 800547e:	1d19      	adds	r1, r3, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6011      	str	r1, [r2, #0]
 8005484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800548c:	2301      	movs	r3, #1
 800548e:	e08c      	b.n	80055aa <_printf_i+0x1be>
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6011      	str	r1, [r2, #0]
 8005494:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005498:	bf18      	it	ne
 800549a:	b21b      	sxthne	r3, r3
 800549c:	e7cf      	b.n	800543e <_printf_i+0x52>
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	6825      	ldr	r5, [r4, #0]
 80054a2:	1d18      	adds	r0, r3, #4
 80054a4:	6010      	str	r0, [r2, #0]
 80054a6:	0628      	lsls	r0, r5, #24
 80054a8:	d501      	bpl.n	80054ae <_printf_i+0xc2>
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	e002      	b.n	80054b4 <_printf_i+0xc8>
 80054ae:	0668      	lsls	r0, r5, #25
 80054b0:	d5fb      	bpl.n	80054aa <_printf_i+0xbe>
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	4854      	ldr	r0, [pc, #336]	; (8005608 <_printf_i+0x21c>)
 80054b6:	296f      	cmp	r1, #111	; 0x6f
 80054b8:	bf14      	ite	ne
 80054ba:	220a      	movne	r2, #10
 80054bc:	2208      	moveq	r2, #8
 80054be:	2100      	movs	r1, #0
 80054c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054c4:	6865      	ldr	r5, [r4, #4]
 80054c6:	60a5      	str	r5, [r4, #8]
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	f2c0 8095 	blt.w	80055f8 <_printf_i+0x20c>
 80054ce:	6821      	ldr	r1, [r4, #0]
 80054d0:	f021 0104 	bic.w	r1, r1, #4
 80054d4:	6021      	str	r1, [r4, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d13d      	bne.n	8005556 <_printf_i+0x16a>
 80054da:	2d00      	cmp	r5, #0
 80054dc:	f040 808e 	bne.w	80055fc <_printf_i+0x210>
 80054e0:	4665      	mov	r5, ip
 80054e2:	2a08      	cmp	r2, #8
 80054e4:	d10b      	bne.n	80054fe <_printf_i+0x112>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	07db      	lsls	r3, r3, #31
 80054ea:	d508      	bpl.n	80054fe <_printf_i+0x112>
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	6862      	ldr	r2, [r4, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	bfde      	ittt	le
 80054f4:	2330      	movle	r3, #48	; 0x30
 80054f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054fe:	ebac 0305 	sub.w	r3, ip, r5
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	f8cd 8000 	str.w	r8, [sp]
 8005508:	463b      	mov	r3, r7
 800550a:	aa03      	add	r2, sp, #12
 800550c:	4621      	mov	r1, r4
 800550e:	4630      	mov	r0, r6
 8005510:	f7ff fef6 	bl	8005300 <_printf_common>
 8005514:	3001      	adds	r0, #1
 8005516:	d14d      	bne.n	80055b4 <_printf_i+0x1c8>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	b005      	add	sp, #20
 800551e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005522:	4839      	ldr	r0, [pc, #228]	; (8005608 <_printf_i+0x21c>)
 8005524:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005528:	6813      	ldr	r3, [r2, #0]
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	1d1d      	adds	r5, r3, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6015      	str	r5, [r2, #0]
 8005532:	060a      	lsls	r2, r1, #24
 8005534:	d50b      	bpl.n	800554e <_printf_i+0x162>
 8005536:	07ca      	lsls	r2, r1, #31
 8005538:	bf44      	itt	mi
 800553a:	f041 0120 	orrmi.w	r1, r1, #32
 800553e:	6021      	strmi	r1, [r4, #0]
 8005540:	b91b      	cbnz	r3, 800554a <_printf_i+0x15e>
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	f022 0220 	bic.w	r2, r2, #32
 8005548:	6022      	str	r2, [r4, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	e7b7      	b.n	80054be <_printf_i+0xd2>
 800554e:	064d      	lsls	r5, r1, #25
 8005550:	bf48      	it	mi
 8005552:	b29b      	uxthmi	r3, r3
 8005554:	e7ef      	b.n	8005536 <_printf_i+0x14a>
 8005556:	4665      	mov	r5, ip
 8005558:	fbb3 f1f2 	udiv	r1, r3, r2
 800555c:	fb02 3311 	mls	r3, r2, r1, r3
 8005560:	5cc3      	ldrb	r3, [r0, r3]
 8005562:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005566:	460b      	mov	r3, r1
 8005568:	2900      	cmp	r1, #0
 800556a:	d1f5      	bne.n	8005558 <_printf_i+0x16c>
 800556c:	e7b9      	b.n	80054e2 <_printf_i+0xf6>
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	6825      	ldr	r5, [r4, #0]
 8005572:	6961      	ldr	r1, [r4, #20]
 8005574:	1d18      	adds	r0, r3, #4
 8005576:	6010      	str	r0, [r2, #0]
 8005578:	0628      	lsls	r0, r5, #24
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	d501      	bpl.n	8005582 <_printf_i+0x196>
 800557e:	6019      	str	r1, [r3, #0]
 8005580:	e002      	b.n	8005588 <_printf_i+0x19c>
 8005582:	066a      	lsls	r2, r5, #25
 8005584:	d5fb      	bpl.n	800557e <_printf_i+0x192>
 8005586:	8019      	strh	r1, [r3, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	4665      	mov	r5, ip
 800558e:	e7b9      	b.n	8005504 <_printf_i+0x118>
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	1d19      	adds	r1, r3, #4
 8005594:	6011      	str	r1, [r2, #0]
 8005596:	681d      	ldr	r5, [r3, #0]
 8005598:	6862      	ldr	r2, [r4, #4]
 800559a:	2100      	movs	r1, #0
 800559c:	4628      	mov	r0, r5
 800559e:	f7fa fe6f 	bl	8000280 <memchr>
 80055a2:	b108      	cbz	r0, 80055a8 <_printf_i+0x1bc>
 80055a4:	1b40      	subs	r0, r0, r5
 80055a6:	6060      	str	r0, [r4, #4]
 80055a8:	6863      	ldr	r3, [r4, #4]
 80055aa:	6123      	str	r3, [r4, #16]
 80055ac:	2300      	movs	r3, #0
 80055ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b2:	e7a7      	b.n	8005504 <_printf_i+0x118>
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	462a      	mov	r2, r5
 80055b8:	4639      	mov	r1, r7
 80055ba:	4630      	mov	r0, r6
 80055bc:	47c0      	blx	r8
 80055be:	3001      	adds	r0, #1
 80055c0:	d0aa      	beq.n	8005518 <_printf_i+0x12c>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	079b      	lsls	r3, r3, #30
 80055c6:	d413      	bmi.n	80055f0 <_printf_i+0x204>
 80055c8:	68e0      	ldr	r0, [r4, #12]
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	4298      	cmp	r0, r3
 80055ce:	bfb8      	it	lt
 80055d0:	4618      	movlt	r0, r3
 80055d2:	e7a3      	b.n	800551c <_printf_i+0x130>
 80055d4:	2301      	movs	r3, #1
 80055d6:	464a      	mov	r2, r9
 80055d8:	4639      	mov	r1, r7
 80055da:	4630      	mov	r0, r6
 80055dc:	47c0      	blx	r8
 80055de:	3001      	adds	r0, #1
 80055e0:	d09a      	beq.n	8005518 <_printf_i+0x12c>
 80055e2:	3501      	adds	r5, #1
 80055e4:	68e3      	ldr	r3, [r4, #12]
 80055e6:	9a03      	ldr	r2, [sp, #12]
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	42ab      	cmp	r3, r5
 80055ec:	dcf2      	bgt.n	80055d4 <_printf_i+0x1e8>
 80055ee:	e7eb      	b.n	80055c8 <_printf_i+0x1dc>
 80055f0:	2500      	movs	r5, #0
 80055f2:	f104 0919 	add.w	r9, r4, #25
 80055f6:	e7f5      	b.n	80055e4 <_printf_i+0x1f8>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ac      	bne.n	8005556 <_printf_i+0x16a>
 80055fc:	7803      	ldrb	r3, [r0, #0]
 80055fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005606:	e76c      	b.n	80054e2 <_printf_i+0xf6>
 8005608:	080059b1 	.word	0x080059b1
 800560c:	080059c2 	.word	0x080059c2

08005610 <memmove>:
 8005610:	4288      	cmp	r0, r1
 8005612:	b510      	push	{r4, lr}
 8005614:	eb01 0302 	add.w	r3, r1, r2
 8005618:	d807      	bhi.n	800562a <memmove+0x1a>
 800561a:	1e42      	subs	r2, r0, #1
 800561c:	4299      	cmp	r1, r3
 800561e:	d00a      	beq.n	8005636 <memmove+0x26>
 8005620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005624:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005628:	e7f8      	b.n	800561c <memmove+0xc>
 800562a:	4283      	cmp	r3, r0
 800562c:	d9f5      	bls.n	800561a <memmove+0xa>
 800562e:	1881      	adds	r1, r0, r2
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	42d3      	cmn	r3, r2
 8005634:	d100      	bne.n	8005638 <memmove+0x28>
 8005636:	bd10      	pop	{r4, pc}
 8005638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800563c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005640:	e7f7      	b.n	8005632 <memmove+0x22>
	...

08005644 <_free_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4605      	mov	r5, r0
 8005648:	2900      	cmp	r1, #0
 800564a:	d045      	beq.n	80056d8 <_free_r+0x94>
 800564c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005650:	1f0c      	subs	r4, r1, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	bfb8      	it	lt
 8005656:	18e4      	addlt	r4, r4, r3
 8005658:	f000 f8d2 	bl	8005800 <__malloc_lock>
 800565c:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <_free_r+0x98>)
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	4610      	mov	r0, r2
 8005662:	b933      	cbnz	r3, 8005672 <_free_r+0x2e>
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	6014      	str	r4, [r2, #0]
 8005668:	4628      	mov	r0, r5
 800566a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566e:	f000 b8c8 	b.w	8005802 <__malloc_unlock>
 8005672:	42a3      	cmp	r3, r4
 8005674:	d90c      	bls.n	8005690 <_free_r+0x4c>
 8005676:	6821      	ldr	r1, [r4, #0]
 8005678:	1862      	adds	r2, r4, r1
 800567a:	4293      	cmp	r3, r2
 800567c:	bf04      	itt	eq
 800567e:	681a      	ldreq	r2, [r3, #0]
 8005680:	685b      	ldreq	r3, [r3, #4]
 8005682:	6063      	str	r3, [r4, #4]
 8005684:	bf04      	itt	eq
 8005686:	1852      	addeq	r2, r2, r1
 8005688:	6022      	streq	r2, [r4, #0]
 800568a:	6004      	str	r4, [r0, #0]
 800568c:	e7ec      	b.n	8005668 <_free_r+0x24>
 800568e:	4613      	mov	r3, r2
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	b10a      	cbz	r2, 8005698 <_free_r+0x54>
 8005694:	42a2      	cmp	r2, r4
 8005696:	d9fa      	bls.n	800568e <_free_r+0x4a>
 8005698:	6819      	ldr	r1, [r3, #0]
 800569a:	1858      	adds	r0, r3, r1
 800569c:	42a0      	cmp	r0, r4
 800569e:	d10b      	bne.n	80056b8 <_free_r+0x74>
 80056a0:	6820      	ldr	r0, [r4, #0]
 80056a2:	4401      	add	r1, r0
 80056a4:	1858      	adds	r0, r3, r1
 80056a6:	4282      	cmp	r2, r0
 80056a8:	6019      	str	r1, [r3, #0]
 80056aa:	d1dd      	bne.n	8005668 <_free_r+0x24>
 80056ac:	6810      	ldr	r0, [r2, #0]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	4401      	add	r1, r0
 80056b4:	6019      	str	r1, [r3, #0]
 80056b6:	e7d7      	b.n	8005668 <_free_r+0x24>
 80056b8:	d902      	bls.n	80056c0 <_free_r+0x7c>
 80056ba:	230c      	movs	r3, #12
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	e7d3      	b.n	8005668 <_free_r+0x24>
 80056c0:	6820      	ldr	r0, [r4, #0]
 80056c2:	1821      	adds	r1, r4, r0
 80056c4:	428a      	cmp	r2, r1
 80056c6:	bf04      	itt	eq
 80056c8:	6811      	ldreq	r1, [r2, #0]
 80056ca:	6852      	ldreq	r2, [r2, #4]
 80056cc:	6062      	str	r2, [r4, #4]
 80056ce:	bf04      	itt	eq
 80056d0:	1809      	addeq	r1, r1, r0
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	605c      	str	r4, [r3, #4]
 80056d6:	e7c7      	b.n	8005668 <_free_r+0x24>
 80056d8:	bd38      	pop	{r3, r4, r5, pc}
 80056da:	bf00      	nop
 80056dc:	20014394 	.word	0x20014394

080056e0 <_malloc_r>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	1ccd      	adds	r5, r1, #3
 80056e4:	f025 0503 	bic.w	r5, r5, #3
 80056e8:	3508      	adds	r5, #8
 80056ea:	2d0c      	cmp	r5, #12
 80056ec:	bf38      	it	cc
 80056ee:	250c      	movcc	r5, #12
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	4606      	mov	r6, r0
 80056f4:	db01      	blt.n	80056fa <_malloc_r+0x1a>
 80056f6:	42a9      	cmp	r1, r5
 80056f8:	d903      	bls.n	8005702 <_malloc_r+0x22>
 80056fa:	230c      	movs	r3, #12
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	2000      	movs	r0, #0
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	f000 f87d 	bl	8005800 <__malloc_lock>
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <_malloc_r+0xac>)
 8005708:	6814      	ldr	r4, [r2, #0]
 800570a:	4621      	mov	r1, r4
 800570c:	b991      	cbnz	r1, 8005734 <_malloc_r+0x54>
 800570e:	4c20      	ldr	r4, [pc, #128]	; (8005790 <_malloc_r+0xb0>)
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	b91b      	cbnz	r3, 800571c <_malloc_r+0x3c>
 8005714:	4630      	mov	r0, r6
 8005716:	f000 f863 	bl	80057e0 <_sbrk_r>
 800571a:	6020      	str	r0, [r4, #0]
 800571c:	4629      	mov	r1, r5
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f85e 	bl	80057e0 <_sbrk_r>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d124      	bne.n	8005772 <_malloc_r+0x92>
 8005728:	230c      	movs	r3, #12
 800572a:	6033      	str	r3, [r6, #0]
 800572c:	4630      	mov	r0, r6
 800572e:	f000 f868 	bl	8005802 <__malloc_unlock>
 8005732:	e7e4      	b.n	80056fe <_malloc_r+0x1e>
 8005734:	680b      	ldr	r3, [r1, #0]
 8005736:	1b5b      	subs	r3, r3, r5
 8005738:	d418      	bmi.n	800576c <_malloc_r+0x8c>
 800573a:	2b0b      	cmp	r3, #11
 800573c:	d90f      	bls.n	800575e <_malloc_r+0x7e>
 800573e:	600b      	str	r3, [r1, #0]
 8005740:	50cd      	str	r5, [r1, r3]
 8005742:	18cc      	adds	r4, r1, r3
 8005744:	4630      	mov	r0, r6
 8005746:	f000 f85c 	bl	8005802 <__malloc_unlock>
 800574a:	f104 000b 	add.w	r0, r4, #11
 800574e:	1d23      	adds	r3, r4, #4
 8005750:	f020 0007 	bic.w	r0, r0, #7
 8005754:	1ac3      	subs	r3, r0, r3
 8005756:	d0d3      	beq.n	8005700 <_malloc_r+0x20>
 8005758:	425a      	negs	r2, r3
 800575a:	50e2      	str	r2, [r4, r3]
 800575c:	e7d0      	b.n	8005700 <_malloc_r+0x20>
 800575e:	428c      	cmp	r4, r1
 8005760:	684b      	ldr	r3, [r1, #4]
 8005762:	bf16      	itet	ne
 8005764:	6063      	strne	r3, [r4, #4]
 8005766:	6013      	streq	r3, [r2, #0]
 8005768:	460c      	movne	r4, r1
 800576a:	e7eb      	b.n	8005744 <_malloc_r+0x64>
 800576c:	460c      	mov	r4, r1
 800576e:	6849      	ldr	r1, [r1, #4]
 8005770:	e7cc      	b.n	800570c <_malloc_r+0x2c>
 8005772:	1cc4      	adds	r4, r0, #3
 8005774:	f024 0403 	bic.w	r4, r4, #3
 8005778:	42a0      	cmp	r0, r4
 800577a:	d005      	beq.n	8005788 <_malloc_r+0xa8>
 800577c:	1a21      	subs	r1, r4, r0
 800577e:	4630      	mov	r0, r6
 8005780:	f000 f82e 	bl	80057e0 <_sbrk_r>
 8005784:	3001      	adds	r0, #1
 8005786:	d0cf      	beq.n	8005728 <_malloc_r+0x48>
 8005788:	6025      	str	r5, [r4, #0]
 800578a:	e7db      	b.n	8005744 <_malloc_r+0x64>
 800578c:	20014394 	.word	0x20014394
 8005790:	20014398 	.word	0x20014398

08005794 <_realloc_r>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	4607      	mov	r7, r0
 8005798:	4614      	mov	r4, r2
 800579a:	460e      	mov	r6, r1
 800579c:	b921      	cbnz	r1, 80057a8 <_realloc_r+0x14>
 800579e:	4611      	mov	r1, r2
 80057a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057a4:	f7ff bf9c 	b.w	80056e0 <_malloc_r>
 80057a8:	b922      	cbnz	r2, 80057b4 <_realloc_r+0x20>
 80057aa:	f7ff ff4b 	bl	8005644 <_free_r>
 80057ae:	4625      	mov	r5, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	f000 f826 	bl	8005804 <_malloc_usable_size_r>
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d20f      	bcs.n	80057dc <_realloc_r+0x48>
 80057bc:	4621      	mov	r1, r4
 80057be:	4638      	mov	r0, r7
 80057c0:	f7ff ff8e 	bl	80056e0 <_malloc_r>
 80057c4:	4605      	mov	r5, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0f2      	beq.n	80057b0 <_realloc_r+0x1c>
 80057ca:	4631      	mov	r1, r6
 80057cc:	4622      	mov	r2, r4
 80057ce:	f7ff fbfe 	bl	8004fce <memcpy>
 80057d2:	4631      	mov	r1, r6
 80057d4:	4638      	mov	r0, r7
 80057d6:	f7ff ff35 	bl	8005644 <_free_r>
 80057da:	e7e9      	b.n	80057b0 <_realloc_r+0x1c>
 80057dc:	4635      	mov	r5, r6
 80057de:	e7e7      	b.n	80057b0 <_realloc_r+0x1c>

080057e0 <_sbrk_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4c06      	ldr	r4, [pc, #24]	; (80057fc <_sbrk_r+0x1c>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4605      	mov	r5, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	f000 f812 	bl	8005814 <_sbrk>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_sbrk_r+0x1a>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_sbrk_r+0x1a>
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	2001448c 	.word	0x2001448c

08005800 <__malloc_lock>:
 8005800:	4770      	bx	lr

08005802 <__malloc_unlock>:
 8005802:	4770      	bx	lr

08005804 <_malloc_usable_size_r>:
 8005804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005808:	1f18      	subs	r0, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	bfbc      	itt	lt
 800580e:	580b      	ldrlt	r3, [r1, r0]
 8005810:	18c0      	addlt	r0, r0, r3
 8005812:	4770      	bx	lr

08005814 <_sbrk>:
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <_sbrk+0x14>)
 8005816:	6819      	ldr	r1, [r3, #0]
 8005818:	4602      	mov	r2, r0
 800581a:	b909      	cbnz	r1, 8005820 <_sbrk+0xc>
 800581c:	4903      	ldr	r1, [pc, #12]	; (800582c <_sbrk+0x18>)
 800581e:	6019      	str	r1, [r3, #0]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	4402      	add	r2, r0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	4770      	bx	lr
 8005828:	2001439c 	.word	0x2001439c
 800582c:	20014490 	.word	0x20014490

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
