
18_BinarySemaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f18  08005f18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f20  08005f20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac8  20000074  08005f9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b3c  08005f9c  00024b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019634  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003142  00000000  00000000  000396d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003dba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004674  00000000  00000000  0003edd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f328  00000000  00000000  0004344c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096a53  00000000  00000000  00052774  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e91c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005774  00000000  00000000  000e9244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dfc 	.word	0x08005dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005dfc 	.word	0x08005dfc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
TaskProfiler BlueLEDProfiler;

SemaphoreHandle_t xBinarySemaphore;

int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  HAL_Init();
 80004e6:	f000 fb5d 	bl	8000ba4 <HAL_Init>
  SystemClock_Config();
 80004ea:	f000 f8d3 	bl	8000694 <SystemClock_Config>
  MX_GPIO_Init();
 80004ee:	f000 f95b 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f92f 	bl	8000754 <MX_USART2_UART_Init>
  xBinarySemaphore=xSemaphoreCreateBinary();
 80004f6:	2203      	movs	r2, #3
 80004f8:	2100      	movs	r1, #0
 80004fa:	2001      	movs	r0, #1
 80004fc:	f002 fa11 	bl	8002922 <xQueueGenericCreate>
 8000500:	4602      	mov	r2, r0
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  xTaskCreate(redLedController,"red led task",100,NULL,1,NULL);
 8000506:	2300      	movs	r3, #0
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	490e      	ldr	r1, [pc, #56]	; (800054c <main+0x6c>)
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x70>)
 8000516:	f003 f84f 	bl	80035b8 <xTaskCreate>
  xTaskCreate(yellowLedController,"yellow led task",100,NULL,1,NULL);
 800051a:	2300      	movs	r3, #0
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2264      	movs	r2, #100	; 0x64
 8000526:	490b      	ldr	r1, [pc, #44]	; (8000554 <main+0x74>)
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x78>)
 800052a:	f003 f845 	bl	80035b8 <xTaskCreate>
  xTaskCreate(blueLedController,"blue led task",100,NULL,1,NULL);
 800052e:	2300      	movs	r3, #0
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2301      	movs	r3, #1
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	2264      	movs	r2, #100	; 0x64
 800053a:	4908      	ldr	r1, [pc, #32]	; (800055c <main+0x7c>)
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x80>)
 800053e:	f003 f83b 	bl	80035b8 <xTaskCreate>


  vTaskStartScheduler();
 8000542:	f003 f9c9 	bl	80038d8 <vTaskStartScheduler>


  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x66>
 8000548:	20004a64 	.word	0x20004a64
 800054c:	08005e14 	.word	0x08005e14
 8000550:	080005ad 	.word	0x080005ad
 8000554:	08005e24 	.word	0x08005e24
 8000558:	08000605 	.word	0x08000605
 800055c:	08005e34 	.word	0x08005e34
 8000560:	0800064d 	.word	0x0800064d

08000564 <uart2_write>:
  }
}


int uart2_write(int ch)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while (!(USART2->SR &0x0080)){}
 800056c:	bf00      	nop
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <uart2_write+0x2c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0f9      	beq.n	800056e <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <uart2_write+0x2c>)
 800057e:	b2db      	uxtb	r3, r3
 8000580:	6053      	str	r3, [r2, #4]

	return ch;
 8000582:	687b      	ldr	r3, [r7, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40004400 	.word	0x40004400

08000594 <__io_putchar>:

int __io_putchar(int ch)
	{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff ffe1 	bl	8000564 <uart2_write>
	return ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
	}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <redLedController>:

void redLedController(void *pvParameters)
	{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(xBinarySemaphore);
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <redLedController+0x4c>)
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	f002 fa15 	bl	80029ec <xQueueGenericSend>
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <redLedController+0x4c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f04f 31ff 	mov.w	r1, #4294967295
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fca8 	bl	8002f20 <xQueueSemaphoreTake>
		RedLEDProfiler++;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <redLedController+0x50>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <redLedController+0x50>)
 80005d8:	6013      	str	r3, [r2, #0]
		printf("this is red task\r\n");
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <redLedController+0x54>)
 80005dc:	f005 f8bc 	bl	8005758 <puts>
		xSemaphoreGive(xBinarySemaphore);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <redLedController+0x4c>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	f002 f9ff 	bl	80029ec <xQueueGenericSend>
		vTaskDelay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f003 f93e 	bl	8003870 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80005f4:	e7e5      	b.n	80005c2 <redLedController+0x16>
 80005f6:	bf00      	nop
 80005f8:	20004a64 	.word	0x20004a64
 80005fc:	20004aac 	.word	0x20004aac
 8000600:	08005e44 	.word	0x08005e44

08000604 <yellowLedController>:
	}

	}
void yellowLedController(void *pvParameters)
	{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <yellowLedController+0x3c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fc83 	bl	8002f20 <xQueueSemaphoreTake>
		YellowLEDProfiler++;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <yellowLedController+0x40>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <yellowLedController+0x40>)
 8000622:	6013      	str	r3, [r2, #0]
		printf("this is yellow task\r\n");
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <yellowLedController+0x44>)
 8000626:	f005 f897 	bl	8005758 <puts>
		xSemaphoreGive(xBinarySemaphore);
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <yellowLedController+0x3c>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	f002 f9da 	bl	80029ec <xQueueGenericSend>
		vTaskDelay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f003 f919 	bl	8003870 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800063e:	e7e5      	b.n	800060c <yellowLedController+0x8>
 8000640:	20004a64 	.word	0x20004a64
 8000644:	20004a68 	.word	0x20004a68
 8000648:	08005e58 	.word	0x08005e58

0800064c <blueLedController>:
	}

	}
void blueLedController(void *pvParameters)
	{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]


	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <blueLedController+0x3c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fc5f 	bl	8002f20 <xQueueSemaphoreTake>
		BlueLEDProfiler++;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <blueLedController+0x40>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a08      	ldr	r2, [pc, #32]	; (800068c <blueLedController+0x40>)
 800066a:	6013      	str	r3, [r2, #0]
		printf("this is blue task\r\n");
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <blueLedController+0x44>)
 800066e:	f005 f873 	bl	8005758 <puts>
		xSemaphoreGive(xBinarySemaphore);
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <blueLedController+0x3c>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	f002 f9b6 	bl	80029ec <xQueueGenericSend>
		vTaskDelay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f003 f8f5 	bl	8003870 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000686:	e7e5      	b.n	8000654 <blueLedController+0x8>
 8000688:	20004a64 	.word	0x20004a64
 800068c:	20004ab0 	.word	0x20004ab0
 8000690:	08005e70 	.word	0x08005e70

08000694 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 ff99 	bl	80055da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xb8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <SystemClock_Config+0xb8>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <SystemClock_Config+0xb8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <SystemClock_Config+0xbc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <SystemClock_Config+0xbc>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SystemClock_Config+0xbc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fcf1 	bl	80010f0 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000714:	f000 f874 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f000 ff4c 	bl	80015d0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073e:	f000 f85f 	bl	8000800 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fb3c 	bl	8001e08 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f833 	bl	8000800 <Error_Handler>
  }

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20004a6c 	.word	0x20004a6c
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_GPIO_Init+0x30>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x30>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_GPIO_Init+0x30>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f9fb 	bl	8000be8 <HAL_IncTick>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40010000 	.word	0x40010000

08000800 <Error_Handler>:

void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_MspInit+0x54>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <HAL_MspInit+0x54>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x54>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_MspInit+0x54>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f000 fa9f 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_UART_MspInit+0x84>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d12b      	bne.n	80008e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x88>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_UART_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_UART_MspInit+0x8c>)
 80008de:	f000 fa85 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2019      	movs	r0, #25
 800090e:	f000 fa43 	bl	8000d98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000912:	2019      	movs	r0, #25
 8000914:	f000 fa5c 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <HAL_InitTick+0xa0>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000920:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <HAL_InitTick+0xa0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6453      	str	r3, [r2, #68]	; 0x44
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_InitTick+0xa0>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 0210 	add.w	r2, r7, #16
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f812 	bl	8001968 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000944:	f000 fffc 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 8000948:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_InitTick+0xa4>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	3b01      	subs	r3, #1
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_InitTick+0xa8>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <HAL_InitTick+0xac>)
 800095c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_InitTick+0xa8>)
 8000960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000964:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_InitTick+0xa8>)
 8000968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_InitTick+0xa8>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_InitTick+0xa8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <HAL_InitTick+0xa8>)
 800097a:	f001 f827 	bl	80019cc <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d104      	bne.n	800098e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <HAL_InitTick+0xa8>)
 8000986:	f001 f856 	bl	8001a36 <HAL_TIM_Base_Start_IT>
 800098a:	4603      	mov	r3, r0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3730      	adds	r7, #48	; 0x30
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	20004ab4 	.word	0x20004ab4
 80009a4:	40010000 	.word	0x40010000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009e2:	f001 f84c 	bl	8001a7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20004ab4 	.word	0x20004ab4

080009f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e00a      	b.n	8000a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a02:	f3af 8000 	nop.w
 8000a06:	4601      	mov	r1, r0
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf0      	blt.n	8000a02 <_read+0x12>
	}

return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e009      	b.n	8000a50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fda5 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf1      	blt.n	8000a3c <_write+0x12>
	}
	return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_close>:

int _close(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	return -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_isatty>:

int _isatty(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x50>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x16>
		heap_end = &end;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <_sbrk+0x50>)
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <_sbrk+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <_sbrk+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <_sbrk+0x50>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	466a      	mov	r2, sp
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d907      	bls.n	8000b06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000af6:	f004 fc71 	bl	80053dc <__errno>
 8000afa:	4602      	mov	r2, r0
 8000afc:	230c      	movs	r3, #12
 8000afe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	e006      	b.n	8000b14 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <_sbrk+0x50>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <_sbrk+0x50>)
 8000b10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000090 	.word	0x20000090
 8000b20:	20004b40 	.word	0x20004b40

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SystemInit+0x28>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <SystemInit+0x28>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SystemInit+0x28>)
 8000b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b56:	e003      	b.n	8000b60 <LoopCopyDataInit>

08000b58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b5e:	3104      	adds	r1, #4

08000b60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b68:	d3f6      	bcc.n	8000b58 <CopyDataInit>
  ldr  r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b6c:	e002      	b.n	8000b74 <LoopFillZerobss>

08000b6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b70:	f842 3b04 	str.w	r3, [r2], #4

08000b74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b78:	d3f9      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd3 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f004 fcfd 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fcad 	bl	80004e0 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000b8c:	08005f28 	.word	0x08005f28
  ldr  r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b94:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b98:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b9c:	20004b3c 	.word	0x20004b3c

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fe90 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe1a 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20004af4 	.word	0x20004af4

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20004af4 	.word	0x20004af4

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e159      	b.n	80010bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8148 	bne.w	80010b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d00b      	beq.n	8000e46 <HAL_GPIO_Init+0x5a>
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d007      	beq.n	8000e46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3a:	2b11      	cmp	r3, #17
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b12      	cmp	r3, #18
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0xfc>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a2 	beq.w	80010b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <HAL_GPIO_Init+0x2e4>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <HAL_GPIO_Init+0x2e4>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_GPIO_Init+0x2e4>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a51      	ldr	r2, [pc, #324]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x202>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a47      	ldr	r2, [pc, #284]	; (80010dc <HAL_GPIO_Init+0x2f0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1fe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a46      	ldr	r2, [pc, #280]	; (80010e0 <HAL_GPIO_Init+0x2f4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a45      	ldr	r2, [pc, #276]	; (80010e4 <HAL_GPIO_Init+0x2f8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1f6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <HAL_GPIO_Init+0x2fc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1f2>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4934      	ldr	r1, [pc, #208]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HAL_GPIO_Init+0x300>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001032:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <HAL_GPIO_Init+0x300>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <HAL_GPIO_Init+0x300>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_GPIO_Init+0x300>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_GPIO_Init+0x300>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_GPIO_Init+0x300>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_GPIO_Init+0x300>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_GPIO_Init+0x300>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f aea2 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	3724      	adds	r7, #36	; 0x24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40013800 	.word	0x40013800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e25b      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4ba3      	ldr	r3, [pc, #652]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4ba0      	ldr	r3, [pc, #640]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b9d      	ldr	r3, [pc, #628]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b99      	ldr	r3, [pc, #612]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e236      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a90      	ldr	r2, [pc, #576]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a8a      	ldr	r2, [pc, #552]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b84      	ldr	r3, [pc, #528]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a83      	ldr	r2, [pc, #524]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fd32 	bl	8000c10 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fd2e 	bl	8000c10 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1fb      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b76      	ldr	r3, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fd1e 	bl	8000c10 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fd1a 	bl	8000c10 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1e7      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b6c      	ldr	r3, [pc, #432]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1bb      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4952      	ldr	r1, [pc, #328]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_RCC_OscConfig+0x2b0>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fcd3 	bl	8000c10 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fccf 	bl	8000c10 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e19c      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4940      	ldr	r1, [pc, #256]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x2b0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcb2 	bl	8000c10 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fcae 	bl	8000c10 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e17b      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d030      	beq.n	800133c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x2b4>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc92 	bl	8000c10 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc8e 	bl	8000c10 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e15b      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCC_OscConfig+0x2b4>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fc7b 	bl	8000c10 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc77 	bl	8000c10 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e144      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a0 	beq.w	800148a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10f      	bne.n	800137a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fc3d 	bl	8000c10 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e011      	b.n	80013be <HAL_RCC_OscConfig+0x2ce>
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470000 	.word	0x42470000
 80013a4:	42470e80 	.word	0x42470e80
 80013a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ac:	f7ff fc30 	bl	8000c10 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0fd      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <HAL_RCC_OscConfig+0x4d4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2f0>
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	4a7c      	ldr	r2, [pc, #496]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6713      	str	r3, [r2, #112]	; 0x70
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x32a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x312>
 80013e8:	4b77      	ldr	r3, [pc, #476]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a76      	ldr	r2, [pc, #472]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
 80013f4:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a73      	ldr	r2, [pc, #460]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x32a>
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a70      	ldr	r2, [pc, #448]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b6e      	ldr	r3, [pc, #440]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a6d      	ldr	r2, [pc, #436]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001422:	f7ff fbf5 	bl	8000c10 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fbf1 	bl	8000c10 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0bc      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x33a>
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fbdf 	bl	8000c10 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fbdb 	bl	8000c10 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0a6      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8092 	beq.w	80015b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001494:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d05c      	beq.n	800155a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d141      	bne.n	800152c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCC_OscConfig+0x4dc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fbaf 	bl	8000c10 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fbab 	bl	8000c10 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e078      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	019b      	lsls	r3, r3, #6
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_RCC_OscConfig+0x4dc>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb84 	bl	8000c10 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb80 	bl	8000c10 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e04d      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x41c>
 800152a:	e045      	b.n	80015b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x4dc>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb6d 	bl	8000c10 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb69 	bl	8000c10 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e036      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x44a>
 8001558:	e02e      	b.n	80015b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e029      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	429a      	cmp	r2, r3
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d115      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001594:	4293      	cmp	r3, r2
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40007000 	.word	0x40007000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	42470060 	.word	0x42470060

080015d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0cc      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d90c      	bls.n	800160c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0b8      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a58      	ldr	r2, [pc, #352]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800162e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	494d      	ldr	r1, [pc, #308]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d044      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	2b03      	cmp	r3, #3
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e067      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 0203 	bic.w	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4934      	ldr	r1, [pc, #208]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c0:	f7ff faa6 	bl	8000c10 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	e00a      	b.n	80016de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff faa2 	bl	8000c10 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e04f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 020c 	and.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1eb      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d20c      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e032      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4916      	ldr	r1, [pc, #88]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001756:	f000 f821 	bl	800179c <HAL_RCC_GetSysClockFreq>
 800175a:	4601      	mov	r1, r0
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	fa21 f303 	lsr.w	r3, r1, r3
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f8be 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00
 800178c:	40023800 	.word	0x40023800
 8001790:	08005e9c 	.word	0x08005e9c
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d007      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x32>
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d008      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x38>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 808d 	bne.w	80018e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ca:	60bb      	str	r3, [r7, #8]
       break;
 80017cc:	e08c      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 80017d0:	60bb      	str	r3, [r7, #8]
      break;
 80017d2:	e089      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d023      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	f04f 0400 	mov.w	r4, #0
 80017f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	ea03 0501 	and.w	r5, r3, r1
 8001800:	ea04 0602 	and.w	r6, r4, r2
 8001804:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001806:	fb02 f106 	mul.w	r1, r2, r6
 800180a:	2200      	movs	r2, #0
 800180c:	fb02 f205 	mul.w	r2, r2, r5
 8001810:	440a      	add	r2, r1
 8001812:	493a      	ldr	r1, [pc, #232]	; (80018fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001814:	fba5 0101 	umull	r0, r1, r5, r1
 8001818:	1853      	adds	r3, r2, r1
 800181a:	4619      	mov	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f04f 0400 	mov.w	r4, #0
 8001822:	461a      	mov	r2, r3
 8001824:	4623      	mov	r3, r4
 8001826:	f7fe fcdb 	bl	80001e0 <__aeabi_uldivmod>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e049      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	f04f 0400 	mov.w	r4, #0
 800183c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	ea03 0501 	and.w	r5, r3, r1
 8001848:	ea04 0602 	and.w	r6, r4, r2
 800184c:	4629      	mov	r1, r5
 800184e:	4632      	mov	r2, r6
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f04f 0400 	mov.w	r4, #0
 8001858:	0154      	lsls	r4, r2, #5
 800185a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800185e:	014b      	lsls	r3, r1, #5
 8001860:	4619      	mov	r1, r3
 8001862:	4622      	mov	r2, r4
 8001864:	1b49      	subs	r1, r1, r5
 8001866:	eb62 0206 	sbc.w	r2, r2, r6
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	0194      	lsls	r4, r2, #6
 8001874:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001878:	018b      	lsls	r3, r1, #6
 800187a:	1a5b      	subs	r3, r3, r1
 800187c:	eb64 0402 	sbc.w	r4, r4, r2
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	00e2      	lsls	r2, r4, #3
 800188a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800188e:	00d9      	lsls	r1, r3, #3
 8001890:	460b      	mov	r3, r1
 8001892:	4614      	mov	r4, r2
 8001894:	195b      	adds	r3, r3, r5
 8001896:	eb44 0406 	adc.w	r4, r4, r6
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	02a2      	lsls	r2, r4, #10
 80018a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018a8:	0299      	lsls	r1, r3, #10
 80018aa:	460b      	mov	r3, r1
 80018ac:	4614      	mov	r4, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	4621      	mov	r1, r4
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f04f 0400 	mov.w	r4, #0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	f7fe fc90 	bl	80001e0 <__aeabi_uldivmod>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	3301      	adds	r3, #1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	60bb      	str	r3, [r7, #8]
      break;
 80018e0:	e002      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018e4:	60bb      	str	r3, [r7, #8]
      break;
 80018e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e8:	68bb      	ldr	r3, [r7, #8]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	017d7840 	.word	0x017d7840

08001900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_GetHCLKFreq+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000

08001918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800191c:	f7ff fff0 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8001920:	4601      	mov	r1, r0
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	0a9b      	lsrs	r3, r3, #10
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_RCC_GetPCLK1Freq+0x24>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	08005eac 	.word	0x08005eac

08001940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001944:	f7ff ffdc 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8001948:	4601      	mov	r1, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0b5b      	lsrs	r3, r3, #13
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	08005eac 	.word	0x08005eac

08001968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	220f      	movs	r2, #15
 8001976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_RCC_GetClockConfig+0x60>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 020f 	and.w	r2, r3, #15
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e01d      	b.n	8001a1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f815 	bl	8001a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f000 f968 	bl	8001ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d007      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d122      	bne.n	8001ada <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d11b      	bne.n	8001ada <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0202 	mvn.w	r2, #2
 8001aaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8ee 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001ac6:	e005      	b.n	8001ad4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8e0 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8f1 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d122      	bne.n	8001b2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d11b      	bne.n	8001b2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0204 	mvn.w	r2, #4
 8001afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8c4 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001b1a:	e005      	b.n	8001b28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8b6 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f8c7 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d122      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d11b      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0208 	mvn.w	r2, #8
 8001b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f89a 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001b6e:	e005      	b.n	8001b7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f88c 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f89d 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d122      	bne.n	8001bd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d11b      	bne.n	8001bd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0210 	mvn.w	r2, #16
 8001ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2208      	movs	r2, #8
 8001bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f870 	bl	8001ca2 <HAL_TIM_IC_CaptureCallback>
 8001bc2:	e005      	b.n	8001bd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f862 	bl	8001c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f873 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10e      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f06f 0201 	mvn.w	r2, #1
 8001bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe fded 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b80      	cmp	r3, #128	; 0x80
 8001c0e:	d10e      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1a:	2b80      	cmp	r3, #128	; 0x80
 8001c1c:	d107      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8e3 	bl	8001df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d10e      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f838 	bl	8001cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d10e      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d107      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0220 	mvn.w	r2, #32
 8001c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8ad 	bl	8001de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <TIM_Base_SetConfig+0xe4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00f      	beq.n	8001d18 <TIM_Base_SetConfig+0x38>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfe:	d00b      	beq.n	8001d18 <TIM_Base_SetConfig+0x38>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <TIM_Base_SetConfig+0xe8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <TIM_Base_SetConfig+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <TIM_Base_SetConfig+0xec>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <TIM_Base_SetConfig+0x38>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <TIM_Base_SetConfig+0xf0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d108      	bne.n	8001d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <TIM_Base_SetConfig+0xe4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01b      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d017      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <TIM_Base_SetConfig+0xe8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <TIM_Base_SetConfig+0xec>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00f      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <TIM_Base_SetConfig+0xf0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00b      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <TIM_Base_SetConfig+0xf4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <TIM_Base_SetConfig+0xf8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d003      	beq.n	8001d6a <TIM_Base_SetConfig+0x8a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <TIM_Base_SetConfig+0xfc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d108      	bne.n	8001d7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <TIM_Base_SetConfig+0xe4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d103      	bne.n	8001db0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	615a      	str	r2, [r3, #20]
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40000c00 	.word	0x40000c00
 8001dd4:	40014000 	.word	0x40014000
 8001dd8:	40014400 	.word	0x40014400
 8001ddc:	40014800 	.word	0x40014800

08001de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e03f      	b.n	8001e9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fd1a 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	; 0x24
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f829 	bl	8001ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ee6:	f023 030c 	bic.w	r3, r3, #12
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	68f9      	ldr	r1, [r7, #12]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f12:	f040 818b 	bne.w	800222c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4ac1      	ldr	r2, [pc, #772]	; (8002220 <UART_SetConfig+0x37c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d005      	beq.n	8001f2c <UART_SetConfig+0x88>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4abf      	ldr	r2, [pc, #764]	; (8002224 <UART_SetConfig+0x380>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	f040 80bd 	bne.w	80020a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f2c:	f7ff fd08 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 8001f30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	461d      	mov	r5, r3
 8001f36:	f04f 0600 	mov.w	r6, #0
 8001f3a:	46a8      	mov	r8, r5
 8001f3c:	46b1      	mov	r9, r6
 8001f3e:	eb18 0308 	adds.w	r3, r8, r8
 8001f42:	eb49 0409 	adc.w	r4, r9, r9
 8001f46:	4698      	mov	r8, r3
 8001f48:	46a1      	mov	r9, r4
 8001f4a:	eb18 0805 	adds.w	r8, r8, r5
 8001f4e:	eb49 0906 	adc.w	r9, r9, r6
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f66:	4688      	mov	r8, r1
 8001f68:	4691      	mov	r9, r2
 8001f6a:	eb18 0005 	adds.w	r0, r8, r5
 8001f6e:	eb49 0106 	adc.w	r1, r9, r6
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	461d      	mov	r5, r3
 8001f78:	f04f 0600 	mov.w	r6, #0
 8001f7c:	196b      	adds	r3, r5, r5
 8001f7e:	eb46 0406 	adc.w	r4, r6, r6
 8001f82:	461a      	mov	r2, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	f7fe f92b 	bl	80001e0 <__aeabi_uldivmod>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4ba5      	ldr	r3, [pc, #660]	; (8002228 <UART_SetConfig+0x384>)
 8001f92:	fba3 2302 	umull	r2, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	f04f 0600 	mov.w	r6, #0
 8001fa4:	46a9      	mov	r9, r5
 8001fa6:	46b2      	mov	sl, r6
 8001fa8:	eb19 0309 	adds.w	r3, r9, r9
 8001fac:	eb4a 040a 	adc.w	r4, sl, sl
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	46a2      	mov	sl, r4
 8001fb4:	eb19 0905 	adds.w	r9, r9, r5
 8001fb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fd0:	4689      	mov	r9, r1
 8001fd2:	4692      	mov	sl, r2
 8001fd4:	eb19 0005 	adds.w	r0, r9, r5
 8001fd8:	eb4a 0106 	adc.w	r1, sl, r6
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	461d      	mov	r5, r3
 8001fe2:	f04f 0600 	mov.w	r6, #0
 8001fe6:	196b      	adds	r3, r5, r5
 8001fe8:	eb46 0406 	adc.w	r4, r6, r6
 8001fec:	461a      	mov	r2, r3
 8001fee:	4623      	mov	r3, r4
 8001ff0:	f7fe f8f6 	bl	80001e0 <__aeabi_uldivmod>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <UART_SetConfig+0x384>)
 8001ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	2164      	movs	r1, #100	; 0x64
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	3332      	adds	r3, #50	; 0x32
 800200e:	4a86      	ldr	r2, [pc, #536]	; (8002228 <UART_SetConfig+0x384>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800201c:	4498      	add	r8, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	461d      	mov	r5, r3
 8002022:	f04f 0600 	mov.w	r6, #0
 8002026:	46a9      	mov	r9, r5
 8002028:	46b2      	mov	sl, r6
 800202a:	eb19 0309 	adds.w	r3, r9, r9
 800202e:	eb4a 040a 	adc.w	r4, sl, sl
 8002032:	4699      	mov	r9, r3
 8002034:	46a2      	mov	sl, r4
 8002036:	eb19 0905 	adds.w	r9, r9, r5
 800203a:	eb4a 0a06 	adc.w	sl, sl, r6
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800204a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800204e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002052:	4689      	mov	r9, r1
 8002054:	4692      	mov	sl, r2
 8002056:	eb19 0005 	adds.w	r0, r9, r5
 800205a:	eb4a 0106 	adc.w	r1, sl, r6
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	461d      	mov	r5, r3
 8002064:	f04f 0600 	mov.w	r6, #0
 8002068:	196b      	adds	r3, r5, r5
 800206a:	eb46 0406 	adc.w	r4, r6, r6
 800206e:	461a      	mov	r2, r3
 8002070:	4623      	mov	r3, r4
 8002072:	f7fe f8b5 	bl	80001e0 <__aeabi_uldivmod>
 8002076:	4603      	mov	r3, r0
 8002078:	460c      	mov	r4, r1
 800207a:	461a      	mov	r2, r3
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <UART_SetConfig+0x384>)
 800207e:	fba3 1302 	umull	r1, r3, r3, r2
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2164      	movs	r1, #100	; 0x64
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	3332      	adds	r3, #50	; 0x32
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <UART_SetConfig+0x384>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	f003 0207 	and.w	r2, r3, #7
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4442      	add	r2, r8
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e26f      	b.n	8002586 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020a6:	f7ff fc37 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 80020aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	461d      	mov	r5, r3
 80020b0:	f04f 0600 	mov.w	r6, #0
 80020b4:	46a8      	mov	r8, r5
 80020b6:	46b1      	mov	r9, r6
 80020b8:	eb18 0308 	adds.w	r3, r8, r8
 80020bc:	eb49 0409 	adc.w	r4, r9, r9
 80020c0:	4698      	mov	r8, r3
 80020c2:	46a1      	mov	r9, r4
 80020c4:	eb18 0805 	adds.w	r8, r8, r5
 80020c8:	eb49 0906 	adc.w	r9, r9, r6
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020e0:	4688      	mov	r8, r1
 80020e2:	4691      	mov	r9, r2
 80020e4:	eb18 0005 	adds.w	r0, r8, r5
 80020e8:	eb49 0106 	adc.w	r1, r9, r6
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	461d      	mov	r5, r3
 80020f2:	f04f 0600 	mov.w	r6, #0
 80020f6:	196b      	adds	r3, r5, r5
 80020f8:	eb46 0406 	adc.w	r4, r6, r6
 80020fc:	461a      	mov	r2, r3
 80020fe:	4623      	mov	r3, r4
 8002100:	f7fe f86e 	bl	80001e0 <__aeabi_uldivmod>
 8002104:	4603      	mov	r3, r0
 8002106:	460c      	mov	r4, r1
 8002108:	461a      	mov	r2, r3
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <UART_SetConfig+0x384>)
 800210c:	fba3 2302 	umull	r2, r3, r3, r2
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	461d      	mov	r5, r3
 800211a:	f04f 0600 	mov.w	r6, #0
 800211e:	46a9      	mov	r9, r5
 8002120:	46b2      	mov	sl, r6
 8002122:	eb19 0309 	adds.w	r3, r9, r9
 8002126:	eb4a 040a 	adc.w	r4, sl, sl
 800212a:	4699      	mov	r9, r3
 800212c:	46a2      	mov	sl, r4
 800212e:	eb19 0905 	adds.w	r9, r9, r5
 8002132:	eb4a 0a06 	adc.w	sl, sl, r6
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002142:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002146:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800214a:	4689      	mov	r9, r1
 800214c:	4692      	mov	sl, r2
 800214e:	eb19 0005 	adds.w	r0, r9, r5
 8002152:	eb4a 0106 	adc.w	r1, sl, r6
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	461d      	mov	r5, r3
 800215c:	f04f 0600 	mov.w	r6, #0
 8002160:	196b      	adds	r3, r5, r5
 8002162:	eb46 0406 	adc.w	r4, r6, r6
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	f7fe f839 	bl	80001e0 <__aeabi_uldivmod>
 800216e:	4603      	mov	r3, r0
 8002170:	460c      	mov	r4, r1
 8002172:	461a      	mov	r2, r3
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <UART_SetConfig+0x384>)
 8002176:	fba3 1302 	umull	r1, r3, r3, r2
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2164      	movs	r1, #100	; 0x64
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	3332      	adds	r3, #50	; 0x32
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <UART_SetConfig+0x384>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002196:	4498      	add	r8, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	461d      	mov	r5, r3
 800219c:	f04f 0600 	mov.w	r6, #0
 80021a0:	46a9      	mov	r9, r5
 80021a2:	46b2      	mov	sl, r6
 80021a4:	eb19 0309 	adds.w	r3, r9, r9
 80021a8:	eb4a 040a 	adc.w	r4, sl, sl
 80021ac:	4699      	mov	r9, r3
 80021ae:	46a2      	mov	sl, r4
 80021b0:	eb19 0905 	adds.w	r9, r9, r5
 80021b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021cc:	4689      	mov	r9, r1
 80021ce:	4692      	mov	sl, r2
 80021d0:	eb19 0005 	adds.w	r0, r9, r5
 80021d4:	eb4a 0106 	adc.w	r1, sl, r6
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	461d      	mov	r5, r3
 80021de:	f04f 0600 	mov.w	r6, #0
 80021e2:	196b      	adds	r3, r5, r5
 80021e4:	eb46 0406 	adc.w	r4, r6, r6
 80021e8:	461a      	mov	r2, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	f7fd fff8 	bl	80001e0 <__aeabi_uldivmod>
 80021f0:	4603      	mov	r3, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <UART_SetConfig+0x384>)
 80021f8:	fba3 1302 	umull	r1, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	2164      	movs	r1, #100	; 0x64
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	3332      	adds	r3, #50	; 0x32
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <UART_SetConfig+0x384>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4442      	add	r2, r8
 800221c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800221e:	e1b2      	b.n	8002586 <UART_SetConfig+0x6e2>
 8002220:	40011000 	.word	0x40011000
 8002224:	40011400 	.word	0x40011400
 8002228:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4ad7      	ldr	r2, [pc, #860]	; (8002590 <UART_SetConfig+0x6ec>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d005      	beq.n	8002242 <UART_SetConfig+0x39e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4ad6      	ldr	r2, [pc, #856]	; (8002594 <UART_SetConfig+0x6f0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	f040 80d1 	bne.w	80023e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002242:	f7ff fb7d 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 8002246:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	469a      	mov	sl, r3
 800224c:	f04f 0b00 	mov.w	fp, #0
 8002250:	46d0      	mov	r8, sl
 8002252:	46d9      	mov	r9, fp
 8002254:	eb18 0308 	adds.w	r3, r8, r8
 8002258:	eb49 0409 	adc.w	r4, r9, r9
 800225c:	4698      	mov	r8, r3
 800225e:	46a1      	mov	r9, r4
 8002260:	eb18 080a 	adds.w	r8, r8, sl
 8002264:	eb49 090b 	adc.w	r9, r9, fp
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002274:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002278:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800227c:	4688      	mov	r8, r1
 800227e:	4691      	mov	r9, r2
 8002280:	eb1a 0508 	adds.w	r5, sl, r8
 8002284:	eb4b 0609 	adc.w	r6, fp, r9
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4619      	mov	r1, r3
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f04f 0400 	mov.w	r4, #0
 800229a:	0094      	lsls	r4, r2, #2
 800229c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022a0:	008b      	lsls	r3, r1, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	4623      	mov	r3, r4
 80022a6:	4628      	mov	r0, r5
 80022a8:	4631      	mov	r1, r6
 80022aa:	f7fd ff99 	bl	80001e0 <__aeabi_uldivmod>
 80022ae:	4603      	mov	r3, r0
 80022b0:	460c      	mov	r4, r1
 80022b2:	461a      	mov	r2, r3
 80022b4:	4bb8      	ldr	r3, [pc, #736]	; (8002598 <UART_SetConfig+0x6f4>)
 80022b6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	469b      	mov	fp, r3
 80022c4:	f04f 0c00 	mov.w	ip, #0
 80022c8:	46d9      	mov	r9, fp
 80022ca:	46e2      	mov	sl, ip
 80022cc:	eb19 0309 	adds.w	r3, r9, r9
 80022d0:	eb4a 040a 	adc.w	r4, sl, sl
 80022d4:	4699      	mov	r9, r3
 80022d6:	46a2      	mov	sl, r4
 80022d8:	eb19 090b 	adds.w	r9, r9, fp
 80022dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022f4:	4689      	mov	r9, r1
 80022f6:	4692      	mov	sl, r2
 80022f8:	eb1b 0509 	adds.w	r5, fp, r9
 80022fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	0094      	lsls	r4, r2, #2
 8002314:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002318:	008b      	lsls	r3, r1, #2
 800231a:	461a      	mov	r2, r3
 800231c:	4623      	mov	r3, r4
 800231e:	4628      	mov	r0, r5
 8002320:	4631      	mov	r1, r6
 8002322:	f7fd ff5d 	bl	80001e0 <__aeabi_uldivmod>
 8002326:	4603      	mov	r3, r0
 8002328:	460c      	mov	r4, r1
 800232a:	461a      	mov	r2, r3
 800232c:	4b9a      	ldr	r3, [pc, #616]	; (8002598 <UART_SetConfig+0x6f4>)
 800232e:	fba3 1302 	umull	r1, r3, r3, r2
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2164      	movs	r1, #100	; 0x64
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	3332      	adds	r3, #50	; 0x32
 8002340:	4a95      	ldr	r2, [pc, #596]	; (8002598 <UART_SetConfig+0x6f4>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234c:	4498      	add	r8, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	469b      	mov	fp, r3
 8002352:	f04f 0c00 	mov.w	ip, #0
 8002356:	46d9      	mov	r9, fp
 8002358:	46e2      	mov	sl, ip
 800235a:	eb19 0309 	adds.w	r3, r9, r9
 800235e:	eb4a 040a 	adc.w	r4, sl, sl
 8002362:	4699      	mov	r9, r3
 8002364:	46a2      	mov	sl, r4
 8002366:	eb19 090b 	adds.w	r9, r9, fp
 800236a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800236e:	f04f 0100 	mov.w	r1, #0
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800237a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800237e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002382:	4689      	mov	r9, r1
 8002384:	4692      	mov	sl, r2
 8002386:	eb1b 0509 	adds.w	r5, fp, r9
 800238a:	eb4c 060a 	adc.w	r6, ip, sl
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	f04f 0400 	mov.w	r4, #0
 80023a0:	0094      	lsls	r4, r2, #2
 80023a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023a6:	008b      	lsls	r3, r1, #2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	4628      	mov	r0, r5
 80023ae:	4631      	mov	r1, r6
 80023b0:	f7fd ff16 	bl	80001e0 <__aeabi_uldivmod>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b77      	ldr	r3, [pc, #476]	; (8002598 <UART_SetConfig+0x6f4>)
 80023bc:	fba3 1302 	umull	r1, r3, r3, r2
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2164      	movs	r1, #100	; 0x64
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	4a72      	ldr	r2, [pc, #456]	; (8002598 <UART_SetConfig+0x6f4>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 020f 	and.w	r2, r3, #15
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4442      	add	r2, r8
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	e0d0      	b.n	8002586 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80023e4:	f7ff fa98 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 80023e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	469a      	mov	sl, r3
 80023ee:	f04f 0b00 	mov.w	fp, #0
 80023f2:	46d0      	mov	r8, sl
 80023f4:	46d9      	mov	r9, fp
 80023f6:	eb18 0308 	adds.w	r3, r8, r8
 80023fa:	eb49 0409 	adc.w	r4, r9, r9
 80023fe:	4698      	mov	r8, r3
 8002400:	46a1      	mov	r9, r4
 8002402:	eb18 080a 	adds.w	r8, r8, sl
 8002406:	eb49 090b 	adc.w	r9, r9, fp
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002416:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800241a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800241e:	4688      	mov	r8, r1
 8002420:	4691      	mov	r9, r2
 8002422:	eb1a 0508 	adds.w	r5, sl, r8
 8002426:	eb4b 0609 	adc.w	r6, fp, r9
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f04f 0400 	mov.w	r4, #0
 800243c:	0094      	lsls	r4, r2, #2
 800243e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002442:	008b      	lsls	r3, r1, #2
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	4628      	mov	r0, r5
 800244a:	4631      	mov	r1, r6
 800244c:	f7fd fec8 	bl	80001e0 <__aeabi_uldivmod>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	461a      	mov	r2, r3
 8002456:	4b50      	ldr	r3, [pc, #320]	; (8002598 <UART_SetConfig+0x6f4>)
 8002458:	fba3 2302 	umull	r2, r3, r3, r2
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	469b      	mov	fp, r3
 8002466:	f04f 0c00 	mov.w	ip, #0
 800246a:	46d9      	mov	r9, fp
 800246c:	46e2      	mov	sl, ip
 800246e:	eb19 0309 	adds.w	r3, r9, r9
 8002472:	eb4a 040a 	adc.w	r4, sl, sl
 8002476:	4699      	mov	r9, r3
 8002478:	46a2      	mov	sl, r4
 800247a:	eb19 090b 	adds.w	r9, r9, fp
 800247e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800248e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002492:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002496:	4689      	mov	r9, r1
 8002498:	4692      	mov	sl, r2
 800249a:	eb1b 0509 	adds.w	r5, fp, r9
 800249e:	eb4c 060a 	adc.w	r6, ip, sl
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	f04f 0400 	mov.w	r4, #0
 80024b4:	0094      	lsls	r4, r2, #2
 80024b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024ba:	008b      	lsls	r3, r1, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	4628      	mov	r0, r5
 80024c2:	4631      	mov	r1, r6
 80024c4:	f7fd fe8c 	bl	80001e0 <__aeabi_uldivmod>
 80024c8:	4603      	mov	r3, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b32      	ldr	r3, [pc, #200]	; (8002598 <UART_SetConfig+0x6f4>)
 80024d0:	fba3 1302 	umull	r1, r3, r3, r2
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	2164      	movs	r1, #100	; 0x64
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	3332      	adds	r3, #50	; 0x32
 80024e2:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <UART_SetConfig+0x6f4>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ee:	4498      	add	r8, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	469b      	mov	fp, r3
 80024f4:	f04f 0c00 	mov.w	ip, #0
 80024f8:	46d9      	mov	r9, fp
 80024fa:	46e2      	mov	sl, ip
 80024fc:	eb19 0309 	adds.w	r3, r9, r9
 8002500:	eb4a 040a 	adc.w	r4, sl, sl
 8002504:	4699      	mov	r9, r3
 8002506:	46a2      	mov	sl, r4
 8002508:	eb19 090b 	adds.w	r9, r9, fp
 800250c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002524:	4689      	mov	r9, r1
 8002526:	4692      	mov	sl, r2
 8002528:	eb1b 0509 	adds.w	r5, fp, r9
 800252c:	eb4c 060a 	adc.w	r6, ip, sl
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4619      	mov	r1, r3
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f04f 0400 	mov.w	r4, #0
 8002542:	0094      	lsls	r4, r2, #2
 8002544:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002548:	008b      	lsls	r3, r1, #2
 800254a:	461a      	mov	r2, r3
 800254c:	4623      	mov	r3, r4
 800254e:	4628      	mov	r0, r5
 8002550:	4631      	mov	r1, r6
 8002552:	f7fd fe45 	bl	80001e0 <__aeabi_uldivmod>
 8002556:	4603      	mov	r3, r0
 8002558:	460c      	mov	r4, r1
 800255a:	461a      	mov	r2, r3
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <UART_SetConfig+0x6f4>)
 800255e:	fba3 1302 	umull	r1, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2164      	movs	r1, #100	; 0x64
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	3332      	adds	r3, #50	; 0x32
 8002570:	4a09      	ldr	r2, [pc, #36]	; (8002598 <UART_SetConfig+0x6f4>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	f003 020f 	and.w	r2, r3, #15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4442      	add	r2, r8
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	e7ff      	b.n	8002586 <UART_SetConfig+0x6e2>
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002590:	40011000 	.word	0x40011000
 8002594:	40011400 	.word	0x40011400
 8002598:	51eb851f 	.word	0x51eb851f

0800259c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80025ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <vApplicationGetIdleTaskMemory+0x30>)
 80025b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	601a      	str	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000094 	.word	0x20000094
 80025cc:	20000150 	.word	0x20000150

080025d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <vApplicationGetTimerTaskMemory+0x2c>)
 80025e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <vApplicationGetTimerTaskMemory+0x30>)
 80025e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	20000350 	.word	0x20000350
 8002600:	2000040c 	.word	0x2000040c

08002604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f103 0208 	add.w	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f103 0208 	add.w	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0208 	add.w	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d103      	bne.n	80026c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e00c      	b.n	80026e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3308      	adds	r3, #8
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e002      	b.n	80026d4 <vListInsert+0x2e>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d2f6      	bcs.n	80026ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6852      	ldr	r2, [r2, #4]
 8002738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d103      	bne.n	800274c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	e7fe      	b.n	8002792 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002794:	f002 fb32 	bl	8004dfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	441a      	add	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	3b01      	subs	r3, #1
 80027c6:	68f9      	ldr	r1, [r7, #12]
 80027c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	441a      	add	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	22ff      	movs	r2, #255	; 0xff
 80027e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d114      	bne.n	8002814 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01a      	beq.n	8002828 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3310      	adds	r3, #16
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fb00 	bl	8003dfc <xTaskRemoveFromEventList>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d012      	beq.n	8002828 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <xQueueGenericReset+0xcc>)
 8002804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	e009      	b.n	8002828 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3310      	adds	r3, #16
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fef3 	bl	8002604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3324      	adds	r3, #36	; 0x24
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff feee 	bl	8002604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002828:	f002 fb16 	bl	8004e58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800282c:	2301      	movs	r3, #1
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000ed04 	.word	0xe000ed04

0800283c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08e      	sub	sp, #56	; 0x38
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <xQueueGenericCreateStatic+0x28>
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
 8002862:	e7fe      	b.n	8002862 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <xQueueGenericCreateStatic+0x42>
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <xQueueGenericCreateStatic+0x4e>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <xQueueGenericCreateStatic+0x52>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericCreateStatic+0x54>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <xQueueGenericCreateStatic+0x6c>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	e7fe      	b.n	80028a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <xQueueGenericCreateStatic+0x78>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <xQueueGenericCreateStatic+0x7c>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <xQueueGenericCreateStatic+0x7e>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <xQueueGenericCreateStatic+0x96>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028d2:	2354      	movs	r3, #84	; 0x54
 80028d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b54      	cmp	r3, #84	; 0x54
 80028da:	d009      	beq.n	80028f0 <xQueueGenericCreateStatic+0xb4>
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e7fe      	b.n	80028ee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002904:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f844 	bl	80029a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800291a:	4618      	mov	r0, r3
 800291c:	3730      	adds	r7, #48	; 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002922:	b580      	push	{r7, lr}
 8002924:	b08a      	sub	sp, #40	; 0x28
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	4613      	mov	r3, r2
 800292e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <xQueueGenericCreate+0x28>
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e7fe      	b.n	8002948 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e004      	b.n	8002960 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	3354      	adds	r3, #84	; 0x54
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fb63 	bl	8005030 <pvPortMalloc>
 800296a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d011      	beq.n	8002996 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3354      	adds	r3, #84	; 0x54
 800297a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002984:	79fa      	ldrb	r2, [r7, #7]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f805 	bl	80029a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002996:	69bb      	ldr	r3, [r7, #24]
	}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e002      	b.n	80029c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029ce:	2101      	movs	r1, #1
 80029d0:	69b8      	ldr	r0, [r7, #24]
 80029d2:	f7ff fecb 	bl	800276c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2200      	movs	r2, #0
 80029e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029fa:	2300      	movs	r3, #0
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <xQueueGenericSend+0x30>
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	e7fe      	b.n	8002a1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <xQueueGenericSend+0x3e>
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <xQueueGenericSend+0x42>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <xQueueGenericSend+0x44>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <xQueueGenericSend+0x5c>
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	e7fe      	b.n	8002a46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d103      	bne.n	8002a56 <xQueueGenericSend+0x6a>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <xQueueGenericSend+0x6e>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericSend+0x70>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <xQueueGenericSend+0x88>
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e7fe      	b.n	8002a72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a74:	f001 fb7e 	bl	8004174 <xTaskGetSchedulerState>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <xQueueGenericSend+0x98>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <xQueueGenericSend+0x9c>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <xQueueGenericSend+0x9e>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <xQueueGenericSend+0xb6>
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aa2:	f002 f9ab 	bl	8004dfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <xQueueGenericSend+0xcc>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d146      	bne.n	8002b46 <xQueueGenericSend+0x15a>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac4:	f000 fb4c 	bl	8003160 <prvCopyDataToQueue>
 8002ac8:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d015      	beq.n	8002afe <xQueueGenericSend+0x112>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d102      	bne.n	8002ade <xQueueGenericSend+0xf2>
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d12f      	bne.n	8002b3e <xQueueGenericSend+0x152>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae2:	f000 fcb7 	bl	8003454 <prvNotifyQueueSetContainer>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d028      	beq.n	8002b3e <xQueueGenericSend+0x152>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <xQueueGenericSend+0x22c>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	e01f      	b.n	8002b3e <xQueueGenericSend+0x152>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <xQueueGenericSend+0x13c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	3324      	adds	r3, #36	; 0x24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f976 	bl	8003dfc <xTaskRemoveFromEventList>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d013      	beq.n	8002b3e <xQueueGenericSend+0x152>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002b16:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <xQueueGenericSend+0x22c>)
 8002b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	e00a      	b.n	8002b3e <xQueueGenericSend+0x152>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <xQueueGenericSend+0x152>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <xQueueGenericSend+0x22c>)
 8002b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b3e:	f002 f98b 	bl	8004e58 <vPortExitCritical>
				return pdPASS;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e063      	b.n	8002c0e <xQueueGenericSend+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <xQueueGenericSend+0x168>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b4c:	f002 f984 	bl	8004e58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e05c      	b.n	8002c0e <xQueueGenericSend+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <xQueueGenericSend+0x17c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 f9ae 	bl	8003ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b68:	f002 f976 	bl	8004e58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b6c:	f000 ff22 	bl	80039b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b70:	f002 f944 	bl	8004dfc <vPortEnterCritical>
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d103      	bne.n	8002b8a <xQueueGenericSend+0x19e>
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d103      	bne.n	8002ba0 <xQueueGenericSend+0x1b4>
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba0:	f002 f95a 	bl	8004e58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ba4:	1d3a      	adds	r2, r7, #4
 8002ba6:	f107 0310 	add.w	r3, r7, #16
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 f99d 	bl	8003eec <xTaskCheckForTimeOut>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d124      	bne.n	8002c02 <xQueueGenericSend+0x216>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bba:	f000 fbd7 	bl	800336c <prvIsQueueFull>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d018      	beq.n	8002bf6 <xQueueGenericSend+0x20a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f8c7 	bl	8003d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd4:	f000 fb54 	bl	8003280 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bd8:	f000 fefa 	bl	80039d0 <xTaskResumeAll>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f47f af5f 	bne.w	8002aa2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <xQueueGenericSend+0x22c>)
 8002be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	e755      	b.n	8002aa2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf8:	f000 fb42 	bl	8003280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bfc:	f000 fee8 	bl	80039d0 <xTaskResumeAll>
 8002c00:	e74f      	b.n	8002aa2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c04:	f000 fb3c 	bl	8003280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c08:	f000 fee2 	bl	80039d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c0c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3738      	adds	r7, #56	; 0x38
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <xQueueGenericSendFromISR+0x2c>
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e7fe      	b.n	8002c46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <xQueueGenericSendFromISR+0x3a>
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <xQueueGenericSendFromISR+0x3e>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueGenericSendFromISR+0x40>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <xQueueGenericSendFromISR+0x58>
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	e7fe      	b.n	8002c72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSendFromISR+0x66>
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <xQueueGenericSendFromISR+0x6a>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericSendFromISR+0x6c>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <xQueueGenericSendFromISR+0x84>
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e7fe      	b.n	8002c9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ca0:	f002 f988 	bl	8004fb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ca4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	61ba      	str	r2, [r7, #24]
 8002cba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d302      	bcc.n	8002cd2 <xQueueGenericSendFromISR+0xb6>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d13e      	bne.n	8002d50 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 fa3d 	bl	8003160 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ce6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d124      	bne.n	8002d3a <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfc:	f000 fbaa 	bl	8003454 <prvNotifyQueueSetContainer>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01e      	beq.n	8002d4a <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e01a      	b.n	8002d4a <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d016      	beq.n	8002d4a <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	3324      	adds	r3, #36	; 0x24
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 f86b 	bl	8003dfc <xTaskRemoveFromEventList>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e007      	b.n	8002d4a <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	b25a      	sxtb	r2, r3
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d4e:	e001      	b.n	8002d54 <xQueueGenericSendFromISR+0x138>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3738      	adds	r7, #56	; 0x38
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <xQueueReceive+0x2e>
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	e7fe      	b.n	8002d94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <xQueueReceive+0x3c>
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <xQueueReceive+0x40>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <xQueueReceive+0x42>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <xQueueReceive+0x5a>
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc2:	f001 f9d7 	bl	8004174 <xTaskGetSchedulerState>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <xQueueReceive+0x6a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <xQueueReceive+0x6e>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueReceive+0x70>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <xQueueReceive+0x88>
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e7fe      	b.n	8002dee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df0:	f002 f804 	bl	8004dfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01f      	beq.n	8002e40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e04:	f000 fa16 	bl	8003234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 ffed 	bl	8003dfc <xTaskRemoveFromEventList>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e28:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <xQueueReceive+0x1b4>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e38:	f002 f80e 	bl	8004e58 <vPortExitCritical>
				return pdPASS;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e069      	b.n	8002f14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e46:	f002 f807 	bl	8004e58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e062      	b.n	8002f14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f831 	bl	8003ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e62:	f001 fff9 	bl	8004e58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e66:	f000 fda5 	bl	80039b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6a:	f001 ffc7 	bl	8004dfc <vPortEnterCritical>
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d103      	bne.n	8002e84 <xQueueReceive+0x11c>
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d103      	bne.n	8002e9a <xQueueReceive+0x132>
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9a:	f001 ffdd 	bl	8004e58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9e:	1d3a      	adds	r2, r7, #4
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f820 	bl	8003eec <xTaskCheckForTimeOut>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d123      	bne.n	8002efa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb4:	f000 fa44 	bl	8003340 <prvIsQueueEmpty>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d017      	beq.n	8002eee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	3324      	adds	r3, #36	; 0x24
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 ff4a 	bl	8003d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ece:	f000 f9d7 	bl	8003280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ed2:	f000 fd7d 	bl	80039d0 <xTaskResumeAll>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d189      	bne.n	8002df0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <xQueueReceive+0x1b4>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	e780      	b.n	8002df0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef0:	f000 f9c6 	bl	8003280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef4:	f000 fd6c 	bl	80039d0 <xTaskResumeAll>
 8002ef8:	e77a      	b.n	8002df0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efc:	f000 f9c0 	bl	8003280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f00:	f000 fd66 	bl	80039d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f06:	f000 fa1b 	bl	8003340 <prvIsQueueEmpty>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f43f af6f 	beq.w	8002df0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3730      	adds	r7, #48	; 0x30
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <xQueueSemaphoreTake+0x30>
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	e7fe      	b.n	8002f4e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <xQueueSemaphoreTake+0x4c>
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e7fe      	b.n	8002f6a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f6c:	f001 f902 	bl	8004174 <xTaskGetSchedulerState>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <xQueueSemaphoreTake+0x5c>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <xQueueSemaphoreTake+0x60>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <xQueueSemaphoreTake+0x62>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <xQueueSemaphoreTake+0x7a>
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	e7fe      	b.n	8002f98 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f9a:	f001 ff2f 	bl	8004dfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d024      	beq.n	8002ff4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	1e5a      	subs	r2, r3, #1
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fba:	f001 fa4d 	bl	8004458 <pvTaskIncrementMutexHeldCount>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00f      	beq.n	8002fec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	3310      	adds	r3, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 ff13 	bl	8003dfc <xTaskRemoveFromEventList>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <xQueueSemaphoreTake+0x20c>)
 8002fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fec:	f001 ff34 	bl	8004e58 <vPortExitCritical>
				return pdPASS;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e096      	b.n	8003122 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d110      	bne.n	800301c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <xQueueSemaphoreTake+0xf4>
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e7fe      	b.n	8003012 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003014:	f001 ff20 	bl	8004e58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003018:	2300      	movs	r3, #0
 800301a:	e082      	b.n	8003122 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	4618      	mov	r0, r3
 8003028:	f000 ff4a 	bl	8003ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800302c:	2301      	movs	r3, #1
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003030:	f001 ff12 	bl	8004e58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003034:	f000 fcbe 	bl	80039b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003038:	f001 fee0 	bl	8004dfc <vPortEnterCritical>
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003042:	b25b      	sxtb	r3, r3
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d103      	bne.n	8003052 <xQueueSemaphoreTake+0x132>
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003058:	b25b      	sxtb	r3, r3
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d103      	bne.n	8003068 <xQueueSemaphoreTake+0x148>
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003068:	f001 fef6 	bl	8004e58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800306c:	463a      	mov	r2, r7
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 ff39 	bl	8003eec <xTaskCheckForTimeOut>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d132      	bne.n	80030e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003082:	f000 f95d 	bl	8003340 <prvIsQueueEmpty>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d026      	beq.n	80030da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003094:	f001 feb2 	bl	8004dfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4618      	mov	r0, r3
 800309e:	f001 f887 	bl	80041b0 <xTaskPriorityInherit>
 80030a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80030a4:	f001 fed8 	bl	8004e58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fe55 	bl	8003d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030b8:	f000 f8e2 	bl	8003280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030bc:	f000 fc88 	bl	80039d0 <xTaskResumeAll>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f af69 	bne.w	8002f9a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <xQueueSemaphoreTake+0x20c>)
 80030ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	e75f      	b.n	8002f9a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80030da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030dc:	f000 f8d0 	bl	8003280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e0:	f000 fc76 	bl	80039d0 <xTaskResumeAll>
 80030e4:	e759      	b.n	8002f9a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80030e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030e8:	f000 f8ca 	bl	8003280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ec:	f000 fc70 	bl	80039d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030f2:	f000 f925 	bl	8003340 <prvIsQueueEmpty>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f43f af4e 	beq.w	8002f9a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00d      	beq.n	8003120 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003104:	f001 fe7a 	bl	8004dfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800310a:	f000 f811 	bl	8003130 <prvGetDisinheritPriorityAfterTimeout>
 800310e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f91e 	bl	8004358 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800311c:	f001 fe9c 	bl	8004e58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003122:	4618      	mov	r0, r3
 8003124:	3738      	adds	r7, #56	; 0x38
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e001      	b.n	8003152 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003152:	68fb      	ldr	r3, [r7, #12]
	}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d14d      	bne.n	8003222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f001 f878 	bl	8004280 <xTaskPriorityDisinherit>
 8003190:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	e043      	b.n	8003222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d119      	bne.n	80031d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6858      	ldr	r0, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	461a      	mov	r2, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	f002 fa0a 	bl	80055c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	441a      	add	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d32b      	bcc.n	8003222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e026      	b.n	8003222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68d8      	ldr	r0, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	461a      	mov	r2, r3
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	f002 f9f0 	bl	80055c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	425b      	negs	r3, r3
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d207      	bcs.n	8003210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	425b      	negs	r3, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d105      	bne.n	8003222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	3b01      	subs	r3, #1
 8003220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800322a:	697b      	ldr	r3, [r7, #20]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	441a      	add	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d303      	bcc.n	8003268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68d9      	ldr	r1, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	461a      	mov	r2, r3
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f002 f9a6 	bl	80055c4 <memcpy>
	}
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003288:	f001 fdb8 	bl	8004dfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003294:	e01f      	b.n	80032d6 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800329e:	2100      	movs	r1, #0
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8d7 	bl	8003454 <prvNotifyQueueSetContainer>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80032ac:	f000 fe7e 	bl	8003fac <vTaskMissedYield>
 80032b0:	e00d      	b.n	80032ce <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	; 0x24
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fd9c 	bl	8003dfc <xTaskRemoveFromEventList>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80032ca:	f000 fe6f 	bl	8003fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dcdb      	bgt.n	8003296 <prvUnlockQueue+0x16>
 80032de:	e000      	b.n	80032e2 <prvUnlockQueue+0x62>
						break;
 80032e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032ea:	f001 fdb5 	bl	8004e58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032ee:	f001 fd85 	bl	8004dfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032fa:	e011      	b.n	8003320 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3310      	adds	r3, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fd77 	bl	8003dfc <xTaskRemoveFromEventList>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8003314:	f000 fe4a 	bl	8003fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	3b01      	subs	r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003324:	2b00      	cmp	r3, #0
 8003326:	dce9      	bgt.n	80032fc <prvUnlockQueue+0x7c>
 8003328:	e000      	b.n	800332c <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 800332a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003334:	f001 fd90 	bl	8004e58 <vPortExitCritical>
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003348:	f001 fd58 	bl	8004dfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e001      	b.n	800335e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800335e:	f001 fd7b 	bl	8004e58 <vPortExitCritical>

	return xReturn;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003374:	f001 fd42 	bl	8004dfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	429a      	cmp	r2, r3
 8003382:	d102      	bne.n	800338a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e001      	b.n	800338e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800338e:	f001 fd63 	bl	8004e58 <vPortExitCritical>

	return xReturn;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e014      	b.n	80033d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <vQueueAddToRegistry+0x4c>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033b8:	490b      	ldr	r1, [pc, #44]	; (80033e8 <vQueueAddToRegistry+0x4c>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <vQueueAddToRegistry+0x4c>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033ce:	e005      	b.n	80033dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3301      	adds	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b07      	cmp	r3, #7
 80033da:	d9e7      	bls.n	80033ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	20004af8 	.word	0x20004af8

080033ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033fc:	f001 fcfe 	bl	8004dfc <vPortEnterCritical>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003406:	b25b      	sxtb	r3, r3
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d103      	bne.n	8003416 <vQueueWaitForMessageRestricted+0x2a>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341c:	b25b      	sxtb	r3, r3
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d103      	bne.n	800342c <vQueueWaitForMessageRestricted+0x40>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800342c:	f001 fd14 	bl	8004e58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	2b00      	cmp	r3, #0
 8003436:	d106      	bne.n	8003446 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fcb1 	bl	8003da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003446:	6978      	ldr	r0, [r7, #20]
 8003448:	f7ff ff1a 	bl	8003280 <prvUnlockQueue>
	}
 800344c:	bf00      	nop
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003462:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <prvNotifyQueueSetContainer+0x2e>
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e7fe      	b.n	8003480 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	429a      	cmp	r2, r3
 800348c:	d309      	bcc.n	80034a2 <prvNotifyQueueSetContainer+0x4e>
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e7fe      	b.n	80034a0 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d225      	bcs.n	80034fa <prvNotifyQueueSetContainer+0xa6>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b4:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	69b8      	ldr	r0, [r7, #24]
 80034be:	f7ff fe4f 	bl	8003160 <prvCopyDataToQueue>
 80034c2:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80034c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d10e      	bne.n	80034ec <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d011      	beq.n	80034fa <prvNotifyQueueSetContainer+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	3324      	adds	r3, #36	; 0x24
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fc8e 	bl	8003dfc <xTaskRemoveFromEventList>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <prvNotifyQueueSetContainer+0xa6>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e006      	b.n	80034fa <prvNotifyQueueSetContainer+0xa6>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	3301      	adds	r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	b25a      	sxtb	r2, r3
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034fa:	69fb      	ldr	r3, [r7, #28]
	}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <xTaskCreateStatic+0x28>
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	e7fe      	b.n	800352a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <xTaskCreateStatic+0x42>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	e7fe      	b.n	8003544 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003546:	23bc      	movs	r3, #188	; 0xbc
 8003548:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2bbc      	cmp	r3, #188	; 0xbc
 800354e:	d009      	beq.n	8003564 <xTaskCreateStatic+0x60>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e7fe      	b.n	8003562 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003564:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01e      	beq.n	80035aa <xTaskCreateStatic+0xa6>
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01b      	beq.n	80035aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2202      	movs	r2, #2
 8003580:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003584:	2300      	movs	r3, #0
 8003586:	9303      	str	r3, [sp, #12]
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	9302      	str	r3, [sp, #8]
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f851 	bl	8003644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035a4:	f000 f8f4 	bl	8003790 <prvAddNewTaskToReadyList>
 80035a8:	e001      	b.n	80035ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ae:	697b      	ldr	r3, [r7, #20]
	}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af04      	add	r7, sp, #16
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 fd2f 	bl	8005030 <pvPortMalloc>
 80035d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035da:	20bc      	movs	r0, #188	; 0xbc
 80035dc:	f001 fd28 	bl	8005030 <pvPortMalloc>
 80035e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
 80035ee:	e005      	b.n	80035fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f001 fddf 	bl	80051b4 <vPortFree>
 80035f6:	e001      	b.n	80035fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	2300      	movs	r3, #0
 800360e:	9303      	str	r3, [sp, #12]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	9302      	str	r3, [sp, #8]
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f80f 	bl	8003644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003626:	69f8      	ldr	r0, [r7, #28]
 8003628:	f000 f8b2 	bl	8003790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800362c:	2301      	movs	r3, #1
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	e002      	b.n	8003638 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003638:	69bb      	ldr	r3, [r7, #24]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	21a5      	movs	r1, #165	; 0xa5
 800365e:	f001 ffbc 	bl	80055da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800366c:	3b01      	subs	r3, #1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f023 0307 	bic.w	r3, r3, #7
 800367a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <prvInitialiseNewTask+0x56>
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e7fe      	b.n	8003698 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01f      	beq.n	80036e0 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e012      	b.n	80036cc <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	7819      	ldrb	r1, [r3, #0]
 80036ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	3334      	adds	r3, #52	; 0x34
 80036b6:	460a      	mov	r2, r1
 80036b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d9e9      	bls.n	80036a6 <prvInitialiseNewTask+0x62>
 80036d2:	e000      	b.n	80036d6 <prvInitialiseNewTask+0x92>
			{
				break;
 80036d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036de:	e003      	b.n	80036e8 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b37      	cmp	r3, #55	; 0x37
 80036ec:	d901      	bls.n	80036f2 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036ee:	2337      	movs	r3, #55	; 0x37
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	2200      	movs	r2, #0
 8003702:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe ff9b 	bl	8002644 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	3318      	adds	r3, #24
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe ff96 	bl	8002644 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	2200      	movs	r2, #0
 800373a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	3354      	adds	r3, #84	; 0x54
 8003742:	2260      	movs	r2, #96	; 0x60
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f001 ff47 	bl	80055da <memset>
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <prvInitialiseNewTask+0x140>)
 8003750:	659a      	str	r2, [r3, #88]	; 0x58
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <prvInitialiseNewTask+0x144>)
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <prvInitialiseNewTask+0x148>)
 800375c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	69b8      	ldr	r0, [r7, #24]
 8003764:	f001 fa26 	bl	8004bb4 <pxPortInitialiseStack>
 8003768:	4602      	mov	r2, r0
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08005ed4 	.word	0x08005ed4
 8003788:	08005ef4 	.word	0x08005ef4
 800378c:	08005eb4 	.word	0x08005eb4

08003790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003798:	f001 fb30 	bl	8004dfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <prvAddNewTaskToReadyList+0xc4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a2c      	ldr	r2, [pc, #176]	; (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ae:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d110      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037bc:	f000 fc1a 	bl	8003ff4 <prvInitialiseTaskLists>
 80037c0:	e00d      	b.n	80037de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <prvAddNewTaskToReadyList+0xcc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ca:	4b23      	ldr	r3, [pc, #140]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d802      	bhi.n	80037de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037d8:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <prvAddNewTaskToReadyList+0xd0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <prvAddNewTaskToReadyList+0xd0>)
 80037e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <prvAddNewTaskToReadyList+0xd0>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <prvAddNewTaskToReadyList+0xd4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d903      	bls.n	8003804 <prvAddNewTaskToReadyList+0x74>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <prvAddNewTaskToReadyList+0xd4>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <prvAddNewTaskToReadyList+0xd8>)
 8003812:	441a      	add	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f7fe ff1f 	bl	800265e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003820:	f001 fb1a 	bl	8004e58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <prvAddNewTaskToReadyList+0xcc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	429a      	cmp	r2, r3
 8003838:	d207      	bcs.n	800384a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <prvAddNewTaskToReadyList+0xdc>)
 800383c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000ce0 	.word	0x20000ce0
 8003858:	2000080c 	.word	0x2000080c
 800385c:	20000cec 	.word	0x20000cec
 8003860:	20000cfc 	.word	0x20000cfc
 8003864:	20000ce8 	.word	0x20000ce8
 8003868:	20000810 	.word	0x20000810
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <vTaskDelay+0x60>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <vTaskDelay+0x2e>
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e7fe      	b.n	800389c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800389e:	f000 f889 	bl	80039b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038a2:	2100      	movs	r1, #0
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fdeb 	bl	8004480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038aa:	f000 f891 	bl	80039d0 <xTaskResumeAll>
 80038ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <vTaskDelay+0x64>)
 80038b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000d08 	.word	0x20000d08
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038e6:	463a      	mov	r2, r7
 80038e8:	1d39      	adds	r1, r7, #4
 80038ea:	f107 0308 	add.w	r3, r7, #8
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fe54 	bl	800259c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038f4:	6839      	ldr	r1, [r7, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	9202      	str	r2, [sp, #8]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	460a      	mov	r2, r1
 8003906:	4923      	ldr	r1, [pc, #140]	; (8003994 <vTaskStartScheduler+0xbc>)
 8003908:	4823      	ldr	r0, [pc, #140]	; (8003998 <vTaskStartScheduler+0xc0>)
 800390a:	f7ff fdfb 	bl	8003504 <xTaskCreateStatic>
 800390e:	4602      	mov	r2, r0
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <vTaskStartScheduler+0xc4>)
 8003912:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <vTaskStartScheduler+0xc4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e001      	b.n	8003926 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800392c:	f000 fdfc 	bl	8004528 <xTimerCreateTimerTask>
 8003930:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d11a      	bne.n	800396e <vTaskStartScheduler+0x96>
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <vTaskStartScheduler+0xc8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3354      	adds	r3, #84	; 0x54
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <vTaskStartScheduler+0xcc>)
 8003952:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <vTaskStartScheduler+0xd0>)
 8003956:	f04f 32ff 	mov.w	r2, #4294967295
 800395a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <vTaskStartScheduler+0xd4>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <vTaskStartScheduler+0xd8>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003968:	f001 f9aa 	bl	8004cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800396c:	e00d      	b.n	800398a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d109      	bne.n	800398a <vTaskStartScheduler+0xb2>
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e7fe      	b.n	8003988 <vTaskStartScheduler+0xb0>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08005e84 	.word	0x08005e84
 8003998:	08003fc5 	.word	0x08003fc5
 800399c:	20000d04 	.word	0x20000d04
 80039a0:	2000080c 	.word	0x2000080c
 80039a4:	20000010 	.word	0x20000010
 80039a8:	20000d00 	.word	0x20000d00
 80039ac:	20000cec 	.word	0x20000cec
 80039b0:	20000ce4 	.word	0x20000ce4

080039b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <vTaskSuspendAll+0x18>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a03      	ldr	r2, [pc, #12]	; (80039cc <vTaskSuspendAll+0x18>)
 80039c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	20000d08 	.word	0x20000d08

080039d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <xTaskResumeAll+0x114>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <xTaskResumeAll+0x2a>
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	e7fe      	b.n	80039f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039fa:	f001 f9ff 	bl	8004dfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039fe:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <xTaskResumeAll+0x114>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <xTaskResumeAll+0x114>)
 8003a06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a08:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <xTaskResumeAll+0x114>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d162      	bne.n	8003ad6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a10:	4b35      	ldr	r3, [pc, #212]	; (8003ae8 <xTaskResumeAll+0x118>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05e      	beq.n	8003ad6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a18:	e02f      	b.n	8003a7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <xTaskResumeAll+0x11c>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3318      	adds	r3, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fe76 	bl	8002718 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fe71 	bl	8002718 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3a:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <xTaskResumeAll+0x120>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d903      	bls.n	8003a4a <xTaskResumeAll+0x7a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <xTaskResumeAll+0x120>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <xTaskResumeAll+0x124>)
 8003a58:	441a      	add	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f7fe fdfc 	bl	800265e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <xTaskResumeAll+0x128>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <xTaskResumeAll+0x12c>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <xTaskResumeAll+0x11c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1cb      	bne.n	8003a1a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a88:	f000 fb54 	bl	8004134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <xTaskResumeAll+0x130>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a98:	f000 f846 	bl	8003b28 <xTaskIncrementTick>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <xTaskResumeAll+0x12c>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f1      	bne.n	8003a98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <xTaskResumeAll+0x130>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <xTaskResumeAll+0x12c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <xTaskResumeAll+0x134>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ad6:	f001 f9bf 	bl	8004e58 <vPortExitCritical>

	return xAlreadyYielded;
 8003ada:	68bb      	ldr	r3, [r7, #8]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000d08 	.word	0x20000d08
 8003ae8:	20000ce0 	.word	0x20000ce0
 8003aec:	20000ca0 	.word	0x20000ca0
 8003af0:	20000ce8 	.word	0x20000ce8
 8003af4:	20000810 	.word	0x20000810
 8003af8:	2000080c 	.word	0x2000080c
 8003afc:	20000cf4 	.word	0x20000cf4
 8003b00:	20000cf0 	.word	0x20000cf0
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <xTaskGetTickCount+0x1c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b14:	687b      	ldr	r3, [r7, #4]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000ce4 	.word	0x20000ce4

08003b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b32:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <xTaskIncrementTick+0x144>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 8088 	bne.w	8003c4c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <xTaskIncrementTick+0x148>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b44:	4a4a      	ldr	r2, [pc, #296]	; (8003c70 <xTaskIncrementTick+0x148>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11f      	bne.n	8003b90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b50:	4b48      	ldr	r3, [pc, #288]	; (8003c74 <xTaskIncrementTick+0x14c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <xTaskIncrementTick+0x46>
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	e7fe      	b.n	8003b6c <xTaskIncrementTick+0x44>
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <xTaskIncrementTick+0x14c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <xTaskIncrementTick+0x150>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3e      	ldr	r2, [pc, #248]	; (8003c74 <xTaskIncrementTick+0x14c>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4a3e      	ldr	r2, [pc, #248]	; (8003c78 <xTaskIncrementTick+0x150>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a3c      	ldr	r2, [pc, #240]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	f000 fad2 	bl	8004134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <xTaskIncrementTick+0x158>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d349      	bcc.n	8003c2e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9a:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <xTaskIncrementTick+0x14c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <xTaskIncrementTick+0x158>)
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	601a      	str	r2, [r3, #0]
					break;
 8003bac:	e03f      	b.n	8003c2e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <xTaskIncrementTick+0x14c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d203      	bcs.n	8003bce <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <xTaskIncrementTick+0x158>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bcc:	e02f      	b.n	8003c2e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fda0 	bl	8002718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3318      	adds	r3, #24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fd97 	bl	8002718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <xTaskIncrementTick+0x15c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d903      	bls.n	8003bfe <xTaskIncrementTick+0xd6>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <xTaskIncrementTick+0x15c>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <xTaskIncrementTick+0x160>)
 8003c0c:	441a      	add	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fd22 	bl	800265e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <xTaskIncrementTick+0x164>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3b8      	bcc.n	8003b9a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c2c:	e7b5      	b.n	8003b9a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <xTaskIncrementTick+0x164>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4914      	ldr	r1, [pc, #80]	; (8003c88 <xTaskIncrementTick+0x160>)
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d907      	bls.n	8003c56 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e004      	b.n	8003c56 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <xTaskIncrementTick+0x168>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <xTaskIncrementTick+0x168>)
 8003c54:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <xTaskIncrementTick+0x16c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c62:	697b      	ldr	r3, [r7, #20]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000d08 	.word	0x20000d08
 8003c70:	20000ce4 	.word	0x20000ce4
 8003c74:	20000c98 	.word	0x20000c98
 8003c78:	20000c9c 	.word	0x20000c9c
 8003c7c:	20000cf8 	.word	0x20000cf8
 8003c80:	20000d00 	.word	0x20000d00
 8003c84:	20000ce8 	.word	0x20000ce8
 8003c88:	20000810 	.word	0x20000810
 8003c8c:	2000080c 	.word	0x2000080c
 8003c90:	20000cf0 	.word	0x20000cf0
 8003c94:	20000cf4 	.word	0x20000cf4

08003c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <vTaskSwitchContext+0xb0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <vTaskSwitchContext+0xb4>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cac:	e045      	b.n	8003d3a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003cae:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <vTaskSwitchContext+0xb4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <vTaskSwitchContext+0xb8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e00f      	b.n	8003cdc <vTaskSwitchContext+0x44>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <vTaskSwitchContext+0x3e>
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	e7fe      	b.n	8003cd4 <vTaskSwitchContext+0x3c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	491d      	ldr	r1, [pc, #116]	; (8003d54 <vTaskSwitchContext+0xbc>)
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0e5      	beq.n	8003cbc <vTaskSwitchContext+0x24>
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <vTaskSwitchContext+0xbc>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3308      	adds	r3, #8
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d104      	bne.n	8003d20 <vTaskSwitchContext+0x88>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <vTaskSwitchContext+0xc0>)
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <vTaskSwitchContext+0xb8>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <vTaskSwitchContext+0xc0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3354      	adds	r3, #84	; 0x54
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <vTaskSwitchContext+0xc4>)
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000d08 	.word	0x20000d08
 8003d4c:	20000cf4 	.word	0x20000cf4
 8003d50:	20000ce8 	.word	0x20000ce8
 8003d54:	20000810 	.word	0x20000810
 8003d58:	2000080c 	.word	0x2000080c
 8003d5c:	20000010 	.word	0x20000010

08003d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <vTaskPlaceOnEventList+0x24>
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e7fe      	b.n	8003d82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <vTaskPlaceOnEventList+0x44>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3318      	adds	r3, #24
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fe fc8a 	bl	80026a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d92:	2101      	movs	r1, #1
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f000 fb73 	bl	8004480 <prvAddCurrentTaskToDelayedList>
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000080c 	.word	0x2000080c

08003da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <vTaskPlaceOnEventListRestricted+0x26>
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e7fe      	b.n	8003dcc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <vTaskPlaceOnEventListRestricted+0x50>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7fe fc41 	bl	800265e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	68b8      	ldr	r0, [r7, #8]
 8003dec:	f000 fb48 	bl	8004480 <prvAddCurrentTaskToDelayedList>
	}
 8003df0:	bf00      	nop
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	2000080c 	.word	0x2000080c

08003dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <xTaskRemoveFromEventList+0x2a>
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e7fe      	b.n	8003e24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3318      	adds	r3, #24
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fc74 	bl	8002718 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <xTaskRemoveFromEventList+0xac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11d      	bne.n	8003e74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fc6b 	bl	8002718 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <xTaskRemoveFromEventList+0xb0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d903      	bls.n	8003e56 <xTaskRemoveFromEventList+0x5a>
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <xTaskRemoveFromEventList+0xb0>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <xTaskRemoveFromEventList+0xb4>)
 8003e64:	441a      	add	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe fbf6 	bl	800265e <vListInsertEnd>
 8003e72:	e005      	b.n	8003e80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3318      	adds	r3, #24
 8003e78:	4619      	mov	r1, r3
 8003e7a:	480e      	ldr	r0, [pc, #56]	; (8003eb4 <xTaskRemoveFromEventList+0xb8>)
 8003e7c:	f7fe fbef 	bl	800265e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <xTaskRemoveFromEventList+0xbc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d905      	bls.n	8003e9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <xTaskRemoveFromEventList+0xc0>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e001      	b.n	8003e9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e9e:	697b      	ldr	r3, [r7, #20]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000d08 	.word	0x20000d08
 8003eac:	20000ce8 	.word	0x20000ce8
 8003eb0:	20000810 	.word	0x20000810
 8003eb4:	20000ca0 	.word	0x20000ca0
 8003eb8:	2000080c 	.word	0x2000080c
 8003ebc:	20000cf4 	.word	0x20000cf4

08003ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <vTaskInternalSetTimeOutState+0x24>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <vTaskInternalSetTimeOutState+0x28>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	605a      	str	r2, [r3, #4]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	20000cf8 	.word	0x20000cf8
 8003ee8:	20000ce4 	.word	0x20000ce4

08003eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <xTaskCheckForTimeOut+0x24>
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	e7fe      	b.n	8003f0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xTaskCheckForTimeOut+0x3e>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e7fe      	b.n	8003f28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003f2a:	f000 ff67 	bl	8004dfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <xTaskCheckForTimeOut+0xb8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d102      	bne.n	8003f4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e023      	b.n	8003f96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <xTaskCheckForTimeOut+0xbc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d007      	beq.n	8003f6a <xTaskCheckForTimeOut+0x7e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	e015      	b.n	8003f96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d20b      	bcs.n	8003f8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff9d 	bl	8003ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	e004      	b.n	8003f96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f96:	f000 ff5f 	bl	8004e58 <vPortExitCritical>

	return xReturn;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000ce4 	.word	0x20000ce4
 8003fa8:	20000cf8 	.word	0x20000cf8

08003fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <vTaskMissedYield+0x14>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20000cf4 	.word	0x20000cf4

08003fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fcc:	f000 f852 	bl	8004074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <prvIdleTask+0x28>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d9f9      	bls.n	8003fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <prvIdleTask+0x2c>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fe8:	e7f0      	b.n	8003fcc <prvIdleTask+0x8>
 8003fea:	bf00      	nop
 8003fec:	20000810 	.word	0x20000810
 8003ff0:	e000ed04 	.word	0xe000ed04

08003ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	e00c      	b.n	800401a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <prvInitialiseTaskLists+0x60>)
 800400c:	4413      	add	r3, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe faf8 	bl	8002604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3301      	adds	r3, #1
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b37      	cmp	r3, #55	; 0x37
 800401e:	d9ef      	bls.n	8004000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004020:	480d      	ldr	r0, [pc, #52]	; (8004058 <prvInitialiseTaskLists+0x64>)
 8004022:	f7fe faef 	bl	8002604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004026:	480d      	ldr	r0, [pc, #52]	; (800405c <prvInitialiseTaskLists+0x68>)
 8004028:	f7fe faec 	bl	8002604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800402c:	480c      	ldr	r0, [pc, #48]	; (8004060 <prvInitialiseTaskLists+0x6c>)
 800402e:	f7fe fae9 	bl	8002604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004032:	480c      	ldr	r0, [pc, #48]	; (8004064 <prvInitialiseTaskLists+0x70>)
 8004034:	f7fe fae6 	bl	8002604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004038:	480b      	ldr	r0, [pc, #44]	; (8004068 <prvInitialiseTaskLists+0x74>)
 800403a:	f7fe fae3 	bl	8002604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <prvInitialiseTaskLists+0x78>)
 8004040:	4a05      	ldr	r2, [pc, #20]	; (8004058 <prvInitialiseTaskLists+0x64>)
 8004042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <prvInitialiseTaskLists+0x7c>)
 8004046:	4a05      	ldr	r2, [pc, #20]	; (800405c <prvInitialiseTaskLists+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000810 	.word	0x20000810
 8004058:	20000c70 	.word	0x20000c70
 800405c:	20000c84 	.word	0x20000c84
 8004060:	20000ca0 	.word	0x20000ca0
 8004064:	20000cb4 	.word	0x20000cb4
 8004068:	20000ccc 	.word	0x20000ccc
 800406c:	20000c98 	.word	0x20000c98
 8004070:	20000c9c 	.word	0x20000c9c

08004074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800407a:	e019      	b.n	80040b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800407c:	f000 febe 	bl	8004dfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <prvCheckTasksWaitingTermination+0x4c>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fb43 	bl	8002718 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <prvCheckTasksWaitingTermination+0x50>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3b01      	subs	r3, #1
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <prvCheckTasksWaitingTermination+0x50>)
 800409a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <prvCheckTasksWaitingTermination+0x54>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <prvCheckTasksWaitingTermination+0x54>)
 80040a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040a6:	f000 fed7 	bl	8004e58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f80e 	bl	80040cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <prvCheckTasksWaitingTermination+0x54>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e1      	bne.n	800407c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000cb4 	.word	0x20000cb4
 80040c4:	20000ce0 	.word	0x20000ce0
 80040c8:	20000cc8 	.word	0x20000cc8

080040cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3354      	adds	r3, #84	; 0x54
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fb53 	bl	8005784 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d108      	bne.n	80040fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f861 	bl	80051b4 <vPortFree>
				vPortFree( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f001 f85e 	bl	80051b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040f8:	e017      	b.n	800412a <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004100:	2b01      	cmp	r3, #1
 8004102:	d103      	bne.n	800410c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f001 f855 	bl	80051b4 <vPortFree>
	}
 800410a:	e00e      	b.n	800412a <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004112:	2b02      	cmp	r3, #2
 8004114:	d009      	beq.n	800412a <prvDeleteTCB+0x5e>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e7fe      	b.n	8004128 <prvDeleteTCB+0x5c>
	}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <prvResetNextTaskUnblockTime+0x38>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvResetNextTaskUnblockTime+0x3c>)
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800414c:	e008      	b.n	8004160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <prvResetNextTaskUnblockTime+0x38>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <prvResetNextTaskUnblockTime+0x3c>)
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000c98 	.word	0x20000c98
 8004170:	20000d00 	.word	0x20000d00

08004174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <xTaskGetSchedulerState+0x34>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004182:	2301      	movs	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	e008      	b.n	800419a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <xTaskGetSchedulerState+0x38>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004190:	2302      	movs	r3, #2
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	e001      	b.n	800419a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800419a:	687b      	ldr	r3, [r7, #4]
	}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	20000cec 	.word	0x20000cec
 80041ac:	20000d08 	.word	0x20000d08

080041b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d051      	beq.n	800426a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <xTaskPriorityInherit+0xc4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d241      	bcs.n	8004258 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db06      	blt.n	80041ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <xTaskPriorityInherit+0xc4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <xTaskPriorityInherit+0xc8>)
 80041fc:	4413      	add	r3, r2
 80041fe:	4299      	cmp	r1, r3
 8004200:	d122      	bne.n	8004248 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fa86 	bl	8002718 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <xTaskPriorityInherit+0xc4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <xTaskPriorityInherit+0xcc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d903      	bls.n	800422a <xTaskPriorityInherit+0x7a>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <xTaskPriorityInherit+0xcc>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <xTaskPriorityInherit+0xc8>)
 8004238:	441a      	add	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7fe fa0c 	bl	800265e <vListInsertEnd>
 8004246:	e004      	b.n	8004252 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <xTaskPriorityInherit+0xc4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e008      	b.n	800426a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <xTaskPriorityInherit+0xc4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	429a      	cmp	r2, r3
 8004264:	d201      	bcs.n	800426a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800426a:	68fb      	ldr	r3, [r7, #12]
	}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	2000080c 	.word	0x2000080c
 8004278:	20000810 	.word	0x20000810
 800427c:	20000ce8 	.word	0x20000ce8

08004280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d054      	beq.n	8004340 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <xTaskPriorityDisinherit+0xcc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d009      	beq.n	80042b4 <xTaskPriorityDisinherit+0x34>
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e7fe      	b.n	80042b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <xTaskPriorityDisinherit+0x50>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	e7fe      	b.n	80042ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d02c      	beq.n	8004340 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d128      	bne.n	8004340 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fa10 	bl	8002718 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <xTaskPriorityDisinherit+0xd0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d903      	bls.n	8004320 <xTaskPriorityDisinherit+0xa0>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	4a0c      	ldr	r2, [pc, #48]	; (8004350 <xTaskPriorityDisinherit+0xd0>)
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a09      	ldr	r2, [pc, #36]	; (8004354 <xTaskPriorityDisinherit+0xd4>)
 800432e:	441a      	add	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe f991 	bl	800265e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	2000080c 	.word	0x2000080c
 8004350:	20000ce8 	.word	0x20000ce8
 8004354:	20000810 	.word	0x20000810

08004358 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004366:	2301      	movs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d068      	beq.n	8004442 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e7fe      	b.n	800438a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d902      	bls.n	800439c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e002      	b.n	80043a2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d04a      	beq.n	8004442 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d145      	bne.n	8004442 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d109      	bne.n	80043d4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	e7fe      	b.n	80043d2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db04      	blt.n	80043f2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	6959      	ldr	r1, [r3, #20]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004402:	4413      	add	r3, r2
 8004404:	4299      	cmp	r1, r3
 8004406:	d11c      	bne.n	8004442 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe f983 	bl	8002718 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d903      	bls.n	8004426 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004434:	441a      	add	r2, r3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f7fe f90e 	bl	800265e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000080c 	.word	0x2000080c
 8004450:	20000810 	.word	0x20000810
 8004454:	20000ce8 	.word	0x20000ce8

08004458 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <pvTaskIncrementMutexHeldCount+0x24>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <pvTaskIncrementMutexHeldCount+0x24>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800446a:	3201      	adds	r2, #1
 800446c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800446e:	4b03      	ldr	r3, [pc, #12]	; (800447c <pvTaskIncrementMutexHeldCount+0x24>)
 8004470:	681b      	ldr	r3, [r3, #0]
	}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	2000080c 	.word	0x2000080c

08004480 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800448a:	4b21      	ldr	r3, [pc, #132]	; (8004510 <prvAddCurrentTaskToDelayedList+0x90>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <prvAddCurrentTaskToDelayedList+0x94>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3304      	adds	r3, #4
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe f93e 	bl	8002718 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d10a      	bne.n	80044ba <prvAddCurrentTaskToDelayedList+0x3a>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <prvAddCurrentTaskToDelayedList+0x94>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4819      	ldr	r0, [pc, #100]	; (8004518 <prvAddCurrentTaskToDelayedList+0x98>)
 80044b4:	f7fe f8d3 	bl	800265e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044b8:	e026      	b.n	8004508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <prvAddCurrentTaskToDelayedList+0x94>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d209      	bcs.n	80044e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <prvAddCurrentTaskToDelayedList+0x9c>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <prvAddCurrentTaskToDelayedList+0x94>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe f8e1 	bl	80026a6 <vListInsert>
}
 80044e4:	e010      	b.n	8004508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e6:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <prvAddCurrentTaskToDelayedList+0x94>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fe f8d7 	bl	80026a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d202      	bcs.n	8004508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6013      	str	r3, [r2, #0]
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000ce4 	.word	0x20000ce4
 8004514:	2000080c 	.word	0x2000080c
 8004518:	20000ccc 	.word	0x20000ccc
 800451c:	20000c9c 	.word	0x20000c9c
 8004520:	20000c98 	.word	0x20000c98
 8004524:	20000d00 	.word	0x20000d00

08004528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004532:	f000 faff 	bl	8004b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <xTimerCreateTimerTask+0x80>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d021      	beq.n	8004582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004546:	1d3a      	adds	r2, r7, #4
 8004548:	f107 0108 	add.w	r1, r7, #8
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe f83d 	bl	80025d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	9202      	str	r2, [sp, #8]
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	2302      	movs	r3, #2
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	460a      	mov	r2, r1
 8004568:	4910      	ldr	r1, [pc, #64]	; (80045ac <xTimerCreateTimerTask+0x84>)
 800456a:	4811      	ldr	r0, [pc, #68]	; (80045b0 <xTimerCreateTimerTask+0x88>)
 800456c:	f7fe ffca 	bl	8003504 <xTaskCreateStatic>
 8004570:	4602      	mov	r2, r0
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <xTimerCreateTimerTask+0x8c>)
 8004574:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <xTimerCreateTimerTask+0x8c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800457e:	2301      	movs	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <xTimerCreateTimerTask+0x74>
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e7fe      	b.n	800459a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800459c:	697b      	ldr	r3, [r7, #20]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000d3c 	.word	0x20000d3c
 80045ac:	08005e8c 	.word	0x08005e8c
 80045b0:	080046e9 	.word	0x080046e9
 80045b4:	20000d40 	.word	0x20000d40

080045b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <xTimerGenericCommand+0x2c>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	e7fe      	b.n	80045e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <xTimerGenericCommand+0x94>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02a      	beq.n	8004642 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	dc18      	bgt.n	8004630 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045fe:	f7ff fdb9 	bl	8004174 <xTaskGetSchedulerState>
 8004602:	4603      	mov	r3, r0
 8004604:	2b02      	cmp	r3, #2
 8004606:	d109      	bne.n	800461c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004608:	4b10      	ldr	r3, [pc, #64]	; (800464c <xTimerGenericCommand+0x94>)
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	f107 0110 	add.w	r1, r7, #16
 8004610:	2300      	movs	r3, #0
 8004612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004614:	f7fe f9ea 	bl	80029ec <xQueueGenericSend>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24
 800461a:	e012      	b.n	8004642 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <xTimerGenericCommand+0x94>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	f107 0110 	add.w	r1, r7, #16
 8004624:	2300      	movs	r3, #0
 8004626:	2200      	movs	r2, #0
 8004628:	f7fe f9e0 	bl	80029ec <xQueueGenericSend>
 800462c:	6278      	str	r0, [r7, #36]	; 0x24
 800462e:	e008      	b.n	8004642 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <xTimerGenericCommand+0x94>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	f107 0110 	add.w	r1, r7, #16
 8004638:	2300      	movs	r3, #0
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	f7fe faee 	bl	8002c1c <xQueueGenericSendFromISR>
 8004640:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000d3c 	.word	0x20000d3c

08004650 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <prvProcessExpiredTimer+0x94>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe f855 	bl	8002718 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d021      	beq.n	80046c0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	18d1      	adds	r1, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f000 f8d1 	bl	8004830 <prvInsertTimerInActiveList>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01e      	beq.n	80046d2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	2100      	movs	r1, #0
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f7ff ff8a 	bl	80045b8 <xTimerGenericCommand>
 80046a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d112      	bne.n	80046d2 <prvProcessExpiredTimer+0x82>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e7fe      	b.n	80046be <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	4798      	blx	r3
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000d34 	.word	0x20000d34

080046e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046f0:	f107 0308 	add.w	r3, r7, #8
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f857 	bl	80047a8 <prvGetNextExpireTime>
 80046fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4619      	mov	r1, r3
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f803 	bl	800470c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004706:	f000 f8d5 	bl	80048b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800470a:	e7f1      	b.n	80046f0 <prvTimerTask+0x8>

0800470c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004716:	f7ff f94d 	bl	80039b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f866 	bl	80047f0 <prvSampleTimeNow>
 8004724:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d130      	bne.n	800478e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <prvProcessTimerOrBlockTask+0x3c>
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	429a      	cmp	r2, r3
 8004738:	d806      	bhi.n	8004748 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800473a:	f7ff f949 	bl	80039d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff85 	bl	8004650 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004746:	e024      	b.n	8004792 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <prvProcessTimerOrBlockTask+0x90>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <prvProcessTimerOrBlockTask+0x50>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <prvProcessTimerOrBlockTask+0x52>
 800475c:	2300      	movs	r3, #0
 800475e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <prvProcessTimerOrBlockTask+0x94>)
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	f7fe fe3d 	bl	80033ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004772:	f7ff f92d 	bl	80039d0 <xTaskResumeAll>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <prvProcessTimerOrBlockTask+0x98>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
}
 800478c:	e001      	b.n	8004792 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800478e:	f7ff f91f 	bl	80039d0 <xTaskResumeAll>
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000d38 	.word	0x20000d38
 80047a0:	20000d3c 	.word	0x20000d3c
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <prvGetNextExpireTime+0x44>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <prvGetNextExpireTime+0x16>
 80047ba:	2201      	movs	r2, #1
 80047bc:	e000      	b.n	80047c0 <prvGetNextExpireTime+0x18>
 80047be:	2200      	movs	r2, #0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <prvGetNextExpireTime+0x44>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e001      	b.n	80047dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000d34 	.word	0x20000d34

080047f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047f8:	f7ff f986 	bl	8003b08 <xTaskGetTickCount>
 80047fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <prvSampleTimeNow+0x3c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	429a      	cmp	r2, r3
 8004806:	d205      	bcs.n	8004814 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004808:	f000 f930 	bl	8004a6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e002      	b.n	800481a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800481a:	4a04      	ldr	r2, [pc, #16]	; (800482c <prvSampleTimeNow+0x3c>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004820:	68fb      	ldr	r3, [r7, #12]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000d44 	.word	0x20000d44

08004830 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d812      	bhi.n	800487c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e01b      	b.n	80048a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <prvInsertTimerInActiveList+0x7c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fd ff16 	bl	80026a6 <vListInsert>
 800487a:	e012      	b.n	80048a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d206      	bcs.n	8004892 <prvInsertTimerInActiveList+0x62>
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e007      	b.n	80048a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <prvInsertTimerInActiveList+0x80>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fd ff02 	bl	80026a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000d38 	.word	0x20000d38
 80048b0:	20000d34 	.word	0x20000d34

080048b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ba:	e0c6      	b.n	8004a4a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da17      	bge.n	80048f2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	3304      	adds	r3, #4
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvProcessReceivedCommands+0x2e>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e7fe      	b.n	80048e0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e8:	6850      	ldr	r0, [r2, #4]
 80048ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ec:	6892      	ldr	r2, [r2, #8]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f2c0 80a7 	blt.w	8004a48 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd ff04 	bl	8002718 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004910:	463b      	mov	r3, r7
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff6c 	bl	80047f0 <prvSampleTimeNow>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b09      	cmp	r3, #9
 800491e:	f200 8094 	bhi.w	8004a4a <prvProcessReceivedCommands+0x196>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <prvProcessReceivedCommands+0x74>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	08004951 	.word	0x08004951
 800492c:	08004951 	.word	0x08004951
 8004930:	08004951 	.word	0x08004951
 8004934:	080049c3 	.word	0x080049c3
 8004938:	080049d7 	.word	0x080049d7
 800493c:	08004a1f 	.word	0x08004a1f
 8004940:	08004951 	.word	0x08004951
 8004944:	08004951 	.word	0x08004951
 8004948:	080049c3 	.word	0x080049c3
 800494c:	080049d7 	.word	0x080049d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	18d1      	adds	r1, r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004970:	f7ff ff5e 	bl	8004830 <prvInsertTimerInActiveList>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d067      	beq.n	8004a4a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004980:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05c      	beq.n	8004a4a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	441a      	add	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	2100      	movs	r1, #0
 80049a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a2:	f7ff fe09 	bl	80045b8 <xTimerGenericCommand>
 80049a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d14d      	bne.n	8004a4a <prvProcessReceivedCommands+0x196>
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e7fe      	b.n	80049c0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80049d4:	e039      	b.n	8004a4a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <prvProcessReceivedCommands+0x156>
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e7fe      	b.n	8004a08 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	18d1      	adds	r1, r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a18:	f7ff ff0a 	bl	8004830 <prvInsertTimerInActiveList>
					break;
 8004a1c:	e015      	b.n	8004a4a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2e:	f000 fbc1 	bl	80051b4 <vPortFree>
 8004a32:	e00a      	b.n	8004a4a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a46:	e000      	b.n	8004a4a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a4a:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <prvProcessReceivedCommands+0x1b4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1d39      	adds	r1, r7, #4
 8004a50:	2200      	movs	r2, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fe f988 	bl	8002d68 <xQueueReceive>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f47f af2e 	bne.w	80048bc <prvProcessReceivedCommands+0x8>
	}
}
 8004a60:	bf00      	nop
 8004a62:	3730      	adds	r7, #48	; 0x30
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000d3c 	.word	0x20000d3c

08004a6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a72:	e047      	b.n	8004b04 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a74:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7e:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fe43 	bl	8002718 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02d      	beq.n	8004b04 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d90e      	bls.n	8004ad8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fd fde8 	bl	80026a6 <vListInsert>
 8004ad6:	e015      	b.n	8004b04 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fd68 	bl	80045b8 <xTimerGenericCommand>
 8004ae8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <prvSwitchTimerLists+0x98>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	e7fe      	b.n	8004b02 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1b2      	bne.n	8004a74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <prvSwitchTimerLists+0xc4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004b1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <prvSwitchTimerLists+0xc4>)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	6013      	str	r3, [r2, #0]
}
 8004b22:	bf00      	nop
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000d34 	.word	0x20000d34
 8004b30:	20000d38 	.word	0x20000d38

08004b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b3a:	f000 f95f 	bl	8004dfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d120      	bne.n	8004b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b46:	4814      	ldr	r0, [pc, #80]	; (8004b98 <prvCheckForValidListAndQueue+0x64>)
 8004b48:	f7fd fd5c 	bl	8002604 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b4c:	4813      	ldr	r0, [pc, #76]	; (8004b9c <prvCheckForValidListAndQueue+0x68>)
 8004b4e:	f7fd fd59 	bl	8002604 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <prvCheckForValidListAndQueue+0x6c>)
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <prvCheckForValidListAndQueue+0x64>)
 8004b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <prvCheckForValidListAndQueue+0x70>)
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <prvCheckForValidListAndQueue+0x68>)
 8004b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <prvCheckForValidListAndQueue+0x74>)
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <prvCheckForValidListAndQueue+0x78>)
 8004b66:	2110      	movs	r1, #16
 8004b68:	200a      	movs	r0, #10
 8004b6a:	f7fd fe67 	bl	800283c <xQueueGenericCreateStatic>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b72:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	490b      	ldr	r1, [pc, #44]	; (8004bb0 <prvCheckForValidListAndQueue+0x7c>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fc0a 	bl	800339c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b88:	f000 f966 	bl	8004e58 <vPortExitCritical>
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000d3c 	.word	0x20000d3c
 8004b98:	20000d0c 	.word	0x20000d0c
 8004b9c:	20000d20 	.word	0x20000d20
 8004ba0:	20000d34 	.word	0x20000d34
 8004ba4:	20000d38 	.word	0x20000d38
 8004ba8:	20000de8 	.word	0x20000de8
 8004bac:	20000d48 	.word	0x20000d48
 8004bb0:	08005e94 	.word	0x08005e94

08004bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3b04      	subs	r3, #4
 8004bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3b04      	subs	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <pxPortInitialiseStack+0x64>)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b14      	subs	r3, #20
 8004bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f06f 0202 	mvn.w	r2, #2
 8004c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b20      	subs	r3, #32
 8004c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	08004c1d 	.word	0x08004c1d

08004c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <prvTaskExitError+0x50>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d009      	beq.n	8004c44 <prvTaskExitError+0x28>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e7fe      	b.n	8004c42 <prvTaskExitError+0x26>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c56:	bf00      	nop
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0fc      	beq.n	8004c58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <pxCurrentTCBConst2>)
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	f380 8809 	msr	PSP, r0
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8811 	msr	BASEPRI, r0
 8004c8a:	4770      	bx	lr
 8004c8c:	f3af 8000 	nop.w

08004c90 <pxCurrentTCBConst2>:
 8004c90:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c98:	4808      	ldr	r0, [pc, #32]	; (8004cbc <prvPortStartFirstTask+0x24>)
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f380 8808 	msr	MSP, r0
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8814 	msr	CONTROL, r0
 8004caa:	b662      	cpsie	i
 8004cac:	b661      	cpsie	f
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	df00      	svc	0
 8004cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cba:	bf00      	nop
 8004cbc:	e000ed08 	.word	0xe000ed08

08004cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cc6:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <xPortStartScheduler+0x118>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a44      	ldr	r2, [pc, #272]	; (8004ddc <xPortStartScheduler+0x11c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d109      	bne.n	8004ce4 <xPortStartScheduler+0x24>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e7fe      	b.n	8004ce2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ce4:	4b3c      	ldr	r3, [pc, #240]	; (8004dd8 <xPortStartScheduler+0x118>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <xPortStartScheduler+0x120>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d109      	bne.n	8004d02 <xPortStartScheduler+0x42>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e7fe      	b.n	8004d00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d02:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <xPortStartScheduler+0x124>)
 8004d04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <xPortStartScheduler+0x128>)
 8004d28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d2a:	4b30      	ldr	r3, [pc, #192]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d2c:	2207      	movs	r2, #7
 8004d2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d30:	e009      	b.n	8004d46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004d32:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	4a2c      	ldr	r2, [pc, #176]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d0ef      	beq.n	8004d32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1c3 0307 	rsb	r3, r3, #7
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d009      	beq.n	8004d72 <xPortStartScheduler+0xb2>
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	e7fe      	b.n	8004d70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <xPortStartScheduler+0x130>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <xPortStartScheduler+0x130>)
 8004d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <xPortStartScheduler+0x130>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <xPortStartScheduler+0x130>)
 8004da2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004da6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004da8:	f000 f8d6 	bl	8004f58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <xPortStartScheduler+0x134>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004db2:	f000 f8f5 	bl	8004fa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <xPortStartScheduler+0x138>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <xPortStartScheduler+0x138>)
 8004dbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004dc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dc2:	f7ff ff69 	bl	8004c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dc6:	f7fe ff67 	bl	8003c98 <vTaskSwitchContext>
	prvTaskExitError();
 8004dca:	f7ff ff27 	bl	8004c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	e000ed00 	.word	0xe000ed00
 8004ddc:	410fc271 	.word	0x410fc271
 8004de0:	410fc270 	.word	0x410fc270
 8004de4:	e000e400 	.word	0xe000e400
 8004de8:	20000e3c 	.word	0x20000e3c
 8004dec:	20000e40 	.word	0x20000e40
 8004df0:	e000ed20 	.word	0xe000ed20
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	e000ef34 	.word	0xe000ef34

08004dfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <vPortEnterCritical+0x54>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <vPortEnterCritical+0x54>)
 8004e1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <vPortEnterCritical+0x54>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10e      	bne.n	8004e44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <vPortEnterCritical+0x58>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <vPortEnterCritical+0x48>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	e7fe      	b.n	8004e42 <vPortEnterCritical+0x46>
	}
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	2000000c 	.word	0x2000000c
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e5e:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <vPortExitCritical+0x4c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <vPortExitCritical+0x22>
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	e7fe      	b.n	8004e78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <vPortExitCritical+0x4c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <vPortExitCritical+0x4c>)
 8004e82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <vPortExitCritical+0x4c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <vPortExitCritical+0x3e>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
	...

08004eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004eb0:	f3ef 8009 	mrs	r0, PSP
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <pxCurrentTCBConst>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f01e 0f10 	tst.w	lr, #16
 8004ec0:	bf08      	it	eq
 8004ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ed4:	f380 8811 	msr	BASEPRI, r0
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f7fe feda 	bl	8003c98 <vTaskSwitchContext>
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f380 8811 	msr	BASEPRI, r0
 8004eec:	bc09      	pop	{r0, r3}
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	f01e 0f10 	tst.w	lr, #16
 8004efa:	bf08      	it	eq
 8004efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f00:	f380 8809 	msr	PSP, r0
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst>:
 8004f10:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f30:	f7fe fdfa 	bl	8003b28 <xTaskIncrementTick>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <SysTick_Handler+0x3c>)
 8004f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <vPortSetupTimerInterrupt+0x34>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <vPortSetupTimerInterrupt+0x38>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <vPortSetupTimerInterrupt+0x3c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <vPortSetupTimerInterrupt+0x40>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	099b      	lsrs	r3, r3, #6
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <vPortSetupTimerInterrupt+0x44>)
 8004f76:	3b01      	subs	r3, #1
 8004f78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f7a:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <vPortSetupTimerInterrupt+0x34>)
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000e010 	.word	0xe000e010
 8004f90:	e000e018 	.word	0xe000e018
 8004f94:	20000000 	.word	0x20000000
 8004f98:	10624dd3 	.word	0x10624dd3
 8004f9c:	e000e014 	.word	0xe000e014

08004fa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fb0 <vPortEnableVFP+0x10>
 8004fa4:	6801      	ldr	r1, [r0, #0]
 8004fa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004faa:	6001      	str	r1, [r0, #0]
 8004fac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fae:	bf00      	nop
 8004fb0:	e000ed88 	.word	0xe000ed88

08004fb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fba:	f3ef 8305 	mrs	r3, IPSR
 8004fbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	d913      	bls.n	8004fee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <vPortValidateInterruptPriority+0x6c>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <vPortValidateInterruptPriority+0x70>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	7afa      	ldrb	r2, [r7, #11]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d209      	bcs.n	8004fee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	e7fe      	b.n	8004fec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fee:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <vPortValidateInterruptPriority+0x74>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <vPortValidateInterruptPriority+0x78>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d909      	bls.n	8005012 <vPortValidateInterruptPriority+0x5e>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	e7fe      	b.n	8005010 <vPortValidateInterruptPriority+0x5c>
	}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	e000e3f0 	.word	0xe000e3f0
 8005024:	20000e3c 	.word	0x20000e3c
 8005028:	e000ed0c 	.word	0xe000ed0c
 800502c:	20000e40 	.word	0x20000e40

08005030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800503c:	f7fe fcba 	bl	80039b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005040:	4b57      	ldr	r3, [pc, #348]	; (80051a0 <pvPortMalloc+0x170>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005048:	f000 f90c 	bl	8005264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800504c:	4b55      	ldr	r3, [pc, #340]	; (80051a4 <pvPortMalloc+0x174>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 808c 	bne.w	8005172 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01c      	beq.n	800509a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005060:	2208      	movs	r2, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	2b00      	cmp	r3, #0
 8005070:	d013      	beq.n	800509a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f023 0307 	bic.w	r3, r3, #7
 8005078:	3308      	adds	r3, #8
 800507a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <pvPortMalloc+0x6a>
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e7fe      	b.n	8005098 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d068      	beq.n	8005172 <pvPortMalloc+0x142>
 80050a0:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <pvPortMalloc+0x178>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d863      	bhi.n	8005172 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050aa:	4b40      	ldr	r3, [pc, #256]	; (80051ac <pvPortMalloc+0x17c>)
 80050ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050ae:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <pvPortMalloc+0x17c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050b4:	e004      	b.n	80050c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d903      	bls.n	80050d2 <pvPortMalloc+0xa2>
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f1      	bne.n	80050b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <pvPortMalloc+0x170>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d8:	429a      	cmp	r2, r3
 80050da:	d04a      	beq.n	8005172 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2208      	movs	r2, #8
 80050e2:	4413      	add	r3, r2
 80050e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	1ad2      	subs	r2, r2, r3
 80050f6:	2308      	movs	r3, #8
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d91e      	bls.n	800513c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <pvPortMalloc+0xf4>
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e7fe      	b.n	8005122 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005136:	69b8      	ldr	r0, [r7, #24]
 8005138:	f000 f8f6 	bl	8005328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <pvPortMalloc+0x178>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <pvPortMalloc+0x178>)
 8005148:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800514a:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <pvPortMalloc+0x178>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <pvPortMalloc+0x180>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d203      	bcs.n	800515e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <pvPortMalloc+0x178>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <pvPortMalloc+0x180>)
 800515c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <pvPortMalloc+0x174>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	431a      	orrs	r2, r3
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005172:	f7fe fc2d 	bl	80039d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <pvPortMalloc+0x164>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e7fe      	b.n	8005192 <pvPortMalloc+0x162>
	return pvReturn;
 8005194:	69fb      	ldr	r3, [r7, #28]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20004a4c 	.word	0x20004a4c
 80051a4:	20004a58 	.word	0x20004a58
 80051a8:	20004a50 	.word	0x20004a50
 80051ac:	20004a44 	.word	0x20004a44
 80051b0:	20004a54 	.word	0x20004a54

080051b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d046      	beq.n	8005254 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051c6:	2308      	movs	r3, #8
 80051c8:	425b      	negs	r3, r3
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4b20      	ldr	r3, [pc, #128]	; (800525c <vPortFree+0xa8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <vPortFree+0x42>
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e7fe      	b.n	80051f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <vPortFree+0x5e>
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	e7fe      	b.n	8005210 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <vPortFree+0xa8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d115      	bne.n	8005254 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <vPortFree+0xa8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	43db      	mvns	r3, r3
 8005232:	401a      	ands	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005238:	f7fe fbbc 	bl	80039b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <vPortFree+0xac>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4413      	add	r3, r2
 8005246:	4a06      	ldr	r2, [pc, #24]	; (8005260 <vPortFree+0xac>)
 8005248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800524a:	6938      	ldr	r0, [r7, #16]
 800524c:	f000 f86c 	bl	8005328 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005250:	f7fe fbbe 	bl	80039d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005254:	bf00      	nop
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20004a58 	.word	0x20004a58
 8005260:	20004a50 	.word	0x20004a50

08005264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800526a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800526e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <prvHeapInit+0xac>)
 8005272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3307      	adds	r3, #7
 8005282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0307 	bic.w	r3, r3, #7
 800528a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <prvHeapInit+0xac>)
 8005294:	4413      	add	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <prvHeapInit+0xb0>)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <prvHeapInit+0xb0>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052b0:	2208      	movs	r2, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0307 	bic.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <prvHeapInit+0xb4>)
 80052c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <prvHeapInit+0xb4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <prvHeapInit+0xb4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	1ad2      	subs	r2, r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <prvHeapInit+0xb4>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <prvHeapInit+0xb8>)
 80052f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <prvHeapInit+0xbc>)
 80052fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <prvHeapInit+0xc0>)
 80052fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000e44 	.word	0x20000e44
 8005314:	20004a44 	.word	0x20004a44
 8005318:	20004a4c 	.word	0x20004a4c
 800531c:	20004a54 	.word	0x20004a54
 8005320:	20004a50 	.word	0x20004a50
 8005324:	20004a58 	.word	0x20004a58

08005328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <prvInsertBlockIntoFreeList+0xac>)
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e002      	b.n	800533c <prvInsertBlockIntoFreeList+0x14>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d8f7      	bhi.n	8005336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4413      	add	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d108      	bne.n	800536a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	441a      	add	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	441a      	add	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d118      	bne.n	80053b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d00d      	beq.n	80053a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e008      	b.n	80053b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <prvInsertBlockIntoFreeList+0xb0>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e003      	b.n	80053b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d002      	beq.n	80053c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20004a44 	.word	0x20004a44
 80053d8:	20004a4c 	.word	0x20004a4c

080053dc <__errno>:
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <__errno+0x8>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000010 	.word	0x20000010

080053e8 <std>:
 80053e8:	2300      	movs	r3, #0
 80053ea:	b510      	push	{r4, lr}
 80053ec:	4604      	mov	r4, r0
 80053ee:	e9c0 3300 	strd	r3, r3, [r0]
 80053f2:	6083      	str	r3, [r0, #8]
 80053f4:	8181      	strh	r1, [r0, #12]
 80053f6:	6643      	str	r3, [r0, #100]	; 0x64
 80053f8:	81c2      	strh	r2, [r0, #14]
 80053fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053fe:	6183      	str	r3, [r0, #24]
 8005400:	4619      	mov	r1, r3
 8005402:	2208      	movs	r2, #8
 8005404:	305c      	adds	r0, #92	; 0x5c
 8005406:	f000 f8e8 	bl	80055da <memset>
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <std+0x38>)
 800540c:	6263      	str	r3, [r4, #36]	; 0x24
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <std+0x3c>)
 8005410:	62a3      	str	r3, [r4, #40]	; 0x28
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <std+0x40>)
 8005414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <std+0x44>)
 8005418:	6224      	str	r4, [r4, #32]
 800541a:	6323      	str	r3, [r4, #48]	; 0x30
 800541c:	bd10      	pop	{r4, pc}
 800541e:	bf00      	nop
 8005420:	0800585d 	.word	0x0800585d
 8005424:	0800587f 	.word	0x0800587f
 8005428:	080058b7 	.word	0x080058b7
 800542c:	080058db 	.word	0x080058db

08005430 <_cleanup_r>:
 8005430:	4901      	ldr	r1, [pc, #4]	; (8005438 <_cleanup_r+0x8>)
 8005432:	f000 b885 	b.w	8005540 <_fwalk_reent>
 8005436:	bf00      	nop
 8005438:	08005bb5 	.word	0x08005bb5

0800543c <__sfmoreglue>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	1e4a      	subs	r2, r1, #1
 8005440:	2568      	movs	r5, #104	; 0x68
 8005442:	4355      	muls	r5, r2
 8005444:	460e      	mov	r6, r1
 8005446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800544a:	f000 f8cf 	bl	80055ec <_malloc_r>
 800544e:	4604      	mov	r4, r0
 8005450:	b140      	cbz	r0, 8005464 <__sfmoreglue+0x28>
 8005452:	2100      	movs	r1, #0
 8005454:	e9c0 1600 	strd	r1, r6, [r0]
 8005458:	300c      	adds	r0, #12
 800545a:	60a0      	str	r0, [r4, #8]
 800545c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005460:	f000 f8bb 	bl	80055da <memset>
 8005464:	4620      	mov	r0, r4
 8005466:	bd70      	pop	{r4, r5, r6, pc}

08005468 <__sinit>:
 8005468:	6983      	ldr	r3, [r0, #24]
 800546a:	b510      	push	{r4, lr}
 800546c:	4604      	mov	r4, r0
 800546e:	bb33      	cbnz	r3, 80054be <__sinit+0x56>
 8005470:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005474:	6503      	str	r3, [r0, #80]	; 0x50
 8005476:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <__sinit+0x58>)
 8005478:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <__sinit+0x5c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6282      	str	r2, [r0, #40]	; 0x28
 800547e:	4298      	cmp	r0, r3
 8005480:	bf04      	itt	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	6183      	streq	r3, [r0, #24]
 8005486:	f000 f81f 	bl	80054c8 <__sfp>
 800548a:	6060      	str	r0, [r4, #4]
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f81b 	bl	80054c8 <__sfp>
 8005492:	60a0      	str	r0, [r4, #8]
 8005494:	4620      	mov	r0, r4
 8005496:	f000 f817 	bl	80054c8 <__sfp>
 800549a:	2200      	movs	r2, #0
 800549c:	60e0      	str	r0, [r4, #12]
 800549e:	2104      	movs	r1, #4
 80054a0:	6860      	ldr	r0, [r4, #4]
 80054a2:	f7ff ffa1 	bl	80053e8 <std>
 80054a6:	2201      	movs	r2, #1
 80054a8:	2109      	movs	r1, #9
 80054aa:	68a0      	ldr	r0, [r4, #8]
 80054ac:	f7ff ff9c 	bl	80053e8 <std>
 80054b0:	2202      	movs	r2, #2
 80054b2:	2112      	movs	r1, #18
 80054b4:	68e0      	ldr	r0, [r4, #12]
 80054b6:	f7ff ff97 	bl	80053e8 <std>
 80054ba:	2301      	movs	r3, #1
 80054bc:	61a3      	str	r3, [r4, #24]
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	08005f14 	.word	0x08005f14
 80054c4:	08005431 	.word	0x08005431

080054c8 <__sfp>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <__sfp+0x70>)
 80054cc:	681e      	ldr	r6, [r3, #0]
 80054ce:	69b3      	ldr	r3, [r6, #24]
 80054d0:	4607      	mov	r7, r0
 80054d2:	b913      	cbnz	r3, 80054da <__sfp+0x12>
 80054d4:	4630      	mov	r0, r6
 80054d6:	f7ff ffc7 	bl	8005468 <__sinit>
 80054da:	3648      	adds	r6, #72	; 0x48
 80054dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	d503      	bpl.n	80054ec <__sfp+0x24>
 80054e4:	6833      	ldr	r3, [r6, #0]
 80054e6:	b133      	cbz	r3, 80054f6 <__sfp+0x2e>
 80054e8:	6836      	ldr	r6, [r6, #0]
 80054ea:	e7f7      	b.n	80054dc <__sfp+0x14>
 80054ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054f0:	b16d      	cbz	r5, 800550e <__sfp+0x46>
 80054f2:	3468      	adds	r4, #104	; 0x68
 80054f4:	e7f4      	b.n	80054e0 <__sfp+0x18>
 80054f6:	2104      	movs	r1, #4
 80054f8:	4638      	mov	r0, r7
 80054fa:	f7ff ff9f 	bl	800543c <__sfmoreglue>
 80054fe:	6030      	str	r0, [r6, #0]
 8005500:	2800      	cmp	r0, #0
 8005502:	d1f1      	bne.n	80054e8 <__sfp+0x20>
 8005504:	230c      	movs	r3, #12
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4604      	mov	r4, r0
 800550a:	4620      	mov	r0, r4
 800550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <__sfp+0x74>)
 8005510:	6665      	str	r5, [r4, #100]	; 0x64
 8005512:	e9c4 5500 	strd	r5, r5, [r4]
 8005516:	60a5      	str	r5, [r4, #8]
 8005518:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800551c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005520:	2208      	movs	r2, #8
 8005522:	4629      	mov	r1, r5
 8005524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005528:	f000 f857 	bl	80055da <memset>
 800552c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005534:	e7e9      	b.n	800550a <__sfp+0x42>
 8005536:	bf00      	nop
 8005538:	08005f14 	.word	0x08005f14
 800553c:	ffff0001 	.word	0xffff0001

08005540 <_fwalk_reent>:
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005544:	4680      	mov	r8, r0
 8005546:	4689      	mov	r9, r1
 8005548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800554c:	2600      	movs	r6, #0
 800554e:	b914      	cbnz	r4, 8005556 <_fwalk_reent+0x16>
 8005550:	4630      	mov	r0, r6
 8005552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005556:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800555a:	3f01      	subs	r7, #1
 800555c:	d501      	bpl.n	8005562 <_fwalk_reent+0x22>
 800555e:	6824      	ldr	r4, [r4, #0]
 8005560:	e7f5      	b.n	800554e <_fwalk_reent+0xe>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d907      	bls.n	8005578 <_fwalk_reent+0x38>
 8005568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800556c:	3301      	adds	r3, #1
 800556e:	d003      	beq.n	8005578 <_fwalk_reent+0x38>
 8005570:	4629      	mov	r1, r5
 8005572:	4640      	mov	r0, r8
 8005574:	47c8      	blx	r9
 8005576:	4306      	orrs	r6, r0
 8005578:	3568      	adds	r5, #104	; 0x68
 800557a:	e7ee      	b.n	800555a <_fwalk_reent+0x1a>

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4e0d      	ldr	r6, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1ba4      	subs	r4, r4, r6
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2500      	movs	r5, #0
 8005588:	42a5      	cmp	r5, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4e0b      	ldr	r6, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 fc34 	bl	8005dfc <_init>
 8005594:	1ba4      	subs	r4, r4, r6
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2500      	movs	r5, #0
 800559a:	42a5      	cmp	r5, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055a4:	4798      	blx	r3
 80055a6:	3501      	adds	r5, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ae:	4798      	blx	r3
 80055b0:	3501      	adds	r5, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08005f20 	.word	0x08005f20
 80055b8:	08005f20 	.word	0x08005f20
 80055bc:	08005f20 	.word	0x08005f20
 80055c0:	08005f24 	.word	0x08005f24

080055c4 <memcpy>:
 80055c4:	b510      	push	{r4, lr}
 80055c6:	1e43      	subs	r3, r0, #1
 80055c8:	440a      	add	r2, r1
 80055ca:	4291      	cmp	r1, r2
 80055cc:	d100      	bne.n	80055d0 <memcpy+0xc>
 80055ce:	bd10      	pop	{r4, pc}
 80055d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d8:	e7f7      	b.n	80055ca <memcpy+0x6>

080055da <memset>:
 80055da:	4402      	add	r2, r0
 80055dc:	4603      	mov	r3, r0
 80055de:	4293      	cmp	r3, r2
 80055e0:	d100      	bne.n	80055e4 <memset+0xa>
 80055e2:	4770      	bx	lr
 80055e4:	f803 1b01 	strb.w	r1, [r3], #1
 80055e8:	e7f9      	b.n	80055de <memset+0x4>
	...

080055ec <_malloc_r>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	1ccd      	adds	r5, r1, #3
 80055f0:	f025 0503 	bic.w	r5, r5, #3
 80055f4:	3508      	adds	r5, #8
 80055f6:	2d0c      	cmp	r5, #12
 80055f8:	bf38      	it	cc
 80055fa:	250c      	movcc	r5, #12
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	4606      	mov	r6, r0
 8005600:	db01      	blt.n	8005606 <_malloc_r+0x1a>
 8005602:	42a9      	cmp	r1, r5
 8005604:	d903      	bls.n	800560e <_malloc_r+0x22>
 8005606:	230c      	movs	r3, #12
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	2000      	movs	r0, #0
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	f000 fb71 	bl	8005cf4 <__malloc_lock>
 8005612:	4a21      	ldr	r2, [pc, #132]	; (8005698 <_malloc_r+0xac>)
 8005614:	6814      	ldr	r4, [r2, #0]
 8005616:	4621      	mov	r1, r4
 8005618:	b991      	cbnz	r1, 8005640 <_malloc_r+0x54>
 800561a:	4c20      	ldr	r4, [pc, #128]	; (800569c <_malloc_r+0xb0>)
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	b91b      	cbnz	r3, 8005628 <_malloc_r+0x3c>
 8005620:	4630      	mov	r0, r6
 8005622:	f000 f90b 	bl	800583c <_sbrk_r>
 8005626:	6020      	str	r0, [r4, #0]
 8005628:	4629      	mov	r1, r5
 800562a:	4630      	mov	r0, r6
 800562c:	f000 f906 	bl	800583c <_sbrk_r>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d124      	bne.n	800567e <_malloc_r+0x92>
 8005634:	230c      	movs	r3, #12
 8005636:	6033      	str	r3, [r6, #0]
 8005638:	4630      	mov	r0, r6
 800563a:	f000 fb5c 	bl	8005cf6 <__malloc_unlock>
 800563e:	e7e4      	b.n	800560a <_malloc_r+0x1e>
 8005640:	680b      	ldr	r3, [r1, #0]
 8005642:	1b5b      	subs	r3, r3, r5
 8005644:	d418      	bmi.n	8005678 <_malloc_r+0x8c>
 8005646:	2b0b      	cmp	r3, #11
 8005648:	d90f      	bls.n	800566a <_malloc_r+0x7e>
 800564a:	600b      	str	r3, [r1, #0]
 800564c:	50cd      	str	r5, [r1, r3]
 800564e:	18cc      	adds	r4, r1, r3
 8005650:	4630      	mov	r0, r6
 8005652:	f000 fb50 	bl	8005cf6 <__malloc_unlock>
 8005656:	f104 000b 	add.w	r0, r4, #11
 800565a:	1d23      	adds	r3, r4, #4
 800565c:	f020 0007 	bic.w	r0, r0, #7
 8005660:	1ac3      	subs	r3, r0, r3
 8005662:	d0d3      	beq.n	800560c <_malloc_r+0x20>
 8005664:	425a      	negs	r2, r3
 8005666:	50e2      	str	r2, [r4, r3]
 8005668:	e7d0      	b.n	800560c <_malloc_r+0x20>
 800566a:	428c      	cmp	r4, r1
 800566c:	684b      	ldr	r3, [r1, #4]
 800566e:	bf16      	itet	ne
 8005670:	6063      	strne	r3, [r4, #4]
 8005672:	6013      	streq	r3, [r2, #0]
 8005674:	460c      	movne	r4, r1
 8005676:	e7eb      	b.n	8005650 <_malloc_r+0x64>
 8005678:	460c      	mov	r4, r1
 800567a:	6849      	ldr	r1, [r1, #4]
 800567c:	e7cc      	b.n	8005618 <_malloc_r+0x2c>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d005      	beq.n	8005694 <_malloc_r+0xa8>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4630      	mov	r0, r6
 800568c:	f000 f8d6 	bl	800583c <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d0cf      	beq.n	8005634 <_malloc_r+0x48>
 8005694:	6025      	str	r5, [r4, #0]
 8005696:	e7db      	b.n	8005650 <_malloc_r+0x64>
 8005698:	20004a5c 	.word	0x20004a5c
 800569c:	20004a60 	.word	0x20004a60

080056a0 <_puts_r>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	460e      	mov	r6, r1
 80056a4:	4605      	mov	r5, r0
 80056a6:	b118      	cbz	r0, 80056b0 <_puts_r+0x10>
 80056a8:	6983      	ldr	r3, [r0, #24]
 80056aa:	b90b      	cbnz	r3, 80056b0 <_puts_r+0x10>
 80056ac:	f7ff fedc 	bl	8005468 <__sinit>
 80056b0:	69ab      	ldr	r3, [r5, #24]
 80056b2:	68ac      	ldr	r4, [r5, #8]
 80056b4:	b913      	cbnz	r3, 80056bc <_puts_r+0x1c>
 80056b6:	4628      	mov	r0, r5
 80056b8:	f7ff fed6 	bl	8005468 <__sinit>
 80056bc:	4b23      	ldr	r3, [pc, #140]	; (800574c <_puts_r+0xac>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d117      	bne.n	80056f2 <_puts_r+0x52>
 80056c2:	686c      	ldr	r4, [r5, #4]
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	071b      	lsls	r3, r3, #28
 80056c8:	d51d      	bpl.n	8005706 <_puts_r+0x66>
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	b1db      	cbz	r3, 8005706 <_puts_r+0x66>
 80056ce:	3e01      	subs	r6, #1
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60a3      	str	r3, [r4, #8]
 80056da:	b9e9      	cbnz	r1, 8005718 <_puts_r+0x78>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	da2e      	bge.n	800573e <_puts_r+0x9e>
 80056e0:	4622      	mov	r2, r4
 80056e2:	210a      	movs	r1, #10
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 f8fd 	bl	80058e4 <__swbuf_r>
 80056ea:	3001      	adds	r0, #1
 80056ec:	d011      	beq.n	8005712 <_puts_r+0x72>
 80056ee:	200a      	movs	r0, #10
 80056f0:	e011      	b.n	8005716 <_puts_r+0x76>
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <_puts_r+0xb0>)
 80056f4:	429c      	cmp	r4, r3
 80056f6:	d101      	bne.n	80056fc <_puts_r+0x5c>
 80056f8:	68ac      	ldr	r4, [r5, #8]
 80056fa:	e7e3      	b.n	80056c4 <_puts_r+0x24>
 80056fc:	4b15      	ldr	r3, [pc, #84]	; (8005754 <_puts_r+0xb4>)
 80056fe:	429c      	cmp	r4, r3
 8005700:	bf08      	it	eq
 8005702:	68ec      	ldreq	r4, [r5, #12]
 8005704:	e7de      	b.n	80056c4 <_puts_r+0x24>
 8005706:	4621      	mov	r1, r4
 8005708:	4628      	mov	r0, r5
 800570a:	f000 f94f 	bl	80059ac <__swsetup_r>
 800570e:	2800      	cmp	r0, #0
 8005710:	d0dd      	beq.n	80056ce <_puts_r+0x2e>
 8005712:	f04f 30ff 	mov.w	r0, #4294967295
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	2b00      	cmp	r3, #0
 800571a:	da04      	bge.n	8005726 <_puts_r+0x86>
 800571c:	69a2      	ldr	r2, [r4, #24]
 800571e:	429a      	cmp	r2, r3
 8005720:	dc06      	bgt.n	8005730 <_puts_r+0x90>
 8005722:	290a      	cmp	r1, #10
 8005724:	d004      	beq.n	8005730 <_puts_r+0x90>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	7019      	strb	r1, [r3, #0]
 800572e:	e7cf      	b.n	80056d0 <_puts_r+0x30>
 8005730:	4622      	mov	r2, r4
 8005732:	4628      	mov	r0, r5
 8005734:	f000 f8d6 	bl	80058e4 <__swbuf_r>
 8005738:	3001      	adds	r0, #1
 800573a:	d1c9      	bne.n	80056d0 <_puts_r+0x30>
 800573c:	e7e9      	b.n	8005712 <_puts_r+0x72>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	200a      	movs	r0, #10
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	6022      	str	r2, [r4, #0]
 8005746:	7018      	strb	r0, [r3, #0]
 8005748:	e7e5      	b.n	8005716 <_puts_r+0x76>
 800574a:	bf00      	nop
 800574c:	08005ed4 	.word	0x08005ed4
 8005750:	08005ef4 	.word	0x08005ef4
 8005754:	08005eb4 	.word	0x08005eb4

08005758 <puts>:
 8005758:	4b02      	ldr	r3, [pc, #8]	; (8005764 <puts+0xc>)
 800575a:	4601      	mov	r1, r0
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f7ff bf9f 	b.w	80056a0 <_puts_r>
 8005762:	bf00      	nop
 8005764:	20000010 	.word	0x20000010

08005768 <cleanup_glue>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	6809      	ldr	r1, [r1, #0]
 800576e:	4605      	mov	r5, r0
 8005770:	b109      	cbz	r1, 8005776 <cleanup_glue+0xe>
 8005772:	f7ff fff9 	bl	8005768 <cleanup_glue>
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800577e:	f000 babb 	b.w	8005cf8 <_free_r>
	...

08005784 <_reclaim_reent>:
 8005784:	4b2c      	ldr	r3, [pc, #176]	; (8005838 <_reclaim_reent+0xb4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4283      	cmp	r3, r0
 800578a:	b570      	push	{r4, r5, r6, lr}
 800578c:	4604      	mov	r4, r0
 800578e:	d051      	beq.n	8005834 <_reclaim_reent+0xb0>
 8005790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005792:	b143      	cbz	r3, 80057a6 <_reclaim_reent+0x22>
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d14a      	bne.n	8005830 <_reclaim_reent+0xac>
 800579a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	b111      	cbz	r1, 80057a6 <_reclaim_reent+0x22>
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 faa9 	bl	8005cf8 <_free_r>
 80057a6:	6961      	ldr	r1, [r4, #20]
 80057a8:	b111      	cbz	r1, 80057b0 <_reclaim_reent+0x2c>
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 faa4 	bl	8005cf8 <_free_r>
 80057b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057b2:	b111      	cbz	r1, 80057ba <_reclaim_reent+0x36>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 fa9f 	bl	8005cf8 <_free_r>
 80057ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057bc:	b111      	cbz	r1, 80057c4 <_reclaim_reent+0x40>
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 fa9a 	bl	8005cf8 <_free_r>
 80057c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80057c6:	b111      	cbz	r1, 80057ce <_reclaim_reent+0x4a>
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fa95 	bl	8005cf8 <_free_r>
 80057ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80057d0:	b111      	cbz	r1, 80057d8 <_reclaim_reent+0x54>
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fa90 	bl	8005cf8 <_free_r>
 80057d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80057da:	b111      	cbz	r1, 80057e2 <_reclaim_reent+0x5e>
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 fa8b 	bl	8005cf8 <_free_r>
 80057e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80057e4:	b111      	cbz	r1, 80057ec <_reclaim_reent+0x68>
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 fa86 	bl	8005cf8 <_free_r>
 80057ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ee:	b111      	cbz	r1, 80057f6 <_reclaim_reent+0x72>
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 fa81 	bl	8005cf8 <_free_r>
 80057f6:	69a3      	ldr	r3, [r4, #24]
 80057f8:	b1e3      	cbz	r3, 8005834 <_reclaim_reent+0xb0>
 80057fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057fc:	4620      	mov	r0, r4
 80057fe:	4798      	blx	r3
 8005800:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005802:	b1b9      	cbz	r1, 8005834 <_reclaim_reent+0xb0>
 8005804:	4620      	mov	r0, r4
 8005806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800580a:	f7ff bfad 	b.w	8005768 <cleanup_glue>
 800580e:	5949      	ldr	r1, [r1, r5]
 8005810:	b941      	cbnz	r1, 8005824 <_reclaim_reent+0xa0>
 8005812:	3504      	adds	r5, #4
 8005814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005816:	2d80      	cmp	r5, #128	; 0x80
 8005818:	68d9      	ldr	r1, [r3, #12]
 800581a:	d1f8      	bne.n	800580e <_reclaim_reent+0x8a>
 800581c:	4620      	mov	r0, r4
 800581e:	f000 fa6b 	bl	8005cf8 <_free_r>
 8005822:	e7ba      	b.n	800579a <_reclaim_reent+0x16>
 8005824:	680e      	ldr	r6, [r1, #0]
 8005826:	4620      	mov	r0, r4
 8005828:	f000 fa66 	bl	8005cf8 <_free_r>
 800582c:	4631      	mov	r1, r6
 800582e:	e7ef      	b.n	8005810 <_reclaim_reent+0x8c>
 8005830:	2500      	movs	r5, #0
 8005832:	e7ef      	b.n	8005814 <_reclaim_reent+0x90>
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	bf00      	nop
 8005838:	20000010 	.word	0x20000010

0800583c <_sbrk_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4c06      	ldr	r4, [pc, #24]	; (8005858 <_sbrk_r+0x1c>)
 8005840:	2300      	movs	r3, #0
 8005842:	4605      	mov	r5, r0
 8005844:	4608      	mov	r0, r1
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	f7fb f940 	bl	8000acc <_sbrk>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_sbrk_r+0x1a>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	b103      	cbz	r3, 8005856 <_sbrk_r+0x1a>
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20004b38 	.word	0x20004b38

0800585c <__sread>:
 800585c:	b510      	push	{r4, lr}
 800585e:	460c      	mov	r4, r1
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 fa96 	bl	8005d94 <_read_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	bfab      	itete	ge
 800586c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800586e:	89a3      	ldrhlt	r3, [r4, #12]
 8005870:	181b      	addge	r3, r3, r0
 8005872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005876:	bfac      	ite	ge
 8005878:	6563      	strge	r3, [r4, #84]	; 0x54
 800587a:	81a3      	strhlt	r3, [r4, #12]
 800587c:	bd10      	pop	{r4, pc}

0800587e <__swrite>:
 800587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005882:	461f      	mov	r7, r3
 8005884:	898b      	ldrh	r3, [r1, #12]
 8005886:	05db      	lsls	r3, r3, #23
 8005888:	4605      	mov	r5, r0
 800588a:	460c      	mov	r4, r1
 800588c:	4616      	mov	r6, r2
 800588e:	d505      	bpl.n	800589c <__swrite+0x1e>
 8005890:	2302      	movs	r3, #2
 8005892:	2200      	movs	r2, #0
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	f000 f9b6 	bl	8005c08 <_lseek_r>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a6:	81a3      	strh	r3, [r4, #12]
 80058a8:	4632      	mov	r2, r6
 80058aa:	463b      	mov	r3, r7
 80058ac:	4628      	mov	r0, r5
 80058ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	f000 b869 	b.w	8005988 <_write_r>

080058b6 <__sseek>:
 80058b6:	b510      	push	{r4, lr}
 80058b8:	460c      	mov	r4, r1
 80058ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058be:	f000 f9a3 	bl	8005c08 <_lseek_r>
 80058c2:	1c43      	adds	r3, r0, #1
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	bf15      	itete	ne
 80058c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058d2:	81a3      	strheq	r3, [r4, #12]
 80058d4:	bf18      	it	ne
 80058d6:	81a3      	strhne	r3, [r4, #12]
 80058d8:	bd10      	pop	{r4, pc}

080058da <__sclose>:
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 b8d3 	b.w	8005a88 <_close_r>
	...

080058e4 <__swbuf_r>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	460e      	mov	r6, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	4605      	mov	r5, r0
 80058ec:	b118      	cbz	r0, 80058f6 <__swbuf_r+0x12>
 80058ee:	6983      	ldr	r3, [r0, #24]
 80058f0:	b90b      	cbnz	r3, 80058f6 <__swbuf_r+0x12>
 80058f2:	f7ff fdb9 	bl	8005468 <__sinit>
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <__swbuf_r+0x98>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d12a      	bne.n	8005952 <__swbuf_r+0x6e>
 80058fc:	686c      	ldr	r4, [r5, #4]
 80058fe:	69a3      	ldr	r3, [r4, #24]
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	071a      	lsls	r2, r3, #28
 8005906:	d52e      	bpl.n	8005966 <__swbuf_r+0x82>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b363      	cbz	r3, 8005966 <__swbuf_r+0x82>
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1ac0      	subs	r0, r0, r3
 8005912:	6963      	ldr	r3, [r4, #20]
 8005914:	b2f6      	uxtb	r6, r6
 8005916:	4283      	cmp	r3, r0
 8005918:	4637      	mov	r7, r6
 800591a:	dc04      	bgt.n	8005926 <__swbuf_r+0x42>
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f000 f948 	bl	8005bb4 <_fflush_r>
 8005924:	bb28      	cbnz	r0, 8005972 <__swbuf_r+0x8e>
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	3b01      	subs	r3, #1
 800592a:	60a3      	str	r3, [r4, #8]
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	6022      	str	r2, [r4, #0]
 8005932:	701e      	strb	r6, [r3, #0]
 8005934:	6963      	ldr	r3, [r4, #20]
 8005936:	3001      	adds	r0, #1
 8005938:	4283      	cmp	r3, r0
 800593a:	d004      	beq.n	8005946 <__swbuf_r+0x62>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	07db      	lsls	r3, r3, #31
 8005940:	d519      	bpl.n	8005976 <__swbuf_r+0x92>
 8005942:	2e0a      	cmp	r6, #10
 8005944:	d117      	bne.n	8005976 <__swbuf_r+0x92>
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f933 	bl	8005bb4 <_fflush_r>
 800594e:	b190      	cbz	r0, 8005976 <__swbuf_r+0x92>
 8005950:	e00f      	b.n	8005972 <__swbuf_r+0x8e>
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <__swbuf_r+0x9c>)
 8005954:	429c      	cmp	r4, r3
 8005956:	d101      	bne.n	800595c <__swbuf_r+0x78>
 8005958:	68ac      	ldr	r4, [r5, #8]
 800595a:	e7d0      	b.n	80058fe <__swbuf_r+0x1a>
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <__swbuf_r+0xa0>)
 800595e:	429c      	cmp	r4, r3
 8005960:	bf08      	it	eq
 8005962:	68ec      	ldreq	r4, [r5, #12]
 8005964:	e7cb      	b.n	80058fe <__swbuf_r+0x1a>
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f81f 	bl	80059ac <__swsetup_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0cc      	beq.n	800590c <__swbuf_r+0x28>
 8005972:	f04f 37ff 	mov.w	r7, #4294967295
 8005976:	4638      	mov	r0, r7
 8005978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597a:	bf00      	nop
 800597c:	08005ed4 	.word	0x08005ed4
 8005980:	08005ef4 	.word	0x08005ef4
 8005984:	08005eb4 	.word	0x08005eb4

08005988 <_write_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4c07      	ldr	r4, [pc, #28]	; (80059a8 <_write_r+0x20>)
 800598c:	4605      	mov	r5, r0
 800598e:	4608      	mov	r0, r1
 8005990:	4611      	mov	r1, r2
 8005992:	2200      	movs	r2, #0
 8005994:	6022      	str	r2, [r4, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	f7fb f847 	bl	8000a2a <_write>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_write_r+0x1e>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_write_r+0x1e>
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20004b38 	.word	0x20004b38

080059ac <__swsetup_r>:
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <__swsetup_r+0xcc>)
 80059ae:	b570      	push	{r4, r5, r6, lr}
 80059b0:	681d      	ldr	r5, [r3, #0]
 80059b2:	4606      	mov	r6, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	b125      	cbz	r5, 80059c2 <__swsetup_r+0x16>
 80059b8:	69ab      	ldr	r3, [r5, #24]
 80059ba:	b913      	cbnz	r3, 80059c2 <__swsetup_r+0x16>
 80059bc:	4628      	mov	r0, r5
 80059be:	f7ff fd53 	bl	8005468 <__sinit>
 80059c2:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <__swsetup_r+0xd0>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d10f      	bne.n	80059e8 <__swsetup_r+0x3c>
 80059c8:	686c      	ldr	r4, [r5, #4]
 80059ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	0715      	lsls	r5, r2, #28
 80059d2:	d42c      	bmi.n	8005a2e <__swsetup_r+0x82>
 80059d4:	06d0      	lsls	r0, r2, #27
 80059d6:	d411      	bmi.n	80059fc <__swsetup_r+0x50>
 80059d8:	2209      	movs	r2, #9
 80059da:	6032      	str	r2, [r6, #0]
 80059dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	f04f 30ff 	mov.w	r0, #4294967295
 80059e6:	e03e      	b.n	8005a66 <__swsetup_r+0xba>
 80059e8:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <__swsetup_r+0xd4>)
 80059ea:	429c      	cmp	r4, r3
 80059ec:	d101      	bne.n	80059f2 <__swsetup_r+0x46>
 80059ee:	68ac      	ldr	r4, [r5, #8]
 80059f0:	e7eb      	b.n	80059ca <__swsetup_r+0x1e>
 80059f2:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <__swsetup_r+0xd8>)
 80059f4:	429c      	cmp	r4, r3
 80059f6:	bf08      	it	eq
 80059f8:	68ec      	ldreq	r4, [r5, #12]
 80059fa:	e7e6      	b.n	80059ca <__swsetup_r+0x1e>
 80059fc:	0751      	lsls	r1, r2, #29
 80059fe:	d512      	bpl.n	8005a26 <__swsetup_r+0x7a>
 8005a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a02:	b141      	cbz	r1, 8005a16 <__swsetup_r+0x6a>
 8005a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a08:	4299      	cmp	r1, r3
 8005a0a:	d002      	beq.n	8005a12 <__swsetup_r+0x66>
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f000 f973 	bl	8005cf8 <_free_r>
 8005a12:	2300      	movs	r3, #0
 8005a14:	6363      	str	r3, [r4, #52]	; 0x34
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a1c:	81a3      	strh	r3, [r4, #12]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6063      	str	r3, [r4, #4]
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f043 0308 	orr.w	r3, r3, #8
 8005a2c:	81a3      	strh	r3, [r4, #12]
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	b94b      	cbnz	r3, 8005a46 <__swsetup_r+0x9a>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3c:	d003      	beq.n	8005a46 <__swsetup_r+0x9a>
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4630      	mov	r0, r6
 8005a42:	f000 f917 	bl	8005c74 <__smakebuf_r>
 8005a46:	89a2      	ldrh	r2, [r4, #12]
 8005a48:	f012 0301 	ands.w	r3, r2, #1
 8005a4c:	d00c      	beq.n	8005a68 <__swsetup_r+0xbc>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	6963      	ldr	r3, [r4, #20]
 8005a54:	425b      	negs	r3, r3
 8005a56:	61a3      	str	r3, [r4, #24]
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	b953      	cbnz	r3, 8005a72 <__swsetup_r+0xc6>
 8005a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a64:	d1ba      	bne.n	80059dc <__swsetup_r+0x30>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	0792      	lsls	r2, r2, #30
 8005a6a:	bf58      	it	pl
 8005a6c:	6963      	ldrpl	r3, [r4, #20]
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	e7f2      	b.n	8005a58 <__swsetup_r+0xac>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e7f7      	b.n	8005a66 <__swsetup_r+0xba>
 8005a76:	bf00      	nop
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	08005ed4 	.word	0x08005ed4
 8005a80:	08005ef4 	.word	0x08005ef4
 8005a84:	08005eb4 	.word	0x08005eb4

08005a88 <_close_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4c06      	ldr	r4, [pc, #24]	; (8005aa4 <_close_r+0x1c>)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4605      	mov	r5, r0
 8005a90:	4608      	mov	r0, r1
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	f7fa ffe5 	bl	8000a62 <_close>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_close_r+0x1a>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_close_r+0x1a>
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	20004b38 	.word	0x20004b38

08005aa8 <__sflush_r>:
 8005aa8:	898a      	ldrh	r2, [r1, #12]
 8005aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	4605      	mov	r5, r0
 8005ab0:	0710      	lsls	r0, r2, #28
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	d458      	bmi.n	8005b68 <__sflush_r+0xc0>
 8005ab6:	684b      	ldr	r3, [r1, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	dc05      	bgt.n	8005ac8 <__sflush_r+0x20>
 8005abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dc02      	bgt.n	8005ac8 <__sflush_r+0x20>
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	d0f9      	beq.n	8005ac2 <__sflush_r+0x1a>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ad4:	682f      	ldr	r7, [r5, #0]
 8005ad6:	6a21      	ldr	r1, [r4, #32]
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	d032      	beq.n	8005b42 <__sflush_r+0x9a>
 8005adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	075a      	lsls	r2, r3, #29
 8005ae2:	d505      	bpl.n	8005af0 <__sflush_r+0x48>
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	1ac0      	subs	r0, r0, r3
 8005ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aea:	b10b      	cbz	r3, 8005af0 <__sflush_r+0x48>
 8005aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aee:	1ac0      	subs	r0, r0, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	4602      	mov	r2, r0
 8005af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005af6:	6a21      	ldr	r1, [r4, #32]
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b0      	blx	r6
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	d106      	bne.n	8005b10 <__sflush_r+0x68>
 8005b02:	6829      	ldr	r1, [r5, #0]
 8005b04:	291d      	cmp	r1, #29
 8005b06:	d848      	bhi.n	8005b9a <__sflush_r+0xf2>
 8005b08:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <__sflush_r+0x108>)
 8005b0a:	40ca      	lsrs	r2, r1
 8005b0c:	07d6      	lsls	r6, r2, #31
 8005b0e:	d544      	bpl.n	8005b9a <__sflush_r+0xf2>
 8005b10:	2200      	movs	r2, #0
 8005b12:	6062      	str	r2, [r4, #4]
 8005b14:	04d9      	lsls	r1, r3, #19
 8005b16:	6922      	ldr	r2, [r4, #16]
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	d504      	bpl.n	8005b26 <__sflush_r+0x7e>
 8005b1c:	1c42      	adds	r2, r0, #1
 8005b1e:	d101      	bne.n	8005b24 <__sflush_r+0x7c>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b903      	cbnz	r3, 8005b26 <__sflush_r+0x7e>
 8005b24:	6560      	str	r0, [r4, #84]	; 0x54
 8005b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b28:	602f      	str	r7, [r5, #0]
 8005b2a:	2900      	cmp	r1, #0
 8005b2c:	d0c9      	beq.n	8005ac2 <__sflush_r+0x1a>
 8005b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b32:	4299      	cmp	r1, r3
 8005b34:	d002      	beq.n	8005b3c <__sflush_r+0x94>
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 f8de 	bl	8005cf8 <_free_r>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8005b40:	e7c0      	b.n	8005ac4 <__sflush_r+0x1c>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b0      	blx	r6
 8005b48:	1c41      	adds	r1, r0, #1
 8005b4a:	d1c8      	bne.n	8005ade <__sflush_r+0x36>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0c5      	beq.n	8005ade <__sflush_r+0x36>
 8005b52:	2b1d      	cmp	r3, #29
 8005b54:	d001      	beq.n	8005b5a <__sflush_r+0xb2>
 8005b56:	2b16      	cmp	r3, #22
 8005b58:	d101      	bne.n	8005b5e <__sflush_r+0xb6>
 8005b5a:	602f      	str	r7, [r5, #0]
 8005b5c:	e7b1      	b.n	8005ac2 <__sflush_r+0x1a>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	e7ad      	b.n	8005ac4 <__sflush_r+0x1c>
 8005b68:	690f      	ldr	r7, [r1, #16]
 8005b6a:	2f00      	cmp	r7, #0
 8005b6c:	d0a9      	beq.n	8005ac2 <__sflush_r+0x1a>
 8005b6e:	0793      	lsls	r3, r2, #30
 8005b70:	680e      	ldr	r6, [r1, #0]
 8005b72:	bf08      	it	eq
 8005b74:	694b      	ldreq	r3, [r1, #20]
 8005b76:	600f      	str	r7, [r1, #0]
 8005b78:	bf18      	it	ne
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	eba6 0807 	sub.w	r8, r6, r7
 8005b80:	608b      	str	r3, [r1, #8]
 8005b82:	f1b8 0f00 	cmp.w	r8, #0
 8005b86:	dd9c      	ble.n	8005ac2 <__sflush_r+0x1a>
 8005b88:	4643      	mov	r3, r8
 8005b8a:	463a      	mov	r2, r7
 8005b8c:	6a21      	ldr	r1, [r4, #32]
 8005b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b0      	blx	r6
 8005b94:	2800      	cmp	r0, #0
 8005b96:	dc06      	bgt.n	8005ba6 <__sflush_r+0xfe>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	e78e      	b.n	8005ac4 <__sflush_r+0x1c>
 8005ba6:	4407      	add	r7, r0
 8005ba8:	eba8 0800 	sub.w	r8, r8, r0
 8005bac:	e7e9      	b.n	8005b82 <__sflush_r+0xda>
 8005bae:	bf00      	nop
 8005bb0:	20400001 	.word	0x20400001

08005bb4 <_fflush_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	690b      	ldr	r3, [r1, #16]
 8005bb8:	4605      	mov	r5, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	b1db      	cbz	r3, 8005bf6 <_fflush_r+0x42>
 8005bbe:	b118      	cbz	r0, 8005bc8 <_fflush_r+0x14>
 8005bc0:	6983      	ldr	r3, [r0, #24]
 8005bc2:	b90b      	cbnz	r3, 8005bc8 <_fflush_r+0x14>
 8005bc4:	f7ff fc50 	bl	8005468 <__sinit>
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <_fflush_r+0x48>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d109      	bne.n	8005be2 <_fflush_r+0x2e>
 8005bce:	686c      	ldr	r4, [r5, #4]
 8005bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd4:	b17b      	cbz	r3, 8005bf6 <_fflush_r+0x42>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bde:	f7ff bf63 	b.w	8005aa8 <__sflush_r>
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <_fflush_r+0x4c>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d101      	bne.n	8005bec <_fflush_r+0x38>
 8005be8:	68ac      	ldr	r4, [r5, #8]
 8005bea:	e7f1      	b.n	8005bd0 <_fflush_r+0x1c>
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <_fflush_r+0x50>)
 8005bee:	429c      	cmp	r4, r3
 8005bf0:	bf08      	it	eq
 8005bf2:	68ec      	ldreq	r4, [r5, #12]
 8005bf4:	e7ec      	b.n	8005bd0 <_fflush_r+0x1c>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	bd38      	pop	{r3, r4, r5, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08005ed4 	.word	0x08005ed4
 8005c00:	08005ef4 	.word	0x08005ef4
 8005c04:	08005eb4 	.word	0x08005eb4

08005c08 <_lseek_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4c07      	ldr	r4, [pc, #28]	; (8005c28 <_lseek_r+0x20>)
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	4608      	mov	r0, r1
 8005c10:	4611      	mov	r1, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fa ff4a 	bl	8000ab0 <_lseek>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_lseek_r+0x1e>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_lseek_r+0x1e>
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	20004b38 	.word	0x20004b38

08005c2c <__swhatbuf_r>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	460e      	mov	r6, r1
 8005c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c34:	2900      	cmp	r1, #0
 8005c36:	b096      	sub	sp, #88	; 0x58
 8005c38:	4614      	mov	r4, r2
 8005c3a:	461d      	mov	r5, r3
 8005c3c:	da07      	bge.n	8005c4e <__swhatbuf_r+0x22>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	602b      	str	r3, [r5, #0]
 8005c42:	89b3      	ldrh	r3, [r6, #12]
 8005c44:	061a      	lsls	r2, r3, #24
 8005c46:	d410      	bmi.n	8005c6a <__swhatbuf_r+0x3e>
 8005c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4c:	e00e      	b.n	8005c6c <__swhatbuf_r+0x40>
 8005c4e:	466a      	mov	r2, sp
 8005c50:	f000 f8b2 	bl	8005db8 <_fstat_r>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	dbf2      	blt.n	8005c3e <__swhatbuf_r+0x12>
 8005c58:	9a01      	ldr	r2, [sp, #4]
 8005c5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c62:	425a      	negs	r2, r3
 8005c64:	415a      	adcs	r2, r3
 8005c66:	602a      	str	r2, [r5, #0]
 8005c68:	e7ee      	b.n	8005c48 <__swhatbuf_r+0x1c>
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	b016      	add	sp, #88	; 0x58
 8005c72:	bd70      	pop	{r4, r5, r6, pc}

08005c74 <__smakebuf_r>:
 8005c74:	898b      	ldrh	r3, [r1, #12]
 8005c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c78:	079d      	lsls	r5, r3, #30
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	d507      	bpl.n	8005c90 <__smakebuf_r+0x1c>
 8005c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	6163      	str	r3, [r4, #20]
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	ab01      	add	r3, sp, #4
 8005c92:	466a      	mov	r2, sp
 8005c94:	f7ff ffca 	bl	8005c2c <__swhatbuf_r>
 8005c98:	9900      	ldr	r1, [sp, #0]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff fca5 	bl	80055ec <_malloc_r>
 8005ca2:	b948      	cbnz	r0, 8005cb8 <__smakebuf_r+0x44>
 8005ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d4ef      	bmi.n	8005c8c <__smakebuf_r+0x18>
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	f043 0302 	orr.w	r3, r3, #2
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	e7e3      	b.n	8005c80 <__smakebuf_r+0xc>
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <__smakebuf_r+0x7c>)
 8005cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	6020      	str	r0, [r4, #0]
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	6163      	str	r3, [r4, #20]
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	6120      	str	r0, [r4, #16]
 8005cce:	b15b      	cbz	r3, 8005ce8 <__smakebuf_r+0x74>
 8005cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f000 f881 	bl	8005ddc <_isatty_r>
 8005cda:	b128      	cbz	r0, 8005ce8 <__smakebuf_r+0x74>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	431d      	orrs	r5, r3
 8005cec:	81a5      	strh	r5, [r4, #12]
 8005cee:	e7cd      	b.n	8005c8c <__smakebuf_r+0x18>
 8005cf0:	08005431 	.word	0x08005431

08005cf4 <__malloc_lock>:
 8005cf4:	4770      	bx	lr

08005cf6 <__malloc_unlock>:
 8005cf6:	4770      	bx	lr

08005cf8 <_free_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	d045      	beq.n	8005d8c <_free_r+0x94>
 8005d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d04:	1f0c      	subs	r4, r1, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bfb8      	it	lt
 8005d0a:	18e4      	addlt	r4, r4, r3
 8005d0c:	f7ff fff2 	bl	8005cf4 <__malloc_lock>
 8005d10:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <_free_r+0x98>)
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	4610      	mov	r0, r2
 8005d16:	b933      	cbnz	r3, 8005d26 <_free_r+0x2e>
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	6014      	str	r4, [r2, #0]
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d22:	f7ff bfe8 	b.w	8005cf6 <__malloc_unlock>
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	d90c      	bls.n	8005d44 <_free_r+0x4c>
 8005d2a:	6821      	ldr	r1, [r4, #0]
 8005d2c:	1862      	adds	r2, r4, r1
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	bf04      	itt	eq
 8005d32:	681a      	ldreq	r2, [r3, #0]
 8005d34:	685b      	ldreq	r3, [r3, #4]
 8005d36:	6063      	str	r3, [r4, #4]
 8005d38:	bf04      	itt	eq
 8005d3a:	1852      	addeq	r2, r2, r1
 8005d3c:	6022      	streq	r2, [r4, #0]
 8005d3e:	6004      	str	r4, [r0, #0]
 8005d40:	e7ec      	b.n	8005d1c <_free_r+0x24>
 8005d42:	4613      	mov	r3, r2
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	b10a      	cbz	r2, 8005d4c <_free_r+0x54>
 8005d48:	42a2      	cmp	r2, r4
 8005d4a:	d9fa      	bls.n	8005d42 <_free_r+0x4a>
 8005d4c:	6819      	ldr	r1, [r3, #0]
 8005d4e:	1858      	adds	r0, r3, r1
 8005d50:	42a0      	cmp	r0, r4
 8005d52:	d10b      	bne.n	8005d6c <_free_r+0x74>
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	4401      	add	r1, r0
 8005d58:	1858      	adds	r0, r3, r1
 8005d5a:	4282      	cmp	r2, r0
 8005d5c:	6019      	str	r1, [r3, #0]
 8005d5e:	d1dd      	bne.n	8005d1c <_free_r+0x24>
 8005d60:	6810      	ldr	r0, [r2, #0]
 8005d62:	6852      	ldr	r2, [r2, #4]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	4401      	add	r1, r0
 8005d68:	6019      	str	r1, [r3, #0]
 8005d6a:	e7d7      	b.n	8005d1c <_free_r+0x24>
 8005d6c:	d902      	bls.n	8005d74 <_free_r+0x7c>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	e7d3      	b.n	8005d1c <_free_r+0x24>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	1821      	adds	r1, r4, r0
 8005d78:	428a      	cmp	r2, r1
 8005d7a:	bf04      	itt	eq
 8005d7c:	6811      	ldreq	r1, [r2, #0]
 8005d7e:	6852      	ldreq	r2, [r2, #4]
 8005d80:	6062      	str	r2, [r4, #4]
 8005d82:	bf04      	itt	eq
 8005d84:	1809      	addeq	r1, r1, r0
 8005d86:	6021      	streq	r1, [r4, #0]
 8005d88:	605c      	str	r4, [r3, #4]
 8005d8a:	e7c7      	b.n	8005d1c <_free_r+0x24>
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	bf00      	nop
 8005d90:	20004a5c 	.word	0x20004a5c

08005d94 <_read_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4c07      	ldr	r4, [pc, #28]	; (8005db4 <_read_r+0x20>)
 8005d98:	4605      	mov	r5, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fa fe24 	bl	80009f0 <_read>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_read_r+0x1e>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_read_r+0x1e>
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20004b38 	.word	0x20004b38

08005db8 <_fstat_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4c07      	ldr	r4, [pc, #28]	; (8005dd8 <_fstat_r+0x20>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	f7fa fe58 	bl	8000a7a <_fstat>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d102      	bne.n	8005dd4 <_fstat_r+0x1c>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	b103      	cbz	r3, 8005dd4 <_fstat_r+0x1c>
 8005dd2:	602b      	str	r3, [r5, #0]
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20004b38 	.word	0x20004b38

08005ddc <_isatty_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4c06      	ldr	r4, [pc, #24]	; (8005df8 <_isatty_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4605      	mov	r5, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	f7fa fe57 	bl	8000a9a <_isatty>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_isatty_r+0x1a>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_isatty_r+0x1a>
 8005df4:	602b      	str	r3, [r5, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20004b38 	.word	0x20004b38

08005dfc <_init>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr

08005e08 <_fini>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr
