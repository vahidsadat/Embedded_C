
12_ExecutingTaskPriodically.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac0  20000074  08004fb0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b34  08004fb0  00024b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bd4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d24  00000000  00000000  00037c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003bc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039c4  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e556  00000000  00000000  0004073c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095ac5  00000000  00000000  0004ec92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff0  00000000  00000000  000e47d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e5c 	.word	0x08004e5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004e5c 	.word	0x08004e5c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
TaskProfiler BlueTaskProfiler,RedTaskProfiler,GreenTaskProfiler;
TaskHandle_t blue_handler,red_handler,green_handler;

//const TickType_t _50ms = pdMS_TO_TICKS(50);
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  HAL_Init();
 80004e6:	f000 fa57 	bl	8000998 <HAL_Init>
  SystemClock_Config();
 80004ea:	f000 f867 	bl	80005bc <SystemClock_Config>
  MX_GPIO_Init();
 80004ee:	f000 f8ef 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f8c3 	bl	800067c <MX_USART2_UART_Init>
  xTaskCreate(vBlueLEDControllerTask,"Blue LED Controller", 100, NULL, 1, &blue_handler);
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <main+0x58>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	490e      	ldr	r1, [pc, #56]	; (800053c <main+0x5c>)
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x60>)
 8000506:	f002 fd59 	bl	8002fbc <xTaskCreate>
  xTaskCreate(vRedLEDControllerTask,"Red LED Controller", 100, NULL, 1, &red_handler);
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x64>)
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	490c      	ldr	r1, [pc, #48]	; (8000548 <main+0x68>)
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x6c>)
 800051a:	f002 fd4f 	bl	8002fbc <xTaskCreate>
  xTaskCreate(vGreenLEDControllerTask,"Red LED Controller", 100, NULL, 1, &green_handler);
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x70>)
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	4907      	ldr	r1, [pc, #28]	; (8000548 <main+0x68>)
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x74>)
 800052e:	f002 fd45 	bl	8002fbc <xTaskCreate>
  vTaskStartScheduler();
 8000532:	f002 ff19 	bl	8003368 <vTaskStartScheduler>

  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x56>
 8000538:	20004a68 	.word	0x20004a68
 800053c:	08004e74 	.word	0x08004e74
 8000540:	08000559 	.word	0x08000559
 8000544:	20004a60 	.word	0x20004a60
 8000548:	08004e88 	.word	0x08004e88
 800054c:	0800058d 	.word	0x0800058d
 8000550:	20004a58 	.word	0x20004a58
 8000554:	080005a5 	.word	0x080005a5

08000558 <vBlueLEDControllerTask>:
  {
  }
}

void vBlueLEDControllerTask(void *pvParameters)
	{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(500);
 8000560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000564:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8000566:	f003 f817 	bl	8003598 <xTaskGetTickCount>
 800056a:	4603      	mov	r3, r0
 800056c:	60bb      	str	r3, [r7, #8]
	while(1)
		{
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	68f9      	ldr	r1, [r7, #12]
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fe7d 	bl	8003274 <vTaskDelayUntil>
		BlueTaskProfiler++;
 800057a:	4b03      	ldr	r3, [pc, #12]	; (8000588 <vBlueLEDControllerTask+0x30>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a01      	ldr	r2, [pc, #4]	; (8000588 <vBlueLEDControllerTask+0x30>)
 8000582:	6013      	str	r3, [r2, #0]
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000584:	e7f3      	b.n	800056e <vBlueLEDControllerTask+0x16>
 8000586:	bf00      	nop
 8000588:	20004a5c 	.word	0x20004a5c

0800058c <vRedLEDControllerTask>:

	}


void vRedLEDControllerTask(void *pvParameters)
	{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	while(1)
		{
		RedTaskProfiler++;
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <vRedLEDControllerTask+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a01      	ldr	r2, [pc, #4]	; (80005a0 <vRedLEDControllerTask+0x14>)
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	e7f9      	b.n	8000594 <vRedLEDControllerTask+0x8>
 80005a0:	20004a64 	.word	0x20004a64

080005a4 <vGreenLEDControllerTask>:

		}

	}
void vGreenLEDControllerTask(void *pvParameters)
	{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	while(1)
		{
		GreenTaskProfiler++;
 80005ac:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <vGreenLEDControllerTask+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a01      	ldr	r2, [pc, #4]	; (80005b8 <vGreenLEDControllerTask+0x14>)
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	e7f9      	b.n	80005ac <vGreenLEDControllerTask+0x8>
 80005b8:	20004a6c 	.word	0x20004a6c

080005bc <SystemClock_Config>:
	HAL_UART_Transmit(&huart2, (uint8_t* )&ch, 1, 0xFFFFFF);
	return ch;
	}

void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fb85 	bl	8004cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xb8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <SystemClock_Config+0xb8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <SystemClock_Config+0xb8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <SystemClock_Config+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <SystemClock_Config+0xbc>)
 800060a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fc57 	bl	8000ee4 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800063c:	f000 f874 	bl	8000728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f000 feb2 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000666:	f000 f85f 	bl	8000728 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 faa2 	bl	8001bfc <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f833 	bl	8000728 <Error_Handler>
  }

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20004a70 	.word	0x20004a70
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_GPIO_Init+0x30>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <MX_GPIO_Init+0x30>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_GPIO_Init+0x30>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d101      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000716:	f000 f961 	bl	80009dc <HAL_IncTick>
  }
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40010000 	.word	0x40010000

08000728 <Error_Handler>:

void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_MspInit+0x54>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_MspInit+0x54>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 fa05 	bl	8000b8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	; (8000814 <HAL_UART_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12b      	bne.n	800080a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fa:	2307      	movs	r3, #7
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_UART_MspInit+0x8c>)
 8000806:	f000 f9eb 	bl	8000be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000

08000820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	2019      	movs	r0, #25
 8000836:	f000 f9a9 	bl	8000b8c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800083a:	2019      	movs	r0, #25
 800083c:	f000 f9c2 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HAL_InitTick+0xa0>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <HAL_InitTick+0xa0>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_InitTick+0xa0>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085c:	f107 0210 	add.w	r2, r7, #16
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f000 ff78 	bl	800175c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800086c:	f000 ff62 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8000870:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <HAL_InitTick+0xa4>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	0c9b      	lsrs	r3, r3, #18
 800087c:	3b01      	subs	r3, #1
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_InitTick+0xa8>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <HAL_InitTick+0xac>)
 8000884:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_InitTick+0xa8>)
 8000888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_InitTick+0xa8>)
 8000890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000892:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_InitTick+0xa8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_InitTick+0xa8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <HAL_InitTick+0xa8>)
 80008a2:	f000 ff8d 	bl	80017c0 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d104      	bne.n	80008b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <HAL_InitTick+0xa8>)
 80008ae:	f000 ffbc 	bl	800182a <HAL_TIM_Base_Start_IT>
 80008b2:	4603      	mov	r3, r0
 80008b4:	e000      	b.n	80008b8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3730      	adds	r7, #48	; 0x30
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	20004ab0 	.word	0x20004ab0
 80008cc:	40010000 	.word	0x40010000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800090a:	f000 ffb2 	bl	8001872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20004ab0 	.word	0x20004ab0

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SystemInit+0x28>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <SystemInit+0x28>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SystemInit+0x28>)
 800092e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000932:	609a      	str	r2, [r3, #8]
#endif
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000948:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800094a:	e003      	b.n	8000954 <LoopCopyDataInit>

0800094c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800094e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000950:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000952:	3104      	adds	r1, #4

08000954 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000958:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800095a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800095c:	d3f6      	bcc.n	800094c <CopyDataInit>
  ldr  r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000960:	e002      	b.n	8000968 <LoopFillZerobss>

08000962 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000962:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000964:	f842 3b04 	str.w	r3, [r2], #4

08000968 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800096c:	d3f9      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800096e:	f7ff ffd3 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f004 f983 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdb3 	bl	80004e0 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000980:	08004f3c 	.word	0x08004f3c
  ldr  r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000988:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800098c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000990:	20004b34 	.word	0x20004b34

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f8d8 	bl	8000b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff ff2a 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff feb4 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20004af0 	.word	0x20004af0

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20004af0 	.word	0x20004af0

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <__NVIC_EnableIRQ+0x38>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff4c 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9e:	f7ff ff61 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff ffb1 	bl	8000b10 <NVIC_EncodePriority>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff80 	bl	8000abc <__NVIC_SetPriority>
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff54 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e159      	b.n	8000eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8148 	bne.w	8000eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d00b      	beq.n	8000c3a <HAL_GPIO_Init+0x5a>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d007      	beq.n	8000c3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c2e:	2b11      	cmp	r3, #17
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d130      	bne.n	8000c9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	f003 0201 	and.w	r2, r3, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0xfc>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b12      	cmp	r3, #18
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80a2 	beq.w	8000eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <HAL_GPIO_Init+0x2e4>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a55      	ldr	r2, [pc, #340]	; (8000ec4 <HAL_GPIO_Init+0x2e4>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <HAL_GPIO_Init+0x2e4>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a51      	ldr	r2, [pc, #324]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <HAL_GPIO_Init+0x2ec>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d019      	beq.n	8000de2 <HAL_GPIO_Init+0x202>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a47      	ldr	r2, [pc, #284]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x1fe>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <HAL_GPIO_Init+0x2f4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x1fa>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <HAL_GPIO_Init+0x2f8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x1f6>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a44      	ldr	r2, [pc, #272]	; (8000edc <HAL_GPIO_Init+0x2fc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x1f2>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e008      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000de2:	2300      	movs	r3, #0
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df4:	4934      	ldr	r1, [pc, #208]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e26:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f67f aea2 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3724      	adds	r7, #36	; 0x24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e25b      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f02:	4ba3      	ldr	r3, [pc, #652]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4ba0      	ldr	r3, [pc, #640]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b9d      	ldr	r3, [pc, #628]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b99      	ldr	r3, [pc, #612]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e236      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b91      	ldr	r3, [pc, #580]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a90      	ldr	r2, [pc, #576]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b8b      	ldr	r3, [pc, #556]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a8a      	ldr	r2, [pc, #552]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b88      	ldr	r3, [pc, #544]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a87      	ldr	r2, [pc, #540]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b84      	ldr	r3, [pc, #528]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a83      	ldr	r2, [pc, #524]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b81      	ldr	r3, [pc, #516]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a80      	ldr	r2, [pc, #512]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd32 	bl	8000a04 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fd2e 	bl	8000a04 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1fb      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b76      	ldr	r3, [pc, #472]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fd1e 	bl	8000a04 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fd1a 	bl	8000a04 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1e7      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffa:	4b65      	ldr	r3, [pc, #404]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b62      	ldr	r3, [pc, #392]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1bb      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4952      	ldr	r1, [pc, #328]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_RCC_OscConfig+0x2b0>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fcd3 	bl	8000a04 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fccf 	bl	8000a04 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e19c      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4940      	ldr	r1, [pc, #256]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <HAL_RCC_OscConfig+0x2b0>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fcb2 	bl	8000a04 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fcae 	bl	8000a04 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e17b      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d030      	beq.n	8001130 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_RCC_OscConfig+0x2b4>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc92 	bl	8000a04 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc8e 	bl	8000a04 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e15b      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e015      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x2b4>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc7b 	bl	8000a04 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc77 	bl	8000a04 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e144      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80a0 	beq.w	800127e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10f      	bne.n	800116e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116a:	2301      	movs	r3, #1
 800116c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_RCC_OscConfig+0x2b8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d121      	bne.n	80011be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_RCC_OscConfig+0x2b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_RCC_OscConfig+0x2b8>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001186:	f7ff fc3d 	bl	8000a04 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	e011      	b.n	80011b2 <HAL_RCC_OscConfig+0x2ce>
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	42470000 	.word	0x42470000
 8001198:	42470e80 	.word	0x42470e80
 800119c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a0:	f7ff fc30 	bl	8000a04 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0fd      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <HAL_RCC_OscConfig+0x4d4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
 80011c6:	4b7d      	ldr	r3, [pc, #500]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ca:	4a7c      	ldr	r2, [pc, #496]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6713      	str	r3, [r2, #112]	; 0x70
 80011d2:	e01c      	b.n	800120e <HAL_RCC_OscConfig+0x32a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d10c      	bne.n	80011f6 <HAL_RCC_OscConfig+0x312>
 80011dc:	4b77      	ldr	r3, [pc, #476]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e0:	4a76      	ldr	r2, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6713      	str	r3, [r2, #112]	; 0x70
 80011e8:	4b74      	ldr	r3, [pc, #464]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ec:	4a73      	ldr	r2, [pc, #460]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6713      	str	r3, [r2, #112]	; 0x70
 80011f4:	e00b      	b.n	800120e <HAL_RCC_OscConfig+0x32a>
 80011f6:	4b71      	ldr	r3, [pc, #452]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fa:	4a70      	ldr	r2, [pc, #448]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6713      	str	r3, [r2, #112]	; 0x70
 8001202:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	4a6d      	ldr	r2, [pc, #436]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d015      	beq.n	8001242 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001216:	f7ff fbf5 	bl	8000a04 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fbf1 	bl	8000a04 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e0bc      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001234:	4b61      	ldr	r3, [pc, #388]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ee      	beq.n	800121e <HAL_RCC_OscConfig+0x33a>
 8001240:	e014      	b.n	800126c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fbdf 	bl	8000a04 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fbdb 	bl	8000a04 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0a6      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4b56      	ldr	r3, [pc, #344]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ee      	bne.n	800124a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8092 	beq.w	80013ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d05c      	beq.n	800134e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d141      	bne.n	8001320 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129c:	4b48      	ldr	r3, [pc, #288]	; (80013c0 <HAL_RCC_OscConfig+0x4dc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fbaf 	bl	8000a04 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fbab 	bl	8000a04 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e078      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69da      	ldr	r2, [r3, #28]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	019b      	lsls	r3, r3, #6
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	3b01      	subs	r3, #1
 80012e2:	041b      	lsls	r3, r3, #16
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	4933      	ldr	r1, [pc, #204]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x4dc>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb84 	bl	8000a04 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fb80 	bl	8000a04 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e04d      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x41c>
 800131e:	e045      	b.n	80013ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_RCC_OscConfig+0x4dc>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fb6d 	bl	8000a04 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff fb69 	bl	8000a04 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e036      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x44a>
 800134c:	e02e      	b.n	80013ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e029      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_RCC_OscConfig+0x4d8>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	429a      	cmp	r2, r3
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d115      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001382:	4013      	ands	r3, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001388:	4293      	cmp	r3, r2
 800138a:	d10d      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d106      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40007000 	.word	0x40007000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	42470060 	.word	0x42470060

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0cc      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d90c      	bls.n	8001400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ee:	4b63      	ldr	r3, [pc, #396]	; (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0b8      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d020      	beq.n	800144e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001418:	4b59      	ldr	r3, [pc, #356]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a58      	ldr	r2, [pc, #352]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800143a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	494d      	ldr	r1, [pc, #308]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	4313      	orrs	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d044      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d119      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e07f      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d003      	beq.n	8001482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	2b03      	cmp	r3, #3
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e06f      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e067      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f023 0203 	bic.w	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4934      	ldr	r1, [pc, #208]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff faa6 	bl	8000a04 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014bc:	f7ff faa2 	bl	8000a04 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e04f      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 020c 	and.w	r2, r3, #12
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d1eb      	bne.n	80014bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d20c      	bcs.n	800150c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e032      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4916      	ldr	r1, [pc, #88]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	490e      	ldr	r1, [pc, #56]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154a:	f000 f821 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 800154e:	4601      	mov	r1, r0
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	fa21 f303 	lsr.w	r3, r1, r3
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f958 	bl	8000820 <HAL_InitTick>

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00
 8001580:	40023800 	.word	0x40023800
 8001584:	08004eb4 	.word	0x08004eb4
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a6:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d007      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x32>
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d008      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x38>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 808d 	bne.w	80016d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80015be:	60bb      	str	r3, [r7, #8]
       break;
 80015c0:	e08c      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015c4:	60bb      	str	r3, [r7, #8]
      break;
 80015c6:	e089      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	f04f 0400 	mov.w	r4, #0
 80015e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	ea03 0501 	and.w	r5, r3, r1
 80015f4:	ea04 0602 	and.w	r6, r4, r2
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015fa:	fb02 f106 	mul.w	r1, r2, r6
 80015fe:	2200      	movs	r2, #0
 8001600:	fb02 f205 	mul.w	r2, r2, r5
 8001604:	440a      	add	r2, r1
 8001606:	493a      	ldr	r1, [pc, #232]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001608:	fba5 0101 	umull	r0, r1, r5, r1
 800160c:	1853      	adds	r3, r2, r1
 800160e:	4619      	mov	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f04f 0400 	mov.w	r4, #0
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	f7fe fde1 	bl	80001e0 <__aeabi_uldivmod>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e049      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	f04f 0400 	mov.w	r4, #0
 8001630:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	ea03 0501 	and.w	r5, r3, r1
 800163c:	ea04 0602 	and.w	r6, r4, r2
 8001640:	4629      	mov	r1, r5
 8001642:	4632      	mov	r2, r6
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f04f 0400 	mov.w	r4, #0
 800164c:	0154      	lsls	r4, r2, #5
 800164e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001652:	014b      	lsls	r3, r1, #5
 8001654:	4619      	mov	r1, r3
 8001656:	4622      	mov	r2, r4
 8001658:	1b49      	subs	r1, r1, r5
 800165a:	eb62 0206 	sbc.w	r2, r2, r6
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	f04f 0400 	mov.w	r4, #0
 8001666:	0194      	lsls	r4, r2, #6
 8001668:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800166c:	018b      	lsls	r3, r1, #6
 800166e:	1a5b      	subs	r3, r3, r1
 8001670:	eb64 0402 	sbc.w	r4, r4, r2
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	00e2      	lsls	r2, r4, #3
 800167e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001682:	00d9      	lsls	r1, r3, #3
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	195b      	adds	r3, r3, r5
 800168a:	eb44 0406 	adc.w	r4, r4, r6
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	02a2      	lsls	r2, r4, #10
 8001698:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800169c:	0299      	lsls	r1, r3, #10
 800169e:	460b      	mov	r3, r1
 80016a0:	4614      	mov	r4, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	4621      	mov	r1, r4
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f04f 0400 	mov.w	r4, #0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4623      	mov	r3, r4
 80016b0:	f7fe fd96 	bl	80001e0 <__aeabi_uldivmod>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	3301      	adds	r3, #1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	60bb      	str	r3, [r7, #8]
      break;
 80016d4:	e002      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80016d8:	60bb      	str	r3, [r7, #8]
      break;
 80016da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016dc:	68bb      	ldr	r3, [r7, #8]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	00f42400 	.word	0x00f42400
 80016f0:	017d7840 	.word	0x017d7840

080016f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_GetHCLKFreq+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001710:	f7ff fff0 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001714:	4601      	mov	r1, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	08004ec4 	.word	0x08004ec4

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001738:	f7ff ffdc 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 800173c:	4601      	mov	r1, r0
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	0b5b      	lsrs	r3, r3, #13
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	08004ec4 	.word	0x08004ec4

0800175c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	220f      	movs	r2, #15
 800176a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCC_GetClockConfig+0x60>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 020f 	and.w	r2, r3, #15
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e01d      	b.n	800180e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f815 	bl	8001816 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3304      	adds	r3, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4610      	mov	r0, r2
 8001800:	f000 f968 	bl	8001ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b06      	cmp	r3, #6
 8001852:	d007      	beq.n	8001864 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b02      	cmp	r3, #2
 8001886:	d122      	bne.n	80018ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b02      	cmp	r3, #2
 8001894:	d11b      	bne.n	80018ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f06f 0202 	mvn.w	r2, #2
 800189e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f8ee 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 80018ba:	e005      	b.n	80018c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8e0 	bl	8001a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8f1 	bl	8001aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d122      	bne.n	8001922 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d11b      	bne.n	8001922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0204 	mvn.w	r2, #4
 80018f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f8c4 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 800190e:	e005      	b.n	800191c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f8b6 	bl	8001a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f8c7 	bl	8001aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b08      	cmp	r3, #8
 800192e:	d122      	bne.n	8001976 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11b      	bne.n	8001976 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f06f 0208 	mvn.w	r2, #8
 8001946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2204      	movs	r2, #4
 800194c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f89a 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 8001962:	e005      	b.n	8001970 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f88c 	bl	8001a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f89d 	bl	8001aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b10      	cmp	r3, #16
 8001982:	d122      	bne.n	80019ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2b10      	cmp	r3, #16
 8001990:	d11b      	bne.n	80019ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0210 	mvn.w	r2, #16
 800199a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2208      	movs	r2, #8
 80019a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f870 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 80019b6:	e005      	b.n	80019c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f862 	bl	8001a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f873 	bl	8001aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10e      	bne.n	80019f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f06f 0201 	mvn.w	r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7fe fe87 	bl	8000704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d10e      	bne.n	8001a22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	2b80      	cmp	r3, #128	; 0x80
 8001a10:	d107      	bne.n	8001a22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8e3 	bl	8001be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2c:	2b40      	cmp	r3, #64	; 0x40
 8001a2e:	d10e      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	2b40      	cmp	r3, #64	; 0x40
 8001a3c:	d107      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f838 	bl	8001abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d10e      	bne.n	8001a7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d107      	bne.n	8001a7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f06f 0220 	mvn.w	r2, #32
 8001a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f8ad 	bl	8001bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <TIM_Base_SetConfig+0xe4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00f      	beq.n	8001b0c <TIM_Base_SetConfig+0x38>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d00b      	beq.n	8001b0c <TIM_Base_SetConfig+0x38>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <TIM_Base_SetConfig+0xe8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <TIM_Base_SetConfig+0x38>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <TIM_Base_SetConfig+0xec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d003      	beq.n	8001b0c <TIM_Base_SetConfig+0x38>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <TIM_Base_SetConfig+0xf0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d108      	bne.n	8001b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <TIM_Base_SetConfig+0xe4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01b      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d017      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <TIM_Base_SetConfig+0xe8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <TIM_Base_SetConfig+0xec>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00f      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <TIM_Base_SetConfig+0xf0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00b      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <TIM_Base_SetConfig+0xf4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <TIM_Base_SetConfig+0xf8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d003      	beq.n	8001b5e <TIM_Base_SetConfig+0x8a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <TIM_Base_SetConfig+0xfc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <TIM_Base_SetConfig+0xe4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d103      	bne.n	8001ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	615a      	str	r2, [r3, #20]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	40000c00 	.word	0x40000c00
 8001bc8:	40014000 	.word	0x40014000
 8001bcc:	40014400 	.word	0x40014400
 8001bd0:	40014800 	.word	0x40014800

08001bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e03f      	b.n	8001c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fdb4 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f829 	bl	8001c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001cda:	f023 030c 	bic.w	r3, r3, #12
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d06:	f040 818b 	bne.w	8002020 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4ac1      	ldr	r2, [pc, #772]	; (8002014 <UART_SetConfig+0x37c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d005      	beq.n	8001d20 <UART_SetConfig+0x88>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4abf      	ldr	r2, [pc, #764]	; (8002018 <UART_SetConfig+0x380>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	f040 80bd 	bne.w	8001e9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d20:	f7ff fd08 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8001d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	461d      	mov	r5, r3
 8001d2a:	f04f 0600 	mov.w	r6, #0
 8001d2e:	46a8      	mov	r8, r5
 8001d30:	46b1      	mov	r9, r6
 8001d32:	eb18 0308 	adds.w	r3, r8, r8
 8001d36:	eb49 0409 	adc.w	r4, r9, r9
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	46a1      	mov	r9, r4
 8001d3e:	eb18 0805 	adds.w	r8, r8, r5
 8001d42:	eb49 0906 	adc.w	r9, r9, r6
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001d52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001d56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001d5a:	4688      	mov	r8, r1
 8001d5c:	4691      	mov	r9, r2
 8001d5e:	eb18 0005 	adds.w	r0, r8, r5
 8001d62:	eb49 0106 	adc.w	r1, r9, r6
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	f04f 0600 	mov.w	r6, #0
 8001d70:	196b      	adds	r3, r5, r5
 8001d72:	eb46 0406 	adc.w	r4, r6, r6
 8001d76:	461a      	mov	r2, r3
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f7fe fa31 	bl	80001e0 <__aeabi_uldivmod>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	461a      	mov	r2, r3
 8001d84:	4ba5      	ldr	r3, [pc, #660]	; (800201c <UART_SetConfig+0x384>)
 8001d86:	fba3 2302 	umull	r2, r3, r3, r2
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	461d      	mov	r5, r3
 8001d94:	f04f 0600 	mov.w	r6, #0
 8001d98:	46a9      	mov	r9, r5
 8001d9a:	46b2      	mov	sl, r6
 8001d9c:	eb19 0309 	adds.w	r3, r9, r9
 8001da0:	eb4a 040a 	adc.w	r4, sl, sl
 8001da4:	4699      	mov	r9, r3
 8001da6:	46a2      	mov	sl, r4
 8001da8:	eb19 0905 	adds.w	r9, r9, r5
 8001dac:	eb4a 0a06 	adc.w	sl, sl, r6
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dc4:	4689      	mov	r9, r1
 8001dc6:	4692      	mov	sl, r2
 8001dc8:	eb19 0005 	adds.w	r0, r9, r5
 8001dcc:	eb4a 0106 	adc.w	r1, sl, r6
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	f04f 0600 	mov.w	r6, #0
 8001dda:	196b      	adds	r3, r5, r5
 8001ddc:	eb46 0406 	adc.w	r4, r6, r6
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	f7fe f9fc 	bl	80001e0 <__aeabi_uldivmod>
 8001de8:	4603      	mov	r3, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b8b      	ldr	r3, [pc, #556]	; (800201c <UART_SetConfig+0x384>)
 8001df0:	fba3 1302 	umull	r1, r3, r3, r2
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	2164      	movs	r1, #100	; 0x64
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	3332      	adds	r3, #50	; 0x32
 8001e02:	4a86      	ldr	r2, [pc, #536]	; (800201c <UART_SetConfig+0x384>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e10:	4498      	add	r8, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	461d      	mov	r5, r3
 8001e16:	f04f 0600 	mov.w	r6, #0
 8001e1a:	46a9      	mov	r9, r5
 8001e1c:	46b2      	mov	sl, r6
 8001e1e:	eb19 0309 	adds.w	r3, r9, r9
 8001e22:	eb4a 040a 	adc.w	r4, sl, sl
 8001e26:	4699      	mov	r9, r3
 8001e28:	46a2      	mov	sl, r4
 8001e2a:	eb19 0905 	adds.w	r9, r9, r5
 8001e2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e46:	4689      	mov	r9, r1
 8001e48:	4692      	mov	sl, r2
 8001e4a:	eb19 0005 	adds.w	r0, r9, r5
 8001e4e:	eb4a 0106 	adc.w	r1, sl, r6
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	461d      	mov	r5, r3
 8001e58:	f04f 0600 	mov.w	r6, #0
 8001e5c:	196b      	adds	r3, r5, r5
 8001e5e:	eb46 0406 	adc.w	r4, r6, r6
 8001e62:	461a      	mov	r2, r3
 8001e64:	4623      	mov	r3, r4
 8001e66:	f7fe f9bb 	bl	80001e0 <__aeabi_uldivmod>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <UART_SetConfig+0x384>)
 8001e72:	fba3 1302 	umull	r1, r3, r3, r2
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2164      	movs	r1, #100	; 0x64
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	3332      	adds	r3, #50	; 0x32
 8001e84:	4a65      	ldr	r2, [pc, #404]	; (800201c <UART_SetConfig+0x384>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	f003 0207 	and.w	r2, r3, #7
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4442      	add	r2, r8
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	e26f      	b.n	800237a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e9a:	f7ff fc37 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8001e9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	f04f 0600 	mov.w	r6, #0
 8001ea8:	46a8      	mov	r8, r5
 8001eaa:	46b1      	mov	r9, r6
 8001eac:	eb18 0308 	adds.w	r3, r8, r8
 8001eb0:	eb49 0409 	adc.w	r4, r9, r9
 8001eb4:	4698      	mov	r8, r3
 8001eb6:	46a1      	mov	r9, r4
 8001eb8:	eb18 0805 	adds.w	r8, r8, r5
 8001ebc:	eb49 0906 	adc.w	r9, r9, r6
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ecc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ed0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ed4:	4688      	mov	r8, r1
 8001ed6:	4691      	mov	r9, r2
 8001ed8:	eb18 0005 	adds.w	r0, r8, r5
 8001edc:	eb49 0106 	adc.w	r1, r9, r6
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	f04f 0600 	mov.w	r6, #0
 8001eea:	196b      	adds	r3, r5, r5
 8001eec:	eb46 0406 	adc.w	r4, r6, r6
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	f7fe f974 	bl	80001e0 <__aeabi_uldivmod>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <UART_SetConfig+0x384>)
 8001f00:	fba3 2302 	umull	r2, r3, r3, r2
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	f04f 0600 	mov.w	r6, #0
 8001f12:	46a9      	mov	r9, r5
 8001f14:	46b2      	mov	sl, r6
 8001f16:	eb19 0309 	adds.w	r3, r9, r9
 8001f1a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f1e:	4699      	mov	r9, r3
 8001f20:	46a2      	mov	sl, r4
 8001f22:	eb19 0905 	adds.w	r9, r9, r5
 8001f26:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f3e:	4689      	mov	r9, r1
 8001f40:	4692      	mov	sl, r2
 8001f42:	eb19 0005 	adds.w	r0, r9, r5
 8001f46:	eb4a 0106 	adc.w	r1, sl, r6
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	461d      	mov	r5, r3
 8001f50:	f04f 0600 	mov.w	r6, #0
 8001f54:	196b      	adds	r3, r5, r5
 8001f56:	eb46 0406 	adc.w	r4, r6, r6
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	f7fe f93f 	bl	80001e0 <__aeabi_uldivmod>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b2c      	ldr	r3, [pc, #176]	; (800201c <UART_SetConfig+0x384>)
 8001f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2164      	movs	r1, #100	; 0x64
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	3332      	adds	r3, #50	; 0x32
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <UART_SetConfig+0x384>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f8a:	4498      	add	r8, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	461d      	mov	r5, r3
 8001f90:	f04f 0600 	mov.w	r6, #0
 8001f94:	46a9      	mov	r9, r5
 8001f96:	46b2      	mov	sl, r6
 8001f98:	eb19 0309 	adds.w	r3, r9, r9
 8001f9c:	eb4a 040a 	adc.w	r4, sl, sl
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	46a2      	mov	sl, r4
 8001fa4:	eb19 0905 	adds.w	r9, r9, r5
 8001fa8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fac:	f04f 0100 	mov.w	r1, #0
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fc0:	4689      	mov	r9, r1
 8001fc2:	4692      	mov	sl, r2
 8001fc4:	eb19 0005 	adds.w	r0, r9, r5
 8001fc8:	eb4a 0106 	adc.w	r1, sl, r6
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	f04f 0600 	mov.w	r6, #0
 8001fd6:	196b      	adds	r3, r5, r5
 8001fd8:	eb46 0406 	adc.w	r4, r6, r6
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4623      	mov	r3, r4
 8001fe0:	f7fe f8fe 	bl	80001e0 <__aeabi_uldivmod>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <UART_SetConfig+0x384>)
 8001fec:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	2164      	movs	r1, #100	; 0x64
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	3332      	adds	r3, #50	; 0x32
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <UART_SetConfig+0x384>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	f003 0207 	and.w	r2, r3, #7
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4442      	add	r2, r8
 8002010:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002012:	e1b2      	b.n	800237a <UART_SetConfig+0x6e2>
 8002014:	40011000 	.word	0x40011000
 8002018:	40011400 	.word	0x40011400
 800201c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4ad7      	ldr	r2, [pc, #860]	; (8002384 <UART_SetConfig+0x6ec>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d005      	beq.n	8002036 <UART_SetConfig+0x39e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4ad6      	ldr	r2, [pc, #856]	; (8002388 <UART_SetConfig+0x6f0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	f040 80d1 	bne.w	80021d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002036:	f7ff fb7d 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 800203a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	469a      	mov	sl, r3
 8002040:	f04f 0b00 	mov.w	fp, #0
 8002044:	46d0      	mov	r8, sl
 8002046:	46d9      	mov	r9, fp
 8002048:	eb18 0308 	adds.w	r3, r8, r8
 800204c:	eb49 0409 	adc.w	r4, r9, r9
 8002050:	4698      	mov	r8, r3
 8002052:	46a1      	mov	r9, r4
 8002054:	eb18 080a 	adds.w	r8, r8, sl
 8002058:	eb49 090b 	adc.w	r9, r9, fp
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002068:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800206c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002070:	4688      	mov	r8, r1
 8002072:	4691      	mov	r9, r2
 8002074:	eb1a 0508 	adds.w	r5, sl, r8
 8002078:	eb4b 0609 	adc.w	r6, fp, r9
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	0094      	lsls	r4, r2, #2
 8002090:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002094:	008b      	lsls	r3, r1, #2
 8002096:	461a      	mov	r2, r3
 8002098:	4623      	mov	r3, r4
 800209a:	4628      	mov	r0, r5
 800209c:	4631      	mov	r1, r6
 800209e:	f7fe f89f 	bl	80001e0 <__aeabi_uldivmod>
 80020a2:	4603      	mov	r3, r0
 80020a4:	460c      	mov	r4, r1
 80020a6:	461a      	mov	r2, r3
 80020a8:	4bb8      	ldr	r3, [pc, #736]	; (800238c <UART_SetConfig+0x6f4>)
 80020aa:	fba3 2302 	umull	r2, r3, r3, r2
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	469b      	mov	fp, r3
 80020b8:	f04f 0c00 	mov.w	ip, #0
 80020bc:	46d9      	mov	r9, fp
 80020be:	46e2      	mov	sl, ip
 80020c0:	eb19 0309 	adds.w	r3, r9, r9
 80020c4:	eb4a 040a 	adc.w	r4, sl, sl
 80020c8:	4699      	mov	r9, r3
 80020ca:	46a2      	mov	sl, r4
 80020cc:	eb19 090b 	adds.w	r9, r9, fp
 80020d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020d4:	f04f 0100 	mov.w	r1, #0
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020e8:	4689      	mov	r9, r1
 80020ea:	4692      	mov	sl, r2
 80020ec:	eb1b 0509 	adds.w	r5, fp, r9
 80020f0:	eb4c 060a 	adc.w	r6, ip, sl
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	0094      	lsls	r4, r2, #2
 8002108:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800210c:	008b      	lsls	r3, r1, #2
 800210e:	461a      	mov	r2, r3
 8002110:	4623      	mov	r3, r4
 8002112:	4628      	mov	r0, r5
 8002114:	4631      	mov	r1, r6
 8002116:	f7fe f863 	bl	80001e0 <__aeabi_uldivmod>
 800211a:	4603      	mov	r3, r0
 800211c:	460c      	mov	r4, r1
 800211e:	461a      	mov	r2, r3
 8002120:	4b9a      	ldr	r3, [pc, #616]	; (800238c <UART_SetConfig+0x6f4>)
 8002122:	fba3 1302 	umull	r1, r3, r3, r2
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	3332      	adds	r3, #50	; 0x32
 8002134:	4a95      	ldr	r2, [pc, #596]	; (800238c <UART_SetConfig+0x6f4>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002140:	4498      	add	r8, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	469b      	mov	fp, r3
 8002146:	f04f 0c00 	mov.w	ip, #0
 800214a:	46d9      	mov	r9, fp
 800214c:	46e2      	mov	sl, ip
 800214e:	eb19 0309 	adds.w	r3, r9, r9
 8002152:	eb4a 040a 	adc.w	r4, sl, sl
 8002156:	4699      	mov	r9, r3
 8002158:	46a2      	mov	sl, r4
 800215a:	eb19 090b 	adds.w	r9, r9, fp
 800215e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002176:	4689      	mov	r9, r1
 8002178:	4692      	mov	sl, r2
 800217a:	eb1b 0509 	adds.w	r5, fp, r9
 800217e:	eb4c 060a 	adc.w	r6, ip, sl
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	f04f 0400 	mov.w	r4, #0
 8002194:	0094      	lsls	r4, r2, #2
 8002196:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800219a:	008b      	lsls	r3, r1, #2
 800219c:	461a      	mov	r2, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	4628      	mov	r0, r5
 80021a2:	4631      	mov	r1, r6
 80021a4:	f7fe f81c 	bl	80001e0 <__aeabi_uldivmod>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b77      	ldr	r3, [pc, #476]	; (800238c <UART_SetConfig+0x6f4>)
 80021b0:	fba3 1302 	umull	r1, r3, r3, r2
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	2164      	movs	r1, #100	; 0x64
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	3332      	adds	r3, #50	; 0x32
 80021c2:	4a72      	ldr	r2, [pc, #456]	; (800238c <UART_SetConfig+0x6f4>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4442      	add	r2, r8
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e0d0      	b.n	800237a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021d8:	f7ff fa98 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 80021dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	469a      	mov	sl, r3
 80021e2:	f04f 0b00 	mov.w	fp, #0
 80021e6:	46d0      	mov	r8, sl
 80021e8:	46d9      	mov	r9, fp
 80021ea:	eb18 0308 	adds.w	r3, r8, r8
 80021ee:	eb49 0409 	adc.w	r4, r9, r9
 80021f2:	4698      	mov	r8, r3
 80021f4:	46a1      	mov	r9, r4
 80021f6:	eb18 080a 	adds.w	r8, r8, sl
 80021fa:	eb49 090b 	adc.w	r9, r9, fp
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800220a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800220e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002212:	4688      	mov	r8, r1
 8002214:	4691      	mov	r9, r2
 8002216:	eb1a 0508 	adds.w	r5, sl, r8
 800221a:	eb4b 0609 	adc.w	r6, fp, r9
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	0094      	lsls	r4, r2, #2
 8002232:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002236:	008b      	lsls	r3, r1, #2
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	4628      	mov	r0, r5
 800223e:	4631      	mov	r1, r6
 8002240:	f7fd ffce 	bl	80001e0 <__aeabi_uldivmod>
 8002244:	4603      	mov	r3, r0
 8002246:	460c      	mov	r4, r1
 8002248:	461a      	mov	r2, r3
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <UART_SetConfig+0x6f4>)
 800224c:	fba3 2302 	umull	r2, r3, r3, r2
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	469b      	mov	fp, r3
 800225a:	f04f 0c00 	mov.w	ip, #0
 800225e:	46d9      	mov	r9, fp
 8002260:	46e2      	mov	sl, ip
 8002262:	eb19 0309 	adds.w	r3, r9, r9
 8002266:	eb4a 040a 	adc.w	r4, sl, sl
 800226a:	4699      	mov	r9, r3
 800226c:	46a2      	mov	sl, r4
 800226e:	eb19 090b 	adds.w	r9, r9, fp
 8002272:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800228a:	4689      	mov	r9, r1
 800228c:	4692      	mov	sl, r2
 800228e:	eb1b 0509 	adds.w	r5, fp, r9
 8002292:	eb4c 060a 	adc.w	r6, ip, sl
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	0094      	lsls	r4, r2, #2
 80022aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022ae:	008b      	lsls	r3, r1, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	4628      	mov	r0, r5
 80022b6:	4631      	mov	r1, r6
 80022b8:	f7fd ff92 	bl	80001e0 <__aeabi_uldivmod>
 80022bc:	4603      	mov	r3, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b32      	ldr	r3, [pc, #200]	; (800238c <UART_SetConfig+0x6f4>)
 80022c4:	fba3 1302 	umull	r1, r3, r3, r2
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	2164      	movs	r1, #100	; 0x64
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	3332      	adds	r3, #50	; 0x32
 80022d6:	4a2d      	ldr	r2, [pc, #180]	; (800238c <UART_SetConfig+0x6f4>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e2:	4498      	add	r8, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	469b      	mov	fp, r3
 80022e8:	f04f 0c00 	mov.w	ip, #0
 80022ec:	46d9      	mov	r9, fp
 80022ee:	46e2      	mov	sl, ip
 80022f0:	eb19 0309 	adds.w	r3, r9, r9
 80022f4:	eb4a 040a 	adc.w	r4, sl, sl
 80022f8:	4699      	mov	r9, r3
 80022fa:	46a2      	mov	sl, r4
 80022fc:	eb19 090b 	adds.w	r9, r9, fp
 8002300:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002310:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002314:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002318:	4689      	mov	r9, r1
 800231a:	4692      	mov	sl, r2
 800231c:	eb1b 0509 	adds.w	r5, fp, r9
 8002320:	eb4c 060a 	adc.w	r6, ip, sl
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	0094      	lsls	r4, r2, #2
 8002338:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800233c:	008b      	lsls	r3, r1, #2
 800233e:	461a      	mov	r2, r3
 8002340:	4623      	mov	r3, r4
 8002342:	4628      	mov	r0, r5
 8002344:	4631      	mov	r1, r6
 8002346:	f7fd ff4b 	bl	80001e0 <__aeabi_uldivmod>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	461a      	mov	r2, r3
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <UART_SetConfig+0x6f4>)
 8002352:	fba3 1302 	umull	r1, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2164      	movs	r1, #100	; 0x64
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	; 0x32
 8002364:	4a09      	ldr	r2, [pc, #36]	; (800238c <UART_SetConfig+0x6f4>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 020f 	and.w	r2, r3, #15
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4442      	add	r2, r8
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	e7ff      	b.n	800237a <UART_SetConfig+0x6e2>
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002384:	40011000 	.word	0x40011000
 8002388:	40011400 	.word	0x40011400
 800238c:	51eb851f 	.word	0x51eb851f

08002390 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <vApplicationGetIdleTaskMemory+0x2c>)
 80023a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <vApplicationGetIdleTaskMemory+0x30>)
 80023a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000090 	.word	0x20000090
 80023c0:	2000014c 	.word	0x2000014c

080023c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80023d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <vApplicationGetTimerTaskMemory+0x30>)
 80023da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	2000034c 	.word	0x2000034c
 80023f4:	20000408 	.word	0x20000408

080023f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0208 	add.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 0208 	add.w	r2, r3, #8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0208 	add.w	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	601a      	str	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d103      	bne.n	80024ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e00c      	b.n	80024d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3308      	adds	r3, #8
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e002      	b.n	80024c8 <vListInsert+0x2e>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d2f6      	bcs.n	80024c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6852      	ldr	r2, [r2, #4]
 800252c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d103      	bne.n	8002540 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	e7fe      	b.n	8002586 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002588:	f002 f888 	bl	800469c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	3b01      	subs	r3, #1
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	441a      	add	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d114      	bne.n	8002608 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3310      	adds	r3, #16
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 f94e 	bl	800388c <xTaskRemoveFromEventList>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <xQueueGenericReset+0xcc>)
 80025f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	e009      	b.n	800261c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3310      	adds	r3, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fef3 	bl	80023f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3324      	adds	r3, #36	; 0x24
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff feee 	bl	80023f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800261c:	f002 f86c 	bl	80046f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000ed04 	.word	0xe000ed04

08002630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08e      	sub	sp, #56	; 0x38
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <xQueueGenericCreateStatic+0x28>
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
 8002656:	e7fe      	b.n	8002656 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <xQueueGenericCreateStatic+0x42>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	e7fe      	b.n	8002670 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <xQueueGenericCreateStatic+0x4e>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <xQueueGenericCreateStatic+0x52>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <xQueueGenericCreateStatic+0x54>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <xQueueGenericCreateStatic+0x6c>
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	e7fe      	b.n	800269a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <xQueueGenericCreateStatic+0x78>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <xQueueGenericCreateStatic+0x7c>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <xQueueGenericCreateStatic+0x7e>
 80026ac:	2300      	movs	r3, #0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <xQueueGenericCreateStatic+0x96>
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	e7fe      	b.n	80026c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026c6:	2350      	movs	r3, #80	; 0x50
 80026c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b50      	cmp	r3, #80	; 0x50
 80026ce:	d009      	beq.n	80026e4 <xQueueGenericCreateStatic+0xb4>
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f805 	bl	8002716 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800270e:	4618      	mov	r0, r3
 8002710:	3730      	adds	r7, #48	; 0x30
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e002      	b.n	8002738 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002744:	2101      	movs	r1, #1
 8002746:	69b8      	ldr	r0, [r7, #24]
 8002748:	f7ff ff0a 	bl	8002560 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <xQueueGenericSend+0x30>
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
 800278a:	e7fe      	b.n	800278a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <xQueueGenericSend+0x3e>
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <xQueueGenericSend+0x42>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <xQueueGenericSend+0x44>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <xQueueGenericSend+0x5c>
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e7fe      	b.n	80027b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d103      	bne.n	80027c6 <xQueueGenericSend+0x6a>
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <xQueueGenericSend+0x6e>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueGenericSend+0x70>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <xQueueGenericSend+0x88>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	e7fe      	b.n	80027e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e4:	f001 fa0e 	bl	8003c04 <xTaskGetSchedulerState>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <xQueueGenericSend+0x98>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <xQueueGenericSend+0x9c>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <xQueueGenericSend+0x9e>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <xQueueGenericSend+0xb6>
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e7fe      	b.n	8002810 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002812:	f001 ff43 	bl	800469c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	429a      	cmp	r2, r3
 8002820:	d302      	bcc.n	8002828 <xQueueGenericSend+0xcc>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d129      	bne.n	800287c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800282e:	f000 f9ff 	bl	8002c30 <prvCopyDataToQueue>
 8002832:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2b00      	cmp	r3, #0
 800283a:	d010      	beq.n	800285e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f823 	bl	800388c <xTaskRemoveFromEventList>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <xQueueGenericSend+0x1f0>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	e00a      	b.n	8002874 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002864:	4b39      	ldr	r3, [pc, #228]	; (800294c <xQueueGenericSend+0x1f0>)
 8002866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002874:	f001 ff40 	bl	80046f8 <vPortExitCritical>
				return pdPASS;
 8002878:	2301      	movs	r3, #1
 800287a:	e063      	b.n	8002944 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002882:	f001 ff39 	bl	80046f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002886:	2300      	movs	r3, #0
 8002888:	e05c      	b.n	8002944 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f85b 	bl	8003950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800289a:	2301      	movs	r3, #1
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800289e:	f001 ff2b 	bl	80046f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028a2:	f000 fdcf 	bl	8003444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028a6:	f001 fef9 	bl	800469c <vPortEnterCritical>
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d103      	bne.n	80028c0 <xQueueGenericSend+0x164>
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d103      	bne.n	80028d6 <xQueueGenericSend+0x17a>
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d6:	f001 ff0f 	bl	80046f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028da:	1d3a      	adds	r2, r7, #4
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 f84a 	bl	800397c <xTaskCheckForTimeOut>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d124      	bne.n	8002938 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028f0:	f000 fa96 	bl	8002e20 <prvIsQueueFull>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d018      	beq.n	800292c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	3310      	adds	r3, #16
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f000 ff74 	bl	80037f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290a:	f000 fa21 	bl	8002d50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800290e:	f000 fda7 	bl	8003460 <xTaskResumeAll>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af7c 	bne.w	8002812 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <xQueueGenericSend+0x1f0>)
 800291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	e772      	b.n	8002812 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800292c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292e:	f000 fa0f 	bl	8002d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002932:	f000 fd95 	bl	8003460 <xTaskResumeAll>
 8002936:	e76c      	b.n	8002812 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800293a:	f000 fa09 	bl	8002d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800293e:	f000 fd8f 	bl	8003460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002942:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002944:	4618      	mov	r0, r3
 8002946:	3738      	adds	r7, #56	; 0x38
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	; 0x38
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <xQueueGenericSendFromISR+0x2c>
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	e7fe      	b.n	800297a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <xQueueGenericSendFromISR+0x3a>
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <xQueueGenericSendFromISR+0x3e>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <xQueueGenericSendFromISR+0x40>
 800298e:	2300      	movs	r3, #0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <xQueueGenericSendFromISR+0x58>
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	e7fe      	b.n	80029a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d103      	bne.n	80029b6 <xQueueGenericSendFromISR+0x66>
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <xQueueGenericSendFromISR+0x6a>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <xQueueGenericSendFromISR+0x6c>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <xQueueGenericSendFromISR+0x84>
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e7fe      	b.n	80029d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029d4:	f001 ff3e 	bl	8004854 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029d8:	f3ef 8211 	mrs	r2, BASEPRI
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	61ba      	str	r2, [r7, #24]
 80029ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d302      	bcc.n	8002a06 <xQueueGenericSendFromISR+0xb6>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d12c      	bne.n	8002a60 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a16:	f000 f90b 	bl	8002c30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d112      	bne.n	8002a4a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d016      	beq.n	8002a5a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	3324      	adds	r3, #36	; 0x24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 ff2b 	bl	800388c <xTaskRemoveFromEventList>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e007      	b.n	8002a5a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	b25a      	sxtb	r2, r3
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a5e:	e001      	b.n	8002a64 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3738      	adds	r7, #56	; 0x38
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <xQueueReceive+0x2e>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <xQueueReceive+0x3c>
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <xQueueReceive+0x40>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <xQueueReceive+0x42>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <xQueueReceive+0x5a>
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e7fe      	b.n	8002ad0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ad2:	f001 f897 	bl	8003c04 <xTaskGetSchedulerState>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <xQueueReceive+0x6a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <xQueueReceive+0x6e>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <xQueueReceive+0x70>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <xQueueReceive+0x88>
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	e7fe      	b.n	8002afe <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b00:	f001 fdcc 	bl	800469c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01f      	beq.n	8002b50 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b14:	f000 f8f6 	bl	8002d04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	1e5a      	subs	r2, r3, #1
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00f      	beq.n	8002b48 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fead 	bl	800388c <xTaskRemoveFromEventList>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b38:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <xQueueReceive+0x1b4>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b48:	f001 fdd6 	bl	80046f8 <vPortExitCritical>
				return pdPASS;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e069      	b.n	8002c24 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b56:	f001 fdcf 	bl	80046f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e062      	b.n	8002c24 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fef1 	bl	8003950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b72:	f001 fdc1 	bl	80046f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b76:	f000 fc65 	bl	8003444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b7a:	f001 fd8f 	bl	800469c <vPortEnterCritical>
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d103      	bne.n	8002b94 <xQueueReceive+0x11c>
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d103      	bne.n	8002baa <xQueueReceive+0x132>
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002baa:	f001 fda5 	bl	80046f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bae:	1d3a      	adds	r2, r7, #4
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fee0 	bl	800397c <xTaskCheckForTimeOut>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d123      	bne.n	8002c0a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc4:	f000 f916 	bl	8002df4 <prvIsQueueEmpty>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d017      	beq.n	8002bfe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	3324      	adds	r3, #36	; 0x24
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fe0a 	bl	80037f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bde:	f000 f8b7 	bl	8002d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002be2:	f000 fc3d 	bl	8003460 <xTaskResumeAll>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d189      	bne.n	8002b00 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <xQueueReceive+0x1b4>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	e780      	b.n	8002b00 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c00:	f000 f8a6 	bl	8002d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c04:	f000 fc2c 	bl	8003460 <xTaskResumeAll>
 8002c08:	e77a      	b.n	8002b00 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0c:	f000 f8a0 	bl	8002d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c10:	f000 fc26 	bl	8003460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c16:	f000 f8ed 	bl	8002df4 <prvIsQueueEmpty>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f43f af6f 	beq.w	8002b00 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3730      	adds	r7, #48	; 0x30
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	e000ed04 	.word	0xe000ed04

08002c30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d14d      	bne.n	8002cf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fff0 	bl	8003c40 <xTaskPriorityDisinherit>
 8002c60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e043      	b.n	8002cf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d119      	bne.n	8002ca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6858      	ldr	r0, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	f002 f822 	bl	8004cc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	441a      	add	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d32b      	bcc.n	8002cf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	e026      	b.n	8002cf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68d8      	ldr	r0, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	461a      	mov	r2, r3
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	f002 f808 	bl	8004cc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	441a      	add	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	425b      	negs	r3, r3
 8002cda:	441a      	add	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d105      	bne.n	8002cf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002cfa:	697b      	ldr	r3, [r7, #20]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d018      	beq.n	8002d48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d303      	bcc.n	8002d38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68d9      	ldr	r1, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	461a      	mov	r2, r3
 8002d42:	6838      	ldr	r0, [r7, #0]
 8002d44:	f001 ffbe 	bl	8004cc4 <memcpy>
	}
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d58:	f001 fca0 	bl	800469c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d64:	e011      	b.n	8002d8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3324      	adds	r3, #36	; 0x24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fd8a 	bl	800388c <xTaskRemoveFromEventList>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d7e:	f000 fe5d 	bl	8003a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	dce9      	bgt.n	8002d66 <prvUnlockQueue+0x16>
 8002d92:	e000      	b.n	8002d96 <prvUnlockQueue+0x46>
					break;
 8002d94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d9e:	f001 fcab 	bl	80046f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002da2:	f001 fc7b 	bl	800469c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dae:	e011      	b.n	8002dd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3310      	adds	r3, #16
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fd65 	bl	800388c <xTaskRemoveFromEventList>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dc8:	f000 fe38 	bl	8003a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dcc:	7bbb      	ldrb	r3, [r7, #14]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dce9      	bgt.n	8002db0 <prvUnlockQueue+0x60>
 8002ddc:	e000      	b.n	8002de0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002de8:	f001 fc86 	bl	80046f8 <vPortExitCritical>
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dfc:	f001 fc4e 	bl	800469c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e12:	f001 fc71 	bl	80046f8 <vPortExitCritical>

	return xReturn;
 8002e16:	68fb      	ldr	r3, [r7, #12]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e28:	f001 fc38 	bl	800469c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d102      	bne.n	8002e3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e001      	b.n	8002e42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e42:	f001 fc59 	bl	80046f8 <vPortExitCritical>

	return xReturn;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e014      	b.n	8002e8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <vQueueAddToRegistry+0x4c>)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e6c:	490b      	ldr	r1, [pc, #44]	; (8002e9c <vQueueAddToRegistry+0x4c>)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <vQueueAddToRegistry+0x4c>)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e82:	e005      	b.n	8002e90 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	d9e7      	bls.n	8002e60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	20004af4 	.word	0x20004af4

08002ea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002eb0:	f001 fbf4 	bl	800469c <vPortEnterCritical>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d103      	bne.n	8002eca <vQueueWaitForMessageRestricted+0x2a>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <vQueueWaitForMessageRestricted+0x40>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee0:	f001 fc0a 	bl	80046f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3324      	adds	r3, #36	; 0x24
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fc9f 	bl	8003838 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff28 	bl	8002d50 <prvUnlockQueue>
	}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	; 0x38
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <xTaskCreateStatic+0x28>
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	e7fe      	b.n	8002f2e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <xTaskCreateStatic+0x42>
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	e7fe      	b.n	8002f48 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f4a:	23bc      	movs	r3, #188	; 0xbc
 8002f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2bbc      	cmp	r3, #188	; 0xbc
 8002f52:	d009      	beq.n	8002f68 <xTaskCreateStatic+0x60>
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e7fe      	b.n	8002f66 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01e      	beq.n	8002fae <xTaskCreateStatic+0xa6>
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01b      	beq.n	8002fae <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9303      	str	r3, [sp, #12]
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	9302      	str	r3, [sp, #8]
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f851 	bl	8003048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fa8:	f000 f8f4 	bl	8003194 <prvAddNewTaskToReadyList>
 8002fac:	e001      	b.n	8002fb2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fb2:	697b      	ldr	r3, [r7, #20]
	}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	; 0x30
 8002fc0:	af04      	add	r7, sp, #16
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 fc7d 	bl	80048d0 <pvPortMalloc>
 8002fd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fde:	20bc      	movs	r0, #188	; 0xbc
 8002fe0:	f001 fc76 	bl	80048d0 <pvPortMalloc>
 8002fe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff2:	e005      	b.n	8003000 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f001 fd2d 	bl	8004a54 <vPortFree>
 8002ffa:	e001      	b.n	8003000 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d017      	beq.n	8003036 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	2300      	movs	r3, #0
 8003012:	9303      	str	r3, [sp, #12]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f80f 	bl	8003048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800302a:	69f8      	ldr	r0, [r7, #28]
 800302c:	f000 f8b2 	bl	8003194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003030:	2301      	movs	r3, #1
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	e002      	b.n	800303c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800303c:	69bb      	ldr	r3, [r7, #24]
	}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	21a5      	movs	r1, #165	; 0xa5
 8003062:	f001 fe3a 	bl	8004cda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003070:	3b01      	subs	r3, #1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f023 0307 	bic.w	r3, r3, #7
 800307e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <prvInitialiseNewTask+0x56>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e7fe      	b.n	800309c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01f      	beq.n	80030e4 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e012      	b.n	80030d0 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	7819      	ldrb	r1, [r3, #0]
 80030b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	3334      	adds	r3, #52	; 0x34
 80030ba:	460a      	mov	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d9e9      	bls.n	80030aa <prvInitialiseNewTask+0x62>
 80030d6:	e000      	b.n	80030da <prvInitialiseNewTask+0x92>
			{
				break;
 80030d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e2:	e003      	b.n	80030ec <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	2b37      	cmp	r3, #55	; 0x37
 80030f0:	d901      	bls.n	80030f6 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f2:	2337      	movs	r3, #55	; 0x37
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003100:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	2200      	movs	r2, #0
 8003106:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	3304      	adds	r3, #4
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff f993 	bl	8002438 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	3318      	adds	r3, #24
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f98e 	bl	8002438 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003120:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2200      	movs	r2, #0
 8003136:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	3354      	adds	r3, #84	; 0x54
 8003146:	2260      	movs	r2, #96	; 0x60
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fdc5 	bl	8004cda <memset>
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <prvInitialiseNewTask+0x140>)
 8003154:	659a      	str	r2, [r3, #88]	; 0x58
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <prvInitialiseNewTask+0x144>)
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <prvInitialiseNewTask+0x148>)
 8003160:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	69b8      	ldr	r0, [r7, #24]
 8003168:	f001 f970 	bl	800444c <pxPortInitialiseStack>
 800316c:	4602      	mov	r2, r0
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317e:	bf00      	nop
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	08004eec 	.word	0x08004eec
 800318c:	08004f0c 	.word	0x08004f0c
 8003190:	08004ecc 	.word	0x08004ecc

08003194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800319c:	f001 fa7e 	bl	800469c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <prvAddNewTaskToReadyList+0xc4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <prvAddNewTaskToReadyList+0xc4>)
 80031a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031aa:	4b2c      	ldr	r3, [pc, #176]	; (800325c <prvAddNewTaskToReadyList+0xc8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031b2:	4a2a      	ldr	r2, [pc, #168]	; (800325c <prvAddNewTaskToReadyList+0xc8>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <prvAddNewTaskToReadyList+0xc4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d110      	bne.n	80031e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031c0:	f000 fc60 	bl	8003a84 <prvInitialiseTaskLists>
 80031c4:	e00d      	b.n	80031e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <prvAddNewTaskToReadyList+0xcc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <prvAddNewTaskToReadyList+0xc8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d802      	bhi.n	80031e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031dc:	4a1f      	ldr	r2, [pc, #124]	; (800325c <prvAddNewTaskToReadyList+0xc8>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <prvAddNewTaskToReadyList+0xd0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <prvAddNewTaskToReadyList+0xd0>)
 80031ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <prvAddNewTaskToReadyList+0xd0>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <prvAddNewTaskToReadyList+0xd4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d903      	bls.n	8003208 <prvAddNewTaskToReadyList+0x74>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a18      	ldr	r2, [pc, #96]	; (8003268 <prvAddNewTaskToReadyList+0xd4>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <prvAddNewTaskToReadyList+0xd8>)
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7ff f917 	bl	8002452 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003224:	f001 fa68 	bl	80046f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <prvAddNewTaskToReadyList+0xcc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <prvAddNewTaskToReadyList+0xc8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	429a      	cmp	r2, r3
 800323c:	d207      	bcs.n	800324e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <prvAddNewTaskToReadyList+0xdc>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000cdc 	.word	0x20000cdc
 800325c:	20000808 	.word	0x20000808
 8003260:	20000ce8 	.word	0x20000ce8
 8003264:	20000cf8 	.word	0x20000cf8
 8003268:	20000ce4 	.word	0x20000ce4
 800326c:	2000080c 	.word	0x2000080c
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <vTaskDelayUntil+0x28>
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e7fe      	b.n	800329a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <vTaskDelayUntil+0x42>
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	e7fe      	b.n	80032b4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <vTaskDelayUntil+0xe8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <vTaskDelayUntil+0x5e>
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e7fe      	b.n	80032d0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80032d2:	f000 f8b7 	bl	8003444 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <vTaskDelayUntil+0xec>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d20b      	bcs.n	8003308 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d211      	bcs.n	800331e <vTaskDelayUntil+0xaa>
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d90d      	bls.n	800331e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003302:	2301      	movs	r3, #1
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e00a      	b.n	800331e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	d303      	bcc.n	800331a <vTaskDelayUntil+0xa6>
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	429a      	cmp	r2, r3
 8003318:	d901      	bls.n	800331e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800331a:	2301      	movs	r3, #1
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fcf0 	bl	8003d18 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003338:	f000 f892 	bl	8003460 <xTaskResumeAll>
 800333c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <vTaskDelayUntil+0xf0>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003354:	bf00      	nop
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000d04 	.word	0x20000d04
 8003360:	20000ce0 	.word	0x20000ce0
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003376:	463a      	mov	r2, r7
 8003378:	1d39      	adds	r1, r7, #4
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f806 	bl	8002390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	9202      	str	r2, [sp, #8]
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	2300      	movs	r3, #0
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2300      	movs	r3, #0
 8003394:	460a      	mov	r2, r1
 8003396:	4923      	ldr	r1, [pc, #140]	; (8003424 <vTaskStartScheduler+0xbc>)
 8003398:	4823      	ldr	r0, [pc, #140]	; (8003428 <vTaskStartScheduler+0xc0>)
 800339a:	f7ff fdb5 	bl	8002f08 <xTaskCreateStatic>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <vTaskStartScheduler+0xc4>)
 80033a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <vTaskStartScheduler+0xc4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033ac:	2301      	movs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e001      	b.n	80033b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d102      	bne.n	80033c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033bc:	f000 fd00 	bl	8003dc0 <xTimerCreateTimerTask>
 80033c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d11a      	bne.n	80033fe <vTaskStartScheduler+0x96>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <vTaskStartScheduler+0xc8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3354      	adds	r3, #84	; 0x54
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <vTaskStartScheduler+0xcc>)
 80033e2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033e4:	4b14      	ldr	r3, [pc, #80]	; (8003438 <vTaskStartScheduler+0xd0>)
 80033e6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <vTaskStartScheduler+0xd4>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <vTaskStartScheduler+0xd8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033f8:	f001 f8b2 	bl	8004560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033fc:	e00d      	b.n	800341a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d109      	bne.n	800341a <vTaskStartScheduler+0xb2>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e7fe      	b.n	8003418 <vTaskStartScheduler+0xb0>
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	08004e9c 	.word	0x08004e9c
 8003428:	08003a55 	.word	0x08003a55
 800342c:	20000d00 	.word	0x20000d00
 8003430:	20000808 	.word	0x20000808
 8003434:	20000010 	.word	0x20000010
 8003438:	20000cfc 	.word	0x20000cfc
 800343c:	20000ce8 	.word	0x20000ce8
 8003440:	20000ce0 	.word	0x20000ce0

08003444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <vTaskSuspendAll+0x18>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a03      	ldr	r2, [pc, #12]	; (800345c <vTaskSuspendAll+0x18>)
 8003450:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	20000d04 	.word	0x20000d04

08003460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <xTaskResumeAll+0x114>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <xTaskResumeAll+0x2a>
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	e7fe      	b.n	8003488 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800348a:	f001 f907 	bl	800469c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <xTaskResumeAll+0x114>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	4a37      	ldr	r2, [pc, #220]	; (8003574 <xTaskResumeAll+0x114>)
 8003496:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003498:	4b36      	ldr	r3, [pc, #216]	; (8003574 <xTaskResumeAll+0x114>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d162      	bne.n	8003566 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <xTaskResumeAll+0x118>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05e      	beq.n	8003566 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a8:	e02f      	b.n	800350a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034aa:	4b34      	ldr	r3, [pc, #208]	; (800357c <xTaskResumeAll+0x11c>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3318      	adds	r3, #24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f828 	bl	800250c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f823 	bl	800250c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <xTaskResumeAll+0x120>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d903      	bls.n	80034da <xTaskResumeAll+0x7a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <xTaskResumeAll+0x120>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a27      	ldr	r2, [pc, #156]	; (8003584 <xTaskResumeAll+0x124>)
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fe ffae 	bl	8002452 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <xTaskResumeAll+0x128>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <xTaskResumeAll+0x12c>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <xTaskResumeAll+0x11c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1cb      	bne.n	80034aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003518:	f000 fb54 	bl	8003bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <xTaskResumeAll+0x130>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003528:	f000 f846 	bl	80035b8 <xTaskIncrementTick>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <xTaskResumeAll+0x12c>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f1      	bne.n	8003528 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <xTaskResumeAll+0x130>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <xTaskResumeAll+0x12c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003552:	2301      	movs	r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <xTaskResumeAll+0x134>)
 8003558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003566:	f001 f8c7 	bl	80046f8 <vPortExitCritical>

	return xAlreadyYielded;
 800356a:	68bb      	ldr	r3, [r7, #8]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000d04 	.word	0x20000d04
 8003578:	20000cdc 	.word	0x20000cdc
 800357c:	20000c9c 	.word	0x20000c9c
 8003580:	20000ce4 	.word	0x20000ce4
 8003584:	2000080c 	.word	0x2000080c
 8003588:	20000808 	.word	0x20000808
 800358c:	20000cf0 	.word	0x20000cf0
 8003590:	20000cec 	.word	0x20000cec
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <xTaskGetTickCount+0x1c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035a4:	687b      	ldr	r3, [r7, #4]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000ce0 	.word	0x20000ce0

080035b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <xTaskIncrementTick+0x144>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8088 	bne.w	80036dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035cc:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <xTaskIncrementTick+0x148>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035d4:	4a4a      	ldr	r2, [pc, #296]	; (8003700 <xTaskIncrementTick+0x148>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11f      	bne.n	8003620 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80035e0:	4b48      	ldr	r3, [pc, #288]	; (8003704 <xTaskIncrementTick+0x14c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <xTaskIncrementTick+0x46>
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	e7fe      	b.n	80035fc <xTaskIncrementTick+0x44>
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <xTaskIncrementTick+0x14c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	4b40      	ldr	r3, [pc, #256]	; (8003708 <xTaskIncrementTick+0x150>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <xTaskIncrementTick+0x14c>)
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4a3e      	ldr	r2, [pc, #248]	; (8003708 <xTaskIncrementTick+0x150>)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <xTaskIncrementTick+0x154>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a3c      	ldr	r2, [pc, #240]	; (800370c <xTaskIncrementTick+0x154>)
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	f000 fad2 	bl	8003bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003620:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <xTaskIncrementTick+0x158>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d349      	bcc.n	80036be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <xTaskIncrementTick+0x14c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003634:	4b36      	ldr	r3, [pc, #216]	; (8003710 <xTaskIncrementTick+0x158>)
 8003636:	f04f 32ff 	mov.w	r2, #4294967295
 800363a:	601a      	str	r2, [r3, #0]
					break;
 800363c:	e03f      	b.n	80036be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <xTaskIncrementTick+0x14c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d203      	bcs.n	800365e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003656:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <xTaskIncrementTick+0x158>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800365c:	e02f      	b.n	80036be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ff52 	bl	800250c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	3318      	adds	r3, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe ff49 	bl	800250c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <xTaskIncrementTick+0x15c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d903      	bls.n	800368e <xTaskIncrementTick+0xd6>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a22      	ldr	r2, [pc, #136]	; (8003714 <xTaskIncrementTick+0x15c>)
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <xTaskIncrementTick+0x160>)
 800369c:	441a      	add	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3304      	adds	r3, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f7fe fed4 	bl	8002452 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <xTaskIncrementTick+0x164>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3b8      	bcc.n	800362a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036bc:	e7b5      	b.n	800362a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <xTaskIncrementTick+0x164>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4914      	ldr	r1, [pc, #80]	; (8003718 <xTaskIncrementTick+0x160>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d907      	bls.n	80036e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e004      	b.n	80036e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <xTaskIncrementTick+0x168>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <xTaskIncrementTick+0x168>)
 80036e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <xTaskIncrementTick+0x16c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036f2:	697b      	ldr	r3, [r7, #20]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000d04 	.word	0x20000d04
 8003700:	20000ce0 	.word	0x20000ce0
 8003704:	20000c94 	.word	0x20000c94
 8003708:	20000c98 	.word	0x20000c98
 800370c:	20000cf4 	.word	0x20000cf4
 8003710:	20000cfc 	.word	0x20000cfc
 8003714:	20000ce4 	.word	0x20000ce4
 8003718:	2000080c 	.word	0x2000080c
 800371c:	20000808 	.word	0x20000808
 8003720:	20000cec 	.word	0x20000cec
 8003724:	20000cf0 	.word	0x20000cf0

08003728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <vTaskSwitchContext+0xb0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <vTaskSwitchContext+0xb4>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800373c:	e045      	b.n	80037ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <vTaskSwitchContext+0xb4>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003744:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <vTaskSwitchContext+0xb8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e00f      	b.n	800376c <vTaskSwitchContext+0x44>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <vTaskSwitchContext+0x3e>
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	e7fe      	b.n	8003764 <vTaskSwitchContext+0x3c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3b01      	subs	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	491d      	ldr	r1, [pc, #116]	; (80037e4 <vTaskSwitchContext+0xbc>)
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0e5      	beq.n	800374c <vTaskSwitchContext+0x24>
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <vTaskSwitchContext+0xbc>)
 800378c:	4413      	add	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3308      	adds	r3, #8
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d104      	bne.n	80037b0 <vTaskSwitchContext+0x88>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <vTaskSwitchContext+0xc0>)
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <vTaskSwitchContext+0xb8>)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <vTaskSwitchContext+0xc0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3354      	adds	r3, #84	; 0x54
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <vTaskSwitchContext+0xc4>)
 80037c8:	6013      	str	r3, [r2, #0]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000d04 	.word	0x20000d04
 80037dc:	20000cf0 	.word	0x20000cf0
 80037e0:	20000ce4 	.word	0x20000ce4
 80037e4:	2000080c 	.word	0x2000080c
 80037e8:	20000808 	.word	0x20000808
 80037ec:	20000010 	.word	0x20000010

080037f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <vTaskPlaceOnEventList+0x24>
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e7fe      	b.n	8003812 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <vTaskPlaceOnEventList+0x44>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3318      	adds	r3, #24
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fe fe3c 	bl	800249a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003822:	2101      	movs	r1, #1
 8003824:	6838      	ldr	r0, [r7, #0]
 8003826:	f000 fa77 	bl	8003d18 <prvAddCurrentTaskToDelayedList>
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000808 	.word	0x20000808

08003838 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <vTaskPlaceOnEventListRestricted+0x26>
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e7fe      	b.n	800385c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vTaskPlaceOnEventListRestricted+0x50>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3318      	adds	r3, #24
 8003864:	4619      	mov	r1, r3
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7fe fdf3 	bl	8002452 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f000 fa4c 	bl	8003d18 <prvAddCurrentTaskToDelayedList>
	}
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000808 	.word	0x20000808

0800388c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <xTaskRemoveFromEventList+0x2a>
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e7fe      	b.n	80038b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3318      	adds	r3, #24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fe26 	bl	800250c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <xTaskRemoveFromEventList+0xac>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11d      	bne.n	8003904 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fe1d 	bl	800250c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4b19      	ldr	r3, [pc, #100]	; (800393c <xTaskRemoveFromEventList+0xb0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d903      	bls.n	80038e6 <xTaskRemoveFromEventList+0x5a>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <xTaskRemoveFromEventList+0xb0>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <xTaskRemoveFromEventList+0xb4>)
 80038f4:	441a      	add	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fe fda8 	bl	8002452 <vListInsertEnd>
 8003902:	e005      	b.n	8003910 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3318      	adds	r3, #24
 8003908:	4619      	mov	r1, r3
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <xTaskRemoveFromEventList+0xb8>)
 800390c:	f7fe fda1 	bl	8002452 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <xTaskRemoveFromEventList+0xbc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	429a      	cmp	r2, r3
 800391c:	d905      	bls.n	800392a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800391e:	2301      	movs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <xTaskRemoveFromEventList+0xc0>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e001      	b.n	800392e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800392e:	697b      	ldr	r3, [r7, #20]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000d04 	.word	0x20000d04
 800393c:	20000ce4 	.word	0x20000ce4
 8003940:	2000080c 	.word	0x2000080c
 8003944:	20000c9c 	.word	0x20000c9c
 8003948:	20000808 	.word	0x20000808
 800394c:	20000cf0 	.word	0x20000cf0

08003950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <vTaskInternalSetTimeOutState+0x24>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <vTaskInternalSetTimeOutState+0x28>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000cf4 	.word	0x20000cf4
 8003978:	20000ce0 	.word	0x20000ce0

0800397c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <xTaskCheckForTimeOut+0x24>
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e7fe      	b.n	800399e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <xTaskCheckForTimeOut+0x3e>
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e7fe      	b.n	80039b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80039ba:	f000 fe6f 	bl	800469c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <xTaskCheckForTimeOut+0xb8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d102      	bne.n	80039de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e023      	b.n	8003a26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <xTaskCheckForTimeOut+0xbc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d007      	beq.n	80039fa <xTaskCheckForTimeOut+0x7e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	e015      	b.n	8003a26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d20b      	bcs.n	8003a1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	1ad2      	subs	r2, r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff9d 	bl	8003950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	e004      	b.n	8003a26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a26:	f000 fe67 	bl	80046f8 <vPortExitCritical>

	return xReturn;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000ce0 	.word	0x20000ce0
 8003a38:	20000cf4 	.word	0x20000cf4

08003a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <vTaskMissedYield+0x14>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000cf0 	.word	0x20000cf0

08003a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a5c:	f000 f852 	bl	8003b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <prvIdleTask+0x28>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d9f9      	bls.n	8003a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <prvIdleTask+0x2c>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a78:	e7f0      	b.n	8003a5c <prvIdleTask+0x8>
 8003a7a:	bf00      	nop
 8003a7c:	2000080c 	.word	0x2000080c
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	e00c      	b.n	8003aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <prvInitialiseTaskLists+0x60>)
 8003a9c:	4413      	add	r3, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fcaa 	bl	80023f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b37      	cmp	r3, #55	; 0x37
 8003aae:	d9ef      	bls.n	8003a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <prvInitialiseTaskLists+0x64>)
 8003ab2:	f7fe fca1 	bl	80023f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ab6:	480d      	ldr	r0, [pc, #52]	; (8003aec <prvInitialiseTaskLists+0x68>)
 8003ab8:	f7fe fc9e 	bl	80023f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003abc:	480c      	ldr	r0, [pc, #48]	; (8003af0 <prvInitialiseTaskLists+0x6c>)
 8003abe:	f7fe fc9b 	bl	80023f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ac2:	480c      	ldr	r0, [pc, #48]	; (8003af4 <prvInitialiseTaskLists+0x70>)
 8003ac4:	f7fe fc98 	bl	80023f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ac8:	480b      	ldr	r0, [pc, #44]	; (8003af8 <prvInitialiseTaskLists+0x74>)
 8003aca:	f7fe fc95 	bl	80023f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <prvInitialiseTaskLists+0x78>)
 8003ad0:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <prvInitialiseTaskLists+0x64>)
 8003ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <prvInitialiseTaskLists+0x7c>)
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <prvInitialiseTaskLists+0x68>)
 8003ad8:	601a      	str	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000080c 	.word	0x2000080c
 8003ae8:	20000c6c 	.word	0x20000c6c
 8003aec:	20000c80 	.word	0x20000c80
 8003af0:	20000c9c 	.word	0x20000c9c
 8003af4:	20000cb0 	.word	0x20000cb0
 8003af8:	20000cc8 	.word	0x20000cc8
 8003afc:	20000c94 	.word	0x20000c94
 8003b00:	20000c98 	.word	0x20000c98

08003b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b0a:	e019      	b.n	8003b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b0c:	f000 fdc6 	bl	800469c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <prvCheckTasksWaitingTermination+0x4c>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fcf5 	bl	800250c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <prvCheckTasksWaitingTermination+0x50>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <prvCheckTasksWaitingTermination+0x50>)
 8003b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvCheckTasksWaitingTermination+0x54>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <prvCheckTasksWaitingTermination+0x54>)
 8003b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b36:	f000 fddf 	bl	80046f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f80e 	bl	8003b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <prvCheckTasksWaitingTermination+0x54>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e1      	bne.n	8003b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000cb0 	.word	0x20000cb0
 8003b54:	20000cdc 	.word	0x20000cdc
 8003b58:	20000cc4 	.word	0x20000cc4

08003b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3354      	adds	r3, #84	; 0x54
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 f8cb 	bl	8004d04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d108      	bne.n	8003b8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 ff69 	bl	8004a54 <vPortFree>
				vPortFree( pxTCB );
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 ff66 	bl	8004a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b88:	e017      	b.n	8003bba <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d103      	bne.n	8003b9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ff5d 	bl	8004a54 <vPortFree>
	}
 8003b9a:	e00e      	b.n	8003bba <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d009      	beq.n	8003bba <prvDeleteTCB+0x5e>
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e7fe      	b.n	8003bb8 <prvDeleteTCB+0x5c>
	}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <prvResetNextTaskUnblockTime+0x38>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d104      	bne.n	8003bde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <prvResetNextTaskUnblockTime+0x3c>)
 8003bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bdc:	e008      	b.n	8003bf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <prvResetNextTaskUnblockTime+0x38>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <prvResetNextTaskUnblockTime+0x3c>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20000c94 	.word	0x20000c94
 8003c00:	20000cfc 	.word	0x20000cfc

08003c04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <xTaskGetSchedulerState+0x34>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c12:	2301      	movs	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	e008      	b.n	8003c2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <xTaskGetSchedulerState+0x38>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c20:	2302      	movs	r3, #2
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	e001      	b.n	8003c2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c2a:	687b      	ldr	r3, [r7, #4]
	}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	20000ce8 	.word	0x20000ce8
 8003c3c:	20000d04 	.word	0x20000d04

08003c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d054      	beq.n	8003d00 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <xTaskPriorityDisinherit+0xcc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d009      	beq.n	8003c74 <xTaskPriorityDisinherit+0x34>
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e7fe      	b.n	8003c72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <xTaskPriorityDisinherit+0x50>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	e7fe      	b.n	8003c8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c94:	1e5a      	subs	r2, r3, #1
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d02c      	beq.n	8003d00 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d128      	bne.n	8003d00 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fc2a 	bl	800250c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <xTaskPriorityDisinherit+0xd0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d903      	bls.n	8003ce0 <xTaskPriorityDisinherit+0xa0>
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <xTaskPriorityDisinherit+0xd0>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <xTaskPriorityDisinherit+0xd4>)
 8003cee:	441a      	add	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f7fe fbab 	bl	8002452 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d00:	697b      	ldr	r3, [r7, #20]
	}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000808 	.word	0x20000808
 8003d10:	20000ce4 	.word	0x20000ce4
 8003d14:	2000080c 	.word	0x2000080c

08003d18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d28:	4b20      	ldr	r3, [pc, #128]	; (8003dac <prvAddCurrentTaskToDelayedList+0x94>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fbec 	bl	800250c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d10a      	bne.n	8003d52 <prvAddCurrentTaskToDelayedList+0x3a>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <prvAddCurrentTaskToDelayedList+0x94>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4819      	ldr	r0, [pc, #100]	; (8003db0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d4c:	f7fe fb81 	bl	8002452 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d50:	e026      	b.n	8003da0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <prvAddCurrentTaskToDelayedList+0x94>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d209      	bcs.n	8003d7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <prvAddCurrentTaskToDelayedList+0x94>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f7fe fb8f 	bl	800249a <vListInsert>
}
 8003d7c:	e010      	b.n	8003da0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <prvAddCurrentTaskToDelayedList+0x94>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7fe fb85 	bl	800249a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d202      	bcs.n	8003da0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000ce0 	.word	0x20000ce0
 8003dac:	20000808 	.word	0x20000808
 8003db0:	20000cc8 	.word	0x20000cc8
 8003db4:	20000c98 	.word	0x20000c98
 8003db8:	20000c94 	.word	0x20000c94
 8003dbc:	20000cfc 	.word	0x20000cfc

08003dc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003dca:	f000 faff 	bl	80043cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <xTimerCreateTimerTask+0x80>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d021      	beq.n	8003e1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003dde:	1d3a      	adds	r2, r7, #4
 8003de0:	f107 0108 	add.w	r1, r7, #8
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe faeb 	bl	80023c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	9202      	str	r2, [sp, #8]
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2302      	movs	r3, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	460a      	mov	r2, r1
 8003e00:	4910      	ldr	r1, [pc, #64]	; (8003e44 <xTimerCreateTimerTask+0x84>)
 8003e02:	4811      	ldr	r0, [pc, #68]	; (8003e48 <xTimerCreateTimerTask+0x88>)
 8003e04:	f7ff f880 	bl	8002f08 <xTaskCreateStatic>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <xTimerCreateTimerTask+0x8c>)
 8003e0c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <xTimerCreateTimerTask+0x8c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e16:	2301      	movs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <xTimerCreateTimerTask+0x74>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e7fe      	b.n	8003e32 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003e34:	697b      	ldr	r3, [r7, #20]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000d38 	.word	0x20000d38
 8003e44:	08004ea4 	.word	0x08004ea4
 8003e48:	08003f81 	.word	0x08003f81
 8003e4c:	20000d3c 	.word	0x20000d3c

08003e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <xTimerGenericCommand+0x2c>
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	e7fe      	b.n	8003e7a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <xTimerGenericCommand+0x94>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02a      	beq.n	8003eda <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	dc18      	bgt.n	8003ec8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e96:	f7ff feb5 	bl	8003c04 <xTaskGetSchedulerState>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d109      	bne.n	8003eb4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <xTimerGenericCommand+0x94>)
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	f107 0110 	add.w	r1, r7, #16
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eac:	f7fe fc56 	bl	800275c <xQueueGenericSend>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24
 8003eb2:	e012      	b.n	8003eda <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <xTimerGenericCommand+0x94>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f107 0110 	add.w	r1, r7, #16
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f7fe fc4c 	bl	800275c <xQueueGenericSend>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8003ec6:	e008      	b.n	8003eda <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <xTimerGenericCommand+0x94>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	f107 0110 	add.w	r1, r7, #16
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	f7fe fd3c 	bl	8002950 <xQueueGenericSendFromISR>
 8003ed8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000d38 	.word	0x20000d38

08003ee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <prvProcessExpiredTimer+0x94>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fb03 	bl	800250c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d021      	beq.n	8003f58 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	18d1      	adds	r1, r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	6978      	ldr	r0, [r7, #20]
 8003f22:	f000 f8d1 	bl	80040c8 <prvInsertTimerInActiveList>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01e      	beq.n	8003f6a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	2100      	movs	r1, #0
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff8a 	bl	8003e50 <xTimerGenericCommand>
 8003f3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d112      	bne.n	8003f6a <prvProcessExpiredTimer+0x82>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e7fe      	b.n	8003f56 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	4798      	blx	r3
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000d30 	.word	0x20000d30

08003f80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f857 	bl	8004040 <prvGetNextExpireTime>
 8003f92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4619      	mov	r1, r3
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f803 	bl	8003fa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f9e:	f000 f8d5 	bl	800414c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fa2:	e7f1      	b.n	8003f88 <prvTimerTask+0x8>

08003fa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fae:	f7ff fa49 	bl	8003444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f866 	bl	8004088 <prvSampleTimeNow>
 8003fbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d130      	bne.n	8004026 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <prvProcessTimerOrBlockTask+0x3c>
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d806      	bhi.n	8003fe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003fd2:	f7ff fa45 	bl	8003460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff85 	bl	8003ee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003fde:	e024      	b.n	800402a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <prvProcessTimerOrBlockTask+0x90>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <prvProcessTimerOrBlockTask+0x50>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <prvProcessTimerOrBlockTask+0x52>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <prvProcessTimerOrBlockTask+0x94>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	f7fe ff4b 	bl	8002ea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800400a:	f7ff fa29 	bl	8003460 <xTaskResumeAll>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <prvProcessTimerOrBlockTask+0x98>)
 8004016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	f3bf 8f6f 	isb	sy
}
 8004024:	e001      	b.n	800402a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004026:	f7ff fa1b 	bl	8003460 <xTaskResumeAll>
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000d34 	.word	0x20000d34
 8004038:	20000d38 	.word	0x20000d38
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <prvGetNextExpireTime+0x44>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <prvGetNextExpireTime+0x16>
 8004052:	2201      	movs	r2, #1
 8004054:	e000      	b.n	8004058 <prvGetNextExpireTime+0x18>
 8004056:	2200      	movs	r2, #0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <prvGetNextExpireTime+0x44>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e001      	b.n	8004074 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004074:	68fb      	ldr	r3, [r7, #12]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000d30 	.word	0x20000d30

08004088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004090:	f7ff fa82 	bl	8003598 <xTaskGetTickCount>
 8004094:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <prvSampleTimeNow+0x3c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d205      	bcs.n	80040ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040a0:	f000 f930 	bl	8004304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040b2:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <prvSampleTimeNow+0x3c>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000d40 	.word	0x20000d40

080040c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d812      	bhi.n	8004114 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e01b      	b.n	800413a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <prvInsertTimerInActiveList+0x7c>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe f9c4 	bl	800249a <vListInsert>
 8004112:	e012      	b.n	800413a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d206      	bcs.n	800412a <prvInsertTimerInActiveList+0x62>
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e007      	b.n	800413a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <prvInsertTimerInActiveList+0x80>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7fe f9b0 	bl	800249a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800413a:	697b      	ldr	r3, [r7, #20]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000d34 	.word	0x20000d34
 8004148:	20000d30 	.word	0x20000d30

0800414c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08e      	sub	sp, #56	; 0x38
 8004150:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004152:	e0c6      	b.n	80042e2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	da17      	bge.n	800418a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	3304      	adds	r3, #4
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvProcessReceivedCommands+0x2e>
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e7fe      	b.n	8004178 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	6850      	ldr	r0, [r2, #4]
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	4611      	mov	r1, r2
 8004188:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f2c0 80a7 	blt.w	80042e0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	3304      	adds	r3, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe f9b2 	bl	800250c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041a8:	463b      	mov	r3, r7
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff6c 	bl	8004088 <prvSampleTimeNow>
 80041b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	f200 8094 	bhi.w	80042e2 <prvProcessReceivedCommands+0x196>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <prvProcessReceivedCommands+0x74>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041e9 	.word	0x080041e9
 80041cc:	0800425b 	.word	0x0800425b
 80041d0:	0800426f 	.word	0x0800426f
 80041d4:	080042b7 	.word	0x080042b7
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041e9 	.word	0x080041e9
 80041e0:	0800425b 	.word	0x0800425b
 80041e4:	0800426f 	.word	0x0800426f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004208:	f7ff ff5e 	bl	80040c8 <prvInsertTimerInActiveList>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d067      	beq.n	80042e2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	441a      	add	r2, r3
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	2100      	movs	r1, #0
 8004238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800423a:	f7ff fe09 	bl	8003e50 <xTimerGenericCommand>
 800423e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d14d      	bne.n	80042e2 <prvProcessReceivedCommands+0x196>
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e7fe      	b.n	8004258 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800426c:	e039      	b.n	80042e2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	b2da      	uxtb	r2, r3
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <prvProcessReceivedCommands+0x156>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e7fe      	b.n	80042a0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	18d1      	adds	r1, r2, r3
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b0:	f7ff ff0a 	bl	80040c8 <prvInsertTimerInActiveList>
					break;
 80042b4:	e015      	b.n	80042e2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d103      	bne.n	80042cc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80042c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c6:	f000 fbc5 	bl	8004a54 <vPortFree>
 80042ca:	e00a      	b.n	80042e2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80042de:	e000      	b.n	80042e2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80042e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <prvProcessReceivedCommands+0x1b4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1d39      	adds	r1, r7, #4
 80042e8:	2200      	movs	r2, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fbc4 	bl	8002a78 <xQueueReceive>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f47f af2e 	bne.w	8004154 <prvProcessReceivedCommands+0x8>
	}
}
 80042f8:	bf00      	nop
 80042fa:	3730      	adds	r7, #48	; 0x30
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000d38 	.word	0x20000d38

08004304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800430a:	e047      	b.n	800439c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <prvSwitchTimerLists+0xc0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <prvSwitchTimerLists+0xc0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3304      	adds	r3, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe f8f1 	bl	800250c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d02d      	beq.n	800439c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d90e      	bls.n	8004370 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <prvSwitchTimerLists+0xc0>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7fe f896 	bl	800249a <vListInsert>
 800436e:	e015      	b.n	800439c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004370:	2300      	movs	r3, #0
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	2100      	movs	r1, #0
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fd68 	bl	8003e50 <xTimerGenericCommand>
 8004380:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <prvSwitchTimerLists+0x98>
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	e7fe      	b.n	800439a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <prvSwitchTimerLists+0xc0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1b2      	bne.n	800430c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <prvSwitchTimerLists+0xc0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <prvSwitchTimerLists+0xc4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <prvSwitchTimerLists+0xc0>)
 80043b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <prvSwitchTimerLists+0xc4>)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6013      	str	r3, [r2, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000d30 	.word	0x20000d30
 80043c8:	20000d34 	.word	0x20000d34

080043cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80043d2:	f000 f963 	bl	800469c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <prvCheckForValidListAndQueue+0x60>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d120      	bne.n	8004420 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80043de:	4814      	ldr	r0, [pc, #80]	; (8004430 <prvCheckForValidListAndQueue+0x64>)
 80043e0:	f7fe f80a 	bl	80023f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80043e4:	4813      	ldr	r0, [pc, #76]	; (8004434 <prvCheckForValidListAndQueue+0x68>)
 80043e6:	f7fe f807 	bl	80023f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80043ea:	4b13      	ldr	r3, [pc, #76]	; (8004438 <prvCheckForValidListAndQueue+0x6c>)
 80043ec:	4a10      	ldr	r2, [pc, #64]	; (8004430 <prvCheckForValidListAndQueue+0x64>)
 80043ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <prvCheckForValidListAndQueue+0x70>)
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <prvCheckForValidListAndQueue+0x68>)
 80043f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80043f6:	2300      	movs	r3, #0
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <prvCheckForValidListAndQueue+0x74>)
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <prvCheckForValidListAndQueue+0x78>)
 80043fe:	2110      	movs	r1, #16
 8004400:	200a      	movs	r0, #10
 8004402:	f7fe f915 	bl	8002630 <xQueueGenericCreateStatic>
 8004406:	4602      	mov	r2, r0
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <prvCheckForValidListAndQueue+0x60>)
 800440a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800440c:	4b07      	ldr	r3, [pc, #28]	; (800442c <prvCheckForValidListAndQueue+0x60>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <prvCheckForValidListAndQueue+0x60>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	490b      	ldr	r1, [pc, #44]	; (8004448 <prvCheckForValidListAndQueue+0x7c>)
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fd18 	bl	8002e50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004420:	f000 f96a 	bl	80046f8 <vPortExitCritical>
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000d38 	.word	0x20000d38
 8004430:	20000d08 	.word	0x20000d08
 8004434:	20000d1c 	.word	0x20000d1c
 8004438:	20000d30 	.word	0x20000d30
 800443c:	20000d34 	.word	0x20000d34
 8004440:	20000de4 	.word	0x20000de4
 8004444:	20000d44 	.word	0x20000d44
 8004448:	08004eac 	.word	0x08004eac

0800444c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3b04      	subs	r3, #4
 800445c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b04      	subs	r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b04      	subs	r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800447c:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <pxPortInitialiseStack+0x64>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3b14      	subs	r3, #20
 8004486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3b04      	subs	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f06f 0202 	mvn.w	r2, #2
 800449a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b20      	subs	r3, #32
 80044a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	080044b5 	.word	0x080044b5

080044b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <prvTaskExitError+0x50>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d009      	beq.n	80044dc <prvTaskExitError+0x28>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e7fe      	b.n	80044da <prvTaskExitError+0x26>
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044ee:	bf00      	nop
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0fc      	beq.n	80044f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000000c 	.word	0x2000000c
	...

08004510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <pxCurrentTCBConst2>)
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	6808      	ldr	r0, [r1, #0]
 8004516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	f380 8809 	msr	PSP, r0
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8811 	msr	BASEPRI, r0
 800452a:	4770      	bx	lr
 800452c:	f3af 8000 	nop.w

08004530 <pxCurrentTCBConst2>:
 8004530:	20000808 	.word	0x20000808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004538:	4808      	ldr	r0, [pc, #32]	; (800455c <prvPortStartFirstTask+0x24>)
 800453a:	6800      	ldr	r0, [r0, #0]
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	f380 8808 	msr	MSP, r0
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8814 	msr	CONTROL, r0
 800454a:	b662      	cpsie	i
 800454c:	b661      	cpsie	f
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	df00      	svc	0
 8004558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800455a:	bf00      	nop
 800455c:	e000ed08 	.word	0xe000ed08

08004560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004566:	4b44      	ldr	r3, [pc, #272]	; (8004678 <xPortStartScheduler+0x118>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a44      	ldr	r2, [pc, #272]	; (800467c <xPortStartScheduler+0x11c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d109      	bne.n	8004584 <xPortStartScheduler+0x24>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e7fe      	b.n	8004582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004584:	4b3c      	ldr	r3, [pc, #240]	; (8004678 <xPortStartScheduler+0x118>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3d      	ldr	r2, [pc, #244]	; (8004680 <xPortStartScheduler+0x120>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d109      	bne.n	80045a2 <xPortStartScheduler+0x42>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e7fe      	b.n	80045a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <xPortStartScheduler+0x124>)
 80045a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <xPortStartScheduler+0x128>)
 80045c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045ca:	4b30      	ldr	r3, [pc, #192]	; (800468c <xPortStartScheduler+0x12c>)
 80045cc:	2207      	movs	r2, #7
 80045ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045d0:	e009      	b.n	80045e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80045d2:	4b2e      	ldr	r3, [pc, #184]	; (800468c <xPortStartScheduler+0x12c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	4a2c      	ldr	r2, [pc, #176]	; (800468c <xPortStartScheduler+0x12c>)
 80045da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d0ef      	beq.n	80045d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <xPortStartScheduler+0x12c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1c3 0307 	rsb	r3, r3, #7
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d009      	beq.n	8004612 <xPortStartScheduler+0xb2>
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	e7fe      	b.n	8004610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <xPortStartScheduler+0x12c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	4a1c      	ldr	r2, [pc, #112]	; (800468c <xPortStartScheduler+0x12c>)
 800461a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <xPortStartScheduler+0x12c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <xPortStartScheduler+0x12c>)
 8004626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <xPortStartScheduler+0x130>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a16      	ldr	r2, [pc, #88]	; (8004690 <xPortStartScheduler+0x130>)
 8004636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800463a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <xPortStartScheduler+0x130>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a13      	ldr	r2, [pc, #76]	; (8004690 <xPortStartScheduler+0x130>)
 8004642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004648:	f000 f8d6 	bl	80047f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <xPortStartScheduler+0x134>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004652:	f000 f8f5 	bl	8004840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <xPortStartScheduler+0x138>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <xPortStartScheduler+0x138>)
 800465c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004662:	f7ff ff69 	bl	8004538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004666:	f7ff f85f 	bl	8003728 <vTaskSwitchContext>
	prvTaskExitError();
 800466a:	f7ff ff23 	bl	80044b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000ed00 	.word	0xe000ed00
 800467c:	410fc271 	.word	0x410fc271
 8004680:	410fc270 	.word	0x410fc270
 8004684:	e000e400 	.word	0xe000e400
 8004688:	20000e34 	.word	0x20000e34
 800468c:	20000e38 	.word	0x20000e38
 8004690:	e000ed20 	.word	0xe000ed20
 8004694:	2000000c 	.word	0x2000000c
 8004698:	e000ef34 	.word	0xe000ef34

0800469c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <vPortEnterCritical+0x54>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <vPortEnterCritical+0x54>)
 80046bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <vPortEnterCritical+0x54>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10e      	bne.n	80046e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <vPortEnterCritical+0x58>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <vPortEnterCritical+0x48>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	e7fe      	b.n	80046e2 <vPortEnterCritical+0x46>
	}
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	2000000c 	.word	0x2000000c
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046fe:	4b11      	ldr	r3, [pc, #68]	; (8004744 <vPortExitCritical+0x4c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <vPortExitCritical+0x22>
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	e7fe      	b.n	8004718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <vPortExitCritical+0x4c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <vPortExitCritical+0x4c>)
 8004722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <vPortExitCritical+0x4c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <vPortExitCritical+0x3e>
 800472c:	2300      	movs	r3, #0
 800472e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	2000000c 	.word	0x2000000c
	...

08004750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004750:	f3ef 8009 	mrs	r0, PSP
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <pxCurrentTCBConst>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f01e 0f10 	tst.w	lr, #16
 8004760:	bf08      	it	eq
 8004762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	6010      	str	r0, [r2, #0]
 800476c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004774:	f380 8811 	msr	BASEPRI, r0
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f7fe ffd2 	bl	8003728 <vTaskSwitchContext>
 8004784:	f04f 0000 	mov.w	r0, #0
 8004788:	f380 8811 	msr	BASEPRI, r0
 800478c:	bc09      	pop	{r0, r3}
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004796:	f01e 0f10 	tst.w	lr, #16
 800479a:	bf08      	it	eq
 800479c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047a0:	f380 8809 	msr	PSP, r0
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w

080047b0 <pxCurrentTCBConst>:
 80047b0:	20000808 	.word	0x20000808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047d0:	f7fe fef2 	bl	80035b8 <xTaskIncrementTick>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <SysTick_Handler+0x3c>)
 80047dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	2300      	movs	r3, #0
 80047e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <vPortSetupTimerInterrupt+0x34>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <vPortSetupTimerInterrupt+0x38>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vPortSetupTimerInterrupt+0x3c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <vPortSetupTimerInterrupt+0x40>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	4a09      	ldr	r2, [pc, #36]	; (800483c <vPortSetupTimerInterrupt+0x44>)
 8004816:	3b01      	subs	r3, #1
 8004818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800481a:	4b04      	ldr	r3, [pc, #16]	; (800482c <vPortSetupTimerInterrupt+0x34>)
 800481c:	2207      	movs	r2, #7
 800481e:	601a      	str	r2, [r3, #0]
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000e010 	.word	0xe000e010
 8004830:	e000e018 	.word	0xe000e018
 8004834:	20000000 	.word	0x20000000
 8004838:	10624dd3 	.word	0x10624dd3
 800483c:	e000e014 	.word	0xe000e014

08004840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004850 <vPortEnableVFP+0x10>
 8004844:	6801      	ldr	r1, [r0, #0]
 8004846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800484a:	6001      	str	r1, [r0, #0]
 800484c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800484e:	bf00      	nop
 8004850:	e000ed88 	.word	0xe000ed88

08004854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800485a:	f3ef 8305 	mrs	r3, IPSR
 800485e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d913      	bls.n	800488e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004866:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <vPortValidateInterruptPriority+0x6c>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <vPortValidateInterruptPriority+0x70>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	7afa      	ldrb	r2, [r7, #11]
 8004876:	429a      	cmp	r2, r3
 8004878:	d209      	bcs.n	800488e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	e7fe      	b.n	800488c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <vPortValidateInterruptPriority+0x74>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <vPortValidateInterruptPriority+0x78>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d909      	bls.n	80048b2 <vPortValidateInterruptPriority+0x5e>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	e7fe      	b.n	80048b0 <vPortValidateInterruptPriority+0x5c>
	}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e3f0 	.word	0xe000e3f0
 80048c4:	20000e34 	.word	0x20000e34
 80048c8:	e000ed0c 	.word	0xe000ed0c
 80048cc:	20000e38 	.word	0x20000e38

080048d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048dc:	f7fe fdb2 	bl	8003444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048e0:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <pvPortMalloc+0x170>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048e8:	f000 f90c 	bl	8004b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048ec:	4b55      	ldr	r3, [pc, #340]	; (8004a44 <pvPortMalloc+0x174>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 808c 	bne.w	8004a12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004900:	2208      	movs	r2, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b00      	cmp	r3, #0
 8004910:	d013      	beq.n	800493a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f023 0307 	bic.w	r3, r3, #7
 8004918:	3308      	adds	r3, #8
 800491a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <pvPortMalloc+0x6a>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e7fe      	b.n	8004938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d068      	beq.n	8004a12 <pvPortMalloc+0x142>
 8004940:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <pvPortMalloc+0x178>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d863      	bhi.n	8004a12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <pvPortMalloc+0x17c>)
 800494c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800494e:	4b3f      	ldr	r3, [pc, #252]	; (8004a4c <pvPortMalloc+0x17c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004954:	e004      	b.n	8004960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d903      	bls.n	8004972 <pvPortMalloc+0xa2>
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f1      	bne.n	8004956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004972:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <pvPortMalloc+0x170>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	429a      	cmp	r2, r3
 800497a:	d04a      	beq.n	8004a12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2208      	movs	r2, #8
 8004982:	4413      	add	r3, r2
 8004984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	2308      	movs	r3, #8
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	429a      	cmp	r2, r3
 800499c:	d91e      	bls.n	80049dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <pvPortMalloc+0xf4>
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e7fe      	b.n	80049c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	1ad2      	subs	r2, r2, r3
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049d6:	69b8      	ldr	r0, [r7, #24]
 80049d8:	f000 f8f6 	bl	8004bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049dc:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <pvPortMalloc+0x178>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <pvPortMalloc+0x178>)
 80049e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ea:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <pvPortMalloc+0x178>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <pvPortMalloc+0x180>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d203      	bcs.n	80049fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <pvPortMalloc+0x178>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <pvPortMalloc+0x180>)
 80049fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <pvPortMalloc+0x174>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a12:	f7fe fd25 	bl	8003460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <pvPortMalloc+0x164>
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e7fe      	b.n	8004a32 <pvPortMalloc+0x162>
	return pvReturn;
 8004a34:	69fb      	ldr	r3, [r7, #28]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20004a44 	.word	0x20004a44
 8004a44:	20004a50 	.word	0x20004a50
 8004a48:	20004a48 	.word	0x20004a48
 8004a4c:	20004a3c 	.word	0x20004a3c
 8004a50:	20004a4c 	.word	0x20004a4c

08004a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d046      	beq.n	8004af4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a66:	2308      	movs	r3, #8
 8004a68:	425b      	negs	r3, r3
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <vPortFree+0xa8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <vPortFree+0x42>
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e7fe      	b.n	8004a94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <vPortFree+0x5e>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	e7fe      	b.n	8004ab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <vPortFree+0xa8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d019      	beq.n	8004af4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d115      	bne.n	8004af4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <vPortFree+0xa8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ad8:	f7fe fcb4 	bl	8003444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <vPortFree+0xac>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <vPortFree+0xac>)
 8004ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aea:	6938      	ldr	r0, [r7, #16]
 8004aec:	f000 f86c 	bl	8004bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004af0:	f7fe fcb6 	bl	8003460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20004a50 	.word	0x20004a50
 8004b00:	20004a48 	.word	0x20004a48

08004b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <prvHeapInit+0xac>)
 8004b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3307      	adds	r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <prvHeapInit+0xac>)
 8004b34:	4413      	add	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <prvHeapInit+0xb0>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b42:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <prvHeapInit+0xb0>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b50:	2208      	movs	r2, #8
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <prvHeapInit+0xb4>)
 8004b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <prvHeapInit+0xb4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <prvHeapInit+0xb4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b84:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <prvHeapInit+0xb4>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <prvHeapInit+0xb8>)
 8004b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <prvHeapInit+0xbc>)
 8004b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <prvHeapInit+0xc0>)
 8004b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000e3c 	.word	0x20000e3c
 8004bb4:	20004a3c 	.word	0x20004a3c
 8004bb8:	20004a44 	.word	0x20004a44
 8004bbc:	20004a4c 	.word	0x20004a4c
 8004bc0:	20004a48 	.word	0x20004a48
 8004bc4:	20004a50 	.word	0x20004a50

08004bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <prvInsertBlockIntoFreeList+0xac>)
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e002      	b.n	8004bdc <prvInsertBlockIntoFreeList+0x14>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d8f7      	bhi.n	8004bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d108      	bne.n	8004c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	441a      	add	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	441a      	add	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d118      	bne.n	8004c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <prvInsertBlockIntoFreeList+0xb0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d00d      	beq.n	8004c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	441a      	add	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e008      	b.n	8004c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <prvInsertBlockIntoFreeList+0xb0>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e003      	b.n	8004c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d002      	beq.n	8004c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20004a3c 	.word	0x20004a3c
 8004c78:	20004a44 	.word	0x20004a44

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4e0d      	ldr	r6, [pc, #52]	; (8004cb4 <__libc_init_array+0x38>)
 8004c80:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c82:	1ba4      	subs	r4, r4, r6
 8004c84:	10a4      	asrs	r4, r4, #2
 8004c86:	2500      	movs	r5, #0
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	4e0b      	ldr	r6, [pc, #44]	; (8004cbc <__libc_init_array+0x40>)
 8004c8e:	4c0c      	ldr	r4, [pc, #48]	; (8004cc0 <__libc_init_array+0x44>)
 8004c90:	f000 f8e4 	bl	8004e5c <_init>
 8004c94:	1ba4      	subs	r4, r4, r6
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	2500      	movs	r5, #0
 8004c9a:	42a5      	cmp	r5, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca4:	4798      	blx	r3
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cae:	4798      	blx	r3
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	08004f34 	.word	0x08004f34
 8004cb8:	08004f34 	.word	0x08004f34
 8004cbc:	08004f34 	.word	0x08004f34
 8004cc0:	08004f38 	.word	0x08004f38

08004cc4 <memcpy>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	1e43      	subs	r3, r0, #1
 8004cc8:	440a      	add	r2, r1
 8004cca:	4291      	cmp	r1, r2
 8004ccc:	d100      	bne.n	8004cd0 <memcpy+0xc>
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd8:	e7f7      	b.n	8004cca <memcpy+0x6>

08004cda <memset>:
 8004cda:	4402      	add	r2, r0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <memset+0xa>
 8004ce2:	4770      	bx	lr
 8004ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce8:	e7f9      	b.n	8004cde <memset+0x4>

08004cea <cleanup_glue>:
 8004cea:	b538      	push	{r3, r4, r5, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	6809      	ldr	r1, [r1, #0]
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	b109      	cbz	r1, 8004cf8 <cleanup_glue+0xe>
 8004cf4:	f7ff fff9 	bl	8004cea <cleanup_glue>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d00:	f000 b85e 	b.w	8004dc0 <_free_r>

08004d04 <_reclaim_reent>:
 8004d04:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <_reclaim_reent+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4283      	cmp	r3, r0
 8004d0a:	b570      	push	{r4, r5, r6, lr}
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	d051      	beq.n	8004db4 <_reclaim_reent+0xb0>
 8004d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d12:	b143      	cbz	r3, 8004d26 <_reclaim_reent+0x22>
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d14a      	bne.n	8004db0 <_reclaim_reent+0xac>
 8004d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	b111      	cbz	r1, 8004d26 <_reclaim_reent+0x22>
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 f84d 	bl	8004dc0 <_free_r>
 8004d26:	6961      	ldr	r1, [r4, #20]
 8004d28:	b111      	cbz	r1, 8004d30 <_reclaim_reent+0x2c>
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f000 f848 	bl	8004dc0 <_free_r>
 8004d30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d32:	b111      	cbz	r1, 8004d3a <_reclaim_reent+0x36>
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 f843 	bl	8004dc0 <_free_r>
 8004d3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d3c:	b111      	cbz	r1, 8004d44 <_reclaim_reent+0x40>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 f83e 	bl	8004dc0 <_free_r>
 8004d44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d46:	b111      	cbz	r1, 8004d4e <_reclaim_reent+0x4a>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 f839 	bl	8004dc0 <_free_r>
 8004d4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d50:	b111      	cbz	r1, 8004d58 <_reclaim_reent+0x54>
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f834 	bl	8004dc0 <_free_r>
 8004d58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d5a:	b111      	cbz	r1, 8004d62 <_reclaim_reent+0x5e>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 f82f 	bl	8004dc0 <_free_r>
 8004d62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d64:	b111      	cbz	r1, 8004d6c <_reclaim_reent+0x68>
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 f82a 	bl	8004dc0 <_free_r>
 8004d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6e:	b111      	cbz	r1, 8004d76 <_reclaim_reent+0x72>
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 f825 	bl	8004dc0 <_free_r>
 8004d76:	69a3      	ldr	r3, [r4, #24]
 8004d78:	b1e3      	cbz	r3, 8004db4 <_reclaim_reent+0xb0>
 8004d7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4798      	blx	r3
 8004d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d82:	b1b9      	cbz	r1, 8004db4 <_reclaim_reent+0xb0>
 8004d84:	4620      	mov	r0, r4
 8004d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d8a:	f7ff bfae 	b.w	8004cea <cleanup_glue>
 8004d8e:	5949      	ldr	r1, [r1, r5]
 8004d90:	b941      	cbnz	r1, 8004da4 <_reclaim_reent+0xa0>
 8004d92:	3504      	adds	r5, #4
 8004d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d96:	2d80      	cmp	r5, #128	; 0x80
 8004d98:	68d9      	ldr	r1, [r3, #12]
 8004d9a:	d1f8      	bne.n	8004d8e <_reclaim_reent+0x8a>
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 f80f 	bl	8004dc0 <_free_r>
 8004da2:	e7ba      	b.n	8004d1a <_reclaim_reent+0x16>
 8004da4:	680e      	ldr	r6, [r1, #0]
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 f80a 	bl	8004dc0 <_free_r>
 8004dac:	4631      	mov	r1, r6
 8004dae:	e7ef      	b.n	8004d90 <_reclaim_reent+0x8c>
 8004db0:	2500      	movs	r5, #0
 8004db2:	e7ef      	b.n	8004d94 <_reclaim_reent+0x90>
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	bf00      	nop
 8004db8:	20000010 	.word	0x20000010

08004dbc <__malloc_lock>:
 8004dbc:	4770      	bx	lr

08004dbe <__malloc_unlock>:
 8004dbe:	4770      	bx	lr

08004dc0 <_free_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	d045      	beq.n	8004e54 <_free_r+0x94>
 8004dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dcc:	1f0c      	subs	r4, r1, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	18e4      	addlt	r4, r4, r3
 8004dd4:	f7ff fff2 	bl	8004dbc <__malloc_lock>
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <_free_r+0x98>)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	4610      	mov	r0, r2
 8004dde:	b933      	cbnz	r3, 8004dee <_free_r+0x2e>
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	6014      	str	r4, [r2, #0]
 8004de4:	4628      	mov	r0, r5
 8004de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dea:	f7ff bfe8 	b.w	8004dbe <__malloc_unlock>
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	d90c      	bls.n	8004e0c <_free_r+0x4c>
 8004df2:	6821      	ldr	r1, [r4, #0]
 8004df4:	1862      	adds	r2, r4, r1
 8004df6:	4293      	cmp	r3, r2
 8004df8:	bf04      	itt	eq
 8004dfa:	681a      	ldreq	r2, [r3, #0]
 8004dfc:	685b      	ldreq	r3, [r3, #4]
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	bf04      	itt	eq
 8004e02:	1852      	addeq	r2, r2, r1
 8004e04:	6022      	streq	r2, [r4, #0]
 8004e06:	6004      	str	r4, [r0, #0]
 8004e08:	e7ec      	b.n	8004de4 <_free_r+0x24>
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	b10a      	cbz	r2, 8004e14 <_free_r+0x54>
 8004e10:	42a2      	cmp	r2, r4
 8004e12:	d9fa      	bls.n	8004e0a <_free_r+0x4a>
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	1858      	adds	r0, r3, r1
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d10b      	bne.n	8004e34 <_free_r+0x74>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	4401      	add	r1, r0
 8004e20:	1858      	adds	r0, r3, r1
 8004e22:	4282      	cmp	r2, r0
 8004e24:	6019      	str	r1, [r3, #0]
 8004e26:	d1dd      	bne.n	8004de4 <_free_r+0x24>
 8004e28:	6810      	ldr	r0, [r2, #0]
 8004e2a:	6852      	ldr	r2, [r2, #4]
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	4401      	add	r1, r0
 8004e30:	6019      	str	r1, [r3, #0]
 8004e32:	e7d7      	b.n	8004de4 <_free_r+0x24>
 8004e34:	d902      	bls.n	8004e3c <_free_r+0x7c>
 8004e36:	230c      	movs	r3, #12
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	e7d3      	b.n	8004de4 <_free_r+0x24>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	1821      	adds	r1, r4, r0
 8004e40:	428a      	cmp	r2, r1
 8004e42:	bf04      	itt	eq
 8004e44:	6811      	ldreq	r1, [r2, #0]
 8004e46:	6852      	ldreq	r2, [r2, #4]
 8004e48:	6062      	str	r2, [r4, #4]
 8004e4a:	bf04      	itt	eq
 8004e4c:	1809      	addeq	r1, r1, r0
 8004e4e:	6021      	streq	r1, [r4, #0]
 8004e50:	605c      	str	r4, [r3, #4]
 8004e52:	e7c7      	b.n	8004de4 <_free_r+0x24>
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
 8004e56:	bf00      	nop
 8004e58:	20004a54 	.word	0x20004a54

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
